/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Notification.
    /// </summary>
    [DataContract]
    public partial class JNotificationAugmentationType : IEquatable<JNotificationAugmentationType>
    { 
        /// <summary>
        /// A kind of purpose for the notification. NIEM reference is j:NotificationPurposeText
        /// </summary>
        /// <value>A kind of purpose for the notification. NIEM reference is j:NotificationPurposeText</value>

        [DataMember(Name="notificationPurpose")]
        public List<NcTextType> NotificationPurpose { get; set; }

        /// <summary>
        /// True if the notice was mailed to the notice; false otherwise. NIEM reference is j:NotificationDeliveryByMailIndicator
        /// </summary>
        /// <value>True if the notice was mailed to the notice; false otherwise. NIEM reference is j:NotificationDeliveryByMailIndicator</value>

        [DataMember(Name="isNotificationDeliveryByMail")]
        public List<NiemXsboolean> IsNotificationDeliveryByMail { get; set; }

        /// <summary>
        /// A subject line for each notification crafted by the system based on user, provider, and event. NIEM reference is j:NotificationSubjectText
        /// </summary>
        /// <value>A subject line for each notification crafted by the system based on user, provider, and event. NIEM reference is j:NotificationSubjectText</value>

        [DataMember(Name="notificationSubject")]
        public List<NcTextType> NotificationSubject { get; set; }

        /// <summary>
        /// A date that was notification was sent. NIEM reference is j:NotificationSentDate
        /// </summary>
        /// <value>A date that was notification was sent. NIEM reference is j:NotificationSentDate</value>

        [DataMember(Name="notificationSentDate")]
        public List<NcDateType> NotificationSentDate { get; set; }

        /// <summary>
        /// An open text from the individual addressed in the notification that is used in the response. NIEM reference is j:NotificationResponseSummaryText
        /// </summary>
        /// <value>An open text from the individual addressed in the notification that is used in the response. NIEM reference is j:NotificationResponseSummaryText</value>

        [DataMember(Name="notificationResponseSummary")]
        public List<NcTextType> NotificationResponseSummary { get; set; }

        /// <summary>
        /// A date when a response notification was received. NIEM reference is j:NotificationResponseReceivedNotificationDate
        /// </summary>
        /// <value>A date when a response notification was received. NIEM reference is j:NotificationResponseReceivedNotificationDate</value>

        [DataMember(Name="notificationResponseReceivedNotificationDate")]
        public List<NcDateType> NotificationResponseReceivedNotificationDate { get; set; }

        /// <summary>
        /// An open text in a notification typed in by the user sending the notification. NIEM reference is j:NotificationSummaryText
        /// </summary>
        /// <value>An open text in a notification typed in by the user sending the notification. NIEM reference is j:NotificationSummaryText</value>

        [DataMember(Name="notificationSummary")]
        public List<NcTextType> NotificationSummary { get; set; }

        /// <summary>
        /// A kind of notification event. NIEM reference is j:NotificationEventCategoryText
        /// </summary>
        /// <value>A kind of notification event. NIEM reference is j:NotificationEventCategoryText</value>

        [DataMember(Name="notificationEventCategory")]
        public List<NcTextType> NotificationEventCategory { get; set; }

        /// <summary>
        /// A date on which the notice was prepared. NIEM reference is j:NotificationPreparationDate
        /// </summary>
        /// <value>A date on which the notice was prepared. NIEM reference is j:NotificationPreparationDate</value>

        [DataMember(Name="notificationPreparationDate")]
        public List<NcDateType> NotificationPreparationDate { get; set; }

        /// <summary>
        /// A kind of Notification. NIEM reference is j:NotificationCategoryText
        /// </summary>
        /// <value>A kind of Notification. NIEM reference is j:NotificationCategoryText</value>

        [DataMember(Name="notificationCategory")]
        public List<NcTextType> NotificationCategory { get; set; }

        /// <summary>
        /// True if the notice was given to the notice; false otherwise. NIEM reference is j:NotificationDeliveryInPersonIndicator
        /// </summary>
        /// <value>True if the notice was given to the notice; false otherwise. NIEM reference is j:NotificationDeliveryInPersonIndicator</value>

        [DataMember(Name="isNotificationDeliveryInPerson")]
        public List<NiemXsboolean> IsNotificationDeliveryInPerson { get; set; }

        /// <summary>
        /// jNotificationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jNotificationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjNotificationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jNotificationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jNotificationAugmentationTypeContext.jsonld")]
            JSONLDContextsjNotificationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jNotificationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jNotificationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JNotificationAugmentationType {\n");
            sb.Append("  NotificationPurpose: ").Append(NotificationPurpose).Append("\n");
            sb.Append("  IsNotificationDeliveryByMail: ").Append(IsNotificationDeliveryByMail).Append("\n");
            sb.Append("  NotificationSubject: ").Append(NotificationSubject).Append("\n");
            sb.Append("  NotificationSentDate: ").Append(NotificationSentDate).Append("\n");
            sb.Append("  NotificationResponseSummary: ").Append(NotificationResponseSummary).Append("\n");
            sb.Append("  NotificationResponseReceivedNotificationDate: ").Append(NotificationResponseReceivedNotificationDate).Append("\n");
            sb.Append("  NotificationSummary: ").Append(NotificationSummary).Append("\n");
            sb.Append("  NotificationEventCategory: ").Append(NotificationEventCategory).Append("\n");
            sb.Append("  NotificationPreparationDate: ").Append(NotificationPreparationDate).Append("\n");
            sb.Append("  NotificationCategory: ").Append(NotificationCategory).Append("\n");
            sb.Append("  IsNotificationDeliveryInPerson: ").Append(IsNotificationDeliveryInPerson).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JNotificationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JNotificationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JNotificationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JNotificationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationPurpose == other.NotificationPurpose ||
                    NotificationPurpose != null &&
                    NotificationPurpose.SequenceEqual(other.NotificationPurpose)
                ) && 
                (
                    IsNotificationDeliveryByMail == other.IsNotificationDeliveryByMail ||
                    IsNotificationDeliveryByMail != null &&
                    IsNotificationDeliveryByMail.SequenceEqual(other.IsNotificationDeliveryByMail)
                ) && 
                (
                    NotificationSubject == other.NotificationSubject ||
                    NotificationSubject != null &&
                    NotificationSubject.SequenceEqual(other.NotificationSubject)
                ) && 
                (
                    NotificationSentDate == other.NotificationSentDate ||
                    NotificationSentDate != null &&
                    NotificationSentDate.SequenceEqual(other.NotificationSentDate)
                ) && 
                (
                    NotificationResponseSummary == other.NotificationResponseSummary ||
                    NotificationResponseSummary != null &&
                    NotificationResponseSummary.SequenceEqual(other.NotificationResponseSummary)
                ) && 
                (
                    NotificationResponseReceivedNotificationDate == other.NotificationResponseReceivedNotificationDate ||
                    NotificationResponseReceivedNotificationDate != null &&
                    NotificationResponseReceivedNotificationDate.SequenceEqual(other.NotificationResponseReceivedNotificationDate)
                ) && 
                (
                    NotificationSummary == other.NotificationSummary ||
                    NotificationSummary != null &&
                    NotificationSummary.SequenceEqual(other.NotificationSummary)
                ) && 
                (
                    NotificationEventCategory == other.NotificationEventCategory ||
                    NotificationEventCategory != null &&
                    NotificationEventCategory.SequenceEqual(other.NotificationEventCategory)
                ) && 
                (
                    NotificationPreparationDate == other.NotificationPreparationDate ||
                    NotificationPreparationDate != null &&
                    NotificationPreparationDate.SequenceEqual(other.NotificationPreparationDate)
                ) && 
                (
                    NotificationCategory == other.NotificationCategory ||
                    NotificationCategory != null &&
                    NotificationCategory.SequenceEqual(other.NotificationCategory)
                ) && 
                (
                    IsNotificationDeliveryInPerson == other.IsNotificationDeliveryInPerson ||
                    IsNotificationDeliveryInPerson != null &&
                    IsNotificationDeliveryInPerson.SequenceEqual(other.IsNotificationDeliveryInPerson)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationPurpose != null)
                    hashCode = hashCode * 59 + NotificationPurpose.GetHashCode();
                    if (IsNotificationDeliveryByMail != null)
                    hashCode = hashCode * 59 + IsNotificationDeliveryByMail.GetHashCode();
                    if (NotificationSubject != null)
                    hashCode = hashCode * 59 + NotificationSubject.GetHashCode();
                    if (NotificationSentDate != null)
                    hashCode = hashCode * 59 + NotificationSentDate.GetHashCode();
                    if (NotificationResponseSummary != null)
                    hashCode = hashCode * 59 + NotificationResponseSummary.GetHashCode();
                    if (NotificationResponseReceivedNotificationDate != null)
                    hashCode = hashCode * 59 + NotificationResponseReceivedNotificationDate.GetHashCode();
                    if (NotificationSummary != null)
                    hashCode = hashCode * 59 + NotificationSummary.GetHashCode();
                    if (NotificationEventCategory != null)
                    hashCode = hashCode * 59 + NotificationEventCategory.GetHashCode();
                    if (NotificationPreparationDate != null)
                    hashCode = hashCode * 59 + NotificationPreparationDate.GetHashCode();
                    if (NotificationCategory != null)
                    hashCode = hashCode * 59 + NotificationCategory.GetHashCode();
                    if (IsNotificationDeliveryInPerson != null)
                    hashCode = hashCode * 59 + IsNotificationDeliveryInPerson.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JNotificationAugmentationType left, JNotificationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JNotificationAugmentationType left, JNotificationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
