/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an official&#x27;s involvement in a case.
    /// </summary>
    [DataContract]
    public partial class JCaseOfficialType : JJudicialOfficialType, IEquatable<JCaseOfficialType>
    { 
        /// <summary>
        /// A unique identification a justice official uses to identify a case. NIEM reference is j:CaseOfficialCaseIdentification
        /// </summary>
        /// <value>A unique identification a justice official uses to identify a case. NIEM reference is j:CaseOfficialCaseIdentification</value>

        [DataMember(Name="caseIdentification")]
        public List<NcIdentificationType> CaseIdentification { get; set; }

        /// <summary>
        /// A status of a justice official&#x27;s case. NIEM reference is j:CaseOfficialCaseStatusText
        /// </summary>
        /// <value>A status of a justice official&#x27;s case. NIEM reference is j:CaseOfficialCaseStatusText</value>

        [DataMember(Name="caseStatus")]
        public List<NcTextType> CaseStatus { get; set; }

        /// <summary>
        /// A date a justice official left a case or a date a case ended. NIEM reference is j:CaseOfficialEndDate
        /// </summary>
        /// <value>A date a justice official left a case or a date a case ended. NIEM reference is j:CaseOfficialEndDate</value>

        [DataMember(Name="endDate")]
        public List<NcDateType> EndDate { get; set; }

        /// <summary>
        /// A description of the role a justice official played in a court case. NIEM reference is j:CaseOfficialRoleDescriptionText
        /// </summary>
        /// <value>A description of the role a justice official played in a court case. NIEM reference is j:CaseOfficialRoleDescriptionText</value>

        [DataMember(Name="roleDescription")]
        public List<NcTextType> RoleDescription { get; set; }

        /// <summary>
        /// A role a justice official played in a court case. NIEM reference is j:CaseOfficialRoleText
        /// </summary>
        /// <value>A role a justice official played in a court case. NIEM reference is j:CaseOfficialRoleText</value>

        [DataMember(Name="role")]
        public List<NcTextType> Role { get; set; }

        /// <summary>
        /// A date a justice official became involved in a case. NIEM reference is j:CaseOfficialStartDate
        /// </summary>
        /// <value>A date a justice official became involved in a case. NIEM reference is j:CaseOfficialStartDate</value>

        [DataMember(Name="startDate")]
        public List<NcDateType> StartDate { get; set; }

        /// <summary>
        /// True if a justice official left a case before its conclusion, either by choice or for official reasons; false otherwise. NIEM reference is j:CaseOfficialTerminationIndicator
        /// </summary>
        /// <value>True if a justice official left a case before its conclusion, either by choice or for official reasons; false otherwise. NIEM reference is j:CaseOfficialTerminationIndicator</value>

        [DataMember(Name="isTermination")]
        public List<NiemXsboolean> IsTermination { get; set; }

        /// <summary>
        /// A reason a justice official left a case before its conclusion. NIEM reference is j:CaseOfficialTerminationReasonText
        /// </summary>
        /// <value>A reason a justice official left a case before its conclusion. NIEM reference is j:CaseOfficialTerminationReasonText</value>

        [DataMember(Name="terminationReason")]
        public List<NcTextType> TerminationReason { get; set; }

        /// <summary>
        /// jCaseOfficialType JSON-LD context
        /// </summary>
        /// <value>jCaseOfficialType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCaseOfficialTypeContextJsonldEnum for ../JSON-LD_Contexts/jCaseOfficialTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCaseOfficialTypeContext.jsonld")]
            JSONLDContextsjCaseOfficialTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCaseOfficialType JSON-LD context
        /// </summary>
        /// <value>jCaseOfficialType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCaseOfficialType {\n");
            sb.Append("  CaseIdentification: ").Append(CaseIdentification).Append("\n");
            sb.Append("  CaseStatus: ").Append(CaseStatus).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  RoleDescription: ").Append(RoleDescription).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  IsTermination: ").Append(IsTermination).Append("\n");
            sb.Append("  TerminationReason: ").Append(TerminationReason).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCaseOfficialType)obj);
        }

        /// <summary>
        /// Returns true if JCaseOfficialType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCaseOfficialType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCaseOfficialType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CaseIdentification == other.CaseIdentification ||
                    CaseIdentification != null &&
                    CaseIdentification.SequenceEqual(other.CaseIdentification)
                ) && 
                (
                    CaseStatus == other.CaseStatus ||
                    CaseStatus != null &&
                    CaseStatus.SequenceEqual(other.CaseStatus)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.SequenceEqual(other.EndDate)
                ) && 
                (
                    RoleDescription == other.RoleDescription ||
                    RoleDescription != null &&
                    RoleDescription.SequenceEqual(other.RoleDescription)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.SequenceEqual(other.Role)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.SequenceEqual(other.StartDate)
                ) && 
                (
                    IsTermination == other.IsTermination ||
                    IsTermination != null &&
                    IsTermination.SequenceEqual(other.IsTermination)
                ) && 
                (
                    TerminationReason == other.TerminationReason ||
                    TerminationReason != null &&
                    TerminationReason.SequenceEqual(other.TerminationReason)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CaseIdentification != null)
                    hashCode = hashCode * 59 + CaseIdentification.GetHashCode();
                    if (CaseStatus != null)
                    hashCode = hashCode * 59 + CaseStatus.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (RoleDescription != null)
                    hashCode = hashCode * 59 + RoleDescription.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (IsTermination != null)
                    hashCode = hashCode * 59 + IsTermination.GetHashCode();
                    if (TerminationReason != null)
                    hashCode = hashCode * 59 + TerminationReason.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCaseOfficialType left, JCaseOfficialType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCaseOfficialType left, JCaseOfficialType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
