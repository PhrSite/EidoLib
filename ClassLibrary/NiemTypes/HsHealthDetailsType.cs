/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the details about a person&#x27;s mental health, substance abuse, medical health and medications.
    /// </summary>
    [DataContract]
    public partial class HsHealthDetailsType : IEquatable<HsHealthDetailsType>
    { 
        /// <summary>
        /// A person&#x27;s medical health details. NIEM reference is hs:MedicalHealthDetails
        /// </summary>
        /// <value>A person&#x27;s medical health details. NIEM reference is hs:MedicalHealthDetails</value>

        [DataMember(Name="medical")]
        public List<HsMedicalHealthDetailsType> Medical { get; set; }

        /// <summary>
        /// An element that contains information about a person&#x27;s mental health including social history and psychosocial information. NIEM reference is hs:MentalHealthDetails
        /// </summary>
        /// <value>An element that contains information about a person&#x27;s mental health including social history and psychosocial information. NIEM reference is hs:MentalHealthDetails</value>

        [DataMember(Name="mental")]
        public List<HsMentalHealthDetailsType> Mental { get; set; }

        /// <summary>
        /// A set of details about medication use for an individual. NIEM reference is hs:MedicationUse
        /// </summary>
        /// <value>A set of details about medication use for an individual. NIEM reference is hs:MedicationUse</value>

        [DataMember(Name="medicationUse")]
        public List<HsMedicationUseType> MedicationUse { get; set; }

        /// <summary>
        /// A set of written instructions from a physician or dentist to a druggist concerning the form and dosage of a drug to be issued to a given patient NIEM reference is hs:Prescription
        /// </summary>
        /// <value>A set of written instructions from a physician or dentist to a druggist concerning the form and dosage of a drug to be issued to a given patient NIEM reference is hs:Prescription</value>

        [DataMember(Name="prescription")]
        public List<HsPrescriptionType> Prescription { get; set; }

        /// <summary>
        /// A set of details about a person&#x27;s substance abuse. NIEM reference is hs:SubstanceAbuseDetails
        /// </summary>
        /// <value>A set of details about a person&#x27;s substance abuse. NIEM reference is hs:SubstanceAbuseDetails</value>

        [DataMember(Name="substanceAbuseDetails")]
        public List<HsSubstanceAbuseDetailsType> SubstanceAbuseDetails { get; set; }

        /// <summary>
        /// hsHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsHealthDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsHealthDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/hsHealthDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsHealthDetailsTypeContext.jsonld")]
            JSONLDContextshsHealthDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsHealthDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsHealthDetailsType {\n");
            sb.Append("  Medical: ").Append(Medical).Append("\n");
            sb.Append("  Mental: ").Append(Mental).Append("\n");
            sb.Append("  MedicationUse: ").Append(MedicationUse).Append("\n");
            sb.Append("  Prescription: ").Append(Prescription).Append("\n");
            sb.Append("  SubstanceAbuseDetails: ").Append(SubstanceAbuseDetails).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsHealthDetailsType)obj);
        }

        /// <summary>
        /// Returns true if HsHealthDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsHealthDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsHealthDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Medical == other.Medical ||
                    Medical != null &&
                    Medical.SequenceEqual(other.Medical)
                ) && 
                (
                    Mental == other.Mental ||
                    Mental != null &&
                    Mental.SequenceEqual(other.Mental)
                ) && 
                (
                    MedicationUse == other.MedicationUse ||
                    MedicationUse != null &&
                    MedicationUse.SequenceEqual(other.MedicationUse)
                ) && 
                (
                    Prescription == other.Prescription ||
                    Prescription != null &&
                    Prescription.SequenceEqual(other.Prescription)
                ) && 
                (
                    SubstanceAbuseDetails == other.SubstanceAbuseDetails ||
                    SubstanceAbuseDetails != null &&
                    SubstanceAbuseDetails.SequenceEqual(other.SubstanceAbuseDetails)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Medical != null)
                    hashCode = hashCode * 59 + Medical.GetHashCode();
                    if (Mental != null)
                    hashCode = hashCode * 59 + Mental.GetHashCode();
                    if (MedicationUse != null)
                    hashCode = hashCode * 59 + MedicationUse.GetHashCode();
                    if (Prescription != null)
                    hashCode = hashCode * 59 + Prescription.GetHashCode();
                    if (SubstanceAbuseDetails != null)
                    hashCode = hashCode * 59 + SubstanceAbuseDetails.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsHealthDetailsType left, HsHealthDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsHealthDetailsType left, HsHealthDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
