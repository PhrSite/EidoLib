/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an ellipse, expressed as an XY plane (projected onto earth&#x27;s surface) ellipse. The major axis is oriented along reported azimuth, with zero being due North.
    /// </summary>
    [DataContract]
    public partial class MoEllipseType : IEquatable<MoEllipseType>
    { 
        /// <summary>
        /// A major axis length (XY) of an ellipse. NIEM reference is mo:EllipseMajorAxisLengthMeasure
        /// </summary>
        /// <value>A major axis length (XY) of an ellipse. NIEM reference is mo:EllipseMajorAxisLengthMeasure</value>

        [DataMember(Name="majorAxisLengthMeasure")]
        public List<NcLengthMeasureType> MajorAxisLengthMeasure { get; set; }

        /// <summary>
        /// A minor axis length (XY) of an ellipse. NIEM reference is mo:EllipseMinorAxisLengthMeasure
        /// </summary>
        /// <value>A minor axis length (XY) of an ellipse. NIEM reference is mo:EllipseMinorAxisLengthMeasure</value>

        [DataMember(Name="minorAxisLengthMeasure")]
        public List<NcLengthMeasureType> MinorAxisLengthMeasure { get; set; }

        /// <summary>
        /// A major axis azimuth (XY) of an ellipse. NIEM reference is mo:EllipseMajorAxisAzimuthMeasure
        /// </summary>
        /// <value>A major axis azimuth (XY) of an ellipse. NIEM reference is mo:EllipseMajorAxisAzimuthMeasure</value>

        [DataMember(Name="majorAxisAzimuthMeasure")]
        public List<MoHorizontalAngularMeasureType> MajorAxisAzimuthMeasure { get; set; }

        /// <summary>
        /// moEllipseType JSON-LD context
        /// </summary>
        /// <value>moEllipseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmoEllipseTypeContextJsonldEnum for ../JSON-LD_Contexts/moEllipseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/moEllipseTypeContext.jsonld")]
            JSONLDContextsmoEllipseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// moEllipseType JSON-LD context
        /// </summary>
        /// <value>moEllipseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoEllipseType {\n");
            sb.Append("  MajorAxisLengthMeasure: ").Append(MajorAxisLengthMeasure).Append("\n");
            sb.Append("  MinorAxisLengthMeasure: ").Append(MinorAxisLengthMeasure).Append("\n");
            sb.Append("  MajorAxisAzimuthMeasure: ").Append(MajorAxisAzimuthMeasure).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MoEllipseType)obj);
        }

        /// <summary>
        /// Returns true if MoEllipseType instances are equal
        /// </summary>
        /// <param name="other">Instance of MoEllipseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoEllipseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MajorAxisLengthMeasure == other.MajorAxisLengthMeasure ||
                    MajorAxisLengthMeasure != null &&
                    MajorAxisLengthMeasure.SequenceEqual(other.MajorAxisLengthMeasure)
                ) && 
                (
                    MinorAxisLengthMeasure == other.MinorAxisLengthMeasure ||
                    MinorAxisLengthMeasure != null &&
                    MinorAxisLengthMeasure.SequenceEqual(other.MinorAxisLengthMeasure)
                ) && 
                (
                    MajorAxisAzimuthMeasure == other.MajorAxisAzimuthMeasure ||
                    MajorAxisAzimuthMeasure != null &&
                    MajorAxisAzimuthMeasure.SequenceEqual(other.MajorAxisAzimuthMeasure)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MajorAxisLengthMeasure != null)
                    hashCode = hashCode * 59 + MajorAxisLengthMeasure.GetHashCode();
                    if (MinorAxisLengthMeasure != null)
                    hashCode = hashCode * 59 + MinorAxisLengthMeasure.GetHashCode();
                    if (MajorAxisAzimuthMeasure != null)
                    hashCode = hashCode * 59 + MajorAxisAzimuthMeasure.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MoEllipseType left, MoEllipseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MoEllipseType left, MoEllipseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
