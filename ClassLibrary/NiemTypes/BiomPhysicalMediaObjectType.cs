/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a description of the characteristics of physical media containing a recording.
    /// </summary>
    [DataContract]
    public partial class BiomPhysicalMediaObjectType : IEquatable<BiomPhysicalMediaObjectType>
    { 
        /// <summary>
        /// A kind of media upon which a recording is stored. NIEM reference is biom:MediaCategoryText
        /// </summary>
        /// <value>A kind of media upon which a recording is stored. NIEM reference is biom:MediaCategoryText</value>

        [DataMember(Name="mediaCategory")]
        public List<NcTextType> MediaCategory { get; set; }

        /// <summary>
        /// A rate of speed at which the physical media object must be played to reproduce the signal content. NIEM reference is biom:RecordingSpeedRate
        /// </summary>
        /// <value>A rate of speed at which the physical media object must be played to reproduce the signal content. NIEM reference is biom:RecordingSpeedRate</value>

        [DataMember(Name="recordingSpeedRate")]
        public List<NiemXsdecimal> RecordingSpeedRate { get; set; }

        /// <summary>
        /// A unit of measure of the rate of speed at which the physical media object must be played to reproduce the signal content. NIEM reference is biom:RecordingSpeedUnitText
        /// </summary>
        /// <value>A unit of measure of the rate of speed at which the physical media object must be played to reproduce the signal content. NIEM reference is biom:RecordingSpeedUnitText</value>

        [DataMember(Name="recordingSpeedUnit")]
        public List<NcTextType> RecordingSpeedUnit { get; set; }

        /// <summary>
        /// An equalization that should be applied for faithful rendering of a recording on a physical media object. NIEM reference is biom:AudioEqualizationText
        /// </summary>
        /// <value>An equalization that should be applied for faithful rendering of a recording on a physical media object. NIEM reference is biom:AudioEqualizationText</value>

        [DataMember(Name="audioEqualization")]
        public List<NcTextType> AudioEqualization { get; set; }

        /// <summary>
        /// A total number of recorded tracks on a physical media object. NIEM reference is biom:AudioTrackQuantity
        /// </summary>
        /// <value>A total number of recorded tracks on a physical media object. NIEM reference is biom:AudioTrackQuantity</value>

        [DataMember(Name="audioTrackQuantity")]
        public List<NcQuantityType> AudioTrackQuantity { get; set; }

        /// <summary>
        /// A list of track IDs which carry speaker voices. NIEM reference is biom:SpeakerTrackList
        /// </summary>
        /// <value>A list of track IDs which carry speaker voices. NIEM reference is biom:SpeakerTrackList</value>

        [DataMember(Name="speakerTrackList")]
        public List<BiomTrackListType> SpeakerTrackList { get; set; }

        /// <summary>
        /// A comment used to describe a physical media object. NIEM reference is biom:MediaCommentText
        /// </summary>
        /// <value>A comment used to describe a physical media object. NIEM reference is biom:MediaCommentText</value>

        [DataMember(Name="mediaComment")]
        public List<NcTextType> MediaComment { get; set; }

        /// <summary>
        /// biomPhysicalMediaObjectType JSON-LD context
        /// </summary>
        /// <value>biomPhysicalMediaObjectType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomPhysicalMediaObjectTypeContextJsonldEnum for ../JSON-LD_Contexts/biomPhysicalMediaObjectTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomPhysicalMediaObjectTypeContext.jsonld")]
            JSONLDContextsbiomPhysicalMediaObjectTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomPhysicalMediaObjectType JSON-LD context
        /// </summary>
        /// <value>biomPhysicalMediaObjectType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomPhysicalMediaObjectType {\n");
            sb.Append("  MediaCategory: ").Append(MediaCategory).Append("\n");
            sb.Append("  RecordingSpeedRate: ").Append(RecordingSpeedRate).Append("\n");
            sb.Append("  RecordingSpeedUnit: ").Append(RecordingSpeedUnit).Append("\n");
            sb.Append("  AudioEqualization: ").Append(AudioEqualization).Append("\n");
            sb.Append("  AudioTrackQuantity: ").Append(AudioTrackQuantity).Append("\n");
            sb.Append("  SpeakerTrackList: ").Append(SpeakerTrackList).Append("\n");
            sb.Append("  MediaComment: ").Append(MediaComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomPhysicalMediaObjectType)obj);
        }

        /// <summary>
        /// Returns true if BiomPhysicalMediaObjectType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomPhysicalMediaObjectType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomPhysicalMediaObjectType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MediaCategory == other.MediaCategory ||
                    MediaCategory != null &&
                    MediaCategory.SequenceEqual(other.MediaCategory)
                ) && 
                (
                    RecordingSpeedRate == other.RecordingSpeedRate ||
                    RecordingSpeedRate != null &&
                    RecordingSpeedRate.SequenceEqual(other.RecordingSpeedRate)
                ) && 
                (
                    RecordingSpeedUnit == other.RecordingSpeedUnit ||
                    RecordingSpeedUnit != null &&
                    RecordingSpeedUnit.SequenceEqual(other.RecordingSpeedUnit)
                ) && 
                (
                    AudioEqualization == other.AudioEqualization ||
                    AudioEqualization != null &&
                    AudioEqualization.SequenceEqual(other.AudioEqualization)
                ) && 
                (
                    AudioTrackQuantity == other.AudioTrackQuantity ||
                    AudioTrackQuantity != null &&
                    AudioTrackQuantity.SequenceEqual(other.AudioTrackQuantity)
                ) && 
                (
                    SpeakerTrackList == other.SpeakerTrackList ||
                    SpeakerTrackList != null &&
                    SpeakerTrackList.SequenceEqual(other.SpeakerTrackList)
                ) && 
                (
                    MediaComment == other.MediaComment ||
                    MediaComment != null &&
                    MediaComment.SequenceEqual(other.MediaComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MediaCategory != null)
                    hashCode = hashCode * 59 + MediaCategory.GetHashCode();
                    if (RecordingSpeedRate != null)
                    hashCode = hashCode * 59 + RecordingSpeedRate.GetHashCode();
                    if (RecordingSpeedUnit != null)
                    hashCode = hashCode * 59 + RecordingSpeedUnit.GetHashCode();
                    if (AudioEqualization != null)
                    hashCode = hashCode * 59 + AudioEqualization.GetHashCode();
                    if (AudioTrackQuantity != null)
                    hashCode = hashCode * 59 + AudioTrackQuantity.GetHashCode();
                    if (SpeakerTrackList != null)
                    hashCode = hashCode * 59 + SpeakerTrackList.GetHashCode();
                    if (MediaComment != null)
                    hashCode = hashCode * 59 + MediaComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomPhysicalMediaObjectType left, BiomPhysicalMediaObjectType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomPhysicalMediaObjectType left, BiomPhysicalMediaObjectType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
