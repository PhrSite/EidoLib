/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the description for an emergency Incident
    /// </summary>
    [DataContract]
    public partial class EmEmergencyIncidentType : NcIncidentType, IEquatable<EmEmergencyIncidentType>
    { 
        /// <summary>
        /// An element for an incident summary NIEM reference is em:IncidentSummaryText
        /// </summary>
        /// <value>An element for an incident summary NIEM reference is em:IncidentSummaryText</value>

        [DataMember(Name="incidentSummary")]
        public List<NcTextType> IncidentSummary { get; set; }

        /// <summary>
        /// An element for an incident publish date NIEM reference is em:IncidentPublishDate
        /// </summary>
        /// <value>An element for an incident publish date NIEM reference is em:IncidentPublishDate</value>

        [DataMember(Name="incidentPublishDate")]
        public List<NcDateType> IncidentPublishDate { get; set; }

        /// <summary>
        /// An element for an incident last updated date NIEM reference is em:IncidentUpdateDate
        /// </summary>
        /// <value>An element for an incident last updated date NIEM reference is em:IncidentUpdateDate</value>

        [DataMember(Name="incidentUpdateDate")]
        public List<NcDateType> IncidentUpdateDate { get; set; }

        /// <summary>
        /// A data element for information on parent Incidents of an incident NIEM reference is em:ParentIncident
        /// </summary>
        /// <value>A data element for information on parent Incidents of an incident NIEM reference is em:ParentIncident</value>

        [DataMember(Name="parentIncident")]
        public List<EmEmergencyIncidentType> ParentIncident { get; set; }

        /// <summary>
        /// A data element for information on child Incidents of an incident NIEM reference is em:ChildIncident
        /// </summary>
        /// <value>A data element for information on child Incidents of an incident NIEM reference is em:ChildIncident</value>

        [DataMember(Name="childIncident")]
        public List<EmEmergencyIncidentType> ChildIncident { get; set; }

        /// <summary>
        /// A data element for information on related Incidents of an incident NIEM reference is em:RelatedIncident
        /// </summary>
        /// <value>A data element for information on related Incidents of an incident NIEM reference is em:RelatedIncident</value>

        [DataMember(Name="relatedIncident")]
        public List<EmEmergencyIncidentType> RelatedIncident { get; set; }

        /// <summary>
        /// An element for the valid actions related to the incident information NIEM reference is em:IncidentActionCode
        /// </summary>
        /// <value>An element for the valid actions related to the incident information NIEM reference is em:IncidentActionCode</value>

        [DataMember(Name="incidentActionCode")]
        public List<EmIncidentActionCodeType> IncidentActionCode { get; set; }

        /// <summary>
        /// An organization with a specific range of authority for specified resource(s) NIEM reference is em:Owner
        /// </summary>
        /// <value>An organization with a specific range of authority for specified resource(s) NIEM reference is em:Owner</value>

        [DataMember(Name="owner")]
        public List<NcOrganizationType> Owner { get; set; }

        /// <summary>
        /// An element for incident author information NIEM reference is em:Author
        /// </summary>
        /// <value>An element for incident author information NIEM reference is em:Author</value>

        [DataMember(Name="author")]
        public List<EmIncidentAuthorType> Author { get; set; }

        /// <summary>
        /// An element for contributer&#x27;s information NIEM reference is em:Contributor
        /// </summary>
        /// <value>An element for contributer&#x27;s information NIEM reference is em:Contributor</value>

        [DataMember(Name="contributor")]
        public List<EmIncidentAuthorType> Contributor { get; set; }

        /// <summary>
        /// A call for service received from a person alerting an authority of a situation. NIEM reference is j:ServiceCall
        /// </summary>
        /// <value>A call for service received from a person alerting an authority of a situation. NIEM reference is j:ServiceCall</value>

        [DataMember(Name="serviceCall")]
        public List<JServiceCallType> ServiceCall { get; set; }

        /// <summary>
        /// An element for for service call assigned unit detail NIEM reference is em:ServiceCallAssignedUnit
        /// </summary>
        /// <value>An element for for service call assigned unit detail NIEM reference is em:ServiceCallAssignedUnit</value>

        [DataMember(Name="serviceCallAssignedUnit")]
        public List<EmServiceCallAssignedUnitType> ServiceCallAssignedUnit { get; set; }

        /// <summary>
        /// A person who is involved or suspected of being involved in an incident or criminal activity. NIEM reference is j:Subject
        /// </summary>
        /// <value>A person who is involved or suspected of being involved in an incident or criminal activity. NIEM reference is j:Subject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// A person, organization, or other entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:Victim
        /// </summary>
        /// <value>A person, organization, or other entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:Victim</value>

        [DataMember(Name="victim")]
        public List<JVictimType> Victim { get; set; }

        /// <summary>
        /// A person who has observed an incident. NIEM reference is j:Witness
        /// </summary>
        /// <value>A person who has observed an incident. NIEM reference is j:Witness</value>

        [DataMember(Name="witness")]
        public List<JWitnessType> Witness { get; set; }

        /// <summary>
        /// emEmergencyIncidentType JSON-LD context
        /// </summary>
        /// <value>emEmergencyIncidentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemEmergencyIncidentTypeContextJsonldEnum for ../JSON-LD_Contexts/emEmergencyIncidentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emEmergencyIncidentTypeContext.jsonld")]
            JSONLDContextsemEmergencyIncidentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emEmergencyIncidentType JSON-LD context
        /// </summary>
        /// <value>emEmergencyIncidentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmEmergencyIncidentType {\n");
            sb.Append("  IncidentSummary: ").Append(IncidentSummary).Append("\n");
            sb.Append("  IncidentPublishDate: ").Append(IncidentPublishDate).Append("\n");
            sb.Append("  IncidentUpdateDate: ").Append(IncidentUpdateDate).Append("\n");
            sb.Append("  ParentIncident: ").Append(ParentIncident).Append("\n");
            sb.Append("  ChildIncident: ").Append(ChildIncident).Append("\n");
            sb.Append("  RelatedIncident: ").Append(RelatedIncident).Append("\n");
            sb.Append("  IncidentActionCode: ").Append(IncidentActionCode).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Contributor: ").Append(Contributor).Append("\n");
            sb.Append("  ServiceCall: ").Append(ServiceCall).Append("\n");
            sb.Append("  ServiceCallAssignedUnit: ").Append(ServiceCallAssignedUnit).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Victim: ").Append(Victim).Append("\n");
            sb.Append("  Witness: ").Append(Witness).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmEmergencyIncidentType)obj);
        }

        /// <summary>
        /// Returns true if EmEmergencyIncidentType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmEmergencyIncidentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmEmergencyIncidentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IncidentSummary == other.IncidentSummary ||
                    IncidentSummary != null &&
                    IncidentSummary.SequenceEqual(other.IncidentSummary)
                ) && 
                (
                    IncidentPublishDate == other.IncidentPublishDate ||
                    IncidentPublishDate != null &&
                    IncidentPublishDate.SequenceEqual(other.IncidentPublishDate)
                ) && 
                (
                    IncidentUpdateDate == other.IncidentUpdateDate ||
                    IncidentUpdateDate != null &&
                    IncidentUpdateDate.SequenceEqual(other.IncidentUpdateDate)
                ) && 
                (
                    ParentIncident == other.ParentIncident ||
                    ParentIncident != null &&
                    ParentIncident.SequenceEqual(other.ParentIncident)
                ) && 
                (
                    ChildIncident == other.ChildIncident ||
                    ChildIncident != null &&
                    ChildIncident.SequenceEqual(other.ChildIncident)
                ) && 
                (
                    RelatedIncident == other.RelatedIncident ||
                    RelatedIncident != null &&
                    RelatedIncident.SequenceEqual(other.RelatedIncident)
                ) && 
                (
                    IncidentActionCode == other.IncidentActionCode ||
                    IncidentActionCode != null &&
                    IncidentActionCode.SequenceEqual(other.IncidentActionCode)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.SequenceEqual(other.Owner)
                ) && 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.SequenceEqual(other.Author)
                ) && 
                (
                    Contributor == other.Contributor ||
                    Contributor != null &&
                    Contributor.SequenceEqual(other.Contributor)
                ) && 
                (
                    ServiceCall == other.ServiceCall ||
                    ServiceCall != null &&
                    ServiceCall.SequenceEqual(other.ServiceCall)
                ) && 
                (
                    ServiceCallAssignedUnit == other.ServiceCallAssignedUnit ||
                    ServiceCallAssignedUnit != null &&
                    ServiceCallAssignedUnit.SequenceEqual(other.ServiceCallAssignedUnit)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    Victim == other.Victim ||
                    Victim != null &&
                    Victim.SequenceEqual(other.Victim)
                ) && 
                (
                    Witness == other.Witness ||
                    Witness != null &&
                    Witness.SequenceEqual(other.Witness)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IncidentSummary != null)
                    hashCode = hashCode * 59 + IncidentSummary.GetHashCode();
                    if (IncidentPublishDate != null)
                    hashCode = hashCode * 59 + IncidentPublishDate.GetHashCode();
                    if (IncidentUpdateDate != null)
                    hashCode = hashCode * 59 + IncidentUpdateDate.GetHashCode();
                    if (ParentIncident != null)
                    hashCode = hashCode * 59 + ParentIncident.GetHashCode();
                    if (ChildIncident != null)
                    hashCode = hashCode * 59 + ChildIncident.GetHashCode();
                    if (RelatedIncident != null)
                    hashCode = hashCode * 59 + RelatedIncident.GetHashCode();
                    if (IncidentActionCode != null)
                    hashCode = hashCode * 59 + IncidentActionCode.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (Contributor != null)
                    hashCode = hashCode * 59 + Contributor.GetHashCode();
                    if (ServiceCall != null)
                    hashCode = hashCode * 59 + ServiceCall.GetHashCode();
                    if (ServiceCallAssignedUnit != null)
                    hashCode = hashCode * 59 + ServiceCallAssignedUnit.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Victim != null)
                    hashCode = hashCode * 59 + Victim.GetHashCode();
                    if (Witness != null)
                    hashCode = hashCode * 59 + Witness.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmEmergencyIncidentType left, EmEmergencyIncidentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmEmergencyIncidentType left, EmEmergencyIncidentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
