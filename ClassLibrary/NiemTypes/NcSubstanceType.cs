/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the matter or substance of which something consists.
    /// </summary>
    [DataContract]
    public partial class NcSubstanceType : NcItemType, IEquatable<NcSubstanceType>
    { 
        /// <summary>
        /// A kind of drug. NIEM reference is j:DrugCategoryCode
        /// </summary>
        /// <value>A kind of drug. NIEM reference is j:DrugCategoryCode</value>

        [DataMember(Name="drugCategoryCode")]
        public List<UcrDrugCategoryCodeType> DrugCategoryCode { get; set; }

        /// <summary>
        /// A drug. NIEM reference is j:DrugCategoryDEACode
        /// </summary>
        /// <value>A drug. NIEM reference is j:DrugCategoryDEACode</value>

        [DataMember(Name="drugCategoryDeaCode")]
        public List<DeaDrugCategoryCodeType> DrugCategoryDeaCode { get; set; }

        /// <summary>
        /// A kind of substance. NIEM reference is nc:SubstanceCategoryText
        /// </summary>
        /// <value>A kind of substance. NIEM reference is nc:SubstanceCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A drug. NIEM reference is nc:DrugCode
        /// </summary>
        /// <value>A drug. NIEM reference is nc:DrugCode</value>

        [DataMember(Name="drugCode")]
        public List<DeaDrugCodeType> DrugCode { get; set; }

        /// <summary>
        /// A United Nations/North American (UN/NA) Hazardous Materials Code pertaining to a hazardous material. NIEM reference is m:HazmatDeclarationUNHazmatCode
        /// </summary>
        /// <value>A United Nations/North American (UN/NA) Hazardous Materials Code pertaining to a hazardous material. NIEM reference is m:HazmatDeclarationUNHazmatCode</value>

        [DataMember(Name="hazmatDeclarationUnHazmatCode")]
        public List<HazmatHazmatUNCodeType> HazmatDeclarationUnHazmatCode { get; set; }

        /// <summary>
        /// A code that identifies a metal. NIEM reference is j:MetalCode
        /// </summary>
        /// <value>A code that identifies a metal. NIEM reference is j:MetalCode</value>

        [DataMember(Name="metalCode")]
        public List<NdexMetalCodeType> MetalCode { get; set; }

        /// <summary>
        /// A code that identifies a rare metallic chemical element of high economic value, typically regarded as an investment and industrial commodity. . NIEM reference is j:PreciousMetalCode
        /// </summary>
        /// <value>A code that identifies a rare metallic chemical element of high economic value, typically regarded as an investment and industrial commodity. . NIEM reference is j:PreciousMetalCode</value>

        [DataMember(Name="preciousMetalCode")]
        public List<NdexPreciousMetalCodeType> PreciousMetalCode { get; set; }

        /// <summary>
        /// A description of a container used to hold a substance. NIEM reference is nc:SubstanceContainerDescriptionText
        /// </summary>
        /// <value>A description of a container used to hold a substance. NIEM reference is nc:SubstanceContainerDescriptionText</value>

        [DataMember(Name="containerDescription")]
        public List<NcTextType> ContainerDescription { get; set; }

        /// <summary>
        /// A quantity of a substance being described. NIEM reference is nc:SubstanceQuantityMeasure
        /// </summary>
        /// <value>A quantity of a substance being described. NIEM reference is nc:SubstanceQuantityMeasure</value>

        [DataMember(Name="quantityMeasure")]
        public List<NcSubstanceMeasureType> QuantityMeasure { get; set; }

        /// <summary>
        /// A description of the ingredients or makeup of a substance. NIEM reference is nc:SubstanceCompositionDescriptionText
        /// </summary>
        /// <value>A description of the ingredients or makeup of a substance. NIEM reference is nc:SubstanceCompositionDescriptionText</value>

        [DataMember(Name="compositionDescription")]
        public List<NcTextType> CompositionDescription { get; set; }

        /// <summary>
        /// A physical state or form in which a substance appears. NIEM reference is nc:SubstanceFormText
        /// </summary>
        /// <value>A physical state or form in which a substance appears. NIEM reference is nc:SubstanceFormText</value>

        [DataMember(Name="form")]
        public List<NcTextType> Form { get; set; }

        /// <summary>
        /// A description of where a substance was found. NIEM reference is nc:SubstanceFoundDescriptionText
        /// </summary>
        /// <value>A description of where a substance was found. NIEM reference is nc:SubstanceFoundDescriptionText</value>

        [DataMember(Name="foundDescription")]
        public List<NcTextType> FoundDescription { get; set; }

        /// <summary>
        /// ncSubstanceType JSON-LD context
        /// </summary>
        /// <value>ncSubstanceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncSubstanceTypeContextJsonldEnum for ../JSON-LD_Contexts/ncSubstanceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncSubstanceTypeContext.jsonld")]
            JSONLDContextsncSubstanceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncSubstanceType JSON-LD context
        /// </summary>
        /// <value>ncSubstanceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcSubstanceType {\n");
            sb.Append("  DrugCategoryCode: ").Append(DrugCategoryCode).Append("\n");
            sb.Append("  DrugCategoryDeaCode: ").Append(DrugCategoryDeaCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DrugCode: ").Append(DrugCode).Append("\n");
            sb.Append("  HazmatDeclarationUnHazmatCode: ").Append(HazmatDeclarationUnHazmatCode).Append("\n");
            sb.Append("  MetalCode: ").Append(MetalCode).Append("\n");
            sb.Append("  PreciousMetalCode: ").Append(PreciousMetalCode).Append("\n");
            sb.Append("  ContainerDescription: ").Append(ContainerDescription).Append("\n");
            sb.Append("  QuantityMeasure: ").Append(QuantityMeasure).Append("\n");
            sb.Append("  CompositionDescription: ").Append(CompositionDescription).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("  FoundDescription: ").Append(FoundDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcSubstanceType)obj);
        }

        /// <summary>
        /// Returns true if NcSubstanceType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcSubstanceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcSubstanceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DrugCategoryCode == other.DrugCategoryCode ||
                    DrugCategoryCode != null &&
                    DrugCategoryCode.SequenceEqual(other.DrugCategoryCode)
                ) && 
                (
                    DrugCategoryDeaCode == other.DrugCategoryDeaCode ||
                    DrugCategoryDeaCode != null &&
                    DrugCategoryDeaCode.SequenceEqual(other.DrugCategoryDeaCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    DrugCode == other.DrugCode ||
                    DrugCode != null &&
                    DrugCode.SequenceEqual(other.DrugCode)
                ) && 
                (
                    HazmatDeclarationUnHazmatCode == other.HazmatDeclarationUnHazmatCode ||
                    HazmatDeclarationUnHazmatCode != null &&
                    HazmatDeclarationUnHazmatCode.SequenceEqual(other.HazmatDeclarationUnHazmatCode)
                ) && 
                (
                    MetalCode == other.MetalCode ||
                    MetalCode != null &&
                    MetalCode.SequenceEqual(other.MetalCode)
                ) && 
                (
                    PreciousMetalCode == other.PreciousMetalCode ||
                    PreciousMetalCode != null &&
                    PreciousMetalCode.SequenceEqual(other.PreciousMetalCode)
                ) && 
                (
                    ContainerDescription == other.ContainerDescription ||
                    ContainerDescription != null &&
                    ContainerDescription.SequenceEqual(other.ContainerDescription)
                ) && 
                (
                    QuantityMeasure == other.QuantityMeasure ||
                    QuantityMeasure != null &&
                    QuantityMeasure.SequenceEqual(other.QuantityMeasure)
                ) && 
                (
                    CompositionDescription == other.CompositionDescription ||
                    CompositionDescription != null &&
                    CompositionDescription.SequenceEqual(other.CompositionDescription)
                ) && 
                (
                    Form == other.Form ||
                    Form != null &&
                    Form.SequenceEqual(other.Form)
                ) && 
                (
                    FoundDescription == other.FoundDescription ||
                    FoundDescription != null &&
                    FoundDescription.SequenceEqual(other.FoundDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DrugCategoryCode != null)
                    hashCode = hashCode * 59 + DrugCategoryCode.GetHashCode();
                    if (DrugCategoryDeaCode != null)
                    hashCode = hashCode * 59 + DrugCategoryDeaCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (DrugCode != null)
                    hashCode = hashCode * 59 + DrugCode.GetHashCode();
                    if (HazmatDeclarationUnHazmatCode != null)
                    hashCode = hashCode * 59 + HazmatDeclarationUnHazmatCode.GetHashCode();
                    if (MetalCode != null)
                    hashCode = hashCode * 59 + MetalCode.GetHashCode();
                    if (PreciousMetalCode != null)
                    hashCode = hashCode * 59 + PreciousMetalCode.GetHashCode();
                    if (ContainerDescription != null)
                    hashCode = hashCode * 59 + ContainerDescription.GetHashCode();
                    if (QuantityMeasure != null)
                    hashCode = hashCode * 59 + QuantityMeasure.GetHashCode();
                    if (CompositionDescription != null)
                    hashCode = hashCode * 59 + CompositionDescription.GetHashCode();
                    if (Form != null)
                    hashCode = hashCode * 59 + Form.GetHashCode();
                    if (FoundDescription != null)
                    hashCode = hashCode * 59 + FoundDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcSubstanceType left, NcSubstanceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcSubstanceType left, NcSubstanceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
