/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a road, thoroughfare, or highway.
    /// </summary>
    [DataContract]
    public partial class NcStreetType : IEquatable<NcStreetType>
    { 
        /// <summary>
        /// A complete reference for a street. NIEM reference is nc:StreetFullText
        /// </summary>
        /// <value>A complete reference for a street. NIEM reference is nc:StreetFullText</value>

        [DataMember(Name="full")]
        public List<NcTextType> Full { get; set; }

        /// <summary>
        /// A number that identifies a particular unit or location within a street. NIEM reference is nc:StreetNumberText
        /// </summary>
        /// <value>A number that identifies a particular unit or location within a street. NIEM reference is nc:StreetNumberText</value>

        [DataMember(Name="number")]
        public List<NcTextType> Number { get; set; }

        /// <summary>
        /// A direction that appears before a street name. NIEM reference is nc:StreetPredirectionalText
        /// </summary>
        /// <value>A direction that appears before a street name. NIEM reference is nc:StreetPredirectionalText</value>

        [DataMember(Name="predirectional")]
        public List<NcTextType> Predirectional { get; set; }

        /// <summary>
        /// A name of a street. NIEM reference is nc:StreetName
        /// </summary>
        /// <value>A name of a street. NIEM reference is nc:StreetName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// A kind of street. NIEM reference is nc:StreetCategoryText
        /// </summary>
        /// <value>A kind of street. NIEM reference is nc:StreetCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A direction that appears after a street name. NIEM reference is nc:StreetPostdirectionalText
        /// </summary>
        /// <value>A direction that appears after a street name. NIEM reference is nc:StreetPostdirectionalText</value>

        [DataMember(Name="postdirectional")]
        public List<NcTextType> Postdirectional { get; set; }

        /// <summary>
        /// An additional part of a street reference that follows the street category and post directional. NIEM reference is nc:StreetExtensionText
        /// </summary>
        /// <value>An additional part of a street reference that follows the street category and post directional. NIEM reference is nc:StreetExtensionText</value>

        [DataMember(Name="extension")]
        public List<NcTextType> Extension { get; set; }

        /// <summary>
        /// ncStreetType JSON-LD context
        /// </summary>
        /// <value>ncStreetType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncStreetTypeContextJsonldEnum for ../JSON-LD_Contexts/ncStreetTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncStreetTypeContext.jsonld")]
            JSONLDContextsncStreetTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncStreetType JSON-LD context
        /// </summary>
        /// <value>ncStreetType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcStreetType {\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Predirectional: ").Append(Predirectional).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Postdirectional: ").Append(Postdirectional).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcStreetType)obj);
        }

        /// <summary>
        /// Returns true if NcStreetType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcStreetType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcStreetType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Full == other.Full ||
                    Full != null &&
                    Full.SequenceEqual(other.Full)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.SequenceEqual(other.Number)
                ) && 
                (
                    Predirectional == other.Predirectional ||
                    Predirectional != null &&
                    Predirectional.SequenceEqual(other.Predirectional)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Postdirectional == other.Postdirectional ||
                    Postdirectional != null &&
                    Postdirectional.SequenceEqual(other.Postdirectional)
                ) && 
                (
                    Extension == other.Extension ||
                    Extension != null &&
                    Extension.SequenceEqual(other.Extension)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Full != null)
                    hashCode = hashCode * 59 + Full.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Predirectional != null)
                    hashCode = hashCode * 59 + Predirectional.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Postdirectional != null)
                    hashCode = hashCode * 59 + Postdirectional.GetHashCode();
                    if (Extension != null)
                    hashCode = hashCode * 59 + Extension.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcStreetType left, NcStreetType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcStreetType left, NcStreetType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
