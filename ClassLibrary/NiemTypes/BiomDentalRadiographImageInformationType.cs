/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the information specific to dental radiographic imagery.
    /// </summary>
    [DataContract]
    public partial class BiomDentalRadiographImageInformationType : IEquatable<BiomDentalRadiographImageInformationType>
    { 
        /// <summary>
        /// A kind of Radiograph Size NIEM reference is biom:RadiographSizeText
        /// </summary>
        /// <value>A kind of Radiograph Size NIEM reference is biom:RadiographSizeText</value>

        [DataMember(Name="radiographSize")]
        public List<NcTextType> RadiographSize { get; set; }

        /// <summary>
        /// A kind of Radiograph Image Series. Only integer and periods are in the code text. An example is 8.1.3.9.1.5 for the National Provider Identifier Number of Dentist that treated the patient. NIEM reference is biom:RadiographImageSeriesCodeText
        /// </summary>
        /// <value>A kind of Radiograph Image Series. Only integer and periods are in the code text. An example is 8.1.3.9.1.5 for the National Provider Identifier Number of Dentist that treated the patient. NIEM reference is biom:RadiographImageSeriesCodeText</value>

        [DataMember(Name="radiographImageSeriesCode")]
        public List<NcTextType> RadiographImageSeriesCode { get; set; }

        /// <summary>
        /// A kind of radiograph image in series text NIEM reference is biom:RadiographImageSeriesText
        /// </summary>
        /// <value>A kind of radiograph image in series text NIEM reference is biom:RadiographImageSeriesText</value>

        [DataMember(Name="radiographImageSeries")]
        public List<NcTextType> RadiographImageSeries { get; set; }

        /// <summary>
        /// A kind of radiograph image information text NIEM reference is biom:RadiographImageInformationText
        /// </summary>
        /// <value>A kind of radiograph image information text NIEM reference is biom:RadiographImageInformationText</value>

        [DataMember(Name="radiographImageInformation")]
        public List<NcTextType> RadiographImageInformation { get; set; }

        /// <summary>
        /// biomDentalRadiographImageInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalRadiographImageInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDentalRadiographImageInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDentalRadiographImageInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDentalRadiographImageInformationTypeContext.jsonld")]
            JSONLDContextsbiomDentalRadiographImageInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDentalRadiographImageInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalRadiographImageInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDentalRadiographImageInformationType {\n");
            sb.Append("  RadiographSize: ").Append(RadiographSize).Append("\n");
            sb.Append("  RadiographImageSeriesCode: ").Append(RadiographImageSeriesCode).Append("\n");
            sb.Append("  RadiographImageSeries: ").Append(RadiographImageSeries).Append("\n");
            sb.Append("  RadiographImageInformation: ").Append(RadiographImageInformation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDentalRadiographImageInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomDentalRadiographImageInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDentalRadiographImageInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDentalRadiographImageInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RadiographSize == other.RadiographSize ||
                    RadiographSize != null &&
                    RadiographSize.SequenceEqual(other.RadiographSize)
                ) && 
                (
                    RadiographImageSeriesCode == other.RadiographImageSeriesCode ||
                    RadiographImageSeriesCode != null &&
                    RadiographImageSeriesCode.SequenceEqual(other.RadiographImageSeriesCode)
                ) && 
                (
                    RadiographImageSeries == other.RadiographImageSeries ||
                    RadiographImageSeries != null &&
                    RadiographImageSeries.SequenceEqual(other.RadiographImageSeries)
                ) && 
                (
                    RadiographImageInformation == other.RadiographImageInformation ||
                    RadiographImageInformation != null &&
                    RadiographImageInformation.SequenceEqual(other.RadiographImageInformation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RadiographSize != null)
                    hashCode = hashCode * 59 + RadiographSize.GetHashCode();
                    if (RadiographImageSeriesCode != null)
                    hashCode = hashCode * 59 + RadiographImageSeriesCode.GetHashCode();
                    if (RadiographImageSeries != null)
                    hashCode = hashCode * 59 + RadiographImageSeries.GetHashCode();
                    if (RadiographImageInformation != null)
                    hashCode = hashCode * 59 + RadiographImageInformation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDentalRadiographImageInformationType left, BiomDentalRadiographImageInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDentalRadiographImageInformationType left, BiomDentalRadiographImageInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
