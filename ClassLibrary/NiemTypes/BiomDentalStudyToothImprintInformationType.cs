/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type to transmit information about models fabricated from a dental arch impression or tooth imprints.
    /// </summary>
    [DataContract]
    public partial class BiomDentalStudyToothImprintInformationType : IEquatable<BiomDentalStudyToothImprintInformationType>
    { 
        /// <summary>
        /// A date of recording of the dental study and tooth imprint. NIEM reference is biom:DentalStudyRecordingDate
        /// </summary>
        /// <value>A date of recording of the dental study and tooth imprint. NIEM reference is biom:DentalStudyRecordingDate</value>

        [DataMember(Name="dentalStudyRecordingDate")]
        public List<NcDateType> DentalStudyRecordingDate { get; set; }

        /// <summary>
        /// A kind of date of recording estimated accuracy range of the dental casts and impressions NIEM reference is biom:DentalStudyRecordingDateEstimateRangeDuration
        /// </summary>
        /// <value>A kind of date of recording estimated accuracy range of the dental casts and impressions NIEM reference is biom:DentalStudyRecordingDateEstimateRangeDuration</value>

        [DataMember(Name="dentalStudyRecordingDateEstimateRangeDuration")]
        public List<NiemXsduration> DentalStudyRecordingDateEstimateRangeDuration { get; set; }

        /// <summary>
        /// A code for the dental casts and impressions reference code NIEM reference is biom:DentalStudyReferenceCode
        /// </summary>
        /// <value>A code for the dental casts and impressions reference code NIEM reference is biom:DentalStudyReferenceCode</value>

        [DataMember(Name="dentalStudyReferenceCode")]
        public List<BiomDentalStudyReferenceCodeType> DentalStudyReferenceCode { get; set; }

        /// <summary>
        /// A description of additional detail of the dental casts and impressions NIEM reference is biom:DentalStudyAdditionalDescriptiveText
        /// </summary>
        /// <value>A description of additional detail of the dental casts and impressions NIEM reference is biom:DentalStudyAdditionalDescriptiveText</value>

        [DataMember(Name="dentalStudyAdditionalDescriptive")]
        public List<NcTextType> DentalStudyAdditionalDescriptive { get; set; }

        /// <summary>
        /// biomDentalStudyToothImprintInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalStudyToothImprintInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDentalStudyToothImprintInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDentalStudyToothImprintInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDentalStudyToothImprintInformationTypeContext.jsonld")]
            JSONLDContextsbiomDentalStudyToothImprintInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDentalStudyToothImprintInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalStudyToothImprintInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDentalStudyToothImprintInformationType {\n");
            sb.Append("  DentalStudyRecordingDate: ").Append(DentalStudyRecordingDate).Append("\n");
            sb.Append("  DentalStudyRecordingDateEstimateRangeDuration: ").Append(DentalStudyRecordingDateEstimateRangeDuration).Append("\n");
            sb.Append("  DentalStudyReferenceCode: ").Append(DentalStudyReferenceCode).Append("\n");
            sb.Append("  DentalStudyAdditionalDescriptive: ").Append(DentalStudyAdditionalDescriptive).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDentalStudyToothImprintInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomDentalStudyToothImprintInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDentalStudyToothImprintInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDentalStudyToothImprintInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DentalStudyRecordingDate == other.DentalStudyRecordingDate ||
                    DentalStudyRecordingDate != null &&
                    DentalStudyRecordingDate.SequenceEqual(other.DentalStudyRecordingDate)
                ) && 
                (
                    DentalStudyRecordingDateEstimateRangeDuration == other.DentalStudyRecordingDateEstimateRangeDuration ||
                    DentalStudyRecordingDateEstimateRangeDuration != null &&
                    DentalStudyRecordingDateEstimateRangeDuration.SequenceEqual(other.DentalStudyRecordingDateEstimateRangeDuration)
                ) && 
                (
                    DentalStudyReferenceCode == other.DentalStudyReferenceCode ||
                    DentalStudyReferenceCode != null &&
                    DentalStudyReferenceCode.SequenceEqual(other.DentalStudyReferenceCode)
                ) && 
                (
                    DentalStudyAdditionalDescriptive == other.DentalStudyAdditionalDescriptive ||
                    DentalStudyAdditionalDescriptive != null &&
                    DentalStudyAdditionalDescriptive.SequenceEqual(other.DentalStudyAdditionalDescriptive)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DentalStudyRecordingDate != null)
                    hashCode = hashCode * 59 + DentalStudyRecordingDate.GetHashCode();
                    if (DentalStudyRecordingDateEstimateRangeDuration != null)
                    hashCode = hashCode * 59 + DentalStudyRecordingDateEstimateRangeDuration.GetHashCode();
                    if (DentalStudyReferenceCode != null)
                    hashCode = hashCode * 59 + DentalStudyReferenceCode.GetHashCode();
                    if (DentalStudyAdditionalDescriptive != null)
                    hashCode = hashCode * 59 + DentalStudyAdditionalDescriptive.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDentalStudyToothImprintInformationType left, BiomDentalStudyToothImprintInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDentalStudyToothImprintInformationType left, BiomDentalStudyToothImprintInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
