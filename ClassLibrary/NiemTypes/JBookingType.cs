/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an administrative step taken after an arrest subject is brought to a police station or detention facility.
    /// </summary>
    [DataContract]
    public partial class JBookingType : NcActivityType, IEquatable<JBookingType>
    { 
        /// <summary>
        /// True if a subject has more charges for which to be booked; false otherwise. NIEM reference is j:BookingAdditionalChargesIndicator
        /// </summary>
        /// <value>True if a subject has more charges for which to be booked; false otherwise. NIEM reference is j:BookingAdditionalChargesIndicator</value>

        [DataMember(Name="isAdditionalCharges")]
        public List<NiemXsboolean> IsAdditionalCharges { get; set; }

        /// <summary>
        /// An observation from or about a person interview. NIEM reference is j:BookingInterviewObservation
        /// </summary>
        /// <value>An observation from or about a person interview. NIEM reference is j:BookingInterviewObservation</value>

        [DataMember(Name="interviewObservation")]
        public List<NcCommentType> InterviewObservation { get; set; }

        /// <summary>
        /// True if IAFIS was able to make an identification based upon the submitted transaction; false otherwise. NIEM reference is j:IAFISIndicator
        /// </summary>
        /// <value>True if IAFIS was able to make an identification based upon the submitted transaction; false otherwise. NIEM reference is j:IAFISIndicator</value>

        [DataMember(Name="isIafis")]
        public List<NiemXsboolean> IsIafis { get; set; }

        /// <summary>
        /// A date/time at which a person being booked was fingerprinted. NIEM reference is j:FingerprintDate
        /// </summary>
        /// <value>A date/time at which a person being booked was fingerprinted. NIEM reference is j:FingerprintDate</value>

        [DataMember(Name="fingerprintDate")]
        public List<NcDateType> FingerprintDate { get; set; }

        /// <summary>
        /// A description of the weapon found in the possession of a person at the time of booking. NIEM reference is j:SubjectArmedDescriptionText
        /// </summary>
        /// <value>A description of the weapon found in the possession of a person at the time of booking. NIEM reference is j:SubjectArmedDescriptionText</value>

        [DataMember(Name="subjectArmedDescription")]
        public List<NcTextType> SubjectArmedDescription { get; set; }

        /// <summary>
        /// An organization which processes a booking. NIEM reference is j:BookingAgency
        /// </summary>
        /// <value>An organization which processes a booking. NIEM reference is j:BookingAgency</value>

        [DataMember(Name="agency")]
        public List<NcOrganizationType> Agency { get; set; }

        /// <summary>
        /// A booking identification of the originating case agency. NIEM reference is j:BookingAgencyRecordIdentification
        /// </summary>
        /// <value>A booking identification of the originating case agency. NIEM reference is j:BookingAgencyRecordIdentification</value>

        [DataMember(Name="agencyRecordIdentification")]
        public List<NcIdentificationType> AgencyRecordIdentification { get; set; }

        /// <summary>
        /// A date a subject is due to appear in court to answer the charges filed. NIEM reference is j:BookingArraignmentDate
        /// </summary>
        /// <value>A date a subject is due to appear in court to answer the charges filed. NIEM reference is j:BookingArraignmentDate</value>

        [DataMember(Name="arraignmentDate")]
        public List<NcDateType> ArraignmentDate { get; set; }

        /// <summary>
        /// An identification for the cause of a booking. NIEM reference is j:BookingCourtCaseIdentification
        /// </summary>
        /// <value>An identification for the cause of a booking. NIEM reference is j:BookingCourtCaseIdentification</value>

        [DataMember(Name="courtCaseIdentification")]
        public List<NcIdentificationType> CourtCaseIdentification { get; set; }

        /// <summary>
        /// A piece of property a subject gives to an official for safe keeping during a booking. NIEM reference is j:BookingDepositedItem
        /// </summary>
        /// <value>A piece of property a subject gives to an official for safe keeping during a booking. NIEM reference is j:BookingDepositedItem</value>

        [DataMember(Name="depositedItem")]
        public List<NcItemType> DepositedItem { get; set; }

        /// <summary>
        /// A state, county or city detention facility where a subject is detained as a result of booking. NIEM reference is j:BookingDetentionFacility
        /// </summary>
        /// <value>A state, county or city detention facility where a subject is detained as a result of booking. NIEM reference is j:BookingDetentionFacility</value>

        [DataMember(Name="detentionFacility")]
        public List<NcFacilityType> DetentionFacility { get; set; }

        /// <summary>
        /// An identification assigned by a booking system to identify a unique booking event within a specific jail. NIEM reference is j:BookingDocumentControlIdentification
        /// </summary>
        /// <value>An identification assigned by a booking system to identify a unique booking event within a specific jail. NIEM reference is j:BookingDocumentControlIdentification</value>

        [DataMember(Name="documentControlIdentification")]
        public List<NcIdentificationType> DocumentControlIdentification { get; set; }

        /// <summary>
        /// An official who processes a subject for booking. NIEM reference is j:BookingEmployee
        /// </summary>
        /// <value>An official who processes a subject for booking. NIEM reference is j:BookingEmployee</value>

        [DataMember(Name="employee")]
        public List<JEnforcementOfficialType> Employee { get; set; }

        /// <summary>
        /// A police station or a detention facility where a booking occurs. NIEM reference is j:BookingFacility
        /// </summary>
        /// <value>A police station or a detention facility where a booking occurs. NIEM reference is j:BookingFacility</value>

        [DataMember(Name="facility")]
        public List<NcFacilityType> Facility { get; set; }

        /// <summary>
        /// A records management system identification number for the Incident that precipitated the booking of the subject. NIEM reference is j:BookingFileIdentification
        /// </summary>
        /// <value>A records management system identification number for the Incident that precipitated the booking of the subject. NIEM reference is j:BookingFileIdentification</value>

        [DataMember(Name="fileIdentification")]
        public List<NcIdentificationType> FileIdentification { get; set; }

        /// <summary>
        /// A release of a subject from booking or from booking detention. NIEM reference is j:BookingRelease
        /// </summary>
        /// <value>A release of a subject from booking or from booking detention. NIEM reference is j:BookingRelease</value>

        [DataMember(Name="release")]
        public List<NcReleaseType> Release { get; set; }

        /// <summary>
        /// A corrections pre-trial screening official. NIEM reference is j:BookingReleaseCorrectionsAnalyst
        /// </summary>
        /// <value>A corrections pre-trial screening official. NIEM reference is j:BookingReleaseCorrectionsAnalyst</value>

        [DataMember(Name="releaseCorrectionsAnalyst")]
        public List<JEnforcementOfficialType> ReleaseCorrectionsAnalyst { get; set; }

        /// <summary>
        /// A district of a booking agency. NIEM reference is j:BookingReportingDistrictText
        /// </summary>
        /// <value>A district of a booking agency. NIEM reference is j:BookingReportingDistrictText</value>

        [DataMember(Name="reportingDistrict")]
        public List<NcTextType> ReportingDistrict { get; set; }

        /// <summary>
        /// A piece of property a subject keeps during booking. NIEM reference is j:BookingRetainedItem
        /// </summary>
        /// <value>A piece of property a subject keeps during booking. NIEM reference is j:BookingRetainedItem</value>

        [DataMember(Name="retainedItem")]
        public List<NcItemType> RetainedItem { get; set; }

        /// <summary>
        /// True if the information regarding a booking is to remain sealed and confidential; false otherwise. NIEM reference is j:BookingSealedIndicator
        /// </summary>
        /// <value>True if the information regarding a booking is to remain sealed and confidential; false otherwise. NIEM reference is j:BookingSealedIndicator</value>

        [DataMember(Name="isSealed")]
        public List<NiemXsboolean> IsSealed { get; set; }

        /// <summary>
        /// An official who searches a subject during a booking. NIEM reference is j:BookingSearchOfficial
        /// </summary>
        /// <value>An official who searches a subject during a booking. NIEM reference is j:BookingSearchOfficial</value>

        [DataMember(Name="searchOfficial")]
        public List<JEnforcementOfficialType> SearchOfficial { get; set; }

        /// <summary>
        /// A piece of property taken from a subject by an official during a booking. NIEM reference is j:BookingSeizedItem
        /// </summary>
        /// <value>A piece of property taken from a subject by an official during a booking. NIEM reference is j:BookingSeizedItem</value>

        [DataMember(Name="seizedItem")]
        public List<NcItemType> SeizedItem { get; set; }

        /// <summary>
        /// A person who is booked. NIEM reference is j:BookingSubject
        /// </summary>
        /// <value>A person who is booked. NIEM reference is j:BookingSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// A transfer of custody or transportation of a subject from one booking detention facility to another. NIEM reference is j:BookingSubjectCustodyTransfer
        /// </summary>
        /// <value>A transfer of custody or transportation of a subject from one booking detention facility to another. NIEM reference is j:BookingSubjectCustodyTransfer</value>

        [DataMember(Name="subjectCustodyTransfer")]
        public List<JCustodyTransferType> SubjectCustodyTransfer { get; set; }

        /// <summary>
        /// A telephone call (number) a subject makes while being booked or detained from an arrest. NIEM reference is j:BookingTelephoneCall
        /// </summary>
        /// <value>A telephone call (number) a subject makes while being booked or detained from an arrest. NIEM reference is j:BookingTelephoneCall</value>

        [DataMember(Name="telephoneCall")]
        public List<JBookingTelephoneCallType> TelephoneCall { get; set; }

        /// <summary>
        /// An official who moves a subject to a detention facility. NIEM reference is j:BookingTransportOfficial
        /// </summary>
        /// <value>An official who moves a subject to a detention facility. NIEM reference is j:BookingTransportOfficial</value>

        [DataMember(Name="transportOfficial")]
        public List<JEnforcementOfficialType> TransportOfficial { get; set; }

        /// <summary>
        /// An apprehension of a subject by a peace official based on an observed or a reported violation of a law or ordinance, an outstanding arrest warrant, or probable cause information. NIEM reference is j:Arrest
        /// </summary>
        /// <value>An apprehension of a subject by a peace official based on an observed or a reported violation of a law or ordinance, an outstanding arrest warrant, or probable cause information. NIEM reference is j:Arrest</value>

        [DataMember(Name="arrest")]
        public List<JArrestType> Arrest { get; set; }

        /// <summary>
        /// A kind of booking conducted. NIEM reference is j:BookingCategoryCode
        /// </summary>
        /// <value>A kind of booking conducted. NIEM reference is j:BookingCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NdexBookingCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A code that identifies the kind of weapon found in the possession of a subject at the time of booking. NIEM reference is j:SubjectArmedWithCode
        /// </summary>
        /// <value>A code that identifies the kind of weapon found in the possession of a subject at the time of booking. NIEM reference is j:SubjectArmedWithCode</value>

        [DataMember(Name="subjectArmedWithCode")]
        public List<UcrArresteeWeaponCodeType> SubjectArmedWithCode { get; set; }

        /// <summary>
        /// jBookingType JSON-LD context
        /// </summary>
        /// <value>jBookingType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjBookingTypeContextJsonldEnum for ../JSON-LD_Contexts/jBookingTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jBookingTypeContext.jsonld")]
            JSONLDContextsjBookingTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jBookingType JSON-LD context
        /// </summary>
        /// <value>jBookingType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JBookingType {\n");
            sb.Append("  IsAdditionalCharges: ").Append(IsAdditionalCharges).Append("\n");
            sb.Append("  InterviewObservation: ").Append(InterviewObservation).Append("\n");
            sb.Append("  IsIafis: ").Append(IsIafis).Append("\n");
            sb.Append("  FingerprintDate: ").Append(FingerprintDate).Append("\n");
            sb.Append("  SubjectArmedDescription: ").Append(SubjectArmedDescription).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  AgencyRecordIdentification: ").Append(AgencyRecordIdentification).Append("\n");
            sb.Append("  ArraignmentDate: ").Append(ArraignmentDate).Append("\n");
            sb.Append("  CourtCaseIdentification: ").Append(CourtCaseIdentification).Append("\n");
            sb.Append("  DepositedItem: ").Append(DepositedItem).Append("\n");
            sb.Append("  DetentionFacility: ").Append(DetentionFacility).Append("\n");
            sb.Append("  DocumentControlIdentification: ").Append(DocumentControlIdentification).Append("\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  Facility: ").Append(Facility).Append("\n");
            sb.Append("  FileIdentification: ").Append(FileIdentification).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  ReleaseCorrectionsAnalyst: ").Append(ReleaseCorrectionsAnalyst).Append("\n");
            sb.Append("  ReportingDistrict: ").Append(ReportingDistrict).Append("\n");
            sb.Append("  RetainedItem: ").Append(RetainedItem).Append("\n");
            sb.Append("  IsSealed: ").Append(IsSealed).Append("\n");
            sb.Append("  SearchOfficial: ").Append(SearchOfficial).Append("\n");
            sb.Append("  SeizedItem: ").Append(SeizedItem).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectCustodyTransfer: ").Append(SubjectCustodyTransfer).Append("\n");
            sb.Append("  TelephoneCall: ").Append(TelephoneCall).Append("\n");
            sb.Append("  TransportOfficial: ").Append(TransportOfficial).Append("\n");
            sb.Append("  Arrest: ").Append(Arrest).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  SubjectArmedWithCode: ").Append(SubjectArmedWithCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JBookingType)obj);
        }

        /// <summary>
        /// Returns true if JBookingType instances are equal
        /// </summary>
        /// <param name="other">Instance of JBookingType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JBookingType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsAdditionalCharges == other.IsAdditionalCharges ||
                    IsAdditionalCharges != null &&
                    IsAdditionalCharges.SequenceEqual(other.IsAdditionalCharges)
                ) && 
                (
                    InterviewObservation == other.InterviewObservation ||
                    InterviewObservation != null &&
                    InterviewObservation.SequenceEqual(other.InterviewObservation)
                ) && 
                (
                    IsIafis == other.IsIafis ||
                    IsIafis != null &&
                    IsIafis.SequenceEqual(other.IsIafis)
                ) && 
                (
                    FingerprintDate == other.FingerprintDate ||
                    FingerprintDate != null &&
                    FingerprintDate.SequenceEqual(other.FingerprintDate)
                ) && 
                (
                    SubjectArmedDescription == other.SubjectArmedDescription ||
                    SubjectArmedDescription != null &&
                    SubjectArmedDescription.SequenceEqual(other.SubjectArmedDescription)
                ) && 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.SequenceEqual(other.Agency)
                ) && 
                (
                    AgencyRecordIdentification == other.AgencyRecordIdentification ||
                    AgencyRecordIdentification != null &&
                    AgencyRecordIdentification.SequenceEqual(other.AgencyRecordIdentification)
                ) && 
                (
                    ArraignmentDate == other.ArraignmentDate ||
                    ArraignmentDate != null &&
                    ArraignmentDate.SequenceEqual(other.ArraignmentDate)
                ) && 
                (
                    CourtCaseIdentification == other.CourtCaseIdentification ||
                    CourtCaseIdentification != null &&
                    CourtCaseIdentification.SequenceEqual(other.CourtCaseIdentification)
                ) && 
                (
                    DepositedItem == other.DepositedItem ||
                    DepositedItem != null &&
                    DepositedItem.SequenceEqual(other.DepositedItem)
                ) && 
                (
                    DetentionFacility == other.DetentionFacility ||
                    DetentionFacility != null &&
                    DetentionFacility.SequenceEqual(other.DetentionFacility)
                ) && 
                (
                    DocumentControlIdentification == other.DocumentControlIdentification ||
                    DocumentControlIdentification != null &&
                    DocumentControlIdentification.SequenceEqual(other.DocumentControlIdentification)
                ) && 
                (
                    Employee == other.Employee ||
                    Employee != null &&
                    Employee.SequenceEqual(other.Employee)
                ) && 
                (
                    Facility == other.Facility ||
                    Facility != null &&
                    Facility.SequenceEqual(other.Facility)
                ) && 
                (
                    FileIdentification == other.FileIdentification ||
                    FileIdentification != null &&
                    FileIdentification.SequenceEqual(other.FileIdentification)
                ) && 
                (
                    Release == other.Release ||
                    Release != null &&
                    Release.SequenceEqual(other.Release)
                ) && 
                (
                    ReleaseCorrectionsAnalyst == other.ReleaseCorrectionsAnalyst ||
                    ReleaseCorrectionsAnalyst != null &&
                    ReleaseCorrectionsAnalyst.SequenceEqual(other.ReleaseCorrectionsAnalyst)
                ) && 
                (
                    ReportingDistrict == other.ReportingDistrict ||
                    ReportingDistrict != null &&
                    ReportingDistrict.SequenceEqual(other.ReportingDistrict)
                ) && 
                (
                    RetainedItem == other.RetainedItem ||
                    RetainedItem != null &&
                    RetainedItem.SequenceEqual(other.RetainedItem)
                ) && 
                (
                    IsSealed == other.IsSealed ||
                    IsSealed != null &&
                    IsSealed.SequenceEqual(other.IsSealed)
                ) && 
                (
                    SearchOfficial == other.SearchOfficial ||
                    SearchOfficial != null &&
                    SearchOfficial.SequenceEqual(other.SearchOfficial)
                ) && 
                (
                    SeizedItem == other.SeizedItem ||
                    SeizedItem != null &&
                    SeizedItem.SequenceEqual(other.SeizedItem)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    SubjectCustodyTransfer == other.SubjectCustodyTransfer ||
                    SubjectCustodyTransfer != null &&
                    SubjectCustodyTransfer.SequenceEqual(other.SubjectCustodyTransfer)
                ) && 
                (
                    TelephoneCall == other.TelephoneCall ||
                    TelephoneCall != null &&
                    TelephoneCall.SequenceEqual(other.TelephoneCall)
                ) && 
                (
                    TransportOfficial == other.TransportOfficial ||
                    TransportOfficial != null &&
                    TransportOfficial.SequenceEqual(other.TransportOfficial)
                ) && 
                (
                    Arrest == other.Arrest ||
                    Arrest != null &&
                    Arrest.SequenceEqual(other.Arrest)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    SubjectArmedWithCode == other.SubjectArmedWithCode ||
                    SubjectArmedWithCode != null &&
                    SubjectArmedWithCode.SequenceEqual(other.SubjectArmedWithCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsAdditionalCharges != null)
                    hashCode = hashCode * 59 + IsAdditionalCharges.GetHashCode();
                    if (InterviewObservation != null)
                    hashCode = hashCode * 59 + InterviewObservation.GetHashCode();
                    if (IsIafis != null)
                    hashCode = hashCode * 59 + IsIafis.GetHashCode();
                    if (FingerprintDate != null)
                    hashCode = hashCode * 59 + FingerprintDate.GetHashCode();
                    if (SubjectArmedDescription != null)
                    hashCode = hashCode * 59 + SubjectArmedDescription.GetHashCode();
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    if (AgencyRecordIdentification != null)
                    hashCode = hashCode * 59 + AgencyRecordIdentification.GetHashCode();
                    if (ArraignmentDate != null)
                    hashCode = hashCode * 59 + ArraignmentDate.GetHashCode();
                    if (CourtCaseIdentification != null)
                    hashCode = hashCode * 59 + CourtCaseIdentification.GetHashCode();
                    if (DepositedItem != null)
                    hashCode = hashCode * 59 + DepositedItem.GetHashCode();
                    if (DetentionFacility != null)
                    hashCode = hashCode * 59 + DetentionFacility.GetHashCode();
                    if (DocumentControlIdentification != null)
                    hashCode = hashCode * 59 + DocumentControlIdentification.GetHashCode();
                    if (Employee != null)
                    hashCode = hashCode * 59 + Employee.GetHashCode();
                    if (Facility != null)
                    hashCode = hashCode * 59 + Facility.GetHashCode();
                    if (FileIdentification != null)
                    hashCode = hashCode * 59 + FileIdentification.GetHashCode();
                    if (Release != null)
                    hashCode = hashCode * 59 + Release.GetHashCode();
                    if (ReleaseCorrectionsAnalyst != null)
                    hashCode = hashCode * 59 + ReleaseCorrectionsAnalyst.GetHashCode();
                    if (ReportingDistrict != null)
                    hashCode = hashCode * 59 + ReportingDistrict.GetHashCode();
                    if (RetainedItem != null)
                    hashCode = hashCode * 59 + RetainedItem.GetHashCode();
                    if (IsSealed != null)
                    hashCode = hashCode * 59 + IsSealed.GetHashCode();
                    if (SearchOfficial != null)
                    hashCode = hashCode * 59 + SearchOfficial.GetHashCode();
                    if (SeizedItem != null)
                    hashCode = hashCode * 59 + SeizedItem.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (SubjectCustodyTransfer != null)
                    hashCode = hashCode * 59 + SubjectCustodyTransfer.GetHashCode();
                    if (TelephoneCall != null)
                    hashCode = hashCode * 59 + TelephoneCall.GetHashCode();
                    if (TransportOfficial != null)
                    hashCode = hashCode * 59 + TransportOfficial.GetHashCode();
                    if (Arrest != null)
                    hashCode = hashCode * 59 + Arrest.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (SubjectArmedWithCode != null)
                    hashCode = hashCode * 59 + SubjectArmedWithCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JBookingType left, JBookingType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JBookingType left, JBookingType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
