/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the details of written instructions from a physician or dentist to a druggist concerning the form and dosage of a drug to be issued to a given patient
    /// </summary>
    [DataContract]
    public partial class HsPrescriptionType : NcActivityType, IEquatable<HsPrescriptionType>
    { 
        /// <summary>
        /// A pharmacy or pharmacist who filled the prescription. NIEM reference is hs:Dispenser
        /// </summary>
        /// <value>A pharmacy or pharmacist who filled the prescription. NIEM reference is hs:Dispenser</value>

        [DataMember(Name="dispenser")]
        public List<NcEntityType> Dispenser { get; set; }

        /// <summary>
        /// A legal or illegal substance that can be used as a medicine or a narcotic. NIEM reference is nc:Drug
        /// </summary>
        /// <value>A legal or illegal substance that can be used as a medicine or a narcotic. NIEM reference is nc:Drug</value>

        [DataMember(Name="drug")]
        public List<NcDrugType> Drug { get; set; }

        /// <summary>
        /// A medical professional or organization that authorizes a prescription drug. NIEM reference is hs:Prescriber
        /// </summary>
        /// <value>A medical professional or organization that authorizes a prescription drug. NIEM reference is hs:Prescriber</value>

        [DataMember(Name="prescriber")]
        public List<NcEntityType> Prescriber { get; set; }

        /// <summary>
        /// A date or date range when the medication was last taken. NIEM reference is hs:PrescriptionLastTakenDate
        /// </summary>
        /// <value>A date or date range when the medication was last taken. NIEM reference is hs:PrescriptionLastTakenDate</value>

        [DataMember(Name="lastTakenDate")]
        public List<NcDateType> LastTakenDate { get; set; }

        /// <summary>
        /// A description of the treatment reason or condition being treated with the medication. This should include any &#x27;off label&#x27; use. NIEM reference is hs:PrescriptionTreatmentReasonText
        /// </summary>
        /// <value>A description of the treatment reason or condition being treated with the medication. This should include any &#x27;off label&#x27; use. NIEM reference is hs:PrescriptionTreatmentReasonText</value>

        [DataMember(Name="treatmentReason")]
        public List<NcTextType> TreatmentReason { get; set; }

        /// <summary>
        /// A set of instructions for use of medication e.g. daily with food for 7 days, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:PrescriptionUseInstructionsText
        /// </summary>
        /// <value>A set of instructions for use of medication e.g. daily with food for 7 days, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:PrescriptionUseInstructionsText</value>

        [DataMember(Name="useInstructions")]
        public List<NcTextType> UseInstructions { get; set; }

        /// <summary>
        /// A total count of a drug dispensed to a patient NIEM reference is hs:DrugDispensedQuantity
        /// </summary>
        /// <value>A total count of a drug dispensed to a patient NIEM reference is hs:DrugDispensedQuantity</value>

        [DataMember(Name="drugDispensedQuantity")]
        public List<NcQuantityType> DrugDispensedQuantity { get; set; }

        /// <summary>
        /// A unit of measure for the quantity dispensed of a drug. NIEM reference is hs:DrugDosageUnitsCode
        /// </summary>
        /// <value>A unit of measure for the quantity dispensed of a drug. NIEM reference is hs:DrugDosageUnitsCode</value>

        [DataMember(Name="drugDosageUnitsCode")]
        public List<HsDrugDosageUnitsCodeType> DrugDosageUnitsCode { get; set; }

        /// <summary>
        /// A unit of measure for the quantity dispensed of a drug. NIEM reference is hs:DrugDosageUnitsText
        /// </summary>
        /// <value>A unit of measure for the quantity dispensed of a drug. NIEM reference is hs:DrugDosageUnitsText</value>

        [DataMember(Name="drugDosageUnits")]
        public List<NcTextType> DrugDosageUnits { get; set; }

        /// <summary>
        /// True if a prescription is partially filled; false otherwise. NIEM reference is hs:DrugPartialFillIndicator
        /// </summary>
        /// <value>True if a prescription is partially filled; false otherwise. NIEM reference is hs:DrugPartialFillIndicator</value>

        [DataMember(Name="isDrugPartialFill")]
        public List<NiemXsboolean> IsDrugPartialFill { get; set; }

        /// <summary>
        /// A sequential number representing the sequential filling of a prescription. 0 indicates an original dispensing instead of a refill. NIEM reference is hs:DrugRefillNumberCountQuantity
        /// </summary>
        /// <value>A sequential number representing the sequential filling of a prescription. 0 indicates an original dispensing instead of a refill. NIEM reference is hs:DrugRefillNumberCountQuantity</value>

        [DataMember(Name="drugRefillNumberCountQuantity")]
        public List<NcQuantityType> DrugRefillNumberCountQuantity { get; set; }

        /// <summary>
        /// A number of times a prescriber has authorized a prescription to be refilled. NIEM reference is hs:DrugRefillsAuthorizedQuantity
        /// </summary>
        /// <value>A number of times a prescriber has authorized a prescription to be refilled. NIEM reference is hs:DrugRefillsAuthorizedQuantity</value>

        [DataMember(Name="drugRefillsAuthorizedQuantity")]
        public List<NcQuantityType> DrugRefillsAuthorizedQuantity { get; set; }

        /// <summary>
        /// A method of payment. NIEM reference is hs:MethodOfPaymentCode
        /// </summary>
        /// <value>A method of payment. NIEM reference is hs:MethodOfPaymentCode</value>

        [DataMember(Name="methodOfPaymentCode")]
        public List<HsMethodOfPaymentCodeType> MethodOfPaymentCode { get; set; }

        /// <summary>
        /// A method of payment. NIEM reference is hs:MethodOfPaymentText
        /// </summary>
        /// <value>A method of payment. NIEM reference is hs:MethodOfPaymentText</value>

        [DataMember(Name="methodOfPayment")]
        public List<NcTextType> MethodOfPayment { get; set; }

        /// <summary>
        /// A person who is professionally qualified to prepare and dispense medicinal drugs. NIEM reference is hs:Pharmacist
        /// </summary>
        /// <value>A person who is professionally qualified to prepare and dispense medicinal drugs. NIEM reference is hs:Pharmacist</value>

        [DataMember(Name="pharmacist")]
        public List<HsPharmacistType> Pharmacist { get; set; }

        /// <summary>
        /// A date on which a prescription was filled. NIEM reference is hs:PrescriptionFilledDate
        /// </summary>
        /// <value>A date on which a prescription was filled. NIEM reference is hs:PrescriptionFilledDate</value>

        [DataMember(Name="filledDate")]
        public List<NcDateType> FilledDate { get; set; }

        /// <summary>
        /// A standardized and normalized cross-platform RxCode for electronic prescriptions to capture the prescribed drug product identification information. Part of the Unified Medical Language System (UMLS) NIEM reference is hs:PrescriptionNormCodeText
        /// </summary>
        /// <value>A standardized and normalized cross-platform RxCode for electronic prescriptions to capture the prescribed drug product identification information. Part of the Unified Medical Language System (UMLS) NIEM reference is hs:PrescriptionNormCodeText</value>

        [DataMember(Name="normCode")]
        public List<NcTextType> NormCode { get; set; }

        /// <summary>
        /// A date on which a prescription received by a patient or a patient&#x27;s agent. NIEM reference is hs:PrescriptionSoldDate
        /// </summary>
        /// <value>A date on which a prescription received by a patient or a patient&#x27;s agent. NIEM reference is hs:PrescriptionSoldDate</value>

        [DataMember(Name="soldDate")]
        public List<NcDateType> SoldDate { get; set; }

        /// <summary>
        /// A date on which a prescription was written by a prescriber. NIEM reference is hs:PrescriptionWrittenDate
        /// </summary>
        /// <value>A date on which a prescription was written by a prescriber. NIEM reference is hs:PrescriptionWrittenDate</value>

        [DataMember(Name="writtenDate")]
        public List<NcDateType> WrittenDate { get; set; }

        /// <summary>
        /// An identification assigned to a state issued serialized prescription blank as well as the state which issued it. NIEM reference is hs:StateIssuedRxSerialNumberIdentification
        /// </summary>
        /// <value>An identification assigned to a state issued serialized prescription blank as well as the state which issued it. NIEM reference is hs:StateIssuedRxSerialNumberIdentification</value>

        [DataMember(Name="stateIssuedRxSerialNumberIdentification")]
        public List<NcIdentificationType> StateIssuedRxSerialNumberIdentification { get; set; }

        /// <summary>
        /// A transmission method by which a pharmacy receives a prescription. NIEM reference is hs:TransmissionFormOfRxOriginCode
        /// </summary>
        /// <value>A transmission method by which a pharmacy receives a prescription. NIEM reference is hs:TransmissionFormOfRxOriginCode</value>

        [DataMember(Name="transmissionFormOfRxOriginCode")]
        public List<HsTransmissionFormOfRxOriginCodeType> TransmissionFormOfRxOriginCode { get; set; }

        /// <summary>
        /// A transmission method by which a pharmacy receives a prescription. NIEM reference is hs:TransmissionFormOfRxOriginText
        /// </summary>
        /// <value>A transmission method by which a pharmacy receives a prescription. NIEM reference is hs:TransmissionFormOfRxOriginText</value>

        [DataMember(Name="transmissionFormOfRxOrigin")]
        public List<NcTextType> TransmissionFormOfRxOrigin { get; set; }

        /// <summary>
        /// hsPrescriptionType JSON-LD context
        /// </summary>
        /// <value>hsPrescriptionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsPrescriptionTypeContextJsonldEnum for ../JSON-LD_Contexts/hsPrescriptionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsPrescriptionTypeContext.jsonld")]
            JSONLDContextshsPrescriptionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsPrescriptionType JSON-LD context
        /// </summary>
        /// <value>hsPrescriptionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsPrescriptionType {\n");
            sb.Append("  Dispenser: ").Append(Dispenser).Append("\n");
            sb.Append("  Drug: ").Append(Drug).Append("\n");
            sb.Append("  Prescriber: ").Append(Prescriber).Append("\n");
            sb.Append("  LastTakenDate: ").Append(LastTakenDate).Append("\n");
            sb.Append("  TreatmentReason: ").Append(TreatmentReason).Append("\n");
            sb.Append("  UseInstructions: ").Append(UseInstructions).Append("\n");
            sb.Append("  DrugDispensedQuantity: ").Append(DrugDispensedQuantity).Append("\n");
            sb.Append("  DrugDosageUnitsCode: ").Append(DrugDosageUnitsCode).Append("\n");
            sb.Append("  DrugDosageUnits: ").Append(DrugDosageUnits).Append("\n");
            sb.Append("  IsDrugPartialFill: ").Append(IsDrugPartialFill).Append("\n");
            sb.Append("  DrugRefillNumberCountQuantity: ").Append(DrugRefillNumberCountQuantity).Append("\n");
            sb.Append("  DrugRefillsAuthorizedQuantity: ").Append(DrugRefillsAuthorizedQuantity).Append("\n");
            sb.Append("  MethodOfPaymentCode: ").Append(MethodOfPaymentCode).Append("\n");
            sb.Append("  MethodOfPayment: ").Append(MethodOfPayment).Append("\n");
            sb.Append("  Pharmacist: ").Append(Pharmacist).Append("\n");
            sb.Append("  FilledDate: ").Append(FilledDate).Append("\n");
            sb.Append("  NormCode: ").Append(NormCode).Append("\n");
            sb.Append("  SoldDate: ").Append(SoldDate).Append("\n");
            sb.Append("  WrittenDate: ").Append(WrittenDate).Append("\n");
            sb.Append("  StateIssuedRxSerialNumberIdentification: ").Append(StateIssuedRxSerialNumberIdentification).Append("\n");
            sb.Append("  TransmissionFormOfRxOriginCode: ").Append(TransmissionFormOfRxOriginCode).Append("\n");
            sb.Append("  TransmissionFormOfRxOrigin: ").Append(TransmissionFormOfRxOrigin).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsPrescriptionType)obj);
        }

        /// <summary>
        /// Returns true if HsPrescriptionType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsPrescriptionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsPrescriptionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Dispenser == other.Dispenser ||
                    Dispenser != null &&
                    Dispenser.SequenceEqual(other.Dispenser)
                ) && 
                (
                    Drug == other.Drug ||
                    Drug != null &&
                    Drug.SequenceEqual(other.Drug)
                ) && 
                (
                    Prescriber == other.Prescriber ||
                    Prescriber != null &&
                    Prescriber.SequenceEqual(other.Prescriber)
                ) && 
                (
                    LastTakenDate == other.LastTakenDate ||
                    LastTakenDate != null &&
                    LastTakenDate.SequenceEqual(other.LastTakenDate)
                ) && 
                (
                    TreatmentReason == other.TreatmentReason ||
                    TreatmentReason != null &&
                    TreatmentReason.SequenceEqual(other.TreatmentReason)
                ) && 
                (
                    UseInstructions == other.UseInstructions ||
                    UseInstructions != null &&
                    UseInstructions.SequenceEqual(other.UseInstructions)
                ) && 
                (
                    DrugDispensedQuantity == other.DrugDispensedQuantity ||
                    DrugDispensedQuantity != null &&
                    DrugDispensedQuantity.SequenceEqual(other.DrugDispensedQuantity)
                ) && 
                (
                    DrugDosageUnitsCode == other.DrugDosageUnitsCode ||
                    DrugDosageUnitsCode != null &&
                    DrugDosageUnitsCode.SequenceEqual(other.DrugDosageUnitsCode)
                ) && 
                (
                    DrugDosageUnits == other.DrugDosageUnits ||
                    DrugDosageUnits != null &&
                    DrugDosageUnits.SequenceEqual(other.DrugDosageUnits)
                ) && 
                (
                    IsDrugPartialFill == other.IsDrugPartialFill ||
                    IsDrugPartialFill != null &&
                    IsDrugPartialFill.SequenceEqual(other.IsDrugPartialFill)
                ) && 
                (
                    DrugRefillNumberCountQuantity == other.DrugRefillNumberCountQuantity ||
                    DrugRefillNumberCountQuantity != null &&
                    DrugRefillNumberCountQuantity.SequenceEqual(other.DrugRefillNumberCountQuantity)
                ) && 
                (
                    DrugRefillsAuthorizedQuantity == other.DrugRefillsAuthorizedQuantity ||
                    DrugRefillsAuthorizedQuantity != null &&
                    DrugRefillsAuthorizedQuantity.SequenceEqual(other.DrugRefillsAuthorizedQuantity)
                ) && 
                (
                    MethodOfPaymentCode == other.MethodOfPaymentCode ||
                    MethodOfPaymentCode != null &&
                    MethodOfPaymentCode.SequenceEqual(other.MethodOfPaymentCode)
                ) && 
                (
                    MethodOfPayment == other.MethodOfPayment ||
                    MethodOfPayment != null &&
                    MethodOfPayment.SequenceEqual(other.MethodOfPayment)
                ) && 
                (
                    Pharmacist == other.Pharmacist ||
                    Pharmacist != null &&
                    Pharmacist.SequenceEqual(other.Pharmacist)
                ) && 
                (
                    FilledDate == other.FilledDate ||
                    FilledDate != null &&
                    FilledDate.SequenceEqual(other.FilledDate)
                ) && 
                (
                    NormCode == other.NormCode ||
                    NormCode != null &&
                    NormCode.SequenceEqual(other.NormCode)
                ) && 
                (
                    SoldDate == other.SoldDate ||
                    SoldDate != null &&
                    SoldDate.SequenceEqual(other.SoldDate)
                ) && 
                (
                    WrittenDate == other.WrittenDate ||
                    WrittenDate != null &&
                    WrittenDate.SequenceEqual(other.WrittenDate)
                ) && 
                (
                    StateIssuedRxSerialNumberIdentification == other.StateIssuedRxSerialNumberIdentification ||
                    StateIssuedRxSerialNumberIdentification != null &&
                    StateIssuedRxSerialNumberIdentification.SequenceEqual(other.StateIssuedRxSerialNumberIdentification)
                ) && 
                (
                    TransmissionFormOfRxOriginCode == other.TransmissionFormOfRxOriginCode ||
                    TransmissionFormOfRxOriginCode != null &&
                    TransmissionFormOfRxOriginCode.SequenceEqual(other.TransmissionFormOfRxOriginCode)
                ) && 
                (
                    TransmissionFormOfRxOrigin == other.TransmissionFormOfRxOrigin ||
                    TransmissionFormOfRxOrigin != null &&
                    TransmissionFormOfRxOrigin.SequenceEqual(other.TransmissionFormOfRxOrigin)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Dispenser != null)
                    hashCode = hashCode * 59 + Dispenser.GetHashCode();
                    if (Drug != null)
                    hashCode = hashCode * 59 + Drug.GetHashCode();
                    if (Prescriber != null)
                    hashCode = hashCode * 59 + Prescriber.GetHashCode();
                    if (LastTakenDate != null)
                    hashCode = hashCode * 59 + LastTakenDate.GetHashCode();
                    if (TreatmentReason != null)
                    hashCode = hashCode * 59 + TreatmentReason.GetHashCode();
                    if (UseInstructions != null)
                    hashCode = hashCode * 59 + UseInstructions.GetHashCode();
                    if (DrugDispensedQuantity != null)
                    hashCode = hashCode * 59 + DrugDispensedQuantity.GetHashCode();
                    if (DrugDosageUnitsCode != null)
                    hashCode = hashCode * 59 + DrugDosageUnitsCode.GetHashCode();
                    if (DrugDosageUnits != null)
                    hashCode = hashCode * 59 + DrugDosageUnits.GetHashCode();
                    if (IsDrugPartialFill != null)
                    hashCode = hashCode * 59 + IsDrugPartialFill.GetHashCode();
                    if (DrugRefillNumberCountQuantity != null)
                    hashCode = hashCode * 59 + DrugRefillNumberCountQuantity.GetHashCode();
                    if (DrugRefillsAuthorizedQuantity != null)
                    hashCode = hashCode * 59 + DrugRefillsAuthorizedQuantity.GetHashCode();
                    if (MethodOfPaymentCode != null)
                    hashCode = hashCode * 59 + MethodOfPaymentCode.GetHashCode();
                    if (MethodOfPayment != null)
                    hashCode = hashCode * 59 + MethodOfPayment.GetHashCode();
                    if (Pharmacist != null)
                    hashCode = hashCode * 59 + Pharmacist.GetHashCode();
                    if (FilledDate != null)
                    hashCode = hashCode * 59 + FilledDate.GetHashCode();
                    if (NormCode != null)
                    hashCode = hashCode * 59 + NormCode.GetHashCode();
                    if (SoldDate != null)
                    hashCode = hashCode * 59 + SoldDate.GetHashCode();
                    if (WrittenDate != null)
                    hashCode = hashCode * 59 + WrittenDate.GetHashCode();
                    if (StateIssuedRxSerialNumberIdentification != null)
                    hashCode = hashCode * 59 + StateIssuedRxSerialNumberIdentification.GetHashCode();
                    if (TransmissionFormOfRxOriginCode != null)
                    hashCode = hashCode * 59 + TransmissionFormOfRxOriginCode.GetHashCode();
                    if (TransmissionFormOfRxOrigin != null)
                    hashCode = hashCode * 59 + TransmissionFormOfRxOrigin.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsPrescriptionType left, HsPrescriptionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsPrescriptionType left, HsPrescriptionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
