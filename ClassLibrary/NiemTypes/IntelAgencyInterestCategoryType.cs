/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a groupings of persons by the reason they are of interest to intelligence.
    /// </summary>
    [DataContract]
    public partial class IntelAgencyInterestCategoryType : IEquatable<IntelAgencyInterestCategoryType>
    { 
        /// <summary>
        /// A general category or classification of persons by the reason they are of interest to intelligence. NIEM reference is intel:SubjectCategoryCodeText
        /// </summary>
        /// <value>A general category or classification of persons by the reason they are of interest to intelligence. NIEM reference is intel:SubjectCategoryCodeText</value>

        [DataMember(Name="subjectCategoryCode")]
        public List<NcTextType> SubjectCategoryCode { get; set; }

        /// <summary>
        /// A VGTOF Group Member Capability Criteria for Entry NIEM reference is intel:FBIECRCode
        /// </summary>
        /// <value>A VGTOF Group Member Capability Criteria for Entry NIEM reference is intel:FBIECRCode</value>

        [DataMember(Name="fbiEcrCode")]
        public List<NcicECRCodeType> FbiEcrCode { get; set; }

        /// <summary>
        /// A Department of State code that identifies the reason that a group of people are of interest to intelligence. NIEM reference is intel:StateINACodeText
        /// </summary>
        /// <value>A Department of State code that identifies the reason that a group of people are of interest to intelligence. NIEM reference is intel:StateINACodeText</value>

        [DataMember(Name="stateInaCode")]
        public List<NcTextType> StateInaCode { get; set; }

        /// <summary>
        /// An additional person-categorization system that groups of people by the reason they are of interest to intelligence. NIEM reference is intel:AgencyInterestOtherCategory
        /// </summary>
        /// <value>An additional person-categorization system that groups of people by the reason they are of interest to intelligence. NIEM reference is intel:AgencyInterestOtherCategory</value>

        [DataMember(Name="agencyInterestOtherCategory")]
        public List<IntelAgencyInterestOtherCategoryType> AgencyInterestOtherCategory { get; set; }

        /// <summary>
        /// intelAgencyInterestCategoryType JSON-LD context
        /// </summary>
        /// <value>intelAgencyInterestCategoryType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsintelAgencyInterestCategoryTypeContextJsonldEnum for ../JSON-LD_Contexts/intelAgencyInterestCategoryTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/intelAgencyInterestCategoryTypeContext.jsonld")]
            JSONLDContextsintelAgencyInterestCategoryTypeContextJsonldEnum = 0        }

        /// <summary>
        /// intelAgencyInterestCategoryType JSON-LD context
        /// </summary>
        /// <value>intelAgencyInterestCategoryType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntelAgencyInterestCategoryType {\n");
            sb.Append("  SubjectCategoryCode: ").Append(SubjectCategoryCode).Append("\n");
            sb.Append("  FbiEcrCode: ").Append(FbiEcrCode).Append("\n");
            sb.Append("  StateInaCode: ").Append(StateInaCode).Append("\n");
            sb.Append("  AgencyInterestOtherCategory: ").Append(AgencyInterestOtherCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IntelAgencyInterestCategoryType)obj);
        }

        /// <summary>
        /// Returns true if IntelAgencyInterestCategoryType instances are equal
        /// </summary>
        /// <param name="other">Instance of IntelAgencyInterestCategoryType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntelAgencyInterestCategoryType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubjectCategoryCode == other.SubjectCategoryCode ||
                    SubjectCategoryCode != null &&
                    SubjectCategoryCode.SequenceEqual(other.SubjectCategoryCode)
                ) && 
                (
                    FbiEcrCode == other.FbiEcrCode ||
                    FbiEcrCode != null &&
                    FbiEcrCode.SequenceEqual(other.FbiEcrCode)
                ) && 
                (
                    StateInaCode == other.StateInaCode ||
                    StateInaCode != null &&
                    StateInaCode.SequenceEqual(other.StateInaCode)
                ) && 
                (
                    AgencyInterestOtherCategory == other.AgencyInterestOtherCategory ||
                    AgencyInterestOtherCategory != null &&
                    AgencyInterestOtherCategory.SequenceEqual(other.AgencyInterestOtherCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubjectCategoryCode != null)
                    hashCode = hashCode * 59 + SubjectCategoryCode.GetHashCode();
                    if (FbiEcrCode != null)
                    hashCode = hashCode * 59 + FbiEcrCode.GetHashCode();
                    if (StateInaCode != null)
                    hashCode = hashCode * 59 + StateInaCode.GetHashCode();
                    if (AgencyInterestOtherCategory != null)
                    hashCode = hashCode * 59 + AgencyInterestOtherCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IntelAgencyInterestCategoryType left, IntelAgencyInterestCategoryType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IntelAgencyInterestCategoryType left, IntelAgencyInterestCategoryType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
