/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a military summary.
    /// </summary>
    [DataContract]
    public partial class JMilitarySummaryAugmentationType : IEquatable<JMilitarySummaryAugmentationType>
    { 
        /// <summary>
        /// A country in whose military a person served. NIEM reference is nc:MilitaryCountry
        /// </summary>
        /// <value>A country in whose military a person served. NIEM reference is nc:MilitaryCountry</value>

        [DataMember(Name="militaryCountry")]
        public List<NcCountryType> MilitaryCountry { get; set; }

        /// <summary>
        /// A rank at time of a person was discharged from military service. NIEM reference is j:MilitaryDischargeRankText
        /// </summary>
        /// <value>A rank at time of a person was discharged from military service. NIEM reference is j:MilitaryDischargeRankText</value>

        [DataMember(Name="militaryDischargeRank")]
        public List<NcTextType> MilitaryDischargeRank { get; set; }

        /// <summary>
        /// An activity assigned to a person by the military for the purpose of self-improvement, punishment, or restitution. NIEM reference is j:MilitaryDisciplinaryAction
        /// </summary>
        /// <value>An activity assigned to a person by the military for the purpose of self-improvement, punishment, or restitution. NIEM reference is j:MilitaryDisciplinaryAction</value>

        [DataMember(Name="militaryDisciplinaryAction")]
        public List<NcDisciplinaryActionType> MilitaryDisciplinaryAction { get; set; }

        /// <summary>
        /// A description of the duties and duty stations (locations) encompassed within period of military service. NIEM reference is j:MilitaryDutiesText
        /// </summary>
        /// <value>A description of the duties and duty stations (locations) encompassed within period of military service. NIEM reference is j:MilitaryDutiesText</value>

        [DataMember(Name="militaryDuties")]
        public List<NcTextType> MilitaryDuties { get; set; }

        /// <summary>
        /// A date a person enlisted in the military. NIEM reference is j:MilitaryEnlistmentDate
        /// </summary>
        /// <value>A date a person enlisted in the military. NIEM reference is j:MilitaryEnlistmentDate</value>

        [DataMember(Name="militaryEnlistmentDate")]
        public List<NcDateType> MilitaryEnlistmentDate { get; set; }

        /// <summary>
        /// A highest rank achieved by a person in military service. NIEM reference is j:MilitaryHighRankText
        /// </summary>
        /// <value>A highest rank achieved by a person in military service. NIEM reference is j:MilitaryHighRankText</value>

        [DataMember(Name="militaryHighRank")]
        public List<NcTextType> MilitaryHighRank { get; set; }

        /// <summary>
        /// A military occupational specialty of a person. NIEM reference is j:MilitaryWorkSkillText
        /// </summary>
        /// <value>A military occupational specialty of a person. NIEM reference is j:MilitaryWorkSkillText</value>

        [DataMember(Name="militaryWorkSkill")]
        public List<NcTextType> MilitaryWorkSkill { get; set; }

        /// <summary>
        /// jMilitarySummaryAugmentationType JSON-LD context
        /// </summary>
        /// <value>jMilitarySummaryAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjMilitarySummaryAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jMilitarySummaryAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jMilitarySummaryAugmentationTypeContext.jsonld")]
            JSONLDContextsjMilitarySummaryAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jMilitarySummaryAugmentationType JSON-LD context
        /// </summary>
        /// <value>jMilitarySummaryAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JMilitarySummaryAugmentationType {\n");
            sb.Append("  MilitaryCountry: ").Append(MilitaryCountry).Append("\n");
            sb.Append("  MilitaryDischargeRank: ").Append(MilitaryDischargeRank).Append("\n");
            sb.Append("  MilitaryDisciplinaryAction: ").Append(MilitaryDisciplinaryAction).Append("\n");
            sb.Append("  MilitaryDuties: ").Append(MilitaryDuties).Append("\n");
            sb.Append("  MilitaryEnlistmentDate: ").Append(MilitaryEnlistmentDate).Append("\n");
            sb.Append("  MilitaryHighRank: ").Append(MilitaryHighRank).Append("\n");
            sb.Append("  MilitaryWorkSkill: ").Append(MilitaryWorkSkill).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JMilitarySummaryAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JMilitarySummaryAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JMilitarySummaryAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JMilitarySummaryAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MilitaryCountry == other.MilitaryCountry ||
                    MilitaryCountry != null &&
                    MilitaryCountry.SequenceEqual(other.MilitaryCountry)
                ) && 
                (
                    MilitaryDischargeRank == other.MilitaryDischargeRank ||
                    MilitaryDischargeRank != null &&
                    MilitaryDischargeRank.SequenceEqual(other.MilitaryDischargeRank)
                ) && 
                (
                    MilitaryDisciplinaryAction == other.MilitaryDisciplinaryAction ||
                    MilitaryDisciplinaryAction != null &&
                    MilitaryDisciplinaryAction.SequenceEqual(other.MilitaryDisciplinaryAction)
                ) && 
                (
                    MilitaryDuties == other.MilitaryDuties ||
                    MilitaryDuties != null &&
                    MilitaryDuties.SequenceEqual(other.MilitaryDuties)
                ) && 
                (
                    MilitaryEnlistmentDate == other.MilitaryEnlistmentDate ||
                    MilitaryEnlistmentDate != null &&
                    MilitaryEnlistmentDate.SequenceEqual(other.MilitaryEnlistmentDate)
                ) && 
                (
                    MilitaryHighRank == other.MilitaryHighRank ||
                    MilitaryHighRank != null &&
                    MilitaryHighRank.SequenceEqual(other.MilitaryHighRank)
                ) && 
                (
                    MilitaryWorkSkill == other.MilitaryWorkSkill ||
                    MilitaryWorkSkill != null &&
                    MilitaryWorkSkill.SequenceEqual(other.MilitaryWorkSkill)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MilitaryCountry != null)
                    hashCode = hashCode * 59 + MilitaryCountry.GetHashCode();
                    if (MilitaryDischargeRank != null)
                    hashCode = hashCode * 59 + MilitaryDischargeRank.GetHashCode();
                    if (MilitaryDisciplinaryAction != null)
                    hashCode = hashCode * 59 + MilitaryDisciplinaryAction.GetHashCode();
                    if (MilitaryDuties != null)
                    hashCode = hashCode * 59 + MilitaryDuties.GetHashCode();
                    if (MilitaryEnlistmentDate != null)
                    hashCode = hashCode * 59 + MilitaryEnlistmentDate.GetHashCode();
                    if (MilitaryHighRank != null)
                    hashCode = hashCode * 59 + MilitaryHighRank.GetHashCode();
                    if (MilitaryWorkSkill != null)
                    hashCode = hashCode * 59 + MilitaryWorkSkill.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JMilitarySummaryAugmentationType left, JMilitarySummaryAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JMilitarySummaryAugmentationType left, JMilitarySummaryAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
