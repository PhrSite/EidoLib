/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an alarm event
    /// </summary>
    [DataContract]
    public partial class EmAlarmEventType : NcActivityType, IEquatable<EmAlarmEventType>
    { 
        /// <summary>
        /// A kind of alarm event NIEM reference is em:AlarmEventCategoryCode
        /// </summary>
        /// <value>A kind of alarm event NIEM reference is em:AlarmEventCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<ApcoAlarmEventCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of event which resulted in an alarm NIEM reference is em:AlarmEventCategoryText
        /// </summary>
        /// <value>A kind of event which resulted in an alarm NIEM reference is em:AlarmEventCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A telephone number of the alarm event requester NIEM reference is em:AlarmEventCallBackTelephoneNumber
        /// </summary>
        /// <value>A telephone number of the alarm event requester NIEM reference is em:AlarmEventCallBackTelephoneNumber</value>

        [DataMember(Name="callBackTelephoneNumber")]
        public List<NcTelephoneNumberType> CallBackTelephoneNumber { get; set; }

        /// <summary>
        /// A location of an alarm event NIEM reference is em:AlarmEventLocation
        /// </summary>
        /// <value>A location of an alarm event NIEM reference is em:AlarmEventLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A kind of location at which an alarm event occurs NIEM reference is em:AlarmEventLocationCategoryCode
        /// </summary>
        /// <value>A kind of location at which an alarm event occurs NIEM reference is em:AlarmEventLocationCategoryCode</value>

        [DataMember(Name="locationCategoryCode")]
        public List<ApcoAlarmEventLocationCategoryCodeType> LocationCategoryCode { get; set; }

        /// <summary>
        /// A kind of location at which an alarm event occurs NIEM reference is em:AlarmEventLocationCategoryText
        /// </summary>
        /// <value>A kind of location at which an alarm event occurs NIEM reference is em:AlarmEventLocationCategoryText</value>

        [DataMember(Name="locationCategory")]
        public List<NcTextType> LocationCategory { get; set; }

        /// <summary>
        /// True if an audible alarm is sounding; false if the alarm is inaudible NIEM reference is em:AlarmAudibleIndicator
        /// </summary>
        /// <value>True if an audible alarm is sounding; false if the alarm is inaudible NIEM reference is em:AlarmAudibleIndicator</value>

        [DataMember(Name="isAlarmAudible")]
        public List<NiemXsboolean> IsAlarmAudible { get; set; }

        /// <summary>
        /// A text describing details about the alarm event NIEM reference is em:AlarmEventDetailsText
        /// </summary>
        /// <value>A text describing details about the alarm event NIEM reference is em:AlarmEventDetailsText</value>

        [DataMember(Name="details")]
        public List<NcTextType> Details { get; set; }

        /// <summary>
        /// A date the requester received the alarm event NIEM reference is em:AlarmEventRequestorReceiveDate
        /// </summary>
        /// <value>A date the requester received the alarm event NIEM reference is em:AlarmEventRequestorReceiveDate</value>

        [DataMember(Name="requestorReceiveDate")]
        public List<NcDateType> RequestorReceiveDate { get; set; }

        /// <summary>
        /// A code necessary to access the sites phone system NIEM reference is em:AlarmEventCallPrivacyBypassCodeText
        /// </summary>
        /// <value>A code necessary to access the sites phone system NIEM reference is em:AlarmEventCallPrivacyBypassCodeText</value>

        [DataMember(Name="callPrivacyBypassCode")]
        public List<NcTextType> CallPrivacyBypassCode { get; set; }

        /// <summary>
        /// True if an agency is to call the premise before arrival; false otherwise NIEM reference is em:AlarmEventCallToPremisesIndicator
        /// </summary>
        /// <value>True if an agency is to call the premise before arrival; false otherwise NIEM reference is em:AlarmEventCallToPremisesIndicator</value>

        [DataMember(Name="isCallToPremises")]
        public List<NiemXsboolean> IsCallToPremises { get; set; }

        /// <summary>
        /// A permit for the alarm event site NIEM reference is em:AlarmEventPermit
        /// </summary>
        /// <value>A permit for the alarm event site NIEM reference is em:AlarmEventPermit</value>

        [DataMember(Name="permit")]
        public List<NcPermitType> Permit { get; set; }

        /// <summary>
        /// An action requested of an alarm event responder NIEM reference is em:AlarmEventResponseActionCode
        /// </summary>
        /// <value>An action requested of an alarm event responder NIEM reference is em:AlarmEventResponseActionCode</value>

        [DataMember(Name="responseActionCode")]
        public List<ApcoAlarmEventResponseActionCodeType> ResponseActionCode { get; set; }

        /// <summary>
        /// An action requested of an alarm event responder NIEM reference is em:AlarmEventResponseActionText
        /// </summary>
        /// <value>An action requested of an alarm event responder NIEM reference is em:AlarmEventResponseActionText</value>

        [DataMember(Name="responseAction")]
        public List<NcTextType> ResponseAction { get; set; }

        /// <summary>
        /// An agency to which an alarm event is dispatched NIEM reference is em:AlarmEventDispatchAgency
        /// </summary>
        /// <value>An agency to which an alarm event is dispatched NIEM reference is em:AlarmEventDispatchAgency</value>

        [DataMember(Name="dispatchAgency")]
        public List<NcOrganizationType> DispatchAgency { get; set; }

        /// <summary>
        /// emAlarmEventType JSON-LD context
        /// </summary>
        /// <value>emAlarmEventType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemAlarmEventTypeContextJsonldEnum for ../JSON-LD_Contexts/emAlarmEventTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emAlarmEventTypeContext.jsonld")]
            JSONLDContextsemAlarmEventTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emAlarmEventType JSON-LD context
        /// </summary>
        /// <value>emAlarmEventType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmAlarmEventType {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CallBackTelephoneNumber: ").Append(CallBackTelephoneNumber).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationCategoryCode: ").Append(LocationCategoryCode).Append("\n");
            sb.Append("  LocationCategory: ").Append(LocationCategory).Append("\n");
            sb.Append("  IsAlarmAudible: ").Append(IsAlarmAudible).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  RequestorReceiveDate: ").Append(RequestorReceiveDate).Append("\n");
            sb.Append("  CallPrivacyBypassCode: ").Append(CallPrivacyBypassCode).Append("\n");
            sb.Append("  IsCallToPremises: ").Append(IsCallToPremises).Append("\n");
            sb.Append("  Permit: ").Append(Permit).Append("\n");
            sb.Append("  ResponseActionCode: ").Append(ResponseActionCode).Append("\n");
            sb.Append("  ResponseAction: ").Append(ResponseAction).Append("\n");
            sb.Append("  DispatchAgency: ").Append(DispatchAgency).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmAlarmEventType)obj);
        }

        /// <summary>
        /// Returns true if EmAlarmEventType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmAlarmEventType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmAlarmEventType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    CallBackTelephoneNumber == other.CallBackTelephoneNumber ||
                    CallBackTelephoneNumber != null &&
                    CallBackTelephoneNumber.SequenceEqual(other.CallBackTelephoneNumber)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    LocationCategoryCode == other.LocationCategoryCode ||
                    LocationCategoryCode != null &&
                    LocationCategoryCode.SequenceEqual(other.LocationCategoryCode)
                ) && 
                (
                    LocationCategory == other.LocationCategory ||
                    LocationCategory != null &&
                    LocationCategory.SequenceEqual(other.LocationCategory)
                ) && 
                (
                    IsAlarmAudible == other.IsAlarmAudible ||
                    IsAlarmAudible != null &&
                    IsAlarmAudible.SequenceEqual(other.IsAlarmAudible)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.SequenceEqual(other.Details)
                ) && 
                (
                    RequestorReceiveDate == other.RequestorReceiveDate ||
                    RequestorReceiveDate != null &&
                    RequestorReceiveDate.SequenceEqual(other.RequestorReceiveDate)
                ) && 
                (
                    CallPrivacyBypassCode == other.CallPrivacyBypassCode ||
                    CallPrivacyBypassCode != null &&
                    CallPrivacyBypassCode.SequenceEqual(other.CallPrivacyBypassCode)
                ) && 
                (
                    IsCallToPremises == other.IsCallToPremises ||
                    IsCallToPremises != null &&
                    IsCallToPremises.SequenceEqual(other.IsCallToPremises)
                ) && 
                (
                    Permit == other.Permit ||
                    Permit != null &&
                    Permit.SequenceEqual(other.Permit)
                ) && 
                (
                    ResponseActionCode == other.ResponseActionCode ||
                    ResponseActionCode != null &&
                    ResponseActionCode.SequenceEqual(other.ResponseActionCode)
                ) && 
                (
                    ResponseAction == other.ResponseAction ||
                    ResponseAction != null &&
                    ResponseAction.SequenceEqual(other.ResponseAction)
                ) && 
                (
                    DispatchAgency == other.DispatchAgency ||
                    DispatchAgency != null &&
                    DispatchAgency.SequenceEqual(other.DispatchAgency)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (CallBackTelephoneNumber != null)
                    hashCode = hashCode * 59 + CallBackTelephoneNumber.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (LocationCategoryCode != null)
                    hashCode = hashCode * 59 + LocationCategoryCode.GetHashCode();
                    if (LocationCategory != null)
                    hashCode = hashCode * 59 + LocationCategory.GetHashCode();
                    if (IsAlarmAudible != null)
                    hashCode = hashCode * 59 + IsAlarmAudible.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (RequestorReceiveDate != null)
                    hashCode = hashCode * 59 + RequestorReceiveDate.GetHashCode();
                    if (CallPrivacyBypassCode != null)
                    hashCode = hashCode * 59 + CallPrivacyBypassCode.GetHashCode();
                    if (IsCallToPremises != null)
                    hashCode = hashCode * 59 + IsCallToPremises.GetHashCode();
                    if (Permit != null)
                    hashCode = hashCode * 59 + Permit.GetHashCode();
                    if (ResponseActionCode != null)
                    hashCode = hashCode * 59 + ResponseActionCode.GetHashCode();
                    if (ResponseAction != null)
                    hashCode = hashCode * 59 + ResponseAction.GetHashCode();
                    if (DispatchAgency != null)
                    hashCode = hashCode * 59 + DispatchAgency.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmAlarmEventType left, EmAlarmEventType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmAlarmEventType left, EmAlarmEventType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
