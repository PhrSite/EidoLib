/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
        /// <summary>
        /// A data type that qualifies the status of a unit.
        /// </summary>
        /// <value>A data type that qualifies the status of a unit.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MoUnitStatusQualifierCodeSimpleType
        {
            /// <summary>
            /// Enum DestroyedEnum for Destroyed
            /// </summary>
            [EnumMember(Value = "Destroyed")]
            DestroyedEnum = 0,
            /// <summary>
            /// Enum HeavilyDamagedEnum for HeavilyDamaged
            /// </summary>
            [EnumMember(Value = "HeavilyDamaged")]
            HeavilyDamagedEnum = 1,
            /// <summary>
            /// Enum LackingVitalResourcesEnum for LackingVitalResources
            /// </summary>
            [EnumMember(Value = "LackingVitalResources")]
            LackingVitalResourcesEnum = 2,
            /// <summary>
            /// Enum LightlyDamagedEnum for LightlyDamaged
            /// </summary>
            [EnumMember(Value = "LightlyDamaged")]
            LightlyDamagedEnum = 3,
            /// <summary>
            /// Enum LostEnum for Lost
            /// </summary>
            [EnumMember(Value = "Lost")]
            LostEnum = 4,
            /// <summary>
            /// Enum ModeratelyDamagedEnum for ModeratelyDamaged
            /// </summary>
            [EnumMember(Value = "ModeratelyDamaged")]
            ModeratelyDamagedEnum = 5,
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 6,
            /// <summary>
            /// Enum NotKnownEnum for NotKnown
            /// </summary>
            [EnumMember(Value = "NotKnown")]
            NotKnownEnum = 7        }
}
