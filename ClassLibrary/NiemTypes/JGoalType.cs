/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a high-level outcome expected following an activity to address a need.
    /// </summary>
    [DataContract]
    public partial class JGoalType : IEquatable<JGoalType>
    { 
        /// <summary>
        /// A number of the hours assigned to achieving a specific goal. NIEM reference is j:GoalAssignedHoursNumeric
        /// </summary>
        /// <value>A number of the hours assigned to achieving a specific goal. NIEM reference is j:GoalAssignedHoursNumeric</value>

        [DataMember(Name="assignedHoursNumeric")]
        public List<NcNumericType> AssignedHoursNumeric { get; set; }

        /// <summary>
        /// A subset of a service plan goal. NIEM reference is hs:GoalObjective
        /// </summary>
        /// <value>A subset of a service plan goal. NIEM reference is hs:GoalObjective</value>

        [DataMember(Name="objective")]
        public List<HsGoalObjectiveType> Objective { get; set; }

        /// <summary>
        /// An activity that supports a goal. NIEM reference is j:GoalAssociatedActivity
        /// </summary>
        /// <value>An activity that supports a goal. NIEM reference is j:GoalAssociatedActivity</value>

        [DataMember(Name="associatedActivity")]
        public List<NcActivityType> AssociatedActivity { get; set; }

        /// <summary>
        /// A description of a specific goal assigned to the parolee. Examples include find stable housing, develop job skills or attend school, attend anger management, and continue to work. NIEM reference is j:GoalDescriptionText
        /// </summary>
        /// <value>A description of a specific goal assigned to the parolee. Examples include find stable housing, develop job skills or attend school, attend anger management, and continue to work. NIEM reference is j:GoalDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A kind of achievement level description associated with an educational goal. NIEM reference is j:GoalAchievementLevelText
        /// </summary>
        /// <value>A kind of achievement level description associated with an educational goal. NIEM reference is j:GoalAchievementLevelText</value>

        [DataMember(Name="achievementLevel")]
        public List<NcTextType> AchievementLevel { get; set; }

        /// <summary>
        /// True if the goal was achieved; false otherwise. NIEM reference is j:GoalAchievedIndicator
        /// </summary>
        /// <value>True if the goal was achieved; false otherwise. NIEM reference is j:GoalAchievedIndicator</value>

        [DataMember(Name="isAchieved")]
        public List<NiemXsboolean> IsAchieved { get; set; }

        /// <summary>
        /// A number of the hours combined toward a goal as a measurement of effort toward the goal. NIEM reference is j:GoalEffortTotalHoursNumeric
        /// </summary>
        /// <value>A number of the hours combined toward a goal as a measurement of effort toward the goal. NIEM reference is j:GoalEffortTotalHoursNumeric</value>

        [DataMember(Name="effortTotalHoursNumeric")]
        public List<NcNumericType> EffortTotalHoursNumeric { get; set; }

        /// <summary>
        /// A note(s) that documents how an individual addresses a Goal. NIEM reference is j:GoalNotation
        /// </summary>
        /// <value>A note(s) that documents how an individual addresses a Goal. NIEM reference is j:GoalNotation</value>

        [DataMember(Name="notation")]
        public List<NcCommentType> Notation { get; set; }

        /// <summary>
        /// jGoalType JSON-LD context
        /// </summary>
        /// <value>jGoalType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjGoalTypeContextJsonldEnum for ../JSON-LD_Contexts/jGoalTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jGoalTypeContext.jsonld")]
            JSONLDContextsjGoalTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jGoalType JSON-LD context
        /// </summary>
        /// <value>jGoalType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JGoalType {\n");
            sb.Append("  AssignedHoursNumeric: ").Append(AssignedHoursNumeric).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  AssociatedActivity: ").Append(AssociatedActivity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  AchievementLevel: ").Append(AchievementLevel).Append("\n");
            sb.Append("  IsAchieved: ").Append(IsAchieved).Append("\n");
            sb.Append("  EffortTotalHoursNumeric: ").Append(EffortTotalHoursNumeric).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JGoalType)obj);
        }

        /// <summary>
        /// Returns true if JGoalType instances are equal
        /// </summary>
        /// <param name="other">Instance of JGoalType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JGoalType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssignedHoursNumeric == other.AssignedHoursNumeric ||
                    AssignedHoursNumeric != null &&
                    AssignedHoursNumeric.SequenceEqual(other.AssignedHoursNumeric)
                ) && 
                (
                    Objective == other.Objective ||
                    Objective != null &&
                    Objective.SequenceEqual(other.Objective)
                ) && 
                (
                    AssociatedActivity == other.AssociatedActivity ||
                    AssociatedActivity != null &&
                    AssociatedActivity.SequenceEqual(other.AssociatedActivity)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    AchievementLevel == other.AchievementLevel ||
                    AchievementLevel != null &&
                    AchievementLevel.SequenceEqual(other.AchievementLevel)
                ) && 
                (
                    IsAchieved == other.IsAchieved ||
                    IsAchieved != null &&
                    IsAchieved.SequenceEqual(other.IsAchieved)
                ) && 
                (
                    EffortTotalHoursNumeric == other.EffortTotalHoursNumeric ||
                    EffortTotalHoursNumeric != null &&
                    EffortTotalHoursNumeric.SequenceEqual(other.EffortTotalHoursNumeric)
                ) && 
                (
                    Notation == other.Notation ||
                    Notation != null &&
                    Notation.SequenceEqual(other.Notation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssignedHoursNumeric != null)
                    hashCode = hashCode * 59 + AssignedHoursNumeric.GetHashCode();
                    if (Objective != null)
                    hashCode = hashCode * 59 + Objective.GetHashCode();
                    if (AssociatedActivity != null)
                    hashCode = hashCode * 59 + AssociatedActivity.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (AchievementLevel != null)
                    hashCode = hashCode * 59 + AchievementLevel.GetHashCode();
                    if (IsAchieved != null)
                    hashCode = hashCode * 59 + IsAchieved.GetHashCode();
                    if (EffortTotalHoursNumeric != null)
                    hashCode = hashCode * 59 + EffortTotalHoursNumeric.GetHashCode();
                    if (Notation != null)
                    hashCode = hashCode * 59 + Notation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JGoalType left, JGoalType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JGoalType left, JGoalType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
