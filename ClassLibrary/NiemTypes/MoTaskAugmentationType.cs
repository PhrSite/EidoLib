/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a task.
    /// </summary>
    [DataContract]
    public partial class MoTaskAugmentationType : IEquatable<MoTaskAugmentationType>
    { 
        /// <summary>
        /// A hierarchical number that identifies a specific task. NIEM reference is mo:TaskNumberText
        /// </summary>
        /// <value>A hierarchical number that identifies a specific task. NIEM reference is mo:TaskNumberText</value>

        [DataMember(Name="taskNumber")]
        public List<NiemXsstring> TaskNumber { get; set; }

        /// <summary>
        /// A name of a task. NIEM reference is nc:TaskName
        /// </summary>
        /// <value>A name of a task. NIEM reference is nc:TaskName</value>

        [DataMember(Name="taskName")]
        public List<NiemXsstring> TaskName { get; set; }

        /// <summary>
        /// A description of the task in detail. NIEM reference is nc:TaskDescriptionText
        /// </summary>
        /// <value>A description of the task in detail. NIEM reference is nc:TaskDescriptionText</value>

        [DataMember(Name="taskDescription")]
        public List<NiemXsstring> TaskDescription { get; set; }

        /// <summary>
        /// An identifier for a 128 bit Universally Unique ID (UUID) for a task. NIEM reference is mo:TaskUUID
        /// </summary>
        /// <value>An identifier for a 128 bit Universally Unique ID (UUID) for a task. NIEM reference is mo:TaskUUID</value>

        [DataMember(Name="taskUuid")]
        public List<MoUUIDType> TaskUuid { get; set; }

        /// <summary>
        /// A unit that is/was/will be performing the task. NIEM reference is mo:TaskPerformingUnit
        /// </summary>
        /// <value>A unit that is/was/will be performing the task. NIEM reference is mo:TaskPerformingUnit</value>

        [DataMember(Name="taskPerformingUnit")]
        public List<MoUnitType> TaskPerformingUnit { get; set; }

        /// <summary>
        /// A date for the start of a task. NIEM reference is nc:TaskStartDate
        /// </summary>
        /// <value>A date for the start of a task. NIEM reference is nc:TaskStartDate</value>

        [DataMember(Name="taskStartDate")]
        public List<NcDateType> TaskStartDate { get; set; }

        /// <summary>
        /// A date for the end of a task. NIEM reference is nc:TaskEndDate
        /// </summary>
        /// <value>A date for the end of a task. NIEM reference is nc:TaskEndDate</value>

        [DataMember(Name="taskEndDate")]
        public List<NcDateType> TaskEndDate { get; set; }

        /// <summary>
        /// moTaskAugmentationType JSON-LD context
        /// </summary>
        /// <value>moTaskAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmoTaskAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/moTaskAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/moTaskAugmentationTypeContext.jsonld")]
            JSONLDContextsmoTaskAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// moTaskAugmentationType JSON-LD context
        /// </summary>
        /// <value>moTaskAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoTaskAugmentationType {\n");
            sb.Append("  TaskNumber: ").Append(TaskNumber).Append("\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TaskDescription: ").Append(TaskDescription).Append("\n");
            sb.Append("  TaskUuid: ").Append(TaskUuid).Append("\n");
            sb.Append("  TaskPerformingUnit: ").Append(TaskPerformingUnit).Append("\n");
            sb.Append("  TaskStartDate: ").Append(TaskStartDate).Append("\n");
            sb.Append("  TaskEndDate: ").Append(TaskEndDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MoTaskAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if MoTaskAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of MoTaskAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoTaskAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TaskNumber == other.TaskNumber ||
                    TaskNumber != null &&
                    TaskNumber.SequenceEqual(other.TaskNumber)
                ) && 
                (
                    TaskName == other.TaskName ||
                    TaskName != null &&
                    TaskName.SequenceEqual(other.TaskName)
                ) && 
                (
                    TaskDescription == other.TaskDescription ||
                    TaskDescription != null &&
                    TaskDescription.SequenceEqual(other.TaskDescription)
                ) && 
                (
                    TaskUuid == other.TaskUuid ||
                    TaskUuid != null &&
                    TaskUuid.SequenceEqual(other.TaskUuid)
                ) && 
                (
                    TaskPerformingUnit == other.TaskPerformingUnit ||
                    TaskPerformingUnit != null &&
                    TaskPerformingUnit.SequenceEqual(other.TaskPerformingUnit)
                ) && 
                (
                    TaskStartDate == other.TaskStartDate ||
                    TaskStartDate != null &&
                    TaskStartDate.SequenceEqual(other.TaskStartDate)
                ) && 
                (
                    TaskEndDate == other.TaskEndDate ||
                    TaskEndDate != null &&
                    TaskEndDate.SequenceEqual(other.TaskEndDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TaskNumber != null)
                    hashCode = hashCode * 59 + TaskNumber.GetHashCode();
                    if (TaskName != null)
                    hashCode = hashCode * 59 + TaskName.GetHashCode();
                    if (TaskDescription != null)
                    hashCode = hashCode * 59 + TaskDescription.GetHashCode();
                    if (TaskUuid != null)
                    hashCode = hashCode * 59 + TaskUuid.GetHashCode();
                    if (TaskPerformingUnit != null)
                    hashCode = hashCode * 59 + TaskPerformingUnit.GetHashCode();
                    if (TaskStartDate != null)
                    hashCode = hashCode * 59 + TaskStartDate.GetHashCode();
                    if (TaskEndDate != null)
                    hashCode = hashCode * 59 + TaskEndDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MoTaskAugmentationType left, MoTaskAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MoTaskAugmentationType left, MoTaskAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
