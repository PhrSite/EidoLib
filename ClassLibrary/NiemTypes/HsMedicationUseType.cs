/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for recording medication use for an individual.
    /// </summary>
    [DataContract]
    public partial class HsMedicationUseType : NcActivityType, IEquatable<HsMedicationUseType>
    { 
        /// <summary>
        /// A medication in use. NIEM reference is hs:Medication
        /// </summary>
        /// <value>A medication in use. NIEM reference is hs:Medication</value>

        [DataMember(Name="medication")]
        public List<NcDrugType> Medication { get; set; }

        /// <summary>
        /// A medical professional or organization that authorizes a prescription drug. NIEM reference is hs:Prescriber
        /// </summary>
        /// <value>A medical professional or organization that authorizes a prescription drug. NIEM reference is hs:Prescriber</value>

        [DataMember(Name="prescriber")]
        public List<NcEntityType> Prescriber { get; set; }

        /// <summary>
        /// A pharmacy or pharmacist who filled the prescription. NIEM reference is hs:Dispenser
        /// </summary>
        /// <value>A pharmacy or pharmacist who filled the prescription. NIEM reference is hs:Dispenser</value>

        [DataMember(Name="dispenser")]
        public List<NcEntityType> Dispenser { get; set; }

        /// <summary>
        /// A date when the medication was last dispensed from a dispensing entity. NIEM reference is hs:MedicationDispensingDate
        /// </summary>
        /// <value>A date when the medication was last dispensed from a dispensing entity. NIEM reference is hs:MedicationDispensingDate</value>

        [DataMember(Name="medicationDispensingDate")]
        public List<NcDateType> MedicationDispensingDate { get; set; }

        /// <summary>
        /// A specified dosage of medication. NIEM reference is hs:MedicationDoseMeasure
        /// </summary>
        /// <value>A specified dosage of medication. NIEM reference is hs:MedicationDoseMeasure</value>

        [DataMember(Name="medicationDoseMeasure")]
        public List<NcMeasureType> MedicationDoseMeasure { get; set; }

        /// <summary>
        /// A frequency of medication use, e.g. daily with food, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:MedicationUseFrequencyCode
        /// </summary>
        /// <value>A frequency of medication use, e.g. daily with food, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:MedicationUseFrequencyCode</value>

        [DataMember(Name="frequencyCode")]
        public List<HsMedicationUseFrequencyCodeType> FrequencyCode { get; set; }

        /// <summary>
        /// A frequency of medication use, e.g. daily with food, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:MedicationUseFrequencyText
        /// </summary>
        /// <value>A frequency of medication use, e.g. daily with food, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:MedicationUseFrequencyText</value>

        [DataMember(Name="frequency")]
        public List<NcTextType> Frequency { get; set; }

        /// <summary>
        /// A date when the medication was last taken. NIEM reference is hs:MedicationLastTakenDate
        /// </summary>
        /// <value>A date when the medication was last taken. NIEM reference is hs:MedicationLastTakenDate</value>

        [DataMember(Name="medicationLastTakenDate")]
        public List<NcDateType> MedicationLastTakenDate { get; set; }

        /// <summary>
        /// A description of the treatment reason or condition being treated with the medication.  This should include any &#x27;off label&#x27; use. NIEM reference is hs:MedicationTreatmentReasonText
        /// </summary>
        /// <value>A description of the treatment reason or condition being treated with the medication.  This should include any &#x27;off label&#x27; use. NIEM reference is hs:MedicationTreatmentReasonText</value>

        [DataMember(Name="medicationTreatmentReason")]
        public List<NcTextType> MedicationTreatmentReason { get; set; }

        /// <summary>
        /// A set of instructions for use of medication e.g. daily with food for 7 days, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:PrescriptionUseInstructionsText
        /// </summary>
        /// <value>A set of instructions for use of medication e.g. daily with food for 7 days, as needed for discomfort, not more than every 8 hours, etc. NIEM reference is hs:PrescriptionUseInstructionsText</value>

        [DataMember(Name="prescriptionUseInstructions")]
        public List<NcTextType> PrescriptionUseInstructions { get; set; }

        /// <summary>
        /// hsMedicationUseType JSON-LD context
        /// </summary>
        /// <value>hsMedicationUseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsMedicationUseTypeContextJsonldEnum for ../JSON-LD_Contexts/hsMedicationUseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsMedicationUseTypeContext.jsonld")]
            JSONLDContextshsMedicationUseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsMedicationUseType JSON-LD context
        /// </summary>
        /// <value>hsMedicationUseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsMedicationUseType {\n");
            sb.Append("  Medication: ").Append(Medication).Append("\n");
            sb.Append("  Prescriber: ").Append(Prescriber).Append("\n");
            sb.Append("  Dispenser: ").Append(Dispenser).Append("\n");
            sb.Append("  MedicationDispensingDate: ").Append(MedicationDispensingDate).Append("\n");
            sb.Append("  MedicationDoseMeasure: ").Append(MedicationDoseMeasure).Append("\n");
            sb.Append("  FrequencyCode: ").Append(FrequencyCode).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  MedicationLastTakenDate: ").Append(MedicationLastTakenDate).Append("\n");
            sb.Append("  MedicationTreatmentReason: ").Append(MedicationTreatmentReason).Append("\n");
            sb.Append("  PrescriptionUseInstructions: ").Append(PrescriptionUseInstructions).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsMedicationUseType)obj);
        }

        /// <summary>
        /// Returns true if HsMedicationUseType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsMedicationUseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsMedicationUseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Medication == other.Medication ||
                    Medication != null &&
                    Medication.SequenceEqual(other.Medication)
                ) && 
                (
                    Prescriber == other.Prescriber ||
                    Prescriber != null &&
                    Prescriber.SequenceEqual(other.Prescriber)
                ) && 
                (
                    Dispenser == other.Dispenser ||
                    Dispenser != null &&
                    Dispenser.SequenceEqual(other.Dispenser)
                ) && 
                (
                    MedicationDispensingDate == other.MedicationDispensingDate ||
                    MedicationDispensingDate != null &&
                    MedicationDispensingDate.SequenceEqual(other.MedicationDispensingDate)
                ) && 
                (
                    MedicationDoseMeasure == other.MedicationDoseMeasure ||
                    MedicationDoseMeasure != null &&
                    MedicationDoseMeasure.SequenceEqual(other.MedicationDoseMeasure)
                ) && 
                (
                    FrequencyCode == other.FrequencyCode ||
                    FrequencyCode != null &&
                    FrequencyCode.SequenceEqual(other.FrequencyCode)
                ) && 
                (
                    Frequency == other.Frequency ||
                    Frequency != null &&
                    Frequency.SequenceEqual(other.Frequency)
                ) && 
                (
                    MedicationLastTakenDate == other.MedicationLastTakenDate ||
                    MedicationLastTakenDate != null &&
                    MedicationLastTakenDate.SequenceEqual(other.MedicationLastTakenDate)
                ) && 
                (
                    MedicationTreatmentReason == other.MedicationTreatmentReason ||
                    MedicationTreatmentReason != null &&
                    MedicationTreatmentReason.SequenceEqual(other.MedicationTreatmentReason)
                ) && 
                (
                    PrescriptionUseInstructions == other.PrescriptionUseInstructions ||
                    PrescriptionUseInstructions != null &&
                    PrescriptionUseInstructions.SequenceEqual(other.PrescriptionUseInstructions)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Medication != null)
                    hashCode = hashCode * 59 + Medication.GetHashCode();
                    if (Prescriber != null)
                    hashCode = hashCode * 59 + Prescriber.GetHashCode();
                    if (Dispenser != null)
                    hashCode = hashCode * 59 + Dispenser.GetHashCode();
                    if (MedicationDispensingDate != null)
                    hashCode = hashCode * 59 + MedicationDispensingDate.GetHashCode();
                    if (MedicationDoseMeasure != null)
                    hashCode = hashCode * 59 + MedicationDoseMeasure.GetHashCode();
                    if (FrequencyCode != null)
                    hashCode = hashCode * 59 + FrequencyCode.GetHashCode();
                    if (Frequency != null)
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    if (MedicationLastTakenDate != null)
                    hashCode = hashCode * 59 + MedicationLastTakenDate.GetHashCode();
                    if (MedicationTreatmentReason != null)
                    hashCode = hashCode * 59 + MedicationTreatmentReason.GetHashCode();
                    if (PrescriptionUseInstructions != null)
                    hashCode = hashCode * 59 + PrescriptionUseInstructions.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsMedicationUseType left, HsMedicationUseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsMedicationUseType left, HsMedicationUseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
