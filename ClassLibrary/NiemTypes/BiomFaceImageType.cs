/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an image of a human face
    /// </summary>
    [DataContract]
    public partial class BiomFaceImageType : BiomImageType, IEquatable<BiomFaceImageType>
    { 
        /// <summary>
        /// A set of angular offsets of a subject from a full face or a profile, for a determined 3D pose NIEM reference is biom:FaceImage3DPoseAngle
        /// </summary>
        /// <value>A set of angular offsets of a subject from a full face or a profile, for a determined 3D pose NIEM reference is biom:FaceImage3DPoseAngle</value>

        [DataMember(Name="3DPoseAngle")]
        public List<BiomPoseAngleType> _3DPoseAngle { get; set; }

        /// <summary>
        /// A set of criteria under which the facial image was captured NIEM reference is biom:FaceImageAcquisitionProfileCode
        /// </summary>
        /// <value>A set of criteria under which the facial image was captured NIEM reference is biom:FaceImageAcquisitionProfileCode</value>

        [DataMember(Name="acquisitionProfileCode")]
        public List<BiomFaceImageAcquisitionProfileCodeType> AcquisitionProfileCode { get; set; }

        /// <summary>
        /// A special attribute of a captured facial image. Deprecated in favor of biom:FaceImageDescriptionCode. NIEM reference is biom:FaceImageAttribute
        /// </summary>
        /// <value>A special attribute of a captured facial image. Deprecated in favor of biom:FaceImageDescriptionCode. NIEM reference is biom:FaceImageAttribute</value>

        [DataMember(Name="attribute")]
        public List<BiomFaceImageAttributeType> Attribute { get; set; }

        /// <summary>
        /// A description of a facial expression of a subject and other attributes associated with a subject&#x27;s captured facial image NIEM reference is biom:FaceImageDescriptionCode
        /// </summary>
        /// <value>A description of a facial expression of a subject and other attributes associated with a subject&#x27;s captured facial image NIEM reference is biom:FaceImageDescriptionCode</value>

        [DataMember(Name="descriptionCode")]
        public List<BiomFaceImageDescriptionCodeType> DescriptionCode { get; set; }

        /// <summary>
        /// A description of a facial expression of a subject and other attributes associated with a subject&#x27;s captured facial image NIEM reference is biom:FaceImageDescriptionText
        /// </summary>
        /// <value>A description of a facial expression of a subject and other attributes associated with a subject&#x27;s captured facial image NIEM reference is biom:FaceImageDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A description of a physical feature from the NCIC codes. NIEM reference is biom:PhysicalFeatureNCICCode
        /// </summary>
        /// <value>A description of a physical feature from the NCIC codes. NIEM reference is biom:PhysicalFeatureNCICCode</value>

        [DataMember(Name="physicalFeatureNcicCode")]
        public List<NcicSMTCodeType> PhysicalFeatureNcicCode { get; set; }

        /// <summary>
        /// A pose of a subject NIEM reference is biom:FaceImageSubjectPoseCode
        /// </summary>
        /// <value>A pose of a subject NIEM reference is biom:FaceImageSubjectPoseCode</value>

        [DataMember(Name="subjectPoseCode")]
        public List<BiomSubjectPoseCodeType> SubjectPoseCode { get; set; }

        /// <summary>
        /// An image of a human face missing NIEM reference is biom:FacialImageMissingReasonCode
        /// </summary>
        /// <value>An image of a human face missing NIEM reference is biom:FacialImageMissingReasonCode</value>

        [DataMember(Name="facialImageMissingReasonCode")]
        public List<BiomFacialImageMissingReasonCodeType> FacialImageMissingReasonCode { get; set; }

        /// <summary>
        /// A square bounding box containing a face image in a larger picture NIEM reference is biom:FaceImageBoundingSquare
        /// </summary>
        /// <value>A square bounding box containing a face image in a larger picture NIEM reference is biom:FaceImageBoundingSquare</value>

        [DataMember(Name="boundingSquare")]
        public List<BiomFaceImageBoundingSquareType> BoundingSquare { get; set; }

        /// <summary>
        /// A polygon, ellipse, or circle containing a face image in a larger picture NIEM reference is biom:FaceImageBoundary
        /// </summary>
        /// <value>A polygon, ellipse, or circle containing a face image in a larger picture NIEM reference is biom:FaceImageBoundary</value>

        [DataMember(Name="boundary")]
        public List<BiomFaceImageBoundaryType> Boundary { get; set; }

        /// <summary>
        /// A lighting artifact in this face image NIEM reference is biom:FaceImageLightingArtifactsCode
        /// </summary>
        /// <value>A lighting artifact in this face image NIEM reference is biom:FaceImageLightingArtifactsCode</value>

        [DataMember(Name="lightingArtifactsCode")]
        public List<BiomFaceImageLightingArtifactsCodeType> LightingArtifactsCode { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode</value>

        [DataMember(Name="personEyeColorCode")]
        public List<NcicEYECodeType> PersonEyeColorCode { get; set; }

        /// <summary>
        /// A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode</value>

        [DataMember(Name="personEyeColorRapSheetCode")]
        public List<JPersonEyeColorCodeType> PersonEyeColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText</value>

        [DataMember(Name="personEyeColor")]
        public List<NcTextType> PersonEyeColor { get; set; }

        /// <summary>
        /// A hair color shown in an image of a person&#x27;s face NIEM reference is biom:HairColorCode
        /// </summary>
        /// <value>A hair color shown in an image of a person&#x27;s face NIEM reference is biom:HairColorCode</value>

        [DataMember(Name="hairColorCode")]
        public List<BiomHairColorCodeType> HairColorCode { get; set; }

        /// <summary>
        /// A color of the hair of a person. NIEM reference is biom:PersonHairColorText
        /// </summary>
        /// <value>A color of the hair of a person. NIEM reference is biom:PersonHairColorText</value>

        [DataMember(Name="personHairColor")]
        public List<NcTextType> PersonHairColor { get; set; }

        /// <summary>
        /// A set of attributes describing 2D, MPEG4 facial feature points and their locations NIEM reference is biom:FaceImage2DFeaturePoint
        /// </summary>
        /// <value>A set of attributes describing 2D, MPEG4 facial feature points and their locations NIEM reference is biom:FaceImage2DFeaturePoint</value>

        [DataMember(Name="2DFeaturePoint")]
        public List<BiomFaceImageFeaturePointType> _2DFeaturePoint { get; set; }

        /// <summary>
        /// A number assigned to the tier level of a particular face image feature point NIEM reference is biom:FaceImageFeaturePointTierCode
        /// </summary>
        /// <value>A number assigned to the tier level of a particular face image feature point NIEM reference is biom:FaceImageFeaturePointTierCode</value>

        [DataMember(Name="featurePointTierCode")]
        public List<BiomFaceImageFeaturePointTierCodeType> FeaturePointTierCode { get; set; }

        /// <summary>
        /// A user-defined number assigned to the tier level of a particular face image feature point NIEM reference is biom:FaceImageFeaturePointTierNumeric
        /// </summary>
        /// <value>A user-defined number assigned to the tier level of a particular face image feature point NIEM reference is biom:FaceImageFeaturePointTierNumeric</value>

        [DataMember(Name="featurePointTierNumeric")]
        public List<BiomFaceImageFeaturePointTierNumericType> FeaturePointTierNumeric { get; set; }

        /// <summary>
        /// A face feature point that includes a Z-coordinate NIEM reference is biom:FaceImage3DFeaturePoint
        /// </summary>
        /// <value>A face feature point that includes a Z-coordinate NIEM reference is biom:FaceImage3DFeaturePoint</value>

        [DataMember(Name="3DFeaturePoint")]
        public List<BiomFaceImage3DFeaturePointType> _3DFeaturePoint { get; set; }

        /// <summary>
        /// A contour feature in a face image NIEM reference is biom:FaceImageContour
        /// </summary>
        /// <value>A contour feature in a face image NIEM reference is biom:FaceImageContour</value>

        [DataMember(Name="contour")]
        public List<BiomFaceImageContourType> Contour { get; set; }

        /// <summary>
        /// A blockage in a face image NIEM reference is biom:FaceImageOcclusion
        /// </summary>
        /// <value>A blockage in a face image NIEM reference is biom:FaceImageOcclusion</value>

        [DataMember(Name="occlusion")]
        public List<BiomFaceImageOcclusionType> Occlusion { get; set; }

        /// <summary>
        /// An identifier for an image reference number that correlates type 10 images of the same feature, such as an full SMT image and a close up image NIEM reference is biom:Type10CrossReferenceID
        /// </summary>
        /// <value>An identifier for an image reference number that correlates type 10 images of the same feature, such as an full SMT image and a close up image NIEM reference is biom:Type10CrossReferenceID</value>

        [DataMember(Name="type10CrossReferenceId")]
        public List<BiomInteger0to99Type> Type10CrossReferenceId { get; set; }

        /// <summary>
        /// An optional field allows the entry of information concerning suspected patterned injuries. NIEM reference is biom:PatternedInjuryDetail
        /// </summary>
        /// <value>An optional field allows the entry of information concerning suspected patterned injuries. NIEM reference is biom:PatternedInjuryDetail</value>

        [DataMember(Name="patternedInjuryDetail")]
        public List<BiomPatternedInjuryDetailType> PatternedInjuryDetail { get; set; }

        /// <summary>
        /// A size of a scar, mark, or tattoo NIEM reference is biom:PhysicalFeatureSize
        /// </summary>
        /// <value>A size of a scar, mark, or tattoo NIEM reference is biom:PhysicalFeatureSize</value>

        [DataMember(Name="physicalFeatureSize")]
        public List<BiomPhysicalFeatureSizeType> PhysicalFeatureSize { get; set; }

        /// <summary>
        /// An optional field allows the user to state whether a ruler or other known scale is present in the image. NIEM reference is biom:RulerScalePresenceInformation
        /// </summary>
        /// <value>An optional field allows the user to state whether a ruler or other known scale is present in the image. NIEM reference is biom:RulerScalePresenceInformation</value>

        [DataMember(Name="rulerScalePresenceInformation")]
        public List<BiomRulerScalePresenceInformationType> RulerScalePresenceInformation { get; set; }

        /// <summary>
        /// An angular offset of a subject from full face or a profile, for an angled pose NIEM reference is biom:FaceImagePoseOffsetAngleMeasure
        /// </summary>
        /// <value>An angular offset of a subject from full face or a profile, for an angled pose NIEM reference is biom:FaceImagePoseOffsetAngleMeasure</value>

        [DataMember(Name="poseOffsetAngleMeasure")]
        public List<NiemXsinteger> PoseOffsetAngleMeasure { get; set; }

        /// <summary>
        /// A source of an image NIEM reference is biom:FaceImageAcquisitionSource
        /// </summary>
        /// <value>A source of an image NIEM reference is biom:FaceImageAcquisitionSource</value>

        [DataMember(Name="acquisitionSource")]
        public List<BiomFaceImageAcquisitionType> AcquisitionSource { get; set; }

        /// <summary>
        /// An optional field. This field is particularly useful if the image contained in this record is of an injury or latent image on a person. However, its use is not limited to such circumstances. Note that Field 10.041: SMT size or size of injury or iden NIEM reference is biom:SubjectExistentialDetails
        /// </summary>
        /// <value>An optional field. This field is particularly useful if the image contained in this record is of an injury or latent image on a person. However, its use is not limited to such circumstances. Note that Field 10.041: SMT size or size of injury or iden NIEM reference is biom:SubjectExistentialDetails</value>

        [DataMember(Name="subjectExistentialDetails")]
        public List<BiomSubjectExistentialDetailsType> SubjectExistentialDetails { get; set; }

        /// <summary>
        /// An optional field states the method used for determining the pixel density of the image. NIEM reference is biom:ResolutionMethodInformation
        /// </summary>
        /// <value>An optional field states the method used for determining the pixel density of the image. NIEM reference is biom:ResolutionMethodInformation</value>

        [DataMember(Name="resolutionMethodInformation")]
        public List<BiomResolutionMethodInformationType> ResolutionMethodInformation { get; set; }

        /// <summary>
        /// A kind of transformation of an image NIEM reference is biom:ImageTransformationCode
        /// </summary>
        /// <value>A kind of transformation of an image NIEM reference is biom:ImageTransformationCode</value>

        [DataMember(Name="imageTransformationCode")]
        public List<BiomImageTransformationCodeType> ImageTransformationCode { get; set; }

        /// <summary>
        /// biomFaceImageType JSON-LD context
        /// </summary>
        /// <value>biomFaceImageType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFaceImageTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFaceImageTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFaceImageTypeContext.jsonld")]
            JSONLDContextsbiomFaceImageTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFaceImageType JSON-LD context
        /// </summary>
        /// <value>biomFaceImageType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFaceImageType {\n");
            sb.Append("  _3DPoseAngle: ").Append(_3DPoseAngle).Append("\n");
            sb.Append("  AcquisitionProfileCode: ").Append(AcquisitionProfileCode).Append("\n");
            sb.Append("  Attribute: ").Append(Attribute).Append("\n");
            sb.Append("  DescriptionCode: ").Append(DescriptionCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PhysicalFeatureNcicCode: ").Append(PhysicalFeatureNcicCode).Append("\n");
            sb.Append("  SubjectPoseCode: ").Append(SubjectPoseCode).Append("\n");
            sb.Append("  FacialImageMissingReasonCode: ").Append(FacialImageMissingReasonCode).Append("\n");
            sb.Append("  BoundingSquare: ").Append(BoundingSquare).Append("\n");
            sb.Append("  Boundary: ").Append(Boundary).Append("\n");
            sb.Append("  LightingArtifactsCode: ").Append(LightingArtifactsCode).Append("\n");
            sb.Append("  PersonEyeColorCode: ").Append(PersonEyeColorCode).Append("\n");
            sb.Append("  PersonEyeColorRapSheetCode: ").Append(PersonEyeColorRapSheetCode).Append("\n");
            sb.Append("  PersonEyeColor: ").Append(PersonEyeColor).Append("\n");
            sb.Append("  HairColorCode: ").Append(HairColorCode).Append("\n");
            sb.Append("  PersonHairColor: ").Append(PersonHairColor).Append("\n");
            sb.Append("  _2DFeaturePoint: ").Append(_2DFeaturePoint).Append("\n");
            sb.Append("  FeaturePointTierCode: ").Append(FeaturePointTierCode).Append("\n");
            sb.Append("  FeaturePointTierNumeric: ").Append(FeaturePointTierNumeric).Append("\n");
            sb.Append("  _3DFeaturePoint: ").Append(_3DFeaturePoint).Append("\n");
            sb.Append("  Contour: ").Append(Contour).Append("\n");
            sb.Append("  Occlusion: ").Append(Occlusion).Append("\n");
            sb.Append("  Type10CrossReferenceId: ").Append(Type10CrossReferenceId).Append("\n");
            sb.Append("  PatternedInjuryDetail: ").Append(PatternedInjuryDetail).Append("\n");
            sb.Append("  PhysicalFeatureSize: ").Append(PhysicalFeatureSize).Append("\n");
            sb.Append("  RulerScalePresenceInformation: ").Append(RulerScalePresenceInformation).Append("\n");
            sb.Append("  PoseOffsetAngleMeasure: ").Append(PoseOffsetAngleMeasure).Append("\n");
            sb.Append("  AcquisitionSource: ").Append(AcquisitionSource).Append("\n");
            sb.Append("  SubjectExistentialDetails: ").Append(SubjectExistentialDetails).Append("\n");
            sb.Append("  ResolutionMethodInformation: ").Append(ResolutionMethodInformation).Append("\n");
            sb.Append("  ImageTransformationCode: ").Append(ImageTransformationCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFaceImageType)obj);
        }

        /// <summary>
        /// Returns true if BiomFaceImageType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFaceImageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFaceImageType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _3DPoseAngle == other._3DPoseAngle ||
                    _3DPoseAngle != null &&
                    _3DPoseAngle.SequenceEqual(other._3DPoseAngle)
                ) && 
                (
                    AcquisitionProfileCode == other.AcquisitionProfileCode ||
                    AcquisitionProfileCode != null &&
                    AcquisitionProfileCode.SequenceEqual(other.AcquisitionProfileCode)
                ) && 
                (
                    Attribute == other.Attribute ||
                    Attribute != null &&
                    Attribute.SequenceEqual(other.Attribute)
                ) && 
                (
                    DescriptionCode == other.DescriptionCode ||
                    DescriptionCode != null &&
                    DescriptionCode.SequenceEqual(other.DescriptionCode)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    PhysicalFeatureNcicCode == other.PhysicalFeatureNcicCode ||
                    PhysicalFeatureNcicCode != null &&
                    PhysicalFeatureNcicCode.SequenceEqual(other.PhysicalFeatureNcicCode)
                ) && 
                (
                    SubjectPoseCode == other.SubjectPoseCode ||
                    SubjectPoseCode != null &&
                    SubjectPoseCode.SequenceEqual(other.SubjectPoseCode)
                ) && 
                (
                    FacialImageMissingReasonCode == other.FacialImageMissingReasonCode ||
                    FacialImageMissingReasonCode != null &&
                    FacialImageMissingReasonCode.SequenceEqual(other.FacialImageMissingReasonCode)
                ) && 
                (
                    BoundingSquare == other.BoundingSquare ||
                    BoundingSquare != null &&
                    BoundingSquare.SequenceEqual(other.BoundingSquare)
                ) && 
                (
                    Boundary == other.Boundary ||
                    Boundary != null &&
                    Boundary.SequenceEqual(other.Boundary)
                ) && 
                (
                    LightingArtifactsCode == other.LightingArtifactsCode ||
                    LightingArtifactsCode != null &&
                    LightingArtifactsCode.SequenceEqual(other.LightingArtifactsCode)
                ) && 
                (
                    PersonEyeColorCode == other.PersonEyeColorCode ||
                    PersonEyeColorCode != null &&
                    PersonEyeColorCode.SequenceEqual(other.PersonEyeColorCode)
                ) && 
                (
                    PersonEyeColorRapSheetCode == other.PersonEyeColorRapSheetCode ||
                    PersonEyeColorRapSheetCode != null &&
                    PersonEyeColorRapSheetCode.SequenceEqual(other.PersonEyeColorRapSheetCode)
                ) && 
                (
                    PersonEyeColor == other.PersonEyeColor ||
                    PersonEyeColor != null &&
                    PersonEyeColor.SequenceEqual(other.PersonEyeColor)
                ) && 
                (
                    HairColorCode == other.HairColorCode ||
                    HairColorCode != null &&
                    HairColorCode.SequenceEqual(other.HairColorCode)
                ) && 
                (
                    PersonHairColor == other.PersonHairColor ||
                    PersonHairColor != null &&
                    PersonHairColor.SequenceEqual(other.PersonHairColor)
                ) && 
                (
                    _2DFeaturePoint == other._2DFeaturePoint ||
                    _2DFeaturePoint != null &&
                    _2DFeaturePoint.SequenceEqual(other._2DFeaturePoint)
                ) && 
                (
                    FeaturePointTierCode == other.FeaturePointTierCode ||
                    FeaturePointTierCode != null &&
                    FeaturePointTierCode.SequenceEqual(other.FeaturePointTierCode)
                ) && 
                (
                    FeaturePointTierNumeric == other.FeaturePointTierNumeric ||
                    FeaturePointTierNumeric != null &&
                    FeaturePointTierNumeric.SequenceEqual(other.FeaturePointTierNumeric)
                ) && 
                (
                    _3DFeaturePoint == other._3DFeaturePoint ||
                    _3DFeaturePoint != null &&
                    _3DFeaturePoint.SequenceEqual(other._3DFeaturePoint)
                ) && 
                (
                    Contour == other.Contour ||
                    Contour != null &&
                    Contour.SequenceEqual(other.Contour)
                ) && 
                (
                    Occlusion == other.Occlusion ||
                    Occlusion != null &&
                    Occlusion.SequenceEqual(other.Occlusion)
                ) && 
                (
                    Type10CrossReferenceId == other.Type10CrossReferenceId ||
                    Type10CrossReferenceId != null &&
                    Type10CrossReferenceId.SequenceEqual(other.Type10CrossReferenceId)
                ) && 
                (
                    PatternedInjuryDetail == other.PatternedInjuryDetail ||
                    PatternedInjuryDetail != null &&
                    PatternedInjuryDetail.SequenceEqual(other.PatternedInjuryDetail)
                ) && 
                (
                    PhysicalFeatureSize == other.PhysicalFeatureSize ||
                    PhysicalFeatureSize != null &&
                    PhysicalFeatureSize.SequenceEqual(other.PhysicalFeatureSize)
                ) && 
                (
                    RulerScalePresenceInformation == other.RulerScalePresenceInformation ||
                    RulerScalePresenceInformation != null &&
                    RulerScalePresenceInformation.SequenceEqual(other.RulerScalePresenceInformation)
                ) && 
                (
                    PoseOffsetAngleMeasure == other.PoseOffsetAngleMeasure ||
                    PoseOffsetAngleMeasure != null &&
                    PoseOffsetAngleMeasure.SequenceEqual(other.PoseOffsetAngleMeasure)
                ) && 
                (
                    AcquisitionSource == other.AcquisitionSource ||
                    AcquisitionSource != null &&
                    AcquisitionSource.SequenceEqual(other.AcquisitionSource)
                ) && 
                (
                    SubjectExistentialDetails == other.SubjectExistentialDetails ||
                    SubjectExistentialDetails != null &&
                    SubjectExistentialDetails.SequenceEqual(other.SubjectExistentialDetails)
                ) && 
                (
                    ResolutionMethodInformation == other.ResolutionMethodInformation ||
                    ResolutionMethodInformation != null &&
                    ResolutionMethodInformation.SequenceEqual(other.ResolutionMethodInformation)
                ) && 
                (
                    ImageTransformationCode == other.ImageTransformationCode ||
                    ImageTransformationCode != null &&
                    ImageTransformationCode.SequenceEqual(other.ImageTransformationCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_3DPoseAngle != null)
                    hashCode = hashCode * 59 + _3DPoseAngle.GetHashCode();
                    if (AcquisitionProfileCode != null)
                    hashCode = hashCode * 59 + AcquisitionProfileCode.GetHashCode();
                    if (Attribute != null)
                    hashCode = hashCode * 59 + Attribute.GetHashCode();
                    if (DescriptionCode != null)
                    hashCode = hashCode * 59 + DescriptionCode.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (PhysicalFeatureNcicCode != null)
                    hashCode = hashCode * 59 + PhysicalFeatureNcicCode.GetHashCode();
                    if (SubjectPoseCode != null)
                    hashCode = hashCode * 59 + SubjectPoseCode.GetHashCode();
                    if (FacialImageMissingReasonCode != null)
                    hashCode = hashCode * 59 + FacialImageMissingReasonCode.GetHashCode();
                    if (BoundingSquare != null)
                    hashCode = hashCode * 59 + BoundingSquare.GetHashCode();
                    if (Boundary != null)
                    hashCode = hashCode * 59 + Boundary.GetHashCode();
                    if (LightingArtifactsCode != null)
                    hashCode = hashCode * 59 + LightingArtifactsCode.GetHashCode();
                    if (PersonEyeColorCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorCode.GetHashCode();
                    if (PersonEyeColorRapSheetCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorRapSheetCode.GetHashCode();
                    if (PersonEyeColor != null)
                    hashCode = hashCode * 59 + PersonEyeColor.GetHashCode();
                    if (HairColorCode != null)
                    hashCode = hashCode * 59 + HairColorCode.GetHashCode();
                    if (PersonHairColor != null)
                    hashCode = hashCode * 59 + PersonHairColor.GetHashCode();
                    if (_2DFeaturePoint != null)
                    hashCode = hashCode * 59 + _2DFeaturePoint.GetHashCode();
                    if (FeaturePointTierCode != null)
                    hashCode = hashCode * 59 + FeaturePointTierCode.GetHashCode();
                    if (FeaturePointTierNumeric != null)
                    hashCode = hashCode * 59 + FeaturePointTierNumeric.GetHashCode();
                    if (_3DFeaturePoint != null)
                    hashCode = hashCode * 59 + _3DFeaturePoint.GetHashCode();
                    if (Contour != null)
                    hashCode = hashCode * 59 + Contour.GetHashCode();
                    if (Occlusion != null)
                    hashCode = hashCode * 59 + Occlusion.GetHashCode();
                    if (Type10CrossReferenceId != null)
                    hashCode = hashCode * 59 + Type10CrossReferenceId.GetHashCode();
                    if (PatternedInjuryDetail != null)
                    hashCode = hashCode * 59 + PatternedInjuryDetail.GetHashCode();
                    if (PhysicalFeatureSize != null)
                    hashCode = hashCode * 59 + PhysicalFeatureSize.GetHashCode();
                    if (RulerScalePresenceInformation != null)
                    hashCode = hashCode * 59 + RulerScalePresenceInformation.GetHashCode();
                    if (PoseOffsetAngleMeasure != null)
                    hashCode = hashCode * 59 + PoseOffsetAngleMeasure.GetHashCode();
                    if (AcquisitionSource != null)
                    hashCode = hashCode * 59 + AcquisitionSource.GetHashCode();
                    if (SubjectExistentialDetails != null)
                    hashCode = hashCode * 59 + SubjectExistentialDetails.GetHashCode();
                    if (ResolutionMethodInformation != null)
                    hashCode = hashCode * 59 + ResolutionMethodInformation.GetHashCode();
                    if (ImageTransformationCode != null)
                    hashCode = hashCode * 59 + ImageTransformationCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFaceImageType left, BiomFaceImageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFaceImageType left, BiomFaceImageType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
