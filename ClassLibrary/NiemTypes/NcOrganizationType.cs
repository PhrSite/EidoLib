/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a body of people organized for a particular purpose.
    /// </summary>
    [DataContract]
    public partial class NcOrganizationType : IEquatable<NcOrganizationType>
    { 
        /// <summary>
        /// An abbreviation, acronym, or code for an organization name. NIEM reference is nc:OrganizationAbbreviationText
        /// </summary>
        /// <value>An abbreviation, acronym, or code for an organization name. NIEM reference is nc:OrganizationAbbreviationText</value>

        [DataMember(Name="abbreviation")]
        public List<NcTextType> Abbreviation { get; set; }

        /// <summary>
        /// An identification for a Legal Entity Identifier (LEI), to uniquely identify legally distinct entities that engage in financial transactions. NIEM reference is nc:OrganizationLEIIdentification
        /// </summary>
        /// <value>An identification for a Legal Entity Identifier (LEI), to uniquely identify legally distinct entities that engage in financial transactions. NIEM reference is nc:OrganizationLEIIdentification</value>

        [DataMember(Name="leiIdentification")]
        public List<NcIdentificationType> LeiIdentification { get; set; }

        /// <summary>
        /// An activity that an organization is known or thought to be involved with. NIEM reference is nc:OrganizationActivityText
        /// </summary>
        /// <value>An activity that an organization is known or thought to be involved with. NIEM reference is nc:OrganizationActivityText</value>

        [DataMember(Name="activity")]
        public List<NcTextType> Activity { get; set; }

        /// <summary>
        /// A name of the chapter or branch by which an organization is known within a larger group of organizations. NIEM reference is nc:OrganizationBranchName
        /// </summary>
        /// <value>A name of the chapter or branch by which an organization is known within a larger group of organizations. NIEM reference is nc:OrganizationBranchName</value>

        [DataMember(Name="branchName")]
        public List<NcTextType> BranchName { get; set; }

        /// <summary>
        /// A kind of organization. NIEM reference is j:OrganizationCategoryNDExCode
        /// </summary>
        /// <value>A kind of organization. NIEM reference is j:OrganizationCategoryNDExCode</value>

        [DataMember(Name="categoryNdExCode")]
        public List<NdexOrganizationCategoryCodeType> CategoryNdExCode { get; set; }

        /// <summary>
        /// A functional kind of an organization. NIEM reference is j:OrganizationCategoryNLETSCode
        /// </summary>
        /// <value>A functional kind of an organization. NIEM reference is j:OrganizationCategoryNLETSCode</value>

        [DataMember(Name="categoryNletsCode")]
        public List<NletsOrganizationCategoryCodeType> CategoryNletsCode { get; set; }

        /// <summary>
        /// A kind or functional type of organization. NIEM reference is nc:OrganizationCategoryText
        /// </summary>
        /// <value>A kind or functional type of organization. NIEM reference is nc:OrganizationCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A means of contacting an organization during daytime hours. NIEM reference is nc:OrganizationDayContactInformation
        /// </summary>
        /// <value>A means of contacting an organization during daytime hours. NIEM reference is nc:OrganizationDayContactInformation</value>

        [DataMember(Name="dayContactInformation")]
        public List<NcContactInformationType> DayContactInformation { get; set; }

        /// <summary>
        /// A description of an organization. NIEM reference is nc:OrganizationDescriptionText
        /// </summary>
        /// <value>A description of an organization. NIEM reference is nc:OrganizationDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A name an organization uses for conducting business. NIEM reference is nc:OrganizationDoingBusinessAsName
        /// </summary>
        /// <value>A name an organization uses for conducting business. NIEM reference is nc:OrganizationDoingBusinessAsName</value>

        [DataMember(Name="doingBusinessAsName")]
        public List<NcTextType> DoingBusinessAsName { get; set; }

        /// <summary>
        /// A means of contacting an organization in the event of an emergency. NIEM reference is nc:OrganizationEmergencyContactInformation
        /// </summary>
        /// <value>A means of contacting an organization in the event of an emergency. NIEM reference is nc:OrganizationEmergencyContactInformation</value>

        [DataMember(Name="emergencyContactInformation")]
        public List<NcContactInformationType> EmergencyContactInformation { get; set; }

        /// <summary>
        /// A date an organization was started. NIEM reference is nc:OrganizationEstablishedDate
        /// </summary>
        /// <value>A date an organization was started. NIEM reference is nc:OrganizationEstablishedDate</value>

        [DataMember(Name="establishedDate")]
        public List<NcDateType> EstablishedDate { get; set; }

        /// <summary>
        /// A means of contacting an organization during evening or early night hours. NIEM reference is nc:OrganizationEveningContactInformation
        /// </summary>
        /// <value>A means of contacting an organization during evening or early night hours. NIEM reference is nc:OrganizationEveningContactInformation</value>

        [DataMember(Name="eveningContactInformation")]
        public List<NcContactInformationType> EveningContactInformation { get; set; }

        /// <summary>
        /// A foreign organization that has some relationship or association with an organization. NIEM reference is nc:OrganizationForeignAffiliate
        /// </summary>
        /// <value>A foreign organization that has some relationship or association with an organization. NIEM reference is nc:OrganizationForeignAffiliate</value>

        [DataMember(Name="foreignAffiliate")]
        public List<NcOrganizationType> ForeignAffiliate { get; set; }

        /// <summary>
        /// An identification that references an organization. NIEM reference is nc:OrganizationIdentification
        /// </summary>
        /// <value>An identification that references an organization. NIEM reference is nc:OrganizationIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// True if an organization is incorporated; false otherwise. NIEM reference is nc:OrganizationIncorporatedIndicator
        /// </summary>
        /// <value>True if an organization is incorporated; false otherwise. NIEM reference is nc:OrganizationIncorporatedIndicator</value>

        [DataMember(Name="isIncorporated")]
        public List<NiemXsboolean> IsIncorporated { get; set; }

        /// <summary>
        /// A date an organization incorporated (e.g., corporation). NIEM reference is nc:OrganizationIncorporationDate
        /// </summary>
        /// <value>A date an organization incorporated (e.g., corporation). NIEM reference is nc:OrganizationIncorporationDate</value>

        [DataMember(Name="incorporationDate")]
        public List<NcDateType> IncorporationDate { get; set; }

        /// <summary>
        /// A location where an organization incorporated. NIEM reference is nc:OrganizationIncorporationLocation
        /// </summary>
        /// <value>A location where an organization incorporated. NIEM reference is nc:OrganizationIncorporationLocation</value>

        [DataMember(Name="incorporationLocation")]
        public List<NcLocationType> IncorporationLocation { get; set; }

        /// <summary>
        /// An identification assigned at a local level to an organization. NIEM reference is nc:OrganizationLocalIdentification
        /// </summary>
        /// <value>An identification assigned at a local level to an organization. NIEM reference is nc:OrganizationLocalIdentification</value>

        [DataMember(Name="localIdentification")]
        public List<NcIdentificationType> LocalIdentification { get; set; }

        /// <summary>
        /// A location of an organization. NIEM reference is nc:OrganizationLocation
        /// </summary>
        /// <value>A location of an organization. NIEM reference is nc:OrganizationLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A name of an organization. NIEM reference is nc:OrganizationName
        /// </summary>
        /// <value>A name of an organization. NIEM reference is nc:OrganizationName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// A means of contacting an organization during late-night hours. NIEM reference is nc:OrganizationNightContactInformation
        /// </summary>
        /// <value>A means of contacting an organization during late-night hours. NIEM reference is nc:OrganizationNightContactInformation</value>

        [DataMember(Name="nightContactInformation")]
        public List<NcContactInformationType> NightContactInformation { get; set; }

        /// <summary>
        /// An alternate identification assigned to an organization. NIEM reference is nc:OrganizationOtherIdentification
        /// </summary>
        /// <value>An alternate identification assigned to an organization. NIEM reference is nc:OrganizationOtherIdentification</value>

        [DataMember(Name="otherIdentification")]
        public List<NcIdentificationType> OtherIdentification { get; set; }

        /// <summary>
        /// An affiliate organization that owns, controls, or operates the organization. NIEM reference is nc:OrganizationParentAffiliate
        /// </summary>
        /// <value>An affiliate organization that owns, controls, or operates the organization. NIEM reference is nc:OrganizationParentAffiliate</value>

        [DataMember(Name="parentAffiliate")]
        public List<NcOrganizationType> ParentAffiliate { get; set; }

        /// <summary>
        /// An organization that owns, controls, or operates the organization. NIEM reference is nc:OrganizationParentOrganization
        /// </summary>
        /// <value>An organization that owns, controls, or operates the organization. NIEM reference is nc:OrganizationParentOrganization</value>

        [DataMember(Name="parentOrganization")]
        public List<NcOrganizationType> ParentOrganization { get; set; }

        /// <summary>
        /// A preferred means of contacting an organization. NIEM reference is nc:OrganizationPrimaryContactInformation
        /// </summary>
        /// <value>A preferred means of contacting an organization. NIEM reference is nc:OrganizationPrimaryContactInformation</value>

        [DataMember(Name="primaryContactInformation")]
        public List<NcContactInformationType> PrimaryContactInformation { get; set; }

        /// <summary>
        /// A chief or high ranking executive of an organization. NIEM reference is nc:OrganizationPrincipalOfficial
        /// </summary>
        /// <value>A chief or high ranking executive of an organization. NIEM reference is nc:OrganizationPrincipalOfficial</value>

        [DataMember(Name="principalOfficial")]
        public List<NcPersonType> PrincipalOfficial { get; set; }

        /// <summary>
        /// A status of an organization. NIEM reference is nc:OrganizationStatus
        /// </summary>
        /// <value>A status of an organization. NIEM reference is nc:OrganizationStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A division of an organization. NIEM reference is nc:OrganizationSubUnit
        /// </summary>
        /// <value>A division of an organization. NIEM reference is nc:OrganizationSubUnit</value>

        [DataMember(Name="subUnit")]
        public List<NcOrganizationType> SubUnit { get; set; }

        /// <summary>
        /// A name of a subdivision of an organization. NIEM reference is nc:OrganizationSubUnitName
        /// </summary>
        /// <value>A name of a subdivision of an organization. NIEM reference is nc:OrganizationSubUnitName</value>

        [DataMember(Name="subUnitName")]
        public List<NcTextType> SubUnitName { get; set; }

        /// <summary>
        /// A tax identification assigned to an organization. NIEM reference is nc:OrganizationTaxIdentification
        /// </summary>
        /// <value>A tax identification assigned to an organization. NIEM reference is nc:OrganizationTaxIdentification</value>

        [DataMember(Name="taxIdentification")]
        public List<NcIdentificationType> TaxIdentification { get; set; }

        /// <summary>
        /// A date an organization went out of business. NIEM reference is nc:OrganizationTerminationDate
        /// </summary>
        /// <value>A date an organization went out of business. NIEM reference is nc:OrganizationTerminationDate</value>

        [DataMember(Name="terminationDate")]
        public List<NcDateType> TerminationDate { get; set; }

        /// <summary>
        /// A name of a high-level division of an organization. NIEM reference is nc:OrganizationUnitName
        /// </summary>
        /// <value>A name of a high-level division of an organization. NIEM reference is nc:OrganizationUnitName</value>

        [DataMember(Name="unitName")]
        public List<NcTextType> UnitName { get; set; }

        /// <summary>
        /// Additional information about an organization. NIEM reference is hs:OrganizationAugmentation
        /// </summary>
        /// <value>Additional information about an organization. NIEM reference is hs:OrganizationAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsOrganizationAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about an organization. NIEM reference is j:OrganizationAugmentation
        /// </summary>
        /// <value>Additional information about an organization. NIEM reference is j:OrganizationAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JOrganizationAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about an organization. NIEM reference is scr:OrganizationAugmentation
        /// </summary>
        /// <value>Additional information about an organization. NIEM reference is scr:OrganizationAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrOrganizationAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// ncOrganizationType JSON-LD context
        /// </summary>
        /// <value>ncOrganizationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncOrganizationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncOrganizationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncOrganizationTypeContext.jsonld")]
            JSONLDContextsncOrganizationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncOrganizationType JSON-LD context
        /// </summary>
        /// <value>ncOrganizationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcOrganizationType {\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  LeiIdentification: ").Append(LeiIdentification).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  BranchName: ").Append(BranchName).Append("\n");
            sb.Append("  CategoryNdExCode: ").Append(CategoryNdExCode).Append("\n");
            sb.Append("  CategoryNletsCode: ").Append(CategoryNletsCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DayContactInformation: ").Append(DayContactInformation).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DoingBusinessAsName: ").Append(DoingBusinessAsName).Append("\n");
            sb.Append("  EmergencyContactInformation: ").Append(EmergencyContactInformation).Append("\n");
            sb.Append("  EstablishedDate: ").Append(EstablishedDate).Append("\n");
            sb.Append("  EveningContactInformation: ").Append(EveningContactInformation).Append("\n");
            sb.Append("  ForeignAffiliate: ").Append(ForeignAffiliate).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  IsIncorporated: ").Append(IsIncorporated).Append("\n");
            sb.Append("  IncorporationDate: ").Append(IncorporationDate).Append("\n");
            sb.Append("  IncorporationLocation: ").Append(IncorporationLocation).Append("\n");
            sb.Append("  LocalIdentification: ").Append(LocalIdentification).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NightContactInformation: ").Append(NightContactInformation).Append("\n");
            sb.Append("  OtherIdentification: ").Append(OtherIdentification).Append("\n");
            sb.Append("  ParentAffiliate: ").Append(ParentAffiliate).Append("\n");
            sb.Append("  ParentOrganization: ").Append(ParentOrganization).Append("\n");
            sb.Append("  PrimaryContactInformation: ").Append(PrimaryContactInformation).Append("\n");
            sb.Append("  PrincipalOfficial: ").Append(PrincipalOfficial).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubUnit: ").Append(SubUnit).Append("\n");
            sb.Append("  SubUnitName: ").Append(SubUnitName).Append("\n");
            sb.Append("  TaxIdentification: ").Append(TaxIdentification).Append("\n");
            sb.Append("  TerminationDate: ").Append(TerminationDate).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcOrganizationType)obj);
        }

        /// <summary>
        /// Returns true if NcOrganizationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcOrganizationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcOrganizationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Abbreviation == other.Abbreviation ||
                    Abbreviation != null &&
                    Abbreviation.SequenceEqual(other.Abbreviation)
                ) && 
                (
                    LeiIdentification == other.LeiIdentification ||
                    LeiIdentification != null &&
                    LeiIdentification.SequenceEqual(other.LeiIdentification)
                ) && 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.SequenceEqual(other.Activity)
                ) && 
                (
                    BranchName == other.BranchName ||
                    BranchName != null &&
                    BranchName.SequenceEqual(other.BranchName)
                ) && 
                (
                    CategoryNdExCode == other.CategoryNdExCode ||
                    CategoryNdExCode != null &&
                    CategoryNdExCode.SequenceEqual(other.CategoryNdExCode)
                ) && 
                (
                    CategoryNletsCode == other.CategoryNletsCode ||
                    CategoryNletsCode != null &&
                    CategoryNletsCode.SequenceEqual(other.CategoryNletsCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    DayContactInformation == other.DayContactInformation ||
                    DayContactInformation != null &&
                    DayContactInformation.SequenceEqual(other.DayContactInformation)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DoingBusinessAsName == other.DoingBusinessAsName ||
                    DoingBusinessAsName != null &&
                    DoingBusinessAsName.SequenceEqual(other.DoingBusinessAsName)
                ) && 
                (
                    EmergencyContactInformation == other.EmergencyContactInformation ||
                    EmergencyContactInformation != null &&
                    EmergencyContactInformation.SequenceEqual(other.EmergencyContactInformation)
                ) && 
                (
                    EstablishedDate == other.EstablishedDate ||
                    EstablishedDate != null &&
                    EstablishedDate.SequenceEqual(other.EstablishedDate)
                ) && 
                (
                    EveningContactInformation == other.EveningContactInformation ||
                    EveningContactInformation != null &&
                    EveningContactInformation.SequenceEqual(other.EveningContactInformation)
                ) && 
                (
                    ForeignAffiliate == other.ForeignAffiliate ||
                    ForeignAffiliate != null &&
                    ForeignAffiliate.SequenceEqual(other.ForeignAffiliate)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    IsIncorporated == other.IsIncorporated ||
                    IsIncorporated != null &&
                    IsIncorporated.SequenceEqual(other.IsIncorporated)
                ) && 
                (
                    IncorporationDate == other.IncorporationDate ||
                    IncorporationDate != null &&
                    IncorporationDate.SequenceEqual(other.IncorporationDate)
                ) && 
                (
                    IncorporationLocation == other.IncorporationLocation ||
                    IncorporationLocation != null &&
                    IncorporationLocation.SequenceEqual(other.IncorporationLocation)
                ) && 
                (
                    LocalIdentification == other.LocalIdentification ||
                    LocalIdentification != null &&
                    LocalIdentification.SequenceEqual(other.LocalIdentification)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    NightContactInformation == other.NightContactInformation ||
                    NightContactInformation != null &&
                    NightContactInformation.SequenceEqual(other.NightContactInformation)
                ) && 
                (
                    OtherIdentification == other.OtherIdentification ||
                    OtherIdentification != null &&
                    OtherIdentification.SequenceEqual(other.OtherIdentification)
                ) && 
                (
                    ParentAffiliate == other.ParentAffiliate ||
                    ParentAffiliate != null &&
                    ParentAffiliate.SequenceEqual(other.ParentAffiliate)
                ) && 
                (
                    ParentOrganization == other.ParentOrganization ||
                    ParentOrganization != null &&
                    ParentOrganization.SequenceEqual(other.ParentOrganization)
                ) && 
                (
                    PrimaryContactInformation == other.PrimaryContactInformation ||
                    PrimaryContactInformation != null &&
                    PrimaryContactInformation.SequenceEqual(other.PrimaryContactInformation)
                ) && 
                (
                    PrincipalOfficial == other.PrincipalOfficial ||
                    PrincipalOfficial != null &&
                    PrincipalOfficial.SequenceEqual(other.PrincipalOfficial)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    SubUnit == other.SubUnit ||
                    SubUnit != null &&
                    SubUnit.SequenceEqual(other.SubUnit)
                ) && 
                (
                    SubUnitName == other.SubUnitName ||
                    SubUnitName != null &&
                    SubUnitName.SequenceEqual(other.SubUnitName)
                ) && 
                (
                    TaxIdentification == other.TaxIdentification ||
                    TaxIdentification != null &&
                    TaxIdentification.SequenceEqual(other.TaxIdentification)
                ) && 
                (
                    TerminationDate == other.TerminationDate ||
                    TerminationDate != null &&
                    TerminationDate.SequenceEqual(other.TerminationDate)
                ) && 
                (
                    UnitName == other.UnitName ||
                    UnitName != null &&
                    UnitName.SequenceEqual(other.UnitName)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Abbreviation != null)
                    hashCode = hashCode * 59 + Abbreviation.GetHashCode();
                    if (LeiIdentification != null)
                    hashCode = hashCode * 59 + LeiIdentification.GetHashCode();
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (BranchName != null)
                    hashCode = hashCode * 59 + BranchName.GetHashCode();
                    if (CategoryNdExCode != null)
                    hashCode = hashCode * 59 + CategoryNdExCode.GetHashCode();
                    if (CategoryNletsCode != null)
                    hashCode = hashCode * 59 + CategoryNletsCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (DayContactInformation != null)
                    hashCode = hashCode * 59 + DayContactInformation.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DoingBusinessAsName != null)
                    hashCode = hashCode * 59 + DoingBusinessAsName.GetHashCode();
                    if (EmergencyContactInformation != null)
                    hashCode = hashCode * 59 + EmergencyContactInformation.GetHashCode();
                    if (EstablishedDate != null)
                    hashCode = hashCode * 59 + EstablishedDate.GetHashCode();
                    if (EveningContactInformation != null)
                    hashCode = hashCode * 59 + EveningContactInformation.GetHashCode();
                    if (ForeignAffiliate != null)
                    hashCode = hashCode * 59 + ForeignAffiliate.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (IsIncorporated != null)
                    hashCode = hashCode * 59 + IsIncorporated.GetHashCode();
                    if (IncorporationDate != null)
                    hashCode = hashCode * 59 + IncorporationDate.GetHashCode();
                    if (IncorporationLocation != null)
                    hashCode = hashCode * 59 + IncorporationLocation.GetHashCode();
                    if (LocalIdentification != null)
                    hashCode = hashCode * 59 + LocalIdentification.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NightContactInformation != null)
                    hashCode = hashCode * 59 + NightContactInformation.GetHashCode();
                    if (OtherIdentification != null)
                    hashCode = hashCode * 59 + OtherIdentification.GetHashCode();
                    if (ParentAffiliate != null)
                    hashCode = hashCode * 59 + ParentAffiliate.GetHashCode();
                    if (ParentOrganization != null)
                    hashCode = hashCode * 59 + ParentOrganization.GetHashCode();
                    if (PrimaryContactInformation != null)
                    hashCode = hashCode * 59 + PrimaryContactInformation.GetHashCode();
                    if (PrincipalOfficial != null)
                    hashCode = hashCode * 59 + PrincipalOfficial.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (SubUnit != null)
                    hashCode = hashCode * 59 + SubUnit.GetHashCode();
                    if (SubUnitName != null)
                    hashCode = hashCode * 59 + SubUnitName.GetHashCode();
                    if (TaxIdentification != null)
                    hashCode = hashCode * 59 + TaxIdentification.GetHashCode();
                    if (TerminationDate != null)
                    hashCode = hashCode * 59 + TerminationDate.GetHashCode();
                    if (UnitName != null)
                    hashCode = hashCode * 59 + UnitName.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcOrganizationType left, NcOrganizationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcOrganizationType left, NcOrganizationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
