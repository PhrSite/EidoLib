/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the optional field that states the method used for determining the pixel density of the image.
    /// </summary>
    [DataContract]
    public partial class BiomResolutionMethodInformationType : IEquatable<BiomResolutionMethodInformationType>
    { 
        /// <summary>
        /// An information item for means of determining resolution. NIEM reference is biom:ResolutionMeansCode
        /// </summary>
        /// <value>An information item for means of determining resolution. NIEM reference is biom:ResolutionMeansCode</value>

        [DataMember(Name="resolutionMeansCode")]
        public List<BiomResolutionMeansCodeType> ResolutionMeansCode { get; set; }

        /// <summary>
        /// A known scale units, specifies the length of the known scale from point A to point B. NIEM reference is biom:ResolutionScaleLengthValue
        /// </summary>
        /// <value>A known scale units, specifies the length of the known scale from point A to point B. NIEM reference is biom:ResolutionScaleLengthValue</value>

        [DataMember(Name="resolutionScaleLengthValue")]
        public List<NiemXsdecimal> ResolutionScaleLengthValue { get; set; }

        /// <summary>
        /// A known scale units indicates whether the known scales units are in inches or millimeters. NIEM reference is biom:ResolutionScaleUnitCode
        /// </summary>
        /// <value>A known scale units indicates whether the known scales units are in inches or millimeters. NIEM reference is biom:ResolutionScaleUnitCode</value>

        [DataMember(Name="resolutionScaleUnitCode")]
        public List<BiomResolutionScaleUnitCodeType> ResolutionScaleUnitCode { get; set; }

        /// <summary>
        /// A known scale x coordinate for point A is expressed in number of pixels from the left of the image. NIEM reference is biom:ResolutionScaleXCoordinateAValue
        /// </summary>
        /// <value>A known scale x coordinate for point A is expressed in number of pixels from the left of the image. NIEM reference is biom:ResolutionScaleXCoordinateAValue</value>

        [DataMember(Name="resolutionScaleXCoordinateAValue")]
        public List<NiemXsnonNegativeInteger> ResolutionScaleXCoordinateAValue { get; set; }

        /// <summary>
        /// A known scale y coordinate for point A is expressed in number of pixels from the top of the image. NIEM reference is biom:ResolutionScaleYCoordinateAValue
        /// </summary>
        /// <value>A known scale y coordinate for point A is expressed in number of pixels from the top of the image. NIEM reference is biom:ResolutionScaleYCoordinateAValue</value>

        [DataMember(Name="resolutionScaleYCoordinateAValue")]
        public List<NiemXsnonNegativeInteger> ResolutionScaleYCoordinateAValue { get; set; }

        /// <summary>
        /// A known scale x coordinate for point B is expressed in number of pixels from the left of the image. NIEM reference is biom:ResolutionScaleXCoordinateBValue
        /// </summary>
        /// <value>A known scale x coordinate for point B is expressed in number of pixels from the left of the image. NIEM reference is biom:ResolutionScaleXCoordinateBValue</value>

        [DataMember(Name="resolutionScaleXCoordinateBValue")]
        public List<NiemXsnonNegativeInteger> ResolutionScaleXCoordinateBValue { get; set; }

        /// <summary>
        /// A known scale y coordinate for point B is expressed in number of pixels from the top of the image. NIEM reference is biom:ResolutionScaleYCoordinateBValue
        /// </summary>
        /// <value>A known scale y coordinate for point B is expressed in number of pixels from the top of the image. NIEM reference is biom:ResolutionScaleYCoordinateBValue</value>

        [DataMember(Name="resolutionScaleYCoordinateBValue")]
        public List<NiemXsnonNegativeInteger> ResolutionScaleYCoordinateBValue { get; set; }

        /// <summary>
        /// A comment provided by the examiner about the resolution method. NIEM reference is biom:ResolutionCommentText
        /// </summary>
        /// <value>A comment provided by the examiner about the resolution method. NIEM reference is biom:ResolutionCommentText</value>

        [DataMember(Name="resolutionComment")]
        public List<NcTextType> ResolutionComment { get; set; }

        /// <summary>
        /// biomResolutionMethodInformationType JSON-LD context
        /// </summary>
        /// <value>biomResolutionMethodInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomResolutionMethodInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomResolutionMethodInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomResolutionMethodInformationTypeContext.jsonld")]
            JSONLDContextsbiomResolutionMethodInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomResolutionMethodInformationType JSON-LD context
        /// </summary>
        /// <value>biomResolutionMethodInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomResolutionMethodInformationType {\n");
            sb.Append("  ResolutionMeansCode: ").Append(ResolutionMeansCode).Append("\n");
            sb.Append("  ResolutionScaleLengthValue: ").Append(ResolutionScaleLengthValue).Append("\n");
            sb.Append("  ResolutionScaleUnitCode: ").Append(ResolutionScaleUnitCode).Append("\n");
            sb.Append("  ResolutionScaleXCoordinateAValue: ").Append(ResolutionScaleXCoordinateAValue).Append("\n");
            sb.Append("  ResolutionScaleYCoordinateAValue: ").Append(ResolutionScaleYCoordinateAValue).Append("\n");
            sb.Append("  ResolutionScaleXCoordinateBValue: ").Append(ResolutionScaleXCoordinateBValue).Append("\n");
            sb.Append("  ResolutionScaleYCoordinateBValue: ").Append(ResolutionScaleYCoordinateBValue).Append("\n");
            sb.Append("  ResolutionComment: ").Append(ResolutionComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomResolutionMethodInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomResolutionMethodInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomResolutionMethodInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomResolutionMethodInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResolutionMeansCode == other.ResolutionMeansCode ||
                    ResolutionMeansCode != null &&
                    ResolutionMeansCode.SequenceEqual(other.ResolutionMeansCode)
                ) && 
                (
                    ResolutionScaleLengthValue == other.ResolutionScaleLengthValue ||
                    ResolutionScaleLengthValue != null &&
                    ResolutionScaleLengthValue.SequenceEqual(other.ResolutionScaleLengthValue)
                ) && 
                (
                    ResolutionScaleUnitCode == other.ResolutionScaleUnitCode ||
                    ResolutionScaleUnitCode != null &&
                    ResolutionScaleUnitCode.SequenceEqual(other.ResolutionScaleUnitCode)
                ) && 
                (
                    ResolutionScaleXCoordinateAValue == other.ResolutionScaleXCoordinateAValue ||
                    ResolutionScaleXCoordinateAValue != null &&
                    ResolutionScaleXCoordinateAValue.SequenceEqual(other.ResolutionScaleXCoordinateAValue)
                ) && 
                (
                    ResolutionScaleYCoordinateAValue == other.ResolutionScaleYCoordinateAValue ||
                    ResolutionScaleYCoordinateAValue != null &&
                    ResolutionScaleYCoordinateAValue.SequenceEqual(other.ResolutionScaleYCoordinateAValue)
                ) && 
                (
                    ResolutionScaleXCoordinateBValue == other.ResolutionScaleXCoordinateBValue ||
                    ResolutionScaleXCoordinateBValue != null &&
                    ResolutionScaleXCoordinateBValue.SequenceEqual(other.ResolutionScaleXCoordinateBValue)
                ) && 
                (
                    ResolutionScaleYCoordinateBValue == other.ResolutionScaleYCoordinateBValue ||
                    ResolutionScaleYCoordinateBValue != null &&
                    ResolutionScaleYCoordinateBValue.SequenceEqual(other.ResolutionScaleYCoordinateBValue)
                ) && 
                (
                    ResolutionComment == other.ResolutionComment ||
                    ResolutionComment != null &&
                    ResolutionComment.SequenceEqual(other.ResolutionComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResolutionMeansCode != null)
                    hashCode = hashCode * 59 + ResolutionMeansCode.GetHashCode();
                    if (ResolutionScaleLengthValue != null)
                    hashCode = hashCode * 59 + ResolutionScaleLengthValue.GetHashCode();
                    if (ResolutionScaleUnitCode != null)
                    hashCode = hashCode * 59 + ResolutionScaleUnitCode.GetHashCode();
                    if (ResolutionScaleXCoordinateAValue != null)
                    hashCode = hashCode * 59 + ResolutionScaleXCoordinateAValue.GetHashCode();
                    if (ResolutionScaleYCoordinateAValue != null)
                    hashCode = hashCode * 59 + ResolutionScaleYCoordinateAValue.GetHashCode();
                    if (ResolutionScaleXCoordinateBValue != null)
                    hashCode = hashCode * 59 + ResolutionScaleXCoordinateBValue.GetHashCode();
                    if (ResolutionScaleYCoordinateBValue != null)
                    hashCode = hashCode * 59 + ResolutionScaleYCoordinateBValue.GetHashCode();
                    if (ResolutionComment != null)
                    hashCode = hashCode * 59 + ResolutionComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomResolutionMethodInformationType left, BiomResolutionMethodInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomResolutionMethodInformationType left, BiomResolutionMethodInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
