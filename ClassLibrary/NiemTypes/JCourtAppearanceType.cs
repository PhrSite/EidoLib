/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an appearance required of a party in a court of law on a certain date.
    /// </summary>
    [DataContract]
    public partial class JCourtAppearanceType : IEquatable<JCourtAppearanceType>
    { 
        /// <summary>
        /// True if the defendant of a case is not present for an appearance; false otherwise. NIEM reference is j:CourtAppearanceDefendantNotPresentIndicator
        /// </summary>
        /// <value>True if the defendant of a case is not present for an appearance; false otherwise. NIEM reference is j:CourtAppearanceDefendantNotPresentIndicator</value>

        [DataMember(Name="isDefendantNotPresent")]
        public List<NiemXsboolean> IsDefendantNotPresent { get; set; }

        /// <summary>
        /// A case for which a party must appear in court. NIEM reference is j:CourtAppearanceCase
        /// </summary>
        /// <value>A case for which a party must appear in court. NIEM reference is j:CourtAppearanceCase</value>

        [DataMember(Name="case")]
        public List<NcCaseType> _Case { get; set; }

        /// <summary>
        /// A court in which a party is required to appear. NIEM reference is j:CourtAppearanceCourt
        /// </summary>
        /// <value>A court in which a party is required to appear. NIEM reference is j:CourtAppearanceCourt</value>

        [DataMember(Name="court")]
        public List<JCourtType> Court { get; set; }

        /// <summary>
        /// A date on which a party must appear in court. NIEM reference is j:CourtAppearanceDate
        /// </summary>
        /// <value>A date on which a party must appear in court. NIEM reference is j:CourtAppearanceDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// An entity required to appear in court. NIEM reference is j:CourtAppearanceEntity
        /// </summary>
        /// <value>An entity required to appear in court. NIEM reference is j:CourtAppearanceEntity</value>

        [DataMember(Name="entity")]
        public List<NcEntityType> Entity { get; set; }

        /// <summary>
        /// A reason a party is required to appear in court. NIEM reference is j:CourtAppearanceReasonText
        /// </summary>
        /// <value>A reason a party is required to appear in court. NIEM reference is j:CourtAppearanceReasonText</value>

        [DataMember(Name="reason")]
        public List<NcTextType> Reason { get; set; }

        /// <summary>
        /// A kind of appearance a party is required to make in court. NIEM reference is j:CourtAppearanceCategoryText
        /// </summary>
        /// <value>A kind of appearance a party is required to make in court. NIEM reference is j:CourtAppearanceCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// jCourtAppearanceType JSON-LD context
        /// </summary>
        /// <value>jCourtAppearanceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCourtAppearanceTypeContextJsonldEnum for ../JSON-LD_Contexts/jCourtAppearanceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCourtAppearanceTypeContext.jsonld")]
            JSONLDContextsjCourtAppearanceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCourtAppearanceType JSON-LD context
        /// </summary>
        /// <value>jCourtAppearanceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCourtAppearanceType {\n");
            sb.Append("  IsDefendantNotPresent: ").Append(IsDefendantNotPresent).Append("\n");
            sb.Append("  _Case: ").Append(_Case).Append("\n");
            sb.Append("  Court: ").Append(Court).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCourtAppearanceType)obj);
        }

        /// <summary>
        /// Returns true if JCourtAppearanceType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCourtAppearanceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCourtAppearanceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsDefendantNotPresent == other.IsDefendantNotPresent ||
                    IsDefendantNotPresent != null &&
                    IsDefendantNotPresent.SequenceEqual(other.IsDefendantNotPresent)
                ) && 
                (
                    _Case == other._Case ||
                    _Case != null &&
                    _Case.SequenceEqual(other._Case)
                ) && 
                (
                    Court == other.Court ||
                    Court != null &&
                    Court.SequenceEqual(other.Court)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Entity == other.Entity ||
                    Entity != null &&
                    Entity.SequenceEqual(other.Entity)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.SequenceEqual(other.Reason)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsDefendantNotPresent != null)
                    hashCode = hashCode * 59 + IsDefendantNotPresent.GetHashCode();
                    if (_Case != null)
                    hashCode = hashCode * 59 + _Case.GetHashCode();
                    if (Court != null)
                    hashCode = hashCode * 59 + Court.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Entity != null)
                    hashCode = hashCode * 59 + Entity.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCourtAppearanceType left, JCourtAppearanceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCourtAppearanceType left, JCourtAppearanceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
