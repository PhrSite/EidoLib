/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person involved in the enforcement of law.
    /// </summary>
    [DataContract]
    public partial class JEnforcementOfficialType : IEquatable<JEnforcementOfficialType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityCategoryCode
        /// </summary>
        /// <value>A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityCategoryCode</value>

        [DataMember(Name="activityCategoryCode")]
        public List<UcrLEOKAActivityCategoryCodeType> ActivityCategoryCode { get; set; }

        /// <summary>
        /// A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityCategoryText
        /// </summary>
        /// <value>A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityCategoryText</value>

        [DataMember(Name="activityCategory")]
        public List<NcTextType> ActivityCategory { get; set; }

        /// <summary>
        /// A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityNDExCategoryCode
        /// </summary>
        /// <value>A kind of activity or circumstance in which an enforcement official was engaged. NIEM reference is j:EnforcementOfficialActivityNDExCategoryCode</value>

        [DataMember(Name="activityNdExCategoryCode")]
        public List<NdexLEOKAActivityCategoryNDExCodeType> ActivityNdExCategoryCode { get; set; }

        /// <summary>
        /// A kind of assignment of an enforcement official. NIEM reference is j:EnforcementOfficialAssignmentCategoryCode
        /// </summary>
        /// <value>A kind of assignment of an enforcement official. NIEM reference is j:EnforcementOfficialAssignmentCategoryCode</value>

        [DataMember(Name="assignmentCategoryCode")]
        public List<UcrLEOKAOfficerAssignmentCategoryCodeType> AssignmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of assignment of an enforcement official. NIEM reference is j:EnforcementOfficialAssignmentCategoryText
        /// </summary>
        /// <value>A kind of assignment of an enforcement official. NIEM reference is j:EnforcementOfficialAssignmentCategoryText</value>

        [DataMember(Name="assignmentCategory")]
        public List<NcTextType> AssignmentCategory { get; set; }

        /// <summary>
        /// An identification used to refer to an enforcement official. NIEM reference is j:EnforcementOfficialBadgeIdentification
        /// </summary>
        /// <value>An identification used to refer to an enforcement official. NIEM reference is j:EnforcementOfficialBadgeIdentification</value>

        [DataMember(Name="badgeIdentification")]
        public List<NcIdentificationType> BadgeIdentification { get; set; }

        /// <summary>
        /// A Peace Official Standards and Training identification. NIEM reference is j:EnforcementOfficialPOSTLicenseIdentification
        /// </summary>
        /// <value>A Peace Official Standards and Training identification. NIEM reference is j:EnforcementOfficialPOSTLicenseIdentification</value>

        [DataMember(Name="postLicenseIdentification")]
        public List<NcIdentificationType> PostLicenseIdentification { get; set; }

        /// <summary>
        /// A kind of enforcement official. NIEM reference is j:EnforcementOfficialCategoryText
        /// </summary>
        /// <value>A kind of enforcement official. NIEM reference is j:EnforcementOfficialCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A set of dates and times an enforcement official is unavailable for scheduling. NIEM reference is j:EnforcementOfficialUnavailableSchedule
        /// </summary>
        /// <value>A set of dates and times an enforcement official is unavailable for scheduling. NIEM reference is j:EnforcementOfficialUnavailableSchedule</value>

        [DataMember(Name="unavailableSchedule")]
        public List<NcScheduleDayType> UnavailableSchedule { get; set; }

        /// <summary>
        /// An enforcement unit to which an enforcement officer is assigned. NIEM reference is j:EnforcementOfficialUnit
        /// </summary>
        /// <value>An enforcement unit to which an enforcement officer is assigned. NIEM reference is j:EnforcementOfficialUnit</value>

        [DataMember(Name="unit")]
        public List<JEnforcementUnitType> Unit { get; set; }

        /// <summary>
        /// A LEOKA (Law Enforcement Officer Killed or Assaulted) classification of an incident. NIEM reference is j:LEOKACircumstanceCategoryCode
        /// </summary>
        /// <value>A LEOKA (Law Enforcement Officer Killed or Assaulted) classification of an incident. NIEM reference is j:LEOKACircumstanceCategoryCode</value>

        [DataMember(Name="leokaCircumstanceCategoryCode")]
        public List<JLEOKACircumstanceCategoryCodeType> LeokaCircumstanceCategoryCode { get; set; }

        /// <summary>
        /// jEnforcementOfficialType JSON-LD context
        /// </summary>
        /// <value>jEnforcementOfficialType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjEnforcementOfficialTypeContextJsonldEnum for ../JSON-LD_Contexts/jEnforcementOfficialTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jEnforcementOfficialTypeContext.jsonld")]
            JSONLDContextsjEnforcementOfficialTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jEnforcementOfficialType JSON-LD context
        /// </summary>
        /// <value>jEnforcementOfficialType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JEnforcementOfficialType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  ActivityCategoryCode: ").Append(ActivityCategoryCode).Append("\n");
            sb.Append("  ActivityCategory: ").Append(ActivityCategory).Append("\n");
            sb.Append("  ActivityNdExCategoryCode: ").Append(ActivityNdExCategoryCode).Append("\n");
            sb.Append("  AssignmentCategoryCode: ").Append(AssignmentCategoryCode).Append("\n");
            sb.Append("  AssignmentCategory: ").Append(AssignmentCategory).Append("\n");
            sb.Append("  BadgeIdentification: ").Append(BadgeIdentification).Append("\n");
            sb.Append("  PostLicenseIdentification: ").Append(PostLicenseIdentification).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  UnavailableSchedule: ").Append(UnavailableSchedule).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  LeokaCircumstanceCategoryCode: ").Append(LeokaCircumstanceCategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JEnforcementOfficialType)obj);
        }

        /// <summary>
        /// Returns true if JEnforcementOfficialType instances are equal
        /// </summary>
        /// <param name="other">Instance of JEnforcementOfficialType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JEnforcementOfficialType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    ActivityCategoryCode == other.ActivityCategoryCode ||
                    ActivityCategoryCode != null &&
                    ActivityCategoryCode.SequenceEqual(other.ActivityCategoryCode)
                ) && 
                (
                    ActivityCategory == other.ActivityCategory ||
                    ActivityCategory != null &&
                    ActivityCategory.SequenceEqual(other.ActivityCategory)
                ) && 
                (
                    ActivityNdExCategoryCode == other.ActivityNdExCategoryCode ||
                    ActivityNdExCategoryCode != null &&
                    ActivityNdExCategoryCode.SequenceEqual(other.ActivityNdExCategoryCode)
                ) && 
                (
                    AssignmentCategoryCode == other.AssignmentCategoryCode ||
                    AssignmentCategoryCode != null &&
                    AssignmentCategoryCode.SequenceEqual(other.AssignmentCategoryCode)
                ) && 
                (
                    AssignmentCategory == other.AssignmentCategory ||
                    AssignmentCategory != null &&
                    AssignmentCategory.SequenceEqual(other.AssignmentCategory)
                ) && 
                (
                    BadgeIdentification == other.BadgeIdentification ||
                    BadgeIdentification != null &&
                    BadgeIdentification.SequenceEqual(other.BadgeIdentification)
                ) && 
                (
                    PostLicenseIdentification == other.PostLicenseIdentification ||
                    PostLicenseIdentification != null &&
                    PostLicenseIdentification.SequenceEqual(other.PostLicenseIdentification)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    UnavailableSchedule == other.UnavailableSchedule ||
                    UnavailableSchedule != null &&
                    UnavailableSchedule.SequenceEqual(other.UnavailableSchedule)
                ) && 
                (
                    Unit == other.Unit ||
                    Unit != null &&
                    Unit.SequenceEqual(other.Unit)
                ) && 
                (
                    LeokaCircumstanceCategoryCode == other.LeokaCircumstanceCategoryCode ||
                    LeokaCircumstanceCategoryCode != null &&
                    LeokaCircumstanceCategoryCode.SequenceEqual(other.LeokaCircumstanceCategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (ActivityCategoryCode != null)
                    hashCode = hashCode * 59 + ActivityCategoryCode.GetHashCode();
                    if (ActivityCategory != null)
                    hashCode = hashCode * 59 + ActivityCategory.GetHashCode();
                    if (ActivityNdExCategoryCode != null)
                    hashCode = hashCode * 59 + ActivityNdExCategoryCode.GetHashCode();
                    if (AssignmentCategoryCode != null)
                    hashCode = hashCode * 59 + AssignmentCategoryCode.GetHashCode();
                    if (AssignmentCategory != null)
                    hashCode = hashCode * 59 + AssignmentCategory.GetHashCode();
                    if (BadgeIdentification != null)
                    hashCode = hashCode * 59 + BadgeIdentification.GetHashCode();
                    if (PostLicenseIdentification != null)
                    hashCode = hashCode * 59 + PostLicenseIdentification.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (UnavailableSchedule != null)
                    hashCode = hashCode * 59 + UnavailableSchedule.GetHashCode();
                    if (Unit != null)
                    hashCode = hashCode * 59 + Unit.GetHashCode();
                    if (LeokaCircumstanceCategoryCode != null)
                    hashCode = hashCode * 59 + LeokaCircumstanceCategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JEnforcementOfficialType left, JEnforcementOfficialType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JEnforcementOfficialType left, JEnforcementOfficialType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
