/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a journey from one place to another.
    /// </summary>
    [DataContract]
    public partial class MVoyageType : IEquatable<MVoyageType>
    { 
        /// <summary>
        /// A date and time a voyage begins. NIEM reference is m:VoyageBeginDateTime
        /// </summary>
        /// <value>A date and time a voyage begins. NIEM reference is m:VoyageBeginDateTime</value>

        [DataMember(Name="beginDateTime")]
        public List<NcDateType> BeginDateTime { get; set; }

        /// <summary>
        /// A kind of a voyage. NIEM reference is m:VoyageCategoryText
        /// </summary>
        /// <value>A kind of a voyage. NIEM reference is m:VoyageCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A destination of a voyage. NIEM reference is m:VoyageDestinationLocation
        /// </summary>
        /// <value>A destination of a voyage. NIEM reference is m:VoyageDestinationLocation</value>

        [DataMember(Name="destinationLocation")]
        public List<NcLocationType> DestinationLocation { get; set; }

        /// <summary>
        /// A date and time a voyage ends. NIEM reference is m:VoyageEndDateTime
        /// </summary>
        /// <value>A date and time a voyage ends. NIEM reference is m:VoyageEndDateTime</value>

        [DataMember(Name="endDateTime")]
        public List<NcDateType> EndDateTime { get; set; }

        /// <summary>
        /// An identification of a voyage. NIEM reference is m:VoyageIdentification
        /// </summary>
        /// <value>An identification of a voyage. NIEM reference is m:VoyageIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// An origin of a voyage. NIEM reference is m:VoyageOriginLocation
        /// </summary>
        /// <value>An origin of a voyage. NIEM reference is m:VoyageOriginLocation</value>

        [DataMember(Name="originLocation")]
        public List<NcLocationType> OriginLocation { get; set; }

        /// <summary>
        /// A summary or description of a voyage. NIEM reference is m:VoyageSummaryText
        /// </summary>
        /// <value>A summary or description of a voyage. NIEM reference is m:VoyageSummaryText</value>

        [DataMember(Name="summary")]
        public List<NcTextType> Summary { get; set; }

        /// <summary>
        /// A description of the use or purpose of a vessel on a voyage. NIEM reference is m:VoyageVesselUseText
        /// </summary>
        /// <value>A description of the use or purpose of a vessel on a voyage. NIEM reference is m:VoyageVesselUseText</value>

        [DataMember(Name="vesselUse")]
        public List<NcTextType> VesselUse { get; set; }

        /// <summary>
        /// mVoyageType JSON-LD context
        /// </summary>
        /// <value>mVoyageType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmVoyageTypeContextJsonldEnum for ../JSON-LD_Contexts/mVoyageTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mVoyageTypeContext.jsonld")]
            JSONLDContextsmVoyageTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mVoyageType JSON-LD context
        /// </summary>
        /// <value>mVoyageType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MVoyageType {\n");
            sb.Append("  BeginDateTime: ").Append(BeginDateTime).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DestinationLocation: ").Append(DestinationLocation).Append("\n");
            sb.Append("  EndDateTime: ").Append(EndDateTime).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  OriginLocation: ").Append(OriginLocation).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  VesselUse: ").Append(VesselUse).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MVoyageType)obj);
        }

        /// <summary>
        /// Returns true if MVoyageType instances are equal
        /// </summary>
        /// <param name="other">Instance of MVoyageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MVoyageType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BeginDateTime == other.BeginDateTime ||
                    BeginDateTime != null &&
                    BeginDateTime.SequenceEqual(other.BeginDateTime)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    DestinationLocation == other.DestinationLocation ||
                    DestinationLocation != null &&
                    DestinationLocation.SequenceEqual(other.DestinationLocation)
                ) && 
                (
                    EndDateTime == other.EndDateTime ||
                    EndDateTime != null &&
                    EndDateTime.SequenceEqual(other.EndDateTime)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    OriginLocation == other.OriginLocation ||
                    OriginLocation != null &&
                    OriginLocation.SequenceEqual(other.OriginLocation)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.SequenceEqual(other.Summary)
                ) && 
                (
                    VesselUse == other.VesselUse ||
                    VesselUse != null &&
                    VesselUse.SequenceEqual(other.VesselUse)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BeginDateTime != null)
                    hashCode = hashCode * 59 + BeginDateTime.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (DestinationLocation != null)
                    hashCode = hashCode * 59 + DestinationLocation.GetHashCode();
                    if (EndDateTime != null)
                    hashCode = hashCode * 59 + EndDateTime.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (OriginLocation != null)
                    hashCode = hashCode * 59 + OriginLocation.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                    if (VesselUse != null)
                    hashCode = hashCode * 59 + VesselUse.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MVoyageType left, MVoyageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MVoyageType left, MVoyageType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
