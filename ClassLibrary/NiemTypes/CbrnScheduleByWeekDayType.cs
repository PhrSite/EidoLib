/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a schedule where the hours are not the same for all weekdays.
    /// </summary>
    [DataContract]
    public partial class CbrnScheduleByWeekDayType : CbrnRemarksComplexObjectType, IEquatable<CbrnScheduleByWeekDayType>
    { 
        /// <summary>
        /// A text description of the normal Monday operating hours. NIEM reference is cbrn:MondayHoursText
        /// </summary>
        /// <value>A text description of the normal Monday operating hours. NIEM reference is cbrn:MondayHoursText</value>

        [DataMember(Name="mondayHours")]
        public List<NcTextType> MondayHours { get; set; }

        /// <summary>
        /// A text description of the normal Tuesday operating hours. NIEM reference is cbrn:TuesdayHoursText
        /// </summary>
        /// <value>A text description of the normal Tuesday operating hours. NIEM reference is cbrn:TuesdayHoursText</value>

        [DataMember(Name="tuesdayHours")]
        public List<NcTextType> TuesdayHours { get; set; }

        /// <summary>
        /// A text description of the normal Wensday operating hours. NIEM reference is cbrn:WednesdayHoursText
        /// </summary>
        /// <value>A text description of the normal Wensday operating hours. NIEM reference is cbrn:WednesdayHoursText</value>

        [DataMember(Name="wednesdayHours")]
        public List<NcTextType> WednesdayHours { get; set; }

        /// <summary>
        /// A text description of the normal Thursday operating hours. NIEM reference is cbrn:ThursdayHoursText
        /// </summary>
        /// <value>A text description of the normal Thursday operating hours. NIEM reference is cbrn:ThursdayHoursText</value>

        [DataMember(Name="thursdayHours")]
        public List<NcTextType> ThursdayHours { get; set; }

        /// <summary>
        /// A text description of the normal Friday operating hours. NIEM reference is cbrn:FridayHoursText
        /// </summary>
        /// <value>A text description of the normal Friday operating hours. NIEM reference is cbrn:FridayHoursText</value>

        [DataMember(Name="fridayHours")]
        public List<NcTextType> FridayHours { get; set; }

        /// <summary>
        /// A text description of the normal Saturday operating hours. NIEM reference is cbrn:SaturdayHoursText
        /// </summary>
        /// <value>A text description of the normal Saturday operating hours. NIEM reference is cbrn:SaturdayHoursText</value>

        [DataMember(Name="saturdayHours")]
        public List<NcTextType> SaturdayHours { get; set; }

        /// <summary>
        /// A text description of the normal Sunday operating hours. NIEM reference is cbrn:SundayHoursText
        /// </summary>
        /// <value>A text description of the normal Sunday operating hours. NIEM reference is cbrn:SundayHoursText</value>

        [DataMember(Name="sundayHours")]
        public List<NcTextType> SundayHours { get; set; }

        /// <summary>
        /// cbrnScheduleByWeekDayType JSON-LD context
        /// </summary>
        /// <value>cbrnScheduleByWeekDayType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextscbrnScheduleByWeekDayTypeContextJsonldEnum for ../JSON-LD_Contexts/cbrnScheduleByWeekDayTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/cbrnScheduleByWeekDayTypeContext.jsonld")]
            JSONLDContextscbrnScheduleByWeekDayTypeContextJsonldEnum = 0        }

        /// <summary>
        /// cbrnScheduleByWeekDayType JSON-LD context
        /// </summary>
        /// <value>cbrnScheduleByWeekDayType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CbrnScheduleByWeekDayType {\n");
            sb.Append("  MondayHours: ").Append(MondayHours).Append("\n");
            sb.Append("  TuesdayHours: ").Append(TuesdayHours).Append("\n");
            sb.Append("  WednesdayHours: ").Append(WednesdayHours).Append("\n");
            sb.Append("  ThursdayHours: ").Append(ThursdayHours).Append("\n");
            sb.Append("  FridayHours: ").Append(FridayHours).Append("\n");
            sb.Append("  SaturdayHours: ").Append(SaturdayHours).Append("\n");
            sb.Append("  SundayHours: ").Append(SundayHours).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CbrnScheduleByWeekDayType)obj);
        }

        /// <summary>
        /// Returns true if CbrnScheduleByWeekDayType instances are equal
        /// </summary>
        /// <param name="other">Instance of CbrnScheduleByWeekDayType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CbrnScheduleByWeekDayType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MondayHours == other.MondayHours ||
                    MondayHours != null &&
                    MondayHours.SequenceEqual(other.MondayHours)
                ) && 
                (
                    TuesdayHours == other.TuesdayHours ||
                    TuesdayHours != null &&
                    TuesdayHours.SequenceEqual(other.TuesdayHours)
                ) && 
                (
                    WednesdayHours == other.WednesdayHours ||
                    WednesdayHours != null &&
                    WednesdayHours.SequenceEqual(other.WednesdayHours)
                ) && 
                (
                    ThursdayHours == other.ThursdayHours ||
                    ThursdayHours != null &&
                    ThursdayHours.SequenceEqual(other.ThursdayHours)
                ) && 
                (
                    FridayHours == other.FridayHours ||
                    FridayHours != null &&
                    FridayHours.SequenceEqual(other.FridayHours)
                ) && 
                (
                    SaturdayHours == other.SaturdayHours ||
                    SaturdayHours != null &&
                    SaturdayHours.SequenceEqual(other.SaturdayHours)
                ) && 
                (
                    SundayHours == other.SundayHours ||
                    SundayHours != null &&
                    SundayHours.SequenceEqual(other.SundayHours)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MondayHours != null)
                    hashCode = hashCode * 59 + MondayHours.GetHashCode();
                    if (TuesdayHours != null)
                    hashCode = hashCode * 59 + TuesdayHours.GetHashCode();
                    if (WednesdayHours != null)
                    hashCode = hashCode * 59 + WednesdayHours.GetHashCode();
                    if (ThursdayHours != null)
                    hashCode = hashCode * 59 + ThursdayHours.GetHashCode();
                    if (FridayHours != null)
                    hashCode = hashCode * 59 + FridayHours.GetHashCode();
                    if (SaturdayHours != null)
                    hashCode = hashCode * 59 + SaturdayHours.GetHashCode();
                    if (SundayHours != null)
                    hashCode = hashCode * 59 + SundayHours.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CbrnScheduleByWeekDayType left, CbrnScheduleByWeekDayType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CbrnScheduleByWeekDayType left, CbrnScheduleByWeekDayType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
