/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an article or thing.
    /// </summary>
    [DataContract]
    public partial class NcItemType : IEquatable<NcItemType>
    { 
        /// <summary>
        /// A name of an item. NIEM reference is nc:ItemName
        /// </summary>
        /// <value>A name of an item. NIEM reference is nc:ItemName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// An action that was taken against a property item. NIEM reference is nc:ItemActionText
        /// </summary>
        /// <value>An action that was taken against a property item. NIEM reference is nc:ItemActionText</value>

        [DataMember(Name="action")]
        public List<NcTextType> Action { get; set; }

        /// <summary>
        /// A bar code identification assigned to a property item. NIEM reference is nc:ItemBarCodeIdentification
        /// </summary>
        /// <value>A bar code identification assigned to a property item. NIEM reference is nc:ItemBarCodeIdentification</value>

        [DataMember(Name="barCodeIdentification")]
        public List<NcIdentificationType> BarCodeIdentification { get; set; }

        /// <summary>
        /// A state or appearance of an item. NIEM reference is nc:ItemConditionText
        /// </summary>
        /// <value>A state or appearance of an item. NIEM reference is nc:ItemConditionText</value>

        [DataMember(Name="condition")]
        public List<NcTextType> Condition { get; set; }

        /// <summary>
        /// An identification assigned to an item by a dealer. NIEM reference is nc:ItemDealerIdentification
        /// </summary>
        /// <value>An identification assigned to an item by a dealer. NIEM reference is nc:ItemDealerIdentification</value>

        [DataMember(Name="dealerIdentification")]
        public List<NcIdentificationType> DealerIdentification { get; set; }

        /// <summary>
        /// A description of an item. NIEM reference is nc:ItemDescriptionText
        /// </summary>
        /// <value>A description of an item. NIEM reference is nc:ItemDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A result or outcome that happens to an item after it has been handled or processed. NIEM reference is nc:ItemDisposition
        /// </summary>
        /// <value>A result or outcome that happens to an item after it has been handled or processed. NIEM reference is nc:ItemDisposition</value>

        [DataMember(Name="disposition")]
        public List<NcItemDispositionType> Disposition { get; set; }

        /// <summary>
        /// An identification assigned to an item. NIEM reference is nc:ItemOtherIdentification
        /// </summary>
        /// <value>An identification assigned to an item. NIEM reference is nc:ItemOtherIdentification</value>

        [DataMember(Name="otherIdentification")]
        public List<NcIdentificationType> OtherIdentification { get; set; }

        /// <summary>
        /// An entity which owns a property item. NIEM reference is nc:ItemOwner
        /// </summary>
        /// <value>An entity which owns a property item. NIEM reference is nc:ItemOwner</value>

        [DataMember(Name="owner")]
        public List<NcEntityType> Owner { get; set; }

        /// <summary>
        /// An identifier applied to an item by the owner. NIEM reference is nc:ItemOwnerAppliedID
        /// </summary>
        /// <value>An identifier applied to an item by the owner. NIEM reference is nc:ItemOwnerAppliedID</value>

        [DataMember(Name="ownerAppliedId")]
        public List<NiemXsstring> OwnerAppliedId { get; set; }

        /// <summary>
        /// An amount of money a current owner paid to purchase a property item. NIEM reference is nc:ItemOwnerPurchasedValue
        /// </summary>
        /// <value>An amount of money a current owner paid to purchase a property item. NIEM reference is nc:ItemOwnerPurchasedValue</value>

        [DataMember(Name="ownerPurchasedValue")]
        public List<NcItemValueType> OwnerPurchasedValue { get; set; }

        /// <summary>
        /// A description of how or why a party other than the owner came to possess a property item. NIEM reference is nc:ItemPossessionDescriptionText
        /// </summary>
        /// <value>A description of how or why a party other than the owner came to possess a property item. NIEM reference is nc:ItemPossessionDescriptionText</value>

        [DataMember(Name="possessionDescription")]
        public List<NcTextType> PossessionDescription { get; set; }

        /// <summary>
        /// An entity other than the owner which has possession of an item. NIEM reference is nc:ItemPossessor
        /// </summary>
        /// <value>An entity other than the owner which has possession of an item. NIEM reference is nc:ItemPossessor</value>

        [DataMember(Name="possessor")]
        public List<NcEntityType> Possessor { get; set; }

        /// <summary>
        /// An identification issued to an item when taken into possession for official purposes. NIEM reference is nc:ItemReceiptIdentification
        /// </summary>
        /// <value>An identification issued to an item when taken into possession for official purposes. NIEM reference is nc:ItemReceiptIdentification</value>

        [DataMember(Name="receiptIdentification")]
        public List<NcIdentificationType> ReceiptIdentification { get; set; }

        /// <summary>
        /// An identification of an item based on radio waves. NIEM reference is nc:ItemRFIdentification
        /// </summary>
        /// <value>An identification of an item based on radio waves. NIEM reference is nc:ItemRFIdentification</value>

        [DataMember(Name="rfIdentification")]
        public List<NcIdentificationType> RfIdentification { get; set; }

        /// <summary>
        /// An identification inscribed on or attached to a part, collection of parts, or complete unit by the manufacturer. NIEM reference is nc:ItemSerialIdentification
        /// </summary>
        /// <value>An identification inscribed on or attached to a part, collection of parts, or complete unit by the manufacturer. NIEM reference is nc:ItemSerialIdentification</value>

        [DataMember(Name="serialIdentification")]
        public List<NcIdentificationType> SerialIdentification { get; set; }

        /// <summary>
        /// A state-assigned identification for an item. NIEM reference is nc:ItemStateIdentification
        /// </summary>
        /// <value>A state-assigned identification for an item. NIEM reference is nc:ItemStateIdentification</value>

        [DataMember(Name="stateIdentification")]
        public List<NcIdentificationType> StateIdentification { get; set; }

        /// <summary>
        /// A status of an item. NIEM reference is nc:ItemStatus
        /// </summary>
        /// <value>A status of an item. NIEM reference is nc:ItemStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A manner or way in which an item is used. NIEM reference is nc:ItemUsageText
        /// </summary>
        /// <value>A manner or way in which an item is used. NIEM reference is nc:ItemUsageText</value>

        [DataMember(Name="usage")]
        public List<NcTextType> Usage { get; set; }

        /// <summary>
        /// An evaluation of the monetary worth of an item. NIEM reference is nc:ItemValue
        /// </summary>
        /// <value>An evaluation of the monetary worth of an item. NIEM reference is nc:ItemValue</value>

        [DataMember(Name="value")]
        public List<NcItemValueType> Value { get; set; }

        /// <summary>
        /// An identifier of an item that is visible on the item itself. NIEM reference is nc:ItemVisibleID
        /// </summary>
        /// <value>An identifier of an item that is visible on the item itself. NIEM reference is nc:ItemVisibleID</value>

        [DataMember(Name="visibleId")]
        public List<NiemXsstring> VisibleId { get; set; }

        /// <summary>
        /// True if an item is traditionally considered to be a weapon; false otherwise. NIEM reference is nc:WeaponIndicator
        /// </summary>
        /// <value>True if an item is traditionally considered to be a weapon; false otherwise. NIEM reference is nc:WeaponIndicator</value>

        [DataMember(Name="isWeapon")]
        public List<NiemXsboolean> IsWeapon { get; set; }

        /// <summary>
        /// True if an item not traditionally considered to be a weapon is used as such; false otherwise. NIEM reference is nc:WeaponUsageIndicator
        /// </summary>
        /// <value>True if an item not traditionally considered to be a weapon is used as such; false otherwise. NIEM reference is nc:WeaponUsageIndicator</value>

        [DataMember(Name="isWeaponUsage")]
        public List<NiemXsboolean> IsWeaponUsage { get; set; }

        /// <summary>
        /// A count of the individual units which make up an item. NIEM reference is nc:ItemQuantity
        /// </summary>
        /// <value>A count of the individual units which make up an item. NIEM reference is nc:ItemQuantity</value>

        [DataMember(Name="quantity")]
        public List<NcQuantityType> Quantity { get; set; }

        /// <summary>
        /// A style of a property item. NIEM reference is nc:ItemStyleText
        /// </summary>
        /// <value>A style of a property item. NIEM reference is nc:ItemStyleText</value>

        [DataMember(Name="style")]
        public List<NcTextType> Style { get; set; }

        /// <summary>
        /// A style of a vehicle. NIEM reference is j:VehicleStyleCode
        /// </summary>
        /// <value>A style of a vehicle. NIEM reference is j:VehicleStyleCode</value>

        [DataMember(Name="vehicleStyleCode")]
        public List<NcicVSTCodeType> VehicleStyleCode { get; set; }

        /// <summary>
        /// A single, upper-most, front-most, or majority color of a vehicle. NIEM reference is j:ConveyanceColorPrimaryCode
        /// </summary>
        /// <value>A single, upper-most, front-most, or majority color of a vehicle. NIEM reference is j:ConveyanceColorPrimaryCode</value>

        [DataMember(Name="conveyanceColorPrimaryCode")]
        public List<NcicVCOCodeType> ConveyanceColorPrimaryCode { get; set; }

        /// <summary>
        /// A single, upper-most, front-most, or majority color of a conveyance. NIEM reference is nc:ConveyanceColorPrimaryText
        /// </summary>
        /// <value>A single, upper-most, front-most, or majority color of a conveyance. NIEM reference is nc:ConveyanceColorPrimaryText</value>

        [DataMember(Name="conveyanceColorPrimary")]
        public List<NcTextType> ConveyanceColorPrimary { get; set; }

        /// <summary>
        /// A lower-most or rear-most color of a two-tone vehicle or a lesser color of a multi-colored vehicle. NIEM reference is j:ConveyanceColorSecondaryCode
        /// </summary>
        /// <value>A lower-most or rear-most color of a two-tone vehicle or a lesser color of a multi-colored vehicle. NIEM reference is j:ConveyanceColorSecondaryCode</value>

        [DataMember(Name="conveyanceColorSecondaryCode")]
        public List<NcicVCOCodeType> ConveyanceColorSecondaryCode { get; set; }

        /// <summary>
        /// A lower-most or rear-most color of a two-tone conveyance or a lesser color of a multi-colored conveyance. NIEM reference is nc:ConveyanceColorSecondaryText
        /// </summary>
        /// <value>A lower-most or rear-most color of a two-tone conveyance or a lesser color of a multi-colored conveyance. NIEM reference is nc:ConveyanceColorSecondaryText</value>

        [DataMember(Name="conveyanceColorSecondary")]
        public List<NcTextType> ConveyanceColorSecondary { get; set; }

        /// <summary>
        /// A description of the overall color of an item. NIEM reference is nc:ItemColorDescriptionText
        /// </summary>
        /// <value>A description of the overall color of an item. NIEM reference is nc:ItemColorDescriptionText</value>

        [DataMember(Name="colorDescription")]
        public List<NcTextType> ColorDescription { get; set; }

        /// <summary>
        /// A color of the majority of a vessel. NIEM reference is j:VesselColorPrimaryCode
        /// </summary>
        /// <value>A color of the majority of a vessel. NIEM reference is j:VesselColorPrimaryCode</value>

        [DataMember(Name="vesselColorPrimaryCode")]
        public List<NcicBC0CodeType> VesselColorPrimaryCode { get; set; }

        /// <summary>
        /// A minor color of a vessel. NIEM reference is j:VesselColorSecondaryCode
        /// </summary>
        /// <value>A minor color of a vessel. NIEM reference is j:VesselColorSecondaryCode</value>

        [DataMember(Name="vesselColorSecondaryCode")]
        public List<NcicBC0CodeType> VesselColorSecondaryCode { get; set; }

        /// <summary>
        /// A name of the manufacturer that produced an item. NIEM reference is nc:ItemMakeName
        /// </summary>
        /// <value>A name of the manufacturer that produced an item. NIEM reference is nc:ItemMakeName</value>

        [DataMember(Name="makeName")]
        public List<NcProperNameTextType> MakeName { get; set; }

        /// <summary>
        /// An amount of money for which an item could currently be sold. NIEM reference is nc:ItemCurrentResaleValue
        /// </summary>
        /// <value>An amount of money for which an item could currently be sold. NIEM reference is nc:ItemCurrentResaleValue</value>

        [DataMember(Name="currentResaleValue")]
        public List<NcItemValueType> CurrentResaleValue { get; set; }

        /// <summary>
        /// A kind of ownership of an item. NIEM reference is nc:ItemOwnershipCategoryText
        /// </summary>
        /// <value>A kind of ownership of an item. NIEM reference is nc:ItemOwnershipCategoryText</value>

        [DataMember(Name="ownershipCategory")]
        public List<NcTextType> OwnershipCategory { get; set; }

        /// <summary>
        /// A kind of art object. NIEM reference is j:ArtObjectCategoryCode
        /// </summary>
        /// <value>A kind of art object. NIEM reference is j:ArtObjectCategoryCode</value>

        [DataMember(Name="artObjectCategoryCode")]
        public List<NdexArtObjectCategoryCodeType> ArtObjectCategoryCode { get; set; }

        /// <summary>
        /// A kind of audio visual recording. NIEM reference is j:AudioVisualRecordingCategoryCode
        /// </summary>
        /// <value>A kind of audio visual recording. NIEM reference is j:AudioVisualRecordingCategoryCode</value>

        [DataMember(Name="audioVisualRecordingCategoryCode")]
        public List<NdexAudioVisualRecordingCategoryCodeType> AudioVisualRecordingCategoryCode { get; set; }

        /// <summary>
        /// A kind of bicycle. NIEM reference is j:BicycleCategoryCode
        /// </summary>
        /// <value>A kind of bicycle. NIEM reference is j:BicycleCategoryCode</value>

        [DataMember(Name="bicycleCategoryCode")]
        public List<NdexBicycleCategoryCodeType> BicycleCategoryCode { get; set; }

        /// <summary>
        /// A kind of clothing. NIEM reference is j:ClothingCategoryCode
        /// </summary>
        /// <value>A kind of clothing. NIEM reference is j:ClothingCategoryCode</value>

        [DataMember(Name="clothingCategoryCode")]
        public List<NdexClothingCategoryCodeType> ClothingCategoryCode { get; set; }

        /// <summary>
        /// A kind of computer hardware and software. NIEM reference is j:ComputerHardwareSoftwareCategoryCode
        /// </summary>
        /// <value>A kind of computer hardware and software. NIEM reference is j:ComputerHardwareSoftwareCategoryCode</value>

        [DataMember(Name="computerHardwareSoftwareCategoryCode")]
        public List<NdexDataProcessingEquipmentCategoryCodeType> ComputerHardwareSoftwareCategoryCode { get; set; }

        /// <summary>
        /// A kind of construction material. NIEM reference is j:ConstructionMaterialCategoryCode
        /// </summary>
        /// <value>A kind of construction material. NIEM reference is j:ConstructionMaterialCategoryCode</value>

        [DataMember(Name="constructionMaterialCategoryCode")]
        public List<NdexConstructionMaterialCategoryCodeType> ConstructionMaterialCategoryCode { get; set; }

        /// <summary>
        /// A kind of consumable good. NIEM reference is j:ConsumableGoodsCategoryCode
        /// </summary>
        /// <value>A kind of consumable good. NIEM reference is j:ConsumableGoodsCategoryCode</value>

        [DataMember(Name="consumableGoodsCategoryCode")]
        public List<NdexConsumableGoodsCategoryCodeType> ConsumableGoodsCategoryCode { get; set; }

        /// <summary>
        /// A kind of conveyance. NIEM reference is nc:ConveyanceCategoryCode
        /// </summary>
        /// <value>A kind of conveyance. NIEM reference is nc:ConveyanceCategoryCode</value>

        [DataMember(Name="conveyanceCategoryCode")]
        public List<CommodityConveyanceCategoryCodeType> ConveyanceCategoryCode { get; set; }

        /// <summary>
        /// A kind of credit/bank/ID card. NIEM reference is j:CreditBankIDCardCategoryCode
        /// </summary>
        /// <value>A kind of credit/bank/ID card. NIEM reference is j:CreditBankIDCardCategoryCode</value>

        [DataMember(Name="creditBankIdCardCategoryCode")]
        public List<NdexCreditBankIDCardCategoryCodeType> CreditBankIdCardCategoryCode { get; set; }

        /// <summary>
        /// A kind of tool. NIEM reference is j:DrillingEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of tool. NIEM reference is j:DrillingEquipmentCategoryCode</value>

        [DataMember(Name="drillingEquipmentCategoryCode")]
        public List<NdexDrillingEquipmentCategoryCodeType> DrillingEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of electronic equipment. NIEM reference is nc:ElectronicEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of electronic equipment. NIEM reference is nc:ElectronicEquipmentCategoryCode</value>

        [DataMember(Name="electronicEquipmentCategoryCode")]
        public List<CommodityElectronicEquipmentCategoryCodeType> ElectronicEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of electronic instrument. NIEM reference is nc:ElectronicInstrumentCategoryCode
        /// </summary>
        /// <value>A kind of electronic instrument. NIEM reference is nc:ElectronicInstrumentCategoryCode</value>

        [DataMember(Name="electronicInstrumentCategoryCode")]
        public List<CommodityElectronicInstrumentCategoryCodeType> ElectronicInstrumentCategoryCode { get; set; }

        /// <summary>
        /// A kind of radio, TV, camera, sound or entertainment device. NIEM reference is j:EntertainmentDeviceCategoryCode
        /// </summary>
        /// <value>A kind of radio, TV, camera, sound or entertainment device. NIEM reference is j:EntertainmentDeviceCategoryCode</value>

        [DataMember(Name="entertainmentDeviceCategoryCode")]
        public List<NdexEntertainmentDeviceCategoryCodeType> EntertainmentDeviceCategoryCode { get; set; }

        /// <summary>
        /// A kind of game and/or gambling apparatus. NIEM reference is j:GamblingEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of game and/or gambling apparatus. NIEM reference is j:GamblingEquipmentCategoryCode</value>

        [DataMember(Name="gamblingEquipmentCategoryCode")]
        public List<NdexGamblingEquipmentCategoryCodeType> GamblingEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of grain. NIEM reference is j:GrainCategoryCode
        /// </summary>
        /// <value>A kind of grain. NIEM reference is j:GrainCategoryCode</value>

        [DataMember(Name="grainCategoryCode")]
        public List<NdexGrainCategoryCodeType> GrainCategoryCode { get; set; }

        /// <summary>
        /// A kind of household goods. NIEM reference is j:HouseholdFurnishingsCategoryCode
        /// </summary>
        /// <value>A kind of household goods. NIEM reference is j:HouseholdFurnishingsCategoryCode</value>

        [DataMember(Name="householdFurnishingsCategoryCode")]
        public List<NdexHouseholdFurnishingsCategoryCodeType> HouseholdFurnishingsCategoryCode { get; set; }

        /// <summary>
        /// A kind of household goods. NIEM reference is j:HousewaresCategoryCode
        /// </summary>
        /// <value>A kind of household goods. NIEM reference is j:HousewaresCategoryCode</value>

        [DataMember(Name="housewaresCategoryCode")]
        public List<NdexHousewaresCategoryCodeType> HousewaresCategoryCode { get; set; }

        /// <summary>
        /// A kind of property. NIEM reference is j:ItemCategoryNCICTYPACode
        /// </summary>
        /// <value>A kind of property. NIEM reference is j:ItemCategoryNCICTYPACode</value>

        [DataMember(Name="categoryNcictypaCode")]
        public List<NcicTYPAECodeType> CategoryNcictypaCode { get; set; }

        /// <summary>
        /// A kind of property. NIEM reference is j:ItemCategoryNCICTYPCode
        /// </summary>
        /// <value>A kind of property. NIEM reference is j:ItemCategoryNCICTYPCode</value>

        [DataMember(Name="categoryNcictypCode")]
        public List<NcicGTYPCodeType> CategoryNcictypCode { get; set; }

        /// <summary>
        /// A kind of property. NIEM reference is j:ItemCategoryNIBRSCode
        /// </summary>
        /// <value>A kind of property. NIEM reference is j:ItemCategoryNIBRSCode</value>

        [DataMember(Name="categoryNibrsCode")]
        public List<UcrArresteeWeaponCodeType> CategoryNibrsCode { get; set; }

        /// <summary>
        /// A kind of property. NIEM reference is j:ItemCategoryNIBRSPropertyCategoryCode
        /// </summary>
        /// <value>A kind of property. NIEM reference is j:ItemCategoryNIBRSPropertyCategoryCode</value>

        [DataMember(Name="categoryNibrsPropertyCategoryCode")]
        public List<UcrPropertyCategoryCodeType> CategoryNibrsPropertyCategoryCode { get; set; }

        /// <summary>
        /// A kind of property item. NIEM reference is nc:ItemCategoryText
        /// </summary>
        /// <value>A kind of property item. NIEM reference is nc:ItemCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A kind of property item. NIEM reference is j:ItemPropertyCategoryFBICode
        /// </summary>
        /// <value>A kind of property item. NIEM reference is j:ItemPropertyCategoryFBICode</value>

        [DataMember(Name="propertyCategoryFbiCode")]
        public List<NdexItemCategoryCodeType> PropertyCategoryFbiCode { get; set; }

        /// <summary>
        /// A kind of item collected as a hobby or given in friendship. NIEM reference is j:KeepsakeCategoryCode
        /// </summary>
        /// <value>A kind of item collected as a hobby or given in friendship. NIEM reference is j:KeepsakeCategoryCode</value>

        [DataMember(Name="keepsakeCategoryCode")]
        public List<NdexKeepsakeCategoryCodeType> KeepsakeCategoryCode { get; set; }

        /// <summary>
        /// A kind of knife. NIEM reference is j:KnifeCategoryCode
        /// </summary>
        /// <value>A kind of knife. NIEM reference is j:KnifeCategoryCode</value>

        [DataMember(Name="knifeCategoryCode")]
        public List<NdexKnifeCategoryCodeType> KnifeCategoryCode { get; set; }

        /// <summary>
        /// A kind of livestock/pet. NIEM reference is j:LivestockCategoryCode
        /// </summary>
        /// <value>A kind of livestock/pet. NIEM reference is j:LivestockCategoryCode</value>

        [DataMember(Name="livestockCategoryCode")]
        public List<NdexLivestockCategoryCodeType> LivestockCategoryCode { get; set; }

        /// <summary>
        /// A kind of machinery. NIEM reference is nc:MachineryCategoryCode
        /// </summary>
        /// <value>A kind of machinery. NIEM reference is nc:MachineryCategoryCode</value>

        [DataMember(Name="machineryCategoryCode")]
        public List<CommodityMachineryCategoryCodeType> MachineryCategoryCode { get; set; }

        /// <summary>
        /// A kind of musical instrument. NIEM reference is j:MusicalInstrumentCategoryCode
        /// </summary>
        /// <value>A kind of musical instrument. NIEM reference is j:MusicalInstrumentCategoryCode</value>

        [DataMember(Name="musicalInstrumentCategoryCode")]
        public List<NdexMusicalInstrumentCategoryCodeType> MusicalInstrumentCategoryCode { get; set; }

        /// <summary>
        /// A kind of office equipment. NIEM reference is j:OfficeEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of office equipment. NIEM reference is j:OfficeEquipmentCategoryCode</value>

        [DataMember(Name="officeEquipmentCategoryCode")]
        public List<NdexOfficeEquipmentCategoryCodeType> OfficeEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of optical equipment. NIEM reference is j:OpticalEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of optical equipment. NIEM reference is j:OpticalEquipmentCategoryCode</value>

        [DataMember(Name="opticalEquipmentCategoryCode")]
        public List<NdexOpticalEquipmentCategoryCodeType> OpticalEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of camera or imaging device. NIEM reference is j:PhotoEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of camera or imaging device. NIEM reference is j:PhotoEquipmentCategoryCode</value>

        [DataMember(Name="photoEquipmentCategoryCode")]
        public List<NdexPhotoEquipmentCategoryCodeType> PhotoEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of public utility service. NIEM reference is j:ServiceUtilityCategoryCode
        /// </summary>
        /// <value>A kind of public utility service. NIEM reference is j:ServiceUtilityCategoryCode</value>

        [DataMember(Name="serviceUtilityCategoryCode")]
        public List<NdexServiceUtilityCategoryCodeType> ServiceUtilityCategoryCode { get; set; }

        /// <summary>
        /// A kind of sports/recreational equipment. NIEM reference is j:SportsEquipmentCategoryCode
        /// </summary>
        /// <value>A kind of sports/recreational equipment. NIEM reference is j:SportsEquipmentCategoryCode</value>

        [DataMember(Name="sportsEquipmentCategoryCode")]
        public List<NdexSportsEquipmentCategoryCodeType> SportsEquipmentCategoryCode { get; set; }

        /// <summary>
        /// A kind of tool. NIEM reference is j:ToolDeviceCategoryCode
        /// </summary>
        /// <value>A kind of tool. NIEM reference is j:ToolDeviceCategoryCode</value>

        [DataMember(Name="toolDeviceCategoryCode")]
        public List<NdexToolDeviceCategoryCodeType> ToolDeviceCategoryCode { get; set; }

        /// <summary>
        /// A measurement of the height of an item. NIEM reference is nc:ItemHeightMeasure
        /// </summary>
        /// <value>A measurement of the height of an item. NIEM reference is nc:ItemHeightMeasure</value>

        [DataMember(Name="heightMeasure")]
        public List<NcLengthMeasureType> HeightMeasure { get; set; }

        /// <summary>
        /// A distinctive name that identifies a manufacturer of a property item. NIEM reference is nc:ItemBrandName
        /// </summary>
        /// <value>A distinctive name that identifies a manufacturer of a property item. NIEM reference is nc:ItemBrandName</value>

        [DataMember(Name="brandName")]
        public List<NcProperNameTextType> BrandName { get; set; }

        /// <summary>
        /// A binary representation of an item. NIEM reference is nc:ItemBinary
        /// </summary>
        /// <value>A binary representation of an item. NIEM reference is nc:ItemBinary</value>

        [DataMember(Name="binary")]
        public List<NcBinaryType> Binary { get; set; }

        /// <summary>
        /// A calendar year in which an item was first sold. NIEM reference is nc:ItemFirstSoldYearDate
        /// </summary>
        /// <value>A calendar year in which an item was first sold. NIEM reference is nc:ItemFirstSoldYearDate</value>

        [DataMember(Name="firstSoldYearDate")]
        public List<NiemXsgYear> FirstSoldYearDate { get; set; }

        /// <summary>
        /// A tax rate as a percentage used for computing the sales tax on the purchase of a conveyance. NIEM reference is nc:ConveyanceSalesTaxPercent
        /// </summary>
        /// <value>A tax rate as a percentage used for computing the sales tax on the purchase of a conveyance. NIEM reference is nc:ConveyanceSalesTaxPercent</value>

        [DataMember(Name="conveyanceSalesTaxPercent")]
        public List<NiemXsdecimal> ConveyanceSalesTaxPercent { get; set; }

        /// <summary>
        /// A measurement of the length of an item. NIEM reference is nc:ItemLengthMeasure
        /// </summary>
        /// <value>A measurement of the length of an item. NIEM reference is nc:ItemLengthMeasure</value>

        [DataMember(Name="lengthMeasure")]
        public List<NcLengthMeasureType> LengthMeasure { get; set; }

        /// <summary>
        /// A description of the size or physical dimensions of an item. NIEM reference is nc:ItemSizeDescriptionText
        /// </summary>
        /// <value>A description of the size or physical dimensions of an item. NIEM reference is nc:ItemSizeDescriptionText</value>

        [DataMember(Name="sizeDescription")]
        public List<NcTextType> SizeDescription { get; set; }

        /// <summary>
        /// A name of a specific design or kind of item made by a manufacturer. NIEM reference is nc:ItemModelName
        /// </summary>
        /// <value>A name of a specific design or kind of item made by a manufacturer. NIEM reference is nc:ItemModelName</value>

        [DataMember(Name="modelName")]
        public List<NcProperNameTextType> ModelName { get; set; }

        /// <summary>
        /// A measurement of the weight of an item. NIEM reference is nc:ItemWeightMeasure
        /// </summary>
        /// <value>A measurement of the weight of an item. NIEM reference is nc:ItemWeightMeasure</value>

        [DataMember(Name="weightMeasure")]
        public List<NcWeightMeasureType> WeightMeasure { get; set; }

        /// <summary>
        /// A measurement of the width of an item. NIEM reference is nc:ItemWidthMeasure
        /// </summary>
        /// <value>A measurement of the width of an item. NIEM reference is nc:ItemWidthMeasure</value>

        [DataMember(Name="widthMeasure")]
        public List<NcLengthMeasureType> WidthMeasure { get; set; }

        /// <summary>
        /// A year in which an item was manufactured or produced. NIEM reference is nc:ItemModelYearDate
        /// </summary>
        /// <value>A year in which an item was manufactured or produced. NIEM reference is nc:ItemModelYearDate</value>

        [DataMember(Name="modelYearDate")]
        public List<NiemXsgYear> ModelYearDate { get; set; }

        /// <summary>
        /// True if an item is rented; false otherwise. NIEM reference is nc:ItemRentalIndicator
        /// </summary>
        /// <value>True if an item is rented; false otherwise. NIEM reference is nc:ItemRentalIndicator</value>

        [DataMember(Name="isRental")]
        public List<NiemXsboolean> IsRental { get; set; }

        /// <summary>
        /// True if an item is leased; false otherwise. NIEM reference is nc:ItemLeaseIndicator
        /// </summary>
        /// <value>True if an item is leased; false otherwise. NIEM reference is nc:ItemLeaseIndicator</value>

        [DataMember(Name="isLease")]
        public List<NiemXsboolean> IsLease { get; set; }

        /// <summary>
        /// An age of an item. NIEM reference is nc:ItemAgeMeasure
        /// </summary>
        /// <value>An age of an item. NIEM reference is nc:ItemAgeMeasure</value>

        [DataMember(Name="ageMeasure")]
        public List<NcTimeMeasureType> AgeMeasure { get; set; }

        /// <summary>
        /// A binary representation of an image of an item. NIEM reference is nc:ItemImage
        /// </summary>
        /// <value>A binary representation of an image of an item. NIEM reference is nc:ItemImage</value>

        [DataMember(Name="image")]
        public List<NcImageType> Image { get; set; }

        /// <summary>
        /// Additional information about an item. NIEM reference is j:ItemAugmentation
        /// </summary>
        /// <value>Additional information about an item. NIEM reference is j:ItemAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JItemAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncItemType JSON-LD context
        /// </summary>
        /// <value>ncItemType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncItemTypeContextJsonldEnum for ../JSON-LD_Contexts/ncItemTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncItemTypeContext.jsonld")]
            JSONLDContextsncItemTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncItemType JSON-LD context
        /// </summary>
        /// <value>ncItemType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcItemType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BarCodeIdentification: ").Append(BarCodeIdentification).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  DealerIdentification: ").Append(DealerIdentification).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  OtherIdentification: ").Append(OtherIdentification).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  OwnerAppliedId: ").Append(OwnerAppliedId).Append("\n");
            sb.Append("  OwnerPurchasedValue: ").Append(OwnerPurchasedValue).Append("\n");
            sb.Append("  PossessionDescription: ").Append(PossessionDescription).Append("\n");
            sb.Append("  Possessor: ").Append(Possessor).Append("\n");
            sb.Append("  ReceiptIdentification: ").Append(ReceiptIdentification).Append("\n");
            sb.Append("  RfIdentification: ").Append(RfIdentification).Append("\n");
            sb.Append("  SerialIdentification: ").Append(SerialIdentification).Append("\n");
            sb.Append("  StateIdentification: ").Append(StateIdentification).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  VisibleId: ").Append(VisibleId).Append("\n");
            sb.Append("  IsWeapon: ").Append(IsWeapon).Append("\n");
            sb.Append("  IsWeaponUsage: ").Append(IsWeaponUsage).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  VehicleStyleCode: ").Append(VehicleStyleCode).Append("\n");
            sb.Append("  ConveyanceColorPrimaryCode: ").Append(ConveyanceColorPrimaryCode).Append("\n");
            sb.Append("  ConveyanceColorPrimary: ").Append(ConveyanceColorPrimary).Append("\n");
            sb.Append("  ConveyanceColorSecondaryCode: ").Append(ConveyanceColorSecondaryCode).Append("\n");
            sb.Append("  ConveyanceColorSecondary: ").Append(ConveyanceColorSecondary).Append("\n");
            sb.Append("  ColorDescription: ").Append(ColorDescription).Append("\n");
            sb.Append("  VesselColorPrimaryCode: ").Append(VesselColorPrimaryCode).Append("\n");
            sb.Append("  VesselColorSecondaryCode: ").Append(VesselColorSecondaryCode).Append("\n");
            sb.Append("  MakeName: ").Append(MakeName).Append("\n");
            sb.Append("  CurrentResaleValue: ").Append(CurrentResaleValue).Append("\n");
            sb.Append("  OwnershipCategory: ").Append(OwnershipCategory).Append("\n");
            sb.Append("  ArtObjectCategoryCode: ").Append(ArtObjectCategoryCode).Append("\n");
            sb.Append("  AudioVisualRecordingCategoryCode: ").Append(AudioVisualRecordingCategoryCode).Append("\n");
            sb.Append("  BicycleCategoryCode: ").Append(BicycleCategoryCode).Append("\n");
            sb.Append("  ClothingCategoryCode: ").Append(ClothingCategoryCode).Append("\n");
            sb.Append("  ComputerHardwareSoftwareCategoryCode: ").Append(ComputerHardwareSoftwareCategoryCode).Append("\n");
            sb.Append("  ConstructionMaterialCategoryCode: ").Append(ConstructionMaterialCategoryCode).Append("\n");
            sb.Append("  ConsumableGoodsCategoryCode: ").Append(ConsumableGoodsCategoryCode).Append("\n");
            sb.Append("  ConveyanceCategoryCode: ").Append(ConveyanceCategoryCode).Append("\n");
            sb.Append("  CreditBankIdCardCategoryCode: ").Append(CreditBankIdCardCategoryCode).Append("\n");
            sb.Append("  DrillingEquipmentCategoryCode: ").Append(DrillingEquipmentCategoryCode).Append("\n");
            sb.Append("  ElectronicEquipmentCategoryCode: ").Append(ElectronicEquipmentCategoryCode).Append("\n");
            sb.Append("  ElectronicInstrumentCategoryCode: ").Append(ElectronicInstrumentCategoryCode).Append("\n");
            sb.Append("  EntertainmentDeviceCategoryCode: ").Append(EntertainmentDeviceCategoryCode).Append("\n");
            sb.Append("  GamblingEquipmentCategoryCode: ").Append(GamblingEquipmentCategoryCode).Append("\n");
            sb.Append("  GrainCategoryCode: ").Append(GrainCategoryCode).Append("\n");
            sb.Append("  HouseholdFurnishingsCategoryCode: ").Append(HouseholdFurnishingsCategoryCode).Append("\n");
            sb.Append("  HousewaresCategoryCode: ").Append(HousewaresCategoryCode).Append("\n");
            sb.Append("  CategoryNcictypaCode: ").Append(CategoryNcictypaCode).Append("\n");
            sb.Append("  CategoryNcictypCode: ").Append(CategoryNcictypCode).Append("\n");
            sb.Append("  CategoryNibrsCode: ").Append(CategoryNibrsCode).Append("\n");
            sb.Append("  CategoryNibrsPropertyCategoryCode: ").Append(CategoryNibrsPropertyCategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  PropertyCategoryFbiCode: ").Append(PropertyCategoryFbiCode).Append("\n");
            sb.Append("  KeepsakeCategoryCode: ").Append(KeepsakeCategoryCode).Append("\n");
            sb.Append("  KnifeCategoryCode: ").Append(KnifeCategoryCode).Append("\n");
            sb.Append("  LivestockCategoryCode: ").Append(LivestockCategoryCode).Append("\n");
            sb.Append("  MachineryCategoryCode: ").Append(MachineryCategoryCode).Append("\n");
            sb.Append("  MusicalInstrumentCategoryCode: ").Append(MusicalInstrumentCategoryCode).Append("\n");
            sb.Append("  OfficeEquipmentCategoryCode: ").Append(OfficeEquipmentCategoryCode).Append("\n");
            sb.Append("  OpticalEquipmentCategoryCode: ").Append(OpticalEquipmentCategoryCode).Append("\n");
            sb.Append("  PhotoEquipmentCategoryCode: ").Append(PhotoEquipmentCategoryCode).Append("\n");
            sb.Append("  ServiceUtilityCategoryCode: ").Append(ServiceUtilityCategoryCode).Append("\n");
            sb.Append("  SportsEquipmentCategoryCode: ").Append(SportsEquipmentCategoryCode).Append("\n");
            sb.Append("  ToolDeviceCategoryCode: ").Append(ToolDeviceCategoryCode).Append("\n");
            sb.Append("  HeightMeasure: ").Append(HeightMeasure).Append("\n");
            sb.Append("  BrandName: ").Append(BrandName).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  FirstSoldYearDate: ").Append(FirstSoldYearDate).Append("\n");
            sb.Append("  ConveyanceSalesTaxPercent: ").Append(ConveyanceSalesTaxPercent).Append("\n");
            sb.Append("  LengthMeasure: ").Append(LengthMeasure).Append("\n");
            sb.Append("  SizeDescription: ").Append(SizeDescription).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  WeightMeasure: ").Append(WeightMeasure).Append("\n");
            sb.Append("  WidthMeasure: ").Append(WidthMeasure).Append("\n");
            sb.Append("  ModelYearDate: ").Append(ModelYearDate).Append("\n");
            sb.Append("  IsRental: ").Append(IsRental).Append("\n");
            sb.Append("  IsLease: ").Append(IsLease).Append("\n");
            sb.Append("  AgeMeasure: ").Append(AgeMeasure).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcItemType)obj);
        }

        /// <summary>
        /// Returns true if NcItemType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcItemType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcItemType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.SequenceEqual(other.Action)
                ) && 
                (
                    BarCodeIdentification == other.BarCodeIdentification ||
                    BarCodeIdentification != null &&
                    BarCodeIdentification.SequenceEqual(other.BarCodeIdentification)
                ) && 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    DealerIdentification == other.DealerIdentification ||
                    DealerIdentification != null &&
                    DealerIdentification.SequenceEqual(other.DealerIdentification)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Disposition == other.Disposition ||
                    Disposition != null &&
                    Disposition.SequenceEqual(other.Disposition)
                ) && 
                (
                    OtherIdentification == other.OtherIdentification ||
                    OtherIdentification != null &&
                    OtherIdentification.SequenceEqual(other.OtherIdentification)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.SequenceEqual(other.Owner)
                ) && 
                (
                    OwnerAppliedId == other.OwnerAppliedId ||
                    OwnerAppliedId != null &&
                    OwnerAppliedId.SequenceEqual(other.OwnerAppliedId)
                ) && 
                (
                    OwnerPurchasedValue == other.OwnerPurchasedValue ||
                    OwnerPurchasedValue != null &&
                    OwnerPurchasedValue.SequenceEqual(other.OwnerPurchasedValue)
                ) && 
                (
                    PossessionDescription == other.PossessionDescription ||
                    PossessionDescription != null &&
                    PossessionDescription.SequenceEqual(other.PossessionDescription)
                ) && 
                (
                    Possessor == other.Possessor ||
                    Possessor != null &&
                    Possessor.SequenceEqual(other.Possessor)
                ) && 
                (
                    ReceiptIdentification == other.ReceiptIdentification ||
                    ReceiptIdentification != null &&
                    ReceiptIdentification.SequenceEqual(other.ReceiptIdentification)
                ) && 
                (
                    RfIdentification == other.RfIdentification ||
                    RfIdentification != null &&
                    RfIdentification.SequenceEqual(other.RfIdentification)
                ) && 
                (
                    SerialIdentification == other.SerialIdentification ||
                    SerialIdentification != null &&
                    SerialIdentification.SequenceEqual(other.SerialIdentification)
                ) && 
                (
                    StateIdentification == other.StateIdentification ||
                    StateIdentification != null &&
                    StateIdentification.SequenceEqual(other.StateIdentification)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.SequenceEqual(other.Usage)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.SequenceEqual(other.Value)
                ) && 
                (
                    VisibleId == other.VisibleId ||
                    VisibleId != null &&
                    VisibleId.SequenceEqual(other.VisibleId)
                ) && 
                (
                    IsWeapon == other.IsWeapon ||
                    IsWeapon != null &&
                    IsWeapon.SequenceEqual(other.IsWeapon)
                ) && 
                (
                    IsWeaponUsage == other.IsWeaponUsage ||
                    IsWeaponUsage != null &&
                    IsWeaponUsage.SequenceEqual(other.IsWeaponUsage)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.SequenceEqual(other.Quantity)
                ) && 
                (
                    Style == other.Style ||
                    Style != null &&
                    Style.SequenceEqual(other.Style)
                ) && 
                (
                    VehicleStyleCode == other.VehicleStyleCode ||
                    VehicleStyleCode != null &&
                    VehicleStyleCode.SequenceEqual(other.VehicleStyleCode)
                ) && 
                (
                    ConveyanceColorPrimaryCode == other.ConveyanceColorPrimaryCode ||
                    ConveyanceColorPrimaryCode != null &&
                    ConveyanceColorPrimaryCode.SequenceEqual(other.ConveyanceColorPrimaryCode)
                ) && 
                (
                    ConveyanceColorPrimary == other.ConveyanceColorPrimary ||
                    ConveyanceColorPrimary != null &&
                    ConveyanceColorPrimary.SequenceEqual(other.ConveyanceColorPrimary)
                ) && 
                (
                    ConveyanceColorSecondaryCode == other.ConveyanceColorSecondaryCode ||
                    ConveyanceColorSecondaryCode != null &&
                    ConveyanceColorSecondaryCode.SequenceEqual(other.ConveyanceColorSecondaryCode)
                ) && 
                (
                    ConveyanceColorSecondary == other.ConveyanceColorSecondary ||
                    ConveyanceColorSecondary != null &&
                    ConveyanceColorSecondary.SequenceEqual(other.ConveyanceColorSecondary)
                ) && 
                (
                    ColorDescription == other.ColorDescription ||
                    ColorDescription != null &&
                    ColorDescription.SequenceEqual(other.ColorDescription)
                ) && 
                (
                    VesselColorPrimaryCode == other.VesselColorPrimaryCode ||
                    VesselColorPrimaryCode != null &&
                    VesselColorPrimaryCode.SequenceEqual(other.VesselColorPrimaryCode)
                ) && 
                (
                    VesselColorSecondaryCode == other.VesselColorSecondaryCode ||
                    VesselColorSecondaryCode != null &&
                    VesselColorSecondaryCode.SequenceEqual(other.VesselColorSecondaryCode)
                ) && 
                (
                    MakeName == other.MakeName ||
                    MakeName != null &&
                    MakeName.SequenceEqual(other.MakeName)
                ) && 
                (
                    CurrentResaleValue == other.CurrentResaleValue ||
                    CurrentResaleValue != null &&
                    CurrentResaleValue.SequenceEqual(other.CurrentResaleValue)
                ) && 
                (
                    OwnershipCategory == other.OwnershipCategory ||
                    OwnershipCategory != null &&
                    OwnershipCategory.SequenceEqual(other.OwnershipCategory)
                ) && 
                (
                    ArtObjectCategoryCode == other.ArtObjectCategoryCode ||
                    ArtObjectCategoryCode != null &&
                    ArtObjectCategoryCode.SequenceEqual(other.ArtObjectCategoryCode)
                ) && 
                (
                    AudioVisualRecordingCategoryCode == other.AudioVisualRecordingCategoryCode ||
                    AudioVisualRecordingCategoryCode != null &&
                    AudioVisualRecordingCategoryCode.SequenceEqual(other.AudioVisualRecordingCategoryCode)
                ) && 
                (
                    BicycleCategoryCode == other.BicycleCategoryCode ||
                    BicycleCategoryCode != null &&
                    BicycleCategoryCode.SequenceEqual(other.BicycleCategoryCode)
                ) && 
                (
                    ClothingCategoryCode == other.ClothingCategoryCode ||
                    ClothingCategoryCode != null &&
                    ClothingCategoryCode.SequenceEqual(other.ClothingCategoryCode)
                ) && 
                (
                    ComputerHardwareSoftwareCategoryCode == other.ComputerHardwareSoftwareCategoryCode ||
                    ComputerHardwareSoftwareCategoryCode != null &&
                    ComputerHardwareSoftwareCategoryCode.SequenceEqual(other.ComputerHardwareSoftwareCategoryCode)
                ) && 
                (
                    ConstructionMaterialCategoryCode == other.ConstructionMaterialCategoryCode ||
                    ConstructionMaterialCategoryCode != null &&
                    ConstructionMaterialCategoryCode.SequenceEqual(other.ConstructionMaterialCategoryCode)
                ) && 
                (
                    ConsumableGoodsCategoryCode == other.ConsumableGoodsCategoryCode ||
                    ConsumableGoodsCategoryCode != null &&
                    ConsumableGoodsCategoryCode.SequenceEqual(other.ConsumableGoodsCategoryCode)
                ) && 
                (
                    ConveyanceCategoryCode == other.ConveyanceCategoryCode ||
                    ConveyanceCategoryCode != null &&
                    ConveyanceCategoryCode.SequenceEqual(other.ConveyanceCategoryCode)
                ) && 
                (
                    CreditBankIdCardCategoryCode == other.CreditBankIdCardCategoryCode ||
                    CreditBankIdCardCategoryCode != null &&
                    CreditBankIdCardCategoryCode.SequenceEqual(other.CreditBankIdCardCategoryCode)
                ) && 
                (
                    DrillingEquipmentCategoryCode == other.DrillingEquipmentCategoryCode ||
                    DrillingEquipmentCategoryCode != null &&
                    DrillingEquipmentCategoryCode.SequenceEqual(other.DrillingEquipmentCategoryCode)
                ) && 
                (
                    ElectronicEquipmentCategoryCode == other.ElectronicEquipmentCategoryCode ||
                    ElectronicEquipmentCategoryCode != null &&
                    ElectronicEquipmentCategoryCode.SequenceEqual(other.ElectronicEquipmentCategoryCode)
                ) && 
                (
                    ElectronicInstrumentCategoryCode == other.ElectronicInstrumentCategoryCode ||
                    ElectronicInstrumentCategoryCode != null &&
                    ElectronicInstrumentCategoryCode.SequenceEqual(other.ElectronicInstrumentCategoryCode)
                ) && 
                (
                    EntertainmentDeviceCategoryCode == other.EntertainmentDeviceCategoryCode ||
                    EntertainmentDeviceCategoryCode != null &&
                    EntertainmentDeviceCategoryCode.SequenceEqual(other.EntertainmentDeviceCategoryCode)
                ) && 
                (
                    GamblingEquipmentCategoryCode == other.GamblingEquipmentCategoryCode ||
                    GamblingEquipmentCategoryCode != null &&
                    GamblingEquipmentCategoryCode.SequenceEqual(other.GamblingEquipmentCategoryCode)
                ) && 
                (
                    GrainCategoryCode == other.GrainCategoryCode ||
                    GrainCategoryCode != null &&
                    GrainCategoryCode.SequenceEqual(other.GrainCategoryCode)
                ) && 
                (
                    HouseholdFurnishingsCategoryCode == other.HouseholdFurnishingsCategoryCode ||
                    HouseholdFurnishingsCategoryCode != null &&
                    HouseholdFurnishingsCategoryCode.SequenceEqual(other.HouseholdFurnishingsCategoryCode)
                ) && 
                (
                    HousewaresCategoryCode == other.HousewaresCategoryCode ||
                    HousewaresCategoryCode != null &&
                    HousewaresCategoryCode.SequenceEqual(other.HousewaresCategoryCode)
                ) && 
                (
                    CategoryNcictypaCode == other.CategoryNcictypaCode ||
                    CategoryNcictypaCode != null &&
                    CategoryNcictypaCode.SequenceEqual(other.CategoryNcictypaCode)
                ) && 
                (
                    CategoryNcictypCode == other.CategoryNcictypCode ||
                    CategoryNcictypCode != null &&
                    CategoryNcictypCode.SequenceEqual(other.CategoryNcictypCode)
                ) && 
                (
                    CategoryNibrsCode == other.CategoryNibrsCode ||
                    CategoryNibrsCode != null &&
                    CategoryNibrsCode.SequenceEqual(other.CategoryNibrsCode)
                ) && 
                (
                    CategoryNibrsPropertyCategoryCode == other.CategoryNibrsPropertyCategoryCode ||
                    CategoryNibrsPropertyCategoryCode != null &&
                    CategoryNibrsPropertyCategoryCode.SequenceEqual(other.CategoryNibrsPropertyCategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    PropertyCategoryFbiCode == other.PropertyCategoryFbiCode ||
                    PropertyCategoryFbiCode != null &&
                    PropertyCategoryFbiCode.SequenceEqual(other.PropertyCategoryFbiCode)
                ) && 
                (
                    KeepsakeCategoryCode == other.KeepsakeCategoryCode ||
                    KeepsakeCategoryCode != null &&
                    KeepsakeCategoryCode.SequenceEqual(other.KeepsakeCategoryCode)
                ) && 
                (
                    KnifeCategoryCode == other.KnifeCategoryCode ||
                    KnifeCategoryCode != null &&
                    KnifeCategoryCode.SequenceEqual(other.KnifeCategoryCode)
                ) && 
                (
                    LivestockCategoryCode == other.LivestockCategoryCode ||
                    LivestockCategoryCode != null &&
                    LivestockCategoryCode.SequenceEqual(other.LivestockCategoryCode)
                ) && 
                (
                    MachineryCategoryCode == other.MachineryCategoryCode ||
                    MachineryCategoryCode != null &&
                    MachineryCategoryCode.SequenceEqual(other.MachineryCategoryCode)
                ) && 
                (
                    MusicalInstrumentCategoryCode == other.MusicalInstrumentCategoryCode ||
                    MusicalInstrumentCategoryCode != null &&
                    MusicalInstrumentCategoryCode.SequenceEqual(other.MusicalInstrumentCategoryCode)
                ) && 
                (
                    OfficeEquipmentCategoryCode == other.OfficeEquipmentCategoryCode ||
                    OfficeEquipmentCategoryCode != null &&
                    OfficeEquipmentCategoryCode.SequenceEqual(other.OfficeEquipmentCategoryCode)
                ) && 
                (
                    OpticalEquipmentCategoryCode == other.OpticalEquipmentCategoryCode ||
                    OpticalEquipmentCategoryCode != null &&
                    OpticalEquipmentCategoryCode.SequenceEqual(other.OpticalEquipmentCategoryCode)
                ) && 
                (
                    PhotoEquipmentCategoryCode == other.PhotoEquipmentCategoryCode ||
                    PhotoEquipmentCategoryCode != null &&
                    PhotoEquipmentCategoryCode.SequenceEqual(other.PhotoEquipmentCategoryCode)
                ) && 
                (
                    ServiceUtilityCategoryCode == other.ServiceUtilityCategoryCode ||
                    ServiceUtilityCategoryCode != null &&
                    ServiceUtilityCategoryCode.SequenceEqual(other.ServiceUtilityCategoryCode)
                ) && 
                (
                    SportsEquipmentCategoryCode == other.SportsEquipmentCategoryCode ||
                    SportsEquipmentCategoryCode != null &&
                    SportsEquipmentCategoryCode.SequenceEqual(other.SportsEquipmentCategoryCode)
                ) && 
                (
                    ToolDeviceCategoryCode == other.ToolDeviceCategoryCode ||
                    ToolDeviceCategoryCode != null &&
                    ToolDeviceCategoryCode.SequenceEqual(other.ToolDeviceCategoryCode)
                ) && 
                (
                    HeightMeasure == other.HeightMeasure ||
                    HeightMeasure != null &&
                    HeightMeasure.SequenceEqual(other.HeightMeasure)
                ) && 
                (
                    BrandName == other.BrandName ||
                    BrandName != null &&
                    BrandName.SequenceEqual(other.BrandName)
                ) && 
                (
                    Binary == other.Binary ||
                    Binary != null &&
                    Binary.SequenceEqual(other.Binary)
                ) && 
                (
                    FirstSoldYearDate == other.FirstSoldYearDate ||
                    FirstSoldYearDate != null &&
                    FirstSoldYearDate.SequenceEqual(other.FirstSoldYearDate)
                ) && 
                (
                    ConveyanceSalesTaxPercent == other.ConveyanceSalesTaxPercent ||
                    ConveyanceSalesTaxPercent != null &&
                    ConveyanceSalesTaxPercent.SequenceEqual(other.ConveyanceSalesTaxPercent)
                ) && 
                (
                    LengthMeasure == other.LengthMeasure ||
                    LengthMeasure != null &&
                    LengthMeasure.SequenceEqual(other.LengthMeasure)
                ) && 
                (
                    SizeDescription == other.SizeDescription ||
                    SizeDescription != null &&
                    SizeDescription.SequenceEqual(other.SizeDescription)
                ) && 
                (
                    ModelName == other.ModelName ||
                    ModelName != null &&
                    ModelName.SequenceEqual(other.ModelName)
                ) && 
                (
                    WeightMeasure == other.WeightMeasure ||
                    WeightMeasure != null &&
                    WeightMeasure.SequenceEqual(other.WeightMeasure)
                ) && 
                (
                    WidthMeasure == other.WidthMeasure ||
                    WidthMeasure != null &&
                    WidthMeasure.SequenceEqual(other.WidthMeasure)
                ) && 
                (
                    ModelYearDate == other.ModelYearDate ||
                    ModelYearDate != null &&
                    ModelYearDate.SequenceEqual(other.ModelYearDate)
                ) && 
                (
                    IsRental == other.IsRental ||
                    IsRental != null &&
                    IsRental.SequenceEqual(other.IsRental)
                ) && 
                (
                    IsLease == other.IsLease ||
                    IsLease != null &&
                    IsLease.SequenceEqual(other.IsLease)
                ) && 
                (
                    AgeMeasure == other.AgeMeasure ||
                    AgeMeasure != null &&
                    AgeMeasure.SequenceEqual(other.AgeMeasure)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.SequenceEqual(other.Image)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (BarCodeIdentification != null)
                    hashCode = hashCode * 59 + BarCodeIdentification.GetHashCode();
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (DealerIdentification != null)
                    hashCode = hashCode * 59 + DealerIdentification.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Disposition != null)
                    hashCode = hashCode * 59 + Disposition.GetHashCode();
                    if (OtherIdentification != null)
                    hashCode = hashCode * 59 + OtherIdentification.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (OwnerAppliedId != null)
                    hashCode = hashCode * 59 + OwnerAppliedId.GetHashCode();
                    if (OwnerPurchasedValue != null)
                    hashCode = hashCode * 59 + OwnerPurchasedValue.GetHashCode();
                    if (PossessionDescription != null)
                    hashCode = hashCode * 59 + PossessionDescription.GetHashCode();
                    if (Possessor != null)
                    hashCode = hashCode * 59 + Possessor.GetHashCode();
                    if (ReceiptIdentification != null)
                    hashCode = hashCode * 59 + ReceiptIdentification.GetHashCode();
                    if (RfIdentification != null)
                    hashCode = hashCode * 59 + RfIdentification.GetHashCode();
                    if (SerialIdentification != null)
                    hashCode = hashCode * 59 + SerialIdentification.GetHashCode();
                    if (StateIdentification != null)
                    hashCode = hashCode * 59 + StateIdentification.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (VisibleId != null)
                    hashCode = hashCode * 59 + VisibleId.GetHashCode();
                    if (IsWeapon != null)
                    hashCode = hashCode * 59 + IsWeapon.GetHashCode();
                    if (IsWeaponUsage != null)
                    hashCode = hashCode * 59 + IsWeaponUsage.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Style != null)
                    hashCode = hashCode * 59 + Style.GetHashCode();
                    if (VehicleStyleCode != null)
                    hashCode = hashCode * 59 + VehicleStyleCode.GetHashCode();
                    if (ConveyanceColorPrimaryCode != null)
                    hashCode = hashCode * 59 + ConveyanceColorPrimaryCode.GetHashCode();
                    if (ConveyanceColorPrimary != null)
                    hashCode = hashCode * 59 + ConveyanceColorPrimary.GetHashCode();
                    if (ConveyanceColorSecondaryCode != null)
                    hashCode = hashCode * 59 + ConveyanceColorSecondaryCode.GetHashCode();
                    if (ConveyanceColorSecondary != null)
                    hashCode = hashCode * 59 + ConveyanceColorSecondary.GetHashCode();
                    if (ColorDescription != null)
                    hashCode = hashCode * 59 + ColorDescription.GetHashCode();
                    if (VesselColorPrimaryCode != null)
                    hashCode = hashCode * 59 + VesselColorPrimaryCode.GetHashCode();
                    if (VesselColorSecondaryCode != null)
                    hashCode = hashCode * 59 + VesselColorSecondaryCode.GetHashCode();
                    if (MakeName != null)
                    hashCode = hashCode * 59 + MakeName.GetHashCode();
                    if (CurrentResaleValue != null)
                    hashCode = hashCode * 59 + CurrentResaleValue.GetHashCode();
                    if (OwnershipCategory != null)
                    hashCode = hashCode * 59 + OwnershipCategory.GetHashCode();
                    if (ArtObjectCategoryCode != null)
                    hashCode = hashCode * 59 + ArtObjectCategoryCode.GetHashCode();
                    if (AudioVisualRecordingCategoryCode != null)
                    hashCode = hashCode * 59 + AudioVisualRecordingCategoryCode.GetHashCode();
                    if (BicycleCategoryCode != null)
                    hashCode = hashCode * 59 + BicycleCategoryCode.GetHashCode();
                    if (ClothingCategoryCode != null)
                    hashCode = hashCode * 59 + ClothingCategoryCode.GetHashCode();
                    if (ComputerHardwareSoftwareCategoryCode != null)
                    hashCode = hashCode * 59 + ComputerHardwareSoftwareCategoryCode.GetHashCode();
                    if (ConstructionMaterialCategoryCode != null)
                    hashCode = hashCode * 59 + ConstructionMaterialCategoryCode.GetHashCode();
                    if (ConsumableGoodsCategoryCode != null)
                    hashCode = hashCode * 59 + ConsumableGoodsCategoryCode.GetHashCode();
                    if (ConveyanceCategoryCode != null)
                    hashCode = hashCode * 59 + ConveyanceCategoryCode.GetHashCode();
                    if (CreditBankIdCardCategoryCode != null)
                    hashCode = hashCode * 59 + CreditBankIdCardCategoryCode.GetHashCode();
                    if (DrillingEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + DrillingEquipmentCategoryCode.GetHashCode();
                    if (ElectronicEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + ElectronicEquipmentCategoryCode.GetHashCode();
                    if (ElectronicInstrumentCategoryCode != null)
                    hashCode = hashCode * 59 + ElectronicInstrumentCategoryCode.GetHashCode();
                    if (EntertainmentDeviceCategoryCode != null)
                    hashCode = hashCode * 59 + EntertainmentDeviceCategoryCode.GetHashCode();
                    if (GamblingEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + GamblingEquipmentCategoryCode.GetHashCode();
                    if (GrainCategoryCode != null)
                    hashCode = hashCode * 59 + GrainCategoryCode.GetHashCode();
                    if (HouseholdFurnishingsCategoryCode != null)
                    hashCode = hashCode * 59 + HouseholdFurnishingsCategoryCode.GetHashCode();
                    if (HousewaresCategoryCode != null)
                    hashCode = hashCode * 59 + HousewaresCategoryCode.GetHashCode();
                    if (CategoryNcictypaCode != null)
                    hashCode = hashCode * 59 + CategoryNcictypaCode.GetHashCode();
                    if (CategoryNcictypCode != null)
                    hashCode = hashCode * 59 + CategoryNcictypCode.GetHashCode();
                    if (CategoryNibrsCode != null)
                    hashCode = hashCode * 59 + CategoryNibrsCode.GetHashCode();
                    if (CategoryNibrsPropertyCategoryCode != null)
                    hashCode = hashCode * 59 + CategoryNibrsPropertyCategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (PropertyCategoryFbiCode != null)
                    hashCode = hashCode * 59 + PropertyCategoryFbiCode.GetHashCode();
                    if (KeepsakeCategoryCode != null)
                    hashCode = hashCode * 59 + KeepsakeCategoryCode.GetHashCode();
                    if (KnifeCategoryCode != null)
                    hashCode = hashCode * 59 + KnifeCategoryCode.GetHashCode();
                    if (LivestockCategoryCode != null)
                    hashCode = hashCode * 59 + LivestockCategoryCode.GetHashCode();
                    if (MachineryCategoryCode != null)
                    hashCode = hashCode * 59 + MachineryCategoryCode.GetHashCode();
                    if (MusicalInstrumentCategoryCode != null)
                    hashCode = hashCode * 59 + MusicalInstrumentCategoryCode.GetHashCode();
                    if (OfficeEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + OfficeEquipmentCategoryCode.GetHashCode();
                    if (OpticalEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + OpticalEquipmentCategoryCode.GetHashCode();
                    if (PhotoEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + PhotoEquipmentCategoryCode.GetHashCode();
                    if (ServiceUtilityCategoryCode != null)
                    hashCode = hashCode * 59 + ServiceUtilityCategoryCode.GetHashCode();
                    if (SportsEquipmentCategoryCode != null)
                    hashCode = hashCode * 59 + SportsEquipmentCategoryCode.GetHashCode();
                    if (ToolDeviceCategoryCode != null)
                    hashCode = hashCode * 59 + ToolDeviceCategoryCode.GetHashCode();
                    if (HeightMeasure != null)
                    hashCode = hashCode * 59 + HeightMeasure.GetHashCode();
                    if (BrandName != null)
                    hashCode = hashCode * 59 + BrandName.GetHashCode();
                    if (Binary != null)
                    hashCode = hashCode * 59 + Binary.GetHashCode();
                    if (FirstSoldYearDate != null)
                    hashCode = hashCode * 59 + FirstSoldYearDate.GetHashCode();
                    if (ConveyanceSalesTaxPercent != null)
                    hashCode = hashCode * 59 + ConveyanceSalesTaxPercent.GetHashCode();
                    if (LengthMeasure != null)
                    hashCode = hashCode * 59 + LengthMeasure.GetHashCode();
                    if (SizeDescription != null)
                    hashCode = hashCode * 59 + SizeDescription.GetHashCode();
                    if (ModelName != null)
                    hashCode = hashCode * 59 + ModelName.GetHashCode();
                    if (WeightMeasure != null)
                    hashCode = hashCode * 59 + WeightMeasure.GetHashCode();
                    if (WidthMeasure != null)
                    hashCode = hashCode * 59 + WidthMeasure.GetHashCode();
                    if (ModelYearDate != null)
                    hashCode = hashCode * 59 + ModelYearDate.GetHashCode();
                    if (IsRental != null)
                    hashCode = hashCode * 59 + IsRental.GetHashCode();
                    if (IsLease != null)
                    hashCode = hashCode * 59 + IsLease.GetHashCode();
                    if (AgeMeasure != null)
                    hashCode = hashCode * 59 + AgeMeasure.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcItemType left, NcItemType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcItemType left, NcItemType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
