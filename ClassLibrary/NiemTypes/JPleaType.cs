/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an answer which a defendant in an action at law makes to charges.
    /// </summary>
    [DataContract]
    public partial class JPleaType : NcActivityType, IEquatable<JPleaType>
    { 
        /// <summary>
        /// A description of a plea. NIEM reference is j:PleaDescriptionText
        /// </summary>
        /// <value>A description of a plea. NIEM reference is j:PleaDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// True if a person admits guilt in relation to a charge; false otherwise. NIEM reference is j:PleaGuiltyIndicator
        /// </summary>
        /// <value>True if a person admits guilt in relation to a charge; false otherwise. NIEM reference is j:PleaGuiltyIndicator</value>

        [DataMember(Name="isGuilty")]
        public List<NiemXsboolean> IsGuilty { get; set; }

        /// <summary>
        /// True if a plea is negotiated with the prosecution; false otherwise. NIEM reference is j:PleaNegotiatedIndicator
        /// </summary>
        /// <value>True if a plea is negotiated with the prosecution; false otherwise. NIEM reference is j:PleaNegotiatedIndicator</value>

        [DataMember(Name="isNegotiated")]
        public List<NiemXsboolean> IsNegotiated { get; set; }

        /// <summary>
        /// True if a person is willing to accept the consequences of a charge without admitting guilt or innocence; false otherwise. NIEM reference is j:PleaNoContestIndicator
        /// </summary>
        /// <value>True if a person is willing to accept the consequences of a charge without admitting guilt or innocence; false otherwise. NIEM reference is j:PleaNoContestIndicator</value>

        [DataMember(Name="isNoContest")]
        public List<NiemXsboolean> IsNoContest { get; set; }

        /// <summary>
        /// A recommended plea agreement for violent, most serious, or armed offenses. NIEM reference is j:PleaRecommendationText
        /// </summary>
        /// <value>A recommended plea agreement for violent, most serious, or armed offenses. NIEM reference is j:PleaRecommendationText</value>

        [DataMember(Name="recommendation")]
        public List<NcTextType> Recommendation { get; set; }

        /// <summary>
        /// A kind of plea. NIEM reference is j:PleaCategoryCode
        /// </summary>
        /// <value>A kind of plea. NIEM reference is j:PleaCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NcPleaCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// jPleaType JSON-LD context
        /// </summary>
        /// <value>jPleaType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPleaTypeContextJsonldEnum for ../JSON-LD_Contexts/jPleaTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPleaTypeContext.jsonld")]
            JSONLDContextsjPleaTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPleaType JSON-LD context
        /// </summary>
        /// <value>jPleaType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPleaType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsGuilty: ").Append(IsGuilty).Append("\n");
            sb.Append("  IsNegotiated: ").Append(IsNegotiated).Append("\n");
            sb.Append("  IsNoContest: ").Append(IsNoContest).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPleaType)obj);
        }

        /// <summary>
        /// Returns true if JPleaType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPleaType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPleaType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    IsGuilty == other.IsGuilty ||
                    IsGuilty != null &&
                    IsGuilty.SequenceEqual(other.IsGuilty)
                ) && 
                (
                    IsNegotiated == other.IsNegotiated ||
                    IsNegotiated != null &&
                    IsNegotiated.SequenceEqual(other.IsNegotiated)
                ) && 
                (
                    IsNoContest == other.IsNoContest ||
                    IsNoContest != null &&
                    IsNoContest.SequenceEqual(other.IsNoContest)
                ) && 
                (
                    Recommendation == other.Recommendation ||
                    Recommendation != null &&
                    Recommendation.SequenceEqual(other.Recommendation)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsGuilty != null)
                    hashCode = hashCode * 59 + IsGuilty.GetHashCode();
                    if (IsNegotiated != null)
                    hashCode = hashCode * 59 + IsNegotiated.GetHashCode();
                    if (IsNoContest != null)
                    hashCode = hashCode * 59 + IsNoContest.GetHashCode();
                    if (Recommendation != null)
                    hashCode = hashCode * 59 + Recommendation.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPleaType left, JPleaType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPleaType left, JPleaType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
