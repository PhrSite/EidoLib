/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a person employment association.
    /// </summary>
    [DataContract]
    public partial class JPersonEmploymentAssociationAugmentationType : IEquatable<JPersonEmploymentAssociationAugmentationType>
    { 
        /// <summary>
        /// True if the subject&#x27;s employment contains community service; false otherwise. NIEM reference is j:PersonEmploymentIncludesCommunityServiceIndicator
        /// </summary>
        /// <value>True if the subject&#x27;s employment contains community service; false otherwise. NIEM reference is j:PersonEmploymentIncludesCommunityServiceIndicator</value>

        [DataMember(Name="isPersonEmploymentIncludesCommunityService")]
        public List<NiemXsboolean> IsPersonEmploymentIncludesCommunityService { get; set; }

        /// <summary>
        /// A title of a subject&#x27;s occupation. NIEM reference is j:PersonEmploymentEmployeeOccupationTitleText
        /// </summary>
        /// <value>A title of a subject&#x27;s occupation. NIEM reference is j:PersonEmploymentEmployeeOccupationTitleText</value>

        [DataMember(Name="personEmploymentEmployeeOccupationTitle")]
        public List<NcTextType> PersonEmploymentEmployeeOccupationTitle { get; set; }

        /// <summary>
        /// True if the subject posted bond to gain or return to employment; false otherwise. NIEM reference is j:PersonEmploymentBondPostedToGainEmploymentIndicator
        /// </summary>
        /// <value>True if the subject posted bond to gain or return to employment; false otherwise. NIEM reference is j:PersonEmploymentBondPostedToGainEmploymentIndicator</value>

        [DataMember(Name="isPersonEmploymentBondPostedToGainEmployment")]
        public List<NiemXsboolean> IsPersonEmploymentBondPostedToGainEmployment { get; set; }

        /// <summary>
        /// A duration in years and months that the instance of employment lasted. NIEM reference is j:PersonEmploymentDuration
        /// </summary>
        /// <value>A duration in years and months that the instance of employment lasted. NIEM reference is j:PersonEmploymentDuration</value>

        [DataMember(Name="personEmploymentDuration")]
        public List<NiemXsduration> PersonEmploymentDuration { get; set; }

        /// <summary>
        /// A comment from an employer regarding a subject. NIEM reference is j:PersonEmploymentEmployerTestimonialText
        /// </summary>
        /// <value>A comment from an employer regarding a subject. NIEM reference is j:PersonEmploymentEmployerTestimonialText</value>

        [DataMember(Name="personEmploymentEmployerTestimonial")]
        public List<NcTextType> PersonEmploymentEmployerTestimonial { get; set; }

        /// <summary>
        /// A date that the subject last worked at the referenced employer location. NIEM reference is j:PersonEmploymentAuthorizedEndDate
        /// </summary>
        /// <value>A date that the subject last worked at the referenced employer location. NIEM reference is j:PersonEmploymentAuthorizedEndDate</value>

        [DataMember(Name="personEmploymentAuthorizedEndDate")]
        public List<NcDateType> PersonEmploymentAuthorizedEndDate { get; set; }

        /// <summary>
        /// True if the subject has part-time employment; false otherwise. NIEM reference is j:PersonEmploymentFullTimeIndicator
        /// </summary>
        /// <value>True if the subject has part-time employment; false otherwise. NIEM reference is j:PersonEmploymentFullTimeIndicator</value>

        [DataMember(Name="isPersonEmploymentFullTime")]
        public List<NiemXsboolean> IsPersonEmploymentFullTime { get; set; }

        /// <summary>
        /// A number value for the total days of a subject&#x27;s employment. NIEM reference is j:PersonEmploymentNumberOfDaysEmployedNumeric
        /// </summary>
        /// <value>A number value for the total days of a subject&#x27;s employment. NIEM reference is j:PersonEmploymentNumberOfDaysEmployedNumeric</value>

        [DataMember(Name="personEmploymentNumberOfDaysEmployedNumeric")]
        public List<NcNumericType> PersonEmploymentNumberOfDaysEmployedNumeric { get; set; }

        /// <summary>
        /// An employment or vocational plan for a person. NIEM reference is j:PersonEmploymentPlan
        /// </summary>
        /// <value>An employment or vocational plan for a person. NIEM reference is j:PersonEmploymentPlan</value>

        [DataMember(Name="personEmploymentPlan")]
        public List<JPlanType> PersonEmploymentPlan { get; set; }

        /// <summary>
        /// A title of employment supervisor. NIEM reference is j:PersonEmploymentSupervisor
        /// </summary>
        /// <value>A title of employment supervisor. NIEM reference is j:PersonEmploymentSupervisor</value>

        [DataMember(Name="personEmploymentSupervisor")]
        public List<NcEntityType> PersonEmploymentSupervisor { get; set; }

        /// <summary>
        /// A kind of unemployment. NIEM reference is j:PersonEmploymentUnemploymentStatusText
        /// </summary>
        /// <value>A kind of unemployment. NIEM reference is j:PersonEmploymentUnemploymentStatusText</value>

        [DataMember(Name="personEmploymentUnemploymentStatus")]
        public List<NcTextType> PersonEmploymentUnemploymentStatus { get; set; }

        /// <summary>
        /// A physical building or plant where employment occurred. NIEM reference is j:PersonEmploymentFacility
        /// </summary>
        /// <value>A physical building or plant where employment occurred. NIEM reference is j:PersonEmploymentFacility</value>

        [DataMember(Name="personEmploymentFacility")]
        public List<NcFacilityType> PersonEmploymentFacility { get; set; }

        /// <summary>
        /// A number of hours spent at workplace or working in a given week. NIEM reference is j:EmployeeHoursText
        /// </summary>
        /// <value>A number of hours spent at workplace or working in a given week. NIEM reference is j:EmployeeHoursText</value>

        [DataMember(Name="employeeHours")]
        public List<NcTextType> EmployeeHours { get; set; }

        /// <summary>
        /// A comment indicating the reason for the end of an instance of employment. NIEM reference is j:PersonEmploymentEndReasonText
        /// </summary>
        /// <value>A comment indicating the reason for the end of an instance of employment. NIEM reference is j:PersonEmploymentEndReasonText</value>

        [DataMember(Name="personEmploymentEndReason")]
        public List<NcTextType> PersonEmploymentEndReason { get; set; }

        /// <summary>
        /// jPersonEmploymentAssociationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jPersonEmploymentAssociationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPersonEmploymentAssociationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jPersonEmploymentAssociationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPersonEmploymentAssociationAugmentationTypeContext.jsonld")]
            JSONLDContextsjPersonEmploymentAssociationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPersonEmploymentAssociationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jPersonEmploymentAssociationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPersonEmploymentAssociationAugmentationType {\n");
            sb.Append("  IsPersonEmploymentIncludesCommunityService: ").Append(IsPersonEmploymentIncludesCommunityService).Append("\n");
            sb.Append("  PersonEmploymentEmployeeOccupationTitle: ").Append(PersonEmploymentEmployeeOccupationTitle).Append("\n");
            sb.Append("  IsPersonEmploymentBondPostedToGainEmployment: ").Append(IsPersonEmploymentBondPostedToGainEmployment).Append("\n");
            sb.Append("  PersonEmploymentDuration: ").Append(PersonEmploymentDuration).Append("\n");
            sb.Append("  PersonEmploymentEmployerTestimonial: ").Append(PersonEmploymentEmployerTestimonial).Append("\n");
            sb.Append("  PersonEmploymentAuthorizedEndDate: ").Append(PersonEmploymentAuthorizedEndDate).Append("\n");
            sb.Append("  IsPersonEmploymentFullTime: ").Append(IsPersonEmploymentFullTime).Append("\n");
            sb.Append("  PersonEmploymentNumberOfDaysEmployedNumeric: ").Append(PersonEmploymentNumberOfDaysEmployedNumeric).Append("\n");
            sb.Append("  PersonEmploymentPlan: ").Append(PersonEmploymentPlan).Append("\n");
            sb.Append("  PersonEmploymentSupervisor: ").Append(PersonEmploymentSupervisor).Append("\n");
            sb.Append("  PersonEmploymentUnemploymentStatus: ").Append(PersonEmploymentUnemploymentStatus).Append("\n");
            sb.Append("  PersonEmploymentFacility: ").Append(PersonEmploymentFacility).Append("\n");
            sb.Append("  EmployeeHours: ").Append(EmployeeHours).Append("\n");
            sb.Append("  PersonEmploymentEndReason: ").Append(PersonEmploymentEndReason).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPersonEmploymentAssociationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JPersonEmploymentAssociationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPersonEmploymentAssociationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPersonEmploymentAssociationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsPersonEmploymentIncludesCommunityService == other.IsPersonEmploymentIncludesCommunityService ||
                    IsPersonEmploymentIncludesCommunityService != null &&
                    IsPersonEmploymentIncludesCommunityService.SequenceEqual(other.IsPersonEmploymentIncludesCommunityService)
                ) && 
                (
                    PersonEmploymentEmployeeOccupationTitle == other.PersonEmploymentEmployeeOccupationTitle ||
                    PersonEmploymentEmployeeOccupationTitle != null &&
                    PersonEmploymentEmployeeOccupationTitle.SequenceEqual(other.PersonEmploymentEmployeeOccupationTitle)
                ) && 
                (
                    IsPersonEmploymentBondPostedToGainEmployment == other.IsPersonEmploymentBondPostedToGainEmployment ||
                    IsPersonEmploymentBondPostedToGainEmployment != null &&
                    IsPersonEmploymentBondPostedToGainEmployment.SequenceEqual(other.IsPersonEmploymentBondPostedToGainEmployment)
                ) && 
                (
                    PersonEmploymentDuration == other.PersonEmploymentDuration ||
                    PersonEmploymentDuration != null &&
                    PersonEmploymentDuration.SequenceEqual(other.PersonEmploymentDuration)
                ) && 
                (
                    PersonEmploymentEmployerTestimonial == other.PersonEmploymentEmployerTestimonial ||
                    PersonEmploymentEmployerTestimonial != null &&
                    PersonEmploymentEmployerTestimonial.SequenceEqual(other.PersonEmploymentEmployerTestimonial)
                ) && 
                (
                    PersonEmploymentAuthorizedEndDate == other.PersonEmploymentAuthorizedEndDate ||
                    PersonEmploymentAuthorizedEndDate != null &&
                    PersonEmploymentAuthorizedEndDate.SequenceEqual(other.PersonEmploymentAuthorizedEndDate)
                ) && 
                (
                    IsPersonEmploymentFullTime == other.IsPersonEmploymentFullTime ||
                    IsPersonEmploymentFullTime != null &&
                    IsPersonEmploymentFullTime.SequenceEqual(other.IsPersonEmploymentFullTime)
                ) && 
                (
                    PersonEmploymentNumberOfDaysEmployedNumeric == other.PersonEmploymentNumberOfDaysEmployedNumeric ||
                    PersonEmploymentNumberOfDaysEmployedNumeric != null &&
                    PersonEmploymentNumberOfDaysEmployedNumeric.SequenceEqual(other.PersonEmploymentNumberOfDaysEmployedNumeric)
                ) && 
                (
                    PersonEmploymentPlan == other.PersonEmploymentPlan ||
                    PersonEmploymentPlan != null &&
                    PersonEmploymentPlan.SequenceEqual(other.PersonEmploymentPlan)
                ) && 
                (
                    PersonEmploymentSupervisor == other.PersonEmploymentSupervisor ||
                    PersonEmploymentSupervisor != null &&
                    PersonEmploymentSupervisor.SequenceEqual(other.PersonEmploymentSupervisor)
                ) && 
                (
                    PersonEmploymentUnemploymentStatus == other.PersonEmploymentUnemploymentStatus ||
                    PersonEmploymentUnemploymentStatus != null &&
                    PersonEmploymentUnemploymentStatus.SequenceEqual(other.PersonEmploymentUnemploymentStatus)
                ) && 
                (
                    PersonEmploymentFacility == other.PersonEmploymentFacility ||
                    PersonEmploymentFacility != null &&
                    PersonEmploymentFacility.SequenceEqual(other.PersonEmploymentFacility)
                ) && 
                (
                    EmployeeHours == other.EmployeeHours ||
                    EmployeeHours != null &&
                    EmployeeHours.SequenceEqual(other.EmployeeHours)
                ) && 
                (
                    PersonEmploymentEndReason == other.PersonEmploymentEndReason ||
                    PersonEmploymentEndReason != null &&
                    PersonEmploymentEndReason.SequenceEqual(other.PersonEmploymentEndReason)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsPersonEmploymentIncludesCommunityService != null)
                    hashCode = hashCode * 59 + IsPersonEmploymentIncludesCommunityService.GetHashCode();
                    if (PersonEmploymentEmployeeOccupationTitle != null)
                    hashCode = hashCode * 59 + PersonEmploymentEmployeeOccupationTitle.GetHashCode();
                    if (IsPersonEmploymentBondPostedToGainEmployment != null)
                    hashCode = hashCode * 59 + IsPersonEmploymentBondPostedToGainEmployment.GetHashCode();
                    if (PersonEmploymentDuration != null)
                    hashCode = hashCode * 59 + PersonEmploymentDuration.GetHashCode();
                    if (PersonEmploymentEmployerTestimonial != null)
                    hashCode = hashCode * 59 + PersonEmploymentEmployerTestimonial.GetHashCode();
                    if (PersonEmploymentAuthorizedEndDate != null)
                    hashCode = hashCode * 59 + PersonEmploymentAuthorizedEndDate.GetHashCode();
                    if (IsPersonEmploymentFullTime != null)
                    hashCode = hashCode * 59 + IsPersonEmploymentFullTime.GetHashCode();
                    if (PersonEmploymentNumberOfDaysEmployedNumeric != null)
                    hashCode = hashCode * 59 + PersonEmploymentNumberOfDaysEmployedNumeric.GetHashCode();
                    if (PersonEmploymentPlan != null)
                    hashCode = hashCode * 59 + PersonEmploymentPlan.GetHashCode();
                    if (PersonEmploymentSupervisor != null)
                    hashCode = hashCode * 59 + PersonEmploymentSupervisor.GetHashCode();
                    if (PersonEmploymentUnemploymentStatus != null)
                    hashCode = hashCode * 59 + PersonEmploymentUnemploymentStatus.GetHashCode();
                    if (PersonEmploymentFacility != null)
                    hashCode = hashCode * 59 + PersonEmploymentFacility.GetHashCode();
                    if (EmployeeHours != null)
                    hashCode = hashCode * 59 + EmployeeHours.GetHashCode();
                    if (PersonEmploymentEndReason != null)
                    hashCode = hashCode * 59 + PersonEmploymentEndReason.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPersonEmploymentAssociationAugmentationType left, JPersonEmploymentAssociationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPersonEmploymentAssociationAugmentationType left, JPersonEmploymentAssociationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
