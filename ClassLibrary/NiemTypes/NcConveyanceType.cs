/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a means of transport from place to place.
    /// </summary>
    [DataContract]
    public partial class NcConveyanceType : NcItemType, IEquatable<NcConveyanceType>
    { 
        /// <summary>
        /// A cargo or set of goods transported by a conveyance. NIEM reference is nc:ConveyanceCargoText
        /// </summary>
        /// <value>A cargo or set of goods transported by a conveyance. NIEM reference is nc:ConveyanceCargoText</value>

        [DataMember(Name="cargo")]
        public List<NcTextType> Cargo { get; set; }

        /// <summary>
        /// A number of engines on a conveyance. NIEM reference is nc:ConveyanceEngineQuantity
        /// </summary>
        /// <value>A number of engines on a conveyance. NIEM reference is nc:ConveyanceEngineQuantity</value>

        [DataMember(Name="engineQuantity")]
        public List<NiemXsnonNegativeInteger> EngineQuantity { get; set; }

        /// <summary>
        /// True if a conveyance is powered by a motor; false otherwise. NIEM reference is nc:ConveyanceMotorizedIndicator
        /// </summary>
        /// <value>True if a conveyance is powered by a motor; false otherwise. NIEM reference is nc:ConveyanceMotorizedIndicator</value>

        [DataMember(Name="isMotorized")]
        public List<NiemXsboolean> IsMotorized { get; set; }

        /// <summary>
        /// True if a conveyance is towed; false otherwise. NIEM reference is nc:ConveyanceTowedIndicator
        /// </summary>
        /// <value>True if a conveyance is towed; false otherwise. NIEM reference is nc:ConveyanceTowedIndicator</value>

        [DataMember(Name="isTowed")]
        public List<NiemXsboolean> IsTowed { get; set; }

        /// <summary>
        /// A manner or way in which a vehicle is used. NIEM reference is j:VehicleUseANSID20Code
        /// </summary>
        /// <value>A manner or way in which a vehicle is used. NIEM reference is j:VehicleUseANSID20Code</value>

        [DataMember(Name="vehicleUseAnsiD20Code")]
        public List<AamvaD20VehicleUseCodeType> VehicleUseAnsiD20Code { get; set; }

        /// <summary>
        /// A manner or way in which a vehicle is used. NIEM reference is nc:VehicleUseText
        /// </summary>
        /// <value>A manner or way in which a vehicle is used. NIEM reference is nc:VehicleUseText</value>

        [DataMember(Name="vehicleUse")]
        public List<NcTextType> VehicleUse { get; set; }

        /// <summary>
        /// Additional information about a tangible item that is used to transport goods and/or persons from one location to another location; e.g., ship, airplane, vehicle, train, pipeline. NIEM reference is cbrn:ConveyanceAugmentation
        /// </summary>
        /// <value>Additional information about a tangible item that is used to transport goods and/or persons from one location to another location; e.g., ship, airplane, vehicle, train, pipeline. NIEM reference is cbrn:ConveyanceAugmentation</value>

        [DataMember(Name="cbrnAugmentation")]
        public List<CbrnConveyanceAugmentationType> CbrnAugmentation { get; set; }

        /// <summary>
        /// Additional information about a conveyance. NIEM reference is j:ConveyanceAugmentation
        /// </summary>
        /// <value>Additional information about a conveyance. NIEM reference is j:ConveyanceAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JConveyanceAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// ncConveyanceType JSON-LD context
        /// </summary>
        /// <value>ncConveyanceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncConveyanceTypeContextJsonldEnum for ../JSON-LD_Contexts/ncConveyanceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncConveyanceTypeContext.jsonld")]
            JSONLDContextsncConveyanceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncConveyanceType JSON-LD context
        /// </summary>
        /// <value>ncConveyanceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcConveyanceType {\n");
            sb.Append("  Cargo: ").Append(Cargo).Append("\n");
            sb.Append("  EngineQuantity: ").Append(EngineQuantity).Append("\n");
            sb.Append("  IsMotorized: ").Append(IsMotorized).Append("\n");
            sb.Append("  IsTowed: ").Append(IsTowed).Append("\n");
            sb.Append("  VehicleUseAnsiD20Code: ").Append(VehicleUseAnsiD20Code).Append("\n");
            sb.Append("  VehicleUse: ").Append(VehicleUse).Append("\n");
            sb.Append("  CbrnAugmentation: ").Append(CbrnAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcConveyanceType)obj);
        }

        /// <summary>
        /// Returns true if NcConveyanceType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcConveyanceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcConveyanceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cargo == other.Cargo ||
                    Cargo != null &&
                    Cargo.SequenceEqual(other.Cargo)
                ) && 
                (
                    EngineQuantity == other.EngineQuantity ||
                    EngineQuantity != null &&
                    EngineQuantity.SequenceEqual(other.EngineQuantity)
                ) && 
                (
                    IsMotorized == other.IsMotorized ||
                    IsMotorized != null &&
                    IsMotorized.SequenceEqual(other.IsMotorized)
                ) && 
                (
                    IsTowed == other.IsTowed ||
                    IsTowed != null &&
                    IsTowed.SequenceEqual(other.IsTowed)
                ) && 
                (
                    VehicleUseAnsiD20Code == other.VehicleUseAnsiD20Code ||
                    VehicleUseAnsiD20Code != null &&
                    VehicleUseAnsiD20Code.SequenceEqual(other.VehicleUseAnsiD20Code)
                ) && 
                (
                    VehicleUse == other.VehicleUse ||
                    VehicleUse != null &&
                    VehicleUse.SequenceEqual(other.VehicleUse)
                ) && 
                (
                    CbrnAugmentation == other.CbrnAugmentation ||
                    CbrnAugmentation != null &&
                    CbrnAugmentation.SequenceEqual(other.CbrnAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cargo != null)
                    hashCode = hashCode * 59 + Cargo.GetHashCode();
                    if (EngineQuantity != null)
                    hashCode = hashCode * 59 + EngineQuantity.GetHashCode();
                    if (IsMotorized != null)
                    hashCode = hashCode * 59 + IsMotorized.GetHashCode();
                    if (IsTowed != null)
                    hashCode = hashCode * 59 + IsTowed.GetHashCode();
                    if (VehicleUseAnsiD20Code != null)
                    hashCode = hashCode * 59 + VehicleUseAnsiD20Code.GetHashCode();
                    if (VehicleUse != null)
                    hashCode = hashCode * 59 + VehicleUse.GetHashCode();
                    if (CbrnAugmentation != null)
                    hashCode = hashCode * 59 + CbrnAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcConveyanceType left, NcConveyanceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcConveyanceType left, NcConveyanceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
