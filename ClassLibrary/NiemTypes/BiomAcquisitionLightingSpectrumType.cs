/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a lighting spectrum used in capturing an image
    /// </summary>
    [DataContract]
    public partial class BiomAcquisitionLightingSpectrumType : IEquatable<BiomAcquisitionLightingSpectrumType>
    { 
        /// <summary>
        /// A lighting spectrum used in capturing an image NIEM reference is biom:AcquisitionLightingSpectrumCode
        /// </summary>
        /// <value>A lighting spectrum used in capturing an image NIEM reference is biom:AcquisitionLightingSpectrumCode</value>

        [DataMember(Name="code")]
        public List<BiomAcquisitionLightingSpectrumCodeType> Code { get; set; }

        /// <summary>
        /// A lower value in nanometers for the lighting spectrum used in capturing an iris image NIEM reference is biom:AcquisitionLightingSpectrumLowerMeasure
        /// </summary>
        /// <value>A lower value in nanometers for the lighting spectrum used in capturing an iris image NIEM reference is biom:AcquisitionLightingSpectrumLowerMeasure</value>

        [DataMember(Name="lowerMeasure")]
        public List<NiemXsnonNegativeInteger> LowerMeasure { get; set; }

        /// <summary>
        /// An upper value in nanometers for the lighting spectrum used in capturing an iris image NIEM reference is biom:AcquisitionLightingSpectrumUpperMeasure
        /// </summary>
        /// <value>An upper value in nanometers for the lighting spectrum used in capturing an iris image NIEM reference is biom:AcquisitionLightingSpectrumUpperMeasure</value>

        [DataMember(Name="upperMeasure")]
        public List<NiemXsnonNegativeInteger> UpperMeasure { get; set; }

        /// <summary>
        /// biomAcquisitionLightingSpectrumType JSON-LD context
        /// </summary>
        /// <value>biomAcquisitionLightingSpectrumType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomAcquisitionLightingSpectrumTypeContextJsonldEnum for ../JSON-LD_Contexts/biomAcquisitionLightingSpectrumTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomAcquisitionLightingSpectrumTypeContext.jsonld")]
            JSONLDContextsbiomAcquisitionLightingSpectrumTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomAcquisitionLightingSpectrumType JSON-LD context
        /// </summary>
        /// <value>biomAcquisitionLightingSpectrumType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomAcquisitionLightingSpectrumType {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  LowerMeasure: ").Append(LowerMeasure).Append("\n");
            sb.Append("  UpperMeasure: ").Append(UpperMeasure).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomAcquisitionLightingSpectrumType)obj);
        }

        /// <summary>
        /// Returns true if BiomAcquisitionLightingSpectrumType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomAcquisitionLightingSpectrumType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomAcquisitionLightingSpectrumType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    LowerMeasure == other.LowerMeasure ||
                    LowerMeasure != null &&
                    LowerMeasure.SequenceEqual(other.LowerMeasure)
                ) && 
                (
                    UpperMeasure == other.UpperMeasure ||
                    UpperMeasure != null &&
                    UpperMeasure.SequenceEqual(other.UpperMeasure)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (LowerMeasure != null)
                    hashCode = hashCode * 59 + LowerMeasure.GetHashCode();
                    if (UpperMeasure != null)
                    hashCode = hashCode * 59 + UpperMeasure.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomAcquisitionLightingSpectrumType left, BiomAcquisitionLightingSpectrumType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomAcquisitionLightingSpectrumType left, BiomAcquisitionLightingSpectrumType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
