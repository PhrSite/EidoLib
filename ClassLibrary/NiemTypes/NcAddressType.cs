/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a geophysical location described by postal information.
    /// </summary>
    [DataContract]
    public partial class NcAddressType : IEquatable<NcAddressType>
    { 
        /// <summary>
        /// A complete address. NIEM reference is nc:AddressFullText
        /// </summary>
        /// <value>A complete address. NIEM reference is nc:AddressFullText</value>

        [DataMember(Name="full")]
        public List<NcTextType> Full { get; set; }

        /// <summary>
        /// A private mailbox within a company. NIEM reference is nc:AddressPrivateMailboxText
        /// </summary>
        /// <value>A private mailbox within a company. NIEM reference is nc:AddressPrivateMailboxText</value>

        [DataMember(Name="privateMailbox")]
        public List<NcTextType> PrivateMailbox { get; set; }

        /// <summary>
        /// A particular unit within a larger unit or grouping at a location. NIEM reference is nc:AddressSecondaryUnitText
        /// </summary>
        /// <value>A particular unit within a larger unit or grouping at a location. NIEM reference is nc:AddressSecondaryUnitText</value>

        [DataMember(Name="secondaryUnit")]
        public List<NcTextType> SecondaryUnit { get; set; }

        /// <summary>
        /// A name of a specific building at an address to distinguish it from other buildings at the same site. NIEM reference is nc:AddressBuildingName
        /// </summary>
        /// <value>A name of a specific building at an address to distinguish it from other buildings at the same site. NIEM reference is nc:AddressBuildingName</value>

        [DataMember(Name="buildingName")]
        public List<NcTextType> BuildingName { get; set; }

        /// <summary>
        /// An identifier of a single place or unit at which mail is delivered. NIEM reference is nc:AddressDeliveryPointID
        /// </summary>
        /// <value>An identifier of a single place or unit at which mail is delivered. NIEM reference is nc:AddressDeliveryPointID</value>

        [DataMember(Name="deliveryPointId")]
        public List<NiemXsstring> DeliveryPointId { get; set; }

        /// <summary>
        /// A single place or unit at which mail is delivered. NIEM reference is nc:AddressDeliveryPointText
        /// </summary>
        /// <value>A single place or unit at which mail is delivered. NIEM reference is nc:AddressDeliveryPointText</value>

        [DataMember(Name="deliveryPoint")]
        public List<NcTextType> DeliveryPoint { get; set; }

        /// <summary>
        /// A name and number of a postal route. NIEM reference is nc:LocationRouteName
        /// </summary>
        /// <value>A name and number of a postal route. NIEM reference is nc:LocationRouteName</value>

        [DataMember(Name="locationRouteName")]
        public List<NcTextType> LocationRouteName { get; set; }

        /// <summary>
        /// A road, thoroughfare or highway. NIEM reference is nc:LocationStreet
        /// </summary>
        /// <value>A road, thoroughfare or highway. NIEM reference is nc:LocationStreet</value>

        [DataMember(Name="locationStreet")]
        public List<NcStreetType> LocationStreet { get; set; }

        /// <summary>
        /// A name of a person, organization, or other recipient to whom physical mail may be sent. NIEM reference is nc:AddressRecipientName
        /// </summary>
        /// <value>A name of a person, organization, or other recipient to whom physical mail may be sent. NIEM reference is nc:AddressRecipientName</value>

        [DataMember(Name="recipientName")]
        public List<NcTextType> RecipientName { get; set; }

        /// <summary>
        /// A name of a city or town. NIEM reference is nc:LocationCityName
        /// </summary>
        /// <value>A name of a city or town. NIEM reference is nc:LocationCityName</value>

        [DataMember(Name="locationCityName")]
        public List<NcProperNameTextType> LocationCityName { get; set; }

        /// <summary>
        /// A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode
        /// </summary>
        /// <value>A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode</value>

        [DataMember(Name="locationCountyCode")]
        public List<CensusUSCountyCodeType> LocationCountyCode { get; set; }

        /// <summary>
        /// A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName
        /// </summary>
        /// <value>A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName</value>

        [DataMember(Name="locationCountyName")]
        public List<NcProperNameTextType> LocationCountyName { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState</value>

        [DataMember(Name="locationState")]
        public List<NcStateType> LocationState { get; set; }

        /// <summary>
        /// A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry
        /// </summary>
        /// <value>A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry</value>

        [DataMember(Name="locationCountry")]
        public List<NcCountryType> LocationCountry { get; set; }

        /// <summary>
        /// An identifier of a post office-assigned zone for an address. NIEM reference is nc:LocationPostalCode
        /// </summary>
        /// <value>An identifier of a post office-assigned zone for an address. NIEM reference is nc:LocationPostalCode</value>

        [DataMember(Name="locationPostalCode")]
        public List<NiemXsstring> LocationPostalCode { get; set; }

        /// <summary>
        /// An identifier of a smaller area within a post office-assigned zone for an address. NIEM reference is nc:LocationPostalExtensionCode
        /// </summary>
        /// <value>An identifier of a smaller area within a post office-assigned zone for an address. NIEM reference is nc:LocationPostalExtensionCode</value>

        [DataMember(Name="locationPostalExtensionCode")]
        public List<NiemXsstring> LocationPostalExtensionCode { get; set; }

        /// <summary>
        /// An urbanization denotes an area, sector, or residential development within a geographic area. Commonly used in Puerto Rican urban areas, it is an important part of the addressing format, as it describes the location of a specific street whose name may occur multiple times within the same ZIP Code. NIEM reference is nc:AddressUrbanizationName
        /// </summary>
        /// <value>An urbanization denotes an area, sector, or residential development within a geographic area. Commonly used in Puerto Rican urban areas, it is an important part of the addressing format, as it describes the location of a specific street whose name may occur multiple times within the same ZIP Code. NIEM reference is nc:AddressUrbanizationName</value>

        [DataMember(Name="urbanizationName")]
        public List<NcTextType> UrbanizationName { get; set; }

        /// <summary>
        /// A kind of address. NIEM reference is nc:AddressCategoryCode
        /// </summary>
        /// <value>A kind of address. NIEM reference is nc:AddressCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NcAddressCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of address. NIEM reference is nc:AddressCategoryText
        /// </summary>
        /// <value>A kind of address. NIEM reference is nc:AddressCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// Additional information about an address. NIEM reference is it:AddressAugmentation
        /// </summary>
        /// <value>Additional information about an address. NIEM reference is it:AddressAugmentation</value>

        [DataMember(Name="itAugmentation")]
        public List<ItAddressAugmentationType> ItAugmentation { get; set; }

        /// <summary>
        /// Additional information about a Address. NIEM reference is j:AddressAugmentation
        /// </summary>
        /// <value>Additional information about a Address. NIEM reference is j:AddressAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JAddressAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about an address. NIEM reference is scr:AddressAugmentation
        /// </summary>
        /// <value>Additional information about an address. NIEM reference is scr:AddressAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrAddressAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// ncAddressType JSON-LD context
        /// </summary>
        /// <value>ncAddressType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncAddressTypeContextJsonldEnum for ../JSON-LD_Contexts/ncAddressTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncAddressTypeContext.jsonld")]
            JSONLDContextsncAddressTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncAddressType JSON-LD context
        /// </summary>
        /// <value>ncAddressType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcAddressType {\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  PrivateMailbox: ").Append(PrivateMailbox).Append("\n");
            sb.Append("  SecondaryUnit: ").Append(SecondaryUnit).Append("\n");
            sb.Append("  BuildingName: ").Append(BuildingName).Append("\n");
            sb.Append("  DeliveryPointId: ").Append(DeliveryPointId).Append("\n");
            sb.Append("  DeliveryPoint: ").Append(DeliveryPoint).Append("\n");
            sb.Append("  LocationRouteName: ").Append(LocationRouteName).Append("\n");
            sb.Append("  LocationStreet: ").Append(LocationStreet).Append("\n");
            sb.Append("  RecipientName: ").Append(RecipientName).Append("\n");
            sb.Append("  LocationCityName: ").Append(LocationCityName).Append("\n");
            sb.Append("  LocationCountyCode: ").Append(LocationCountyCode).Append("\n");
            sb.Append("  LocationCountyName: ").Append(LocationCountyName).Append("\n");
            sb.Append("  LocationState: ").Append(LocationState).Append("\n");
            sb.Append("  LocationCountry: ").Append(LocationCountry).Append("\n");
            sb.Append("  LocationPostalCode: ").Append(LocationPostalCode).Append("\n");
            sb.Append("  LocationPostalExtensionCode: ").Append(LocationPostalExtensionCode).Append("\n");
            sb.Append("  UrbanizationName: ").Append(UrbanizationName).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ItAugmentation: ").Append(ItAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcAddressType)obj);
        }

        /// <summary>
        /// Returns true if NcAddressType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcAddressType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcAddressType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Full == other.Full ||
                    Full != null &&
                    Full.SequenceEqual(other.Full)
                ) && 
                (
                    PrivateMailbox == other.PrivateMailbox ||
                    PrivateMailbox != null &&
                    PrivateMailbox.SequenceEqual(other.PrivateMailbox)
                ) && 
                (
                    SecondaryUnit == other.SecondaryUnit ||
                    SecondaryUnit != null &&
                    SecondaryUnit.SequenceEqual(other.SecondaryUnit)
                ) && 
                (
                    BuildingName == other.BuildingName ||
                    BuildingName != null &&
                    BuildingName.SequenceEqual(other.BuildingName)
                ) && 
                (
                    DeliveryPointId == other.DeliveryPointId ||
                    DeliveryPointId != null &&
                    DeliveryPointId.SequenceEqual(other.DeliveryPointId)
                ) && 
                (
                    DeliveryPoint == other.DeliveryPoint ||
                    DeliveryPoint != null &&
                    DeliveryPoint.SequenceEqual(other.DeliveryPoint)
                ) && 
                (
                    LocationRouteName == other.LocationRouteName ||
                    LocationRouteName != null &&
                    LocationRouteName.SequenceEqual(other.LocationRouteName)
                ) && 
                (
                    LocationStreet == other.LocationStreet ||
                    LocationStreet != null &&
                    LocationStreet.SequenceEqual(other.LocationStreet)
                ) && 
                (
                    RecipientName == other.RecipientName ||
                    RecipientName != null &&
                    RecipientName.SequenceEqual(other.RecipientName)
                ) && 
                (
                    LocationCityName == other.LocationCityName ||
                    LocationCityName != null &&
                    LocationCityName.SequenceEqual(other.LocationCityName)
                ) && 
                (
                    LocationCountyCode == other.LocationCountyCode ||
                    LocationCountyCode != null &&
                    LocationCountyCode.SequenceEqual(other.LocationCountyCode)
                ) && 
                (
                    LocationCountyName == other.LocationCountyName ||
                    LocationCountyName != null &&
                    LocationCountyName.SequenceEqual(other.LocationCountyName)
                ) && 
                (
                    LocationState == other.LocationState ||
                    LocationState != null &&
                    LocationState.SequenceEqual(other.LocationState)
                ) && 
                (
                    LocationCountry == other.LocationCountry ||
                    LocationCountry != null &&
                    LocationCountry.SequenceEqual(other.LocationCountry)
                ) && 
                (
                    LocationPostalCode == other.LocationPostalCode ||
                    LocationPostalCode != null &&
                    LocationPostalCode.SequenceEqual(other.LocationPostalCode)
                ) && 
                (
                    LocationPostalExtensionCode == other.LocationPostalExtensionCode ||
                    LocationPostalExtensionCode != null &&
                    LocationPostalExtensionCode.SequenceEqual(other.LocationPostalExtensionCode)
                ) && 
                (
                    UrbanizationName == other.UrbanizationName ||
                    UrbanizationName != null &&
                    UrbanizationName.SequenceEqual(other.UrbanizationName)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    ItAugmentation == other.ItAugmentation ||
                    ItAugmentation != null &&
                    ItAugmentation.SequenceEqual(other.ItAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Full != null)
                    hashCode = hashCode * 59 + Full.GetHashCode();
                    if (PrivateMailbox != null)
                    hashCode = hashCode * 59 + PrivateMailbox.GetHashCode();
                    if (SecondaryUnit != null)
                    hashCode = hashCode * 59 + SecondaryUnit.GetHashCode();
                    if (BuildingName != null)
                    hashCode = hashCode * 59 + BuildingName.GetHashCode();
                    if (DeliveryPointId != null)
                    hashCode = hashCode * 59 + DeliveryPointId.GetHashCode();
                    if (DeliveryPoint != null)
                    hashCode = hashCode * 59 + DeliveryPoint.GetHashCode();
                    if (LocationRouteName != null)
                    hashCode = hashCode * 59 + LocationRouteName.GetHashCode();
                    if (LocationStreet != null)
                    hashCode = hashCode * 59 + LocationStreet.GetHashCode();
                    if (RecipientName != null)
                    hashCode = hashCode * 59 + RecipientName.GetHashCode();
                    if (LocationCityName != null)
                    hashCode = hashCode * 59 + LocationCityName.GetHashCode();
                    if (LocationCountyCode != null)
                    hashCode = hashCode * 59 + LocationCountyCode.GetHashCode();
                    if (LocationCountyName != null)
                    hashCode = hashCode * 59 + LocationCountyName.GetHashCode();
                    if (LocationState != null)
                    hashCode = hashCode * 59 + LocationState.GetHashCode();
                    if (LocationCountry != null)
                    hashCode = hashCode * 59 + LocationCountry.GetHashCode();
                    if (LocationPostalCode != null)
                    hashCode = hashCode * 59 + LocationPostalCode.GetHashCode();
                    if (LocationPostalExtensionCode != null)
                    hashCode = hashCode * 59 + LocationPostalExtensionCode.GetHashCode();
                    if (UrbanizationName != null)
                    hashCode = hashCode * 59 + UrbanizationName.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (ItAugmentation != null)
                    hashCode = hashCode * 59 + ItAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcAddressType left, NcAddressType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcAddressType left, NcAddressType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
