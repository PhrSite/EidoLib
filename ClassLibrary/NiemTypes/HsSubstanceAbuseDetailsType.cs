/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the details about a person&#x27;s substance abuse.
    /// </summary>
    [DataContract]
    public partial class HsSubstanceAbuseDetailsType : NcActivityType, IEquatable<HsSubstanceAbuseDetailsType>
    { 
        /// <summary>
        /// An age at which the person first began using an illegal substance. NIEM reference is hs:DrugUseAgeMeasure
        /// </summary>
        /// <value>An age at which the person first began using an illegal substance. NIEM reference is hs:DrugUseAgeMeasure</value>

        [DataMember(Name="drugUseAgeMeasure")]
        public List<NcTimeMeasureType> DrugUseAgeMeasure { get; set; }

        /// <summary>
        /// A code list describing how often the person uses drugs. NIEM reference is hs:DrugUseFrequencyCode
        /// </summary>
        /// <value>A code list describing how often the person uses drugs. NIEM reference is hs:DrugUseFrequencyCode</value>

        [DataMember(Name="drugUseFrequencyCode")]
        public List<HsDrugUseFrequencyCodeType> DrugUseFrequencyCode { get; set; }

        /// <summary>
        /// A description of how often a person uses drugs. NIEM reference is hs:DrugUseFrequencyDescriptionText
        /// </summary>
        /// <value>A description of how often a person uses drugs. NIEM reference is hs:DrugUseFrequencyDescriptionText</value>

        [DataMember(Name="drugUseFrequencyDescription")]
        public List<NcTextType> DrugUseFrequencyDescription { get; set; }

        /// <summary>
        /// True if the person is currently using an illegal substance or has used an illegal substance in the immediate past; false otherwise. NIEM reference is hs:DrugUseIndicator
        /// </summary>
        /// <value>True if the person is currently using an illegal substance or has used an illegal substance in the immediate past; false otherwise. NIEM reference is hs:DrugUseIndicator</value>

        [DataMember(Name="isDrugUse")]
        public List<NiemXsboolean> IsDrugUse { get; set; }

        /// <summary>
        /// A name of the substance identified as the primary drug of choice used by a person. NIEM reference is hs:PreferredDrugName
        /// </summary>
        /// <value>A name of the substance identified as the primary drug of choice used by a person. NIEM reference is hs:PreferredDrugName</value>

        [DataMember(Name="preferredDrugName")]
        public List<NcTextType> PreferredDrugName { get; set; }

        /// <summary>
        /// A matter or substance of which something consists. NIEM reference is nc:Substance
        /// </summary>
        /// <value>A matter or substance of which something consists. NIEM reference is nc:Substance</value>

        [DataMember(Name="substance")]
        public List<NcSubstanceType> Substance { get; set; }

        /// <summary>
        /// A description of current substance abuse. NIEM reference is hs:SubstanceAbuseCurrentDescriptionText
        /// </summary>
        /// <value>A description of current substance abuse. NIEM reference is hs:SubstanceAbuseCurrentDescriptionText</value>

        [DataMember(Name="substanceAbuseCurrentDescription")]
        public List<NcTextType> SubstanceAbuseCurrentDescription { get; set; }

        /// <summary>
        /// A description of past substance abuse issues which may include details about substances used or abused in the past, past treatment episodes or other details related to a person&#x27;s substance use in the past. NIEM reference is hs:SubstanceAbusePastDescriptionText
        /// </summary>
        /// <value>A description of past substance abuse issues which may include details about substances used or abused in the past, past treatment episodes or other details related to a person&#x27;s substance use in the past. NIEM reference is hs:SubstanceAbusePastDescriptionText</value>

        [DataMember(Name="substanceAbusePastDescription")]
        public List<NcTextType> SubstanceAbusePastDescription { get; set; }

        /// <summary>
        /// hsSubstanceAbuseDetailsType JSON-LD context
        /// </summary>
        /// <value>hsSubstanceAbuseDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsSubstanceAbuseDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/hsSubstanceAbuseDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsSubstanceAbuseDetailsTypeContext.jsonld")]
            JSONLDContextshsSubstanceAbuseDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsSubstanceAbuseDetailsType JSON-LD context
        /// </summary>
        /// <value>hsSubstanceAbuseDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsSubstanceAbuseDetailsType {\n");
            sb.Append("  DrugUseAgeMeasure: ").Append(DrugUseAgeMeasure).Append("\n");
            sb.Append("  DrugUseFrequencyCode: ").Append(DrugUseFrequencyCode).Append("\n");
            sb.Append("  DrugUseFrequencyDescription: ").Append(DrugUseFrequencyDescription).Append("\n");
            sb.Append("  IsDrugUse: ").Append(IsDrugUse).Append("\n");
            sb.Append("  PreferredDrugName: ").Append(PreferredDrugName).Append("\n");
            sb.Append("  Substance: ").Append(Substance).Append("\n");
            sb.Append("  SubstanceAbuseCurrentDescription: ").Append(SubstanceAbuseCurrentDescription).Append("\n");
            sb.Append("  SubstanceAbusePastDescription: ").Append(SubstanceAbusePastDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsSubstanceAbuseDetailsType)obj);
        }

        /// <summary>
        /// Returns true if HsSubstanceAbuseDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsSubstanceAbuseDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsSubstanceAbuseDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DrugUseAgeMeasure == other.DrugUseAgeMeasure ||
                    DrugUseAgeMeasure != null &&
                    DrugUseAgeMeasure.SequenceEqual(other.DrugUseAgeMeasure)
                ) && 
                (
                    DrugUseFrequencyCode == other.DrugUseFrequencyCode ||
                    DrugUseFrequencyCode != null &&
                    DrugUseFrequencyCode.SequenceEqual(other.DrugUseFrequencyCode)
                ) && 
                (
                    DrugUseFrequencyDescription == other.DrugUseFrequencyDescription ||
                    DrugUseFrequencyDescription != null &&
                    DrugUseFrequencyDescription.SequenceEqual(other.DrugUseFrequencyDescription)
                ) && 
                (
                    IsDrugUse == other.IsDrugUse ||
                    IsDrugUse != null &&
                    IsDrugUse.SequenceEqual(other.IsDrugUse)
                ) && 
                (
                    PreferredDrugName == other.PreferredDrugName ||
                    PreferredDrugName != null &&
                    PreferredDrugName.SequenceEqual(other.PreferredDrugName)
                ) && 
                (
                    Substance == other.Substance ||
                    Substance != null &&
                    Substance.SequenceEqual(other.Substance)
                ) && 
                (
                    SubstanceAbuseCurrentDescription == other.SubstanceAbuseCurrentDescription ||
                    SubstanceAbuseCurrentDescription != null &&
                    SubstanceAbuseCurrentDescription.SequenceEqual(other.SubstanceAbuseCurrentDescription)
                ) && 
                (
                    SubstanceAbusePastDescription == other.SubstanceAbusePastDescription ||
                    SubstanceAbusePastDescription != null &&
                    SubstanceAbusePastDescription.SequenceEqual(other.SubstanceAbusePastDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DrugUseAgeMeasure != null)
                    hashCode = hashCode * 59 + DrugUseAgeMeasure.GetHashCode();
                    if (DrugUseFrequencyCode != null)
                    hashCode = hashCode * 59 + DrugUseFrequencyCode.GetHashCode();
                    if (DrugUseFrequencyDescription != null)
                    hashCode = hashCode * 59 + DrugUseFrequencyDescription.GetHashCode();
                    if (IsDrugUse != null)
                    hashCode = hashCode * 59 + IsDrugUse.GetHashCode();
                    if (PreferredDrugName != null)
                    hashCode = hashCode * 59 + PreferredDrugName.GetHashCode();
                    if (Substance != null)
                    hashCode = hashCode * 59 + Substance.GetHashCode();
                    if (SubstanceAbuseCurrentDescription != null)
                    hashCode = hashCode * 59 + SubstanceAbuseCurrentDescription.GetHashCode();
                    if (SubstanceAbusePastDescription != null)
                    hashCode = hashCode * 59 + SubstanceAbusePastDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsSubstanceAbuseDetailsType left, HsSubstanceAbuseDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsSubstanceAbuseDetailsType left, HsSubstanceAbuseDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
