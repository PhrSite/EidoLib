/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person who is employed by the agency or institution.
    /// </summary>
    [DataContract]
    public partial class JStaffMemberType : IEquatable<JStaffMemberType>
    { 
        /// <summary>
        /// A discipline that the staff member recognizes as their primary area of competency (knowledge, skills, and abilities). NIEM reference is j:StaffMemberDisciplineText
        /// </summary>
        /// <value>A discipline that the staff member recognizes as their primary area of competency (knowledge, skills, and abilities). NIEM reference is j:StaffMemberDisciplineText</value>

        [DataMember(Name="discipline")]
        public List<NcTextType> Discipline { get; set; }

        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// A description of specific training, education or experience of a staff member. NIEM reference is j:StaffMemberQualification
        /// </summary>
        /// <value>A description of specific training, education or experience of a staff member. NIEM reference is j:StaffMemberQualification</value>

        [DataMember(Name="qualification")]
        public List<JStaffMemberQualificationType> Qualification { get; set; }

        /// <summary>
        /// A program name of primary affiliation for the staff member. NIEM reference is j:StaffMemberAffiliatedPrimaryProgram
        /// </summary>
        /// <value>A program name of primary affiliation for the staff member. NIEM reference is j:StaffMemberAffiliatedPrimaryProgram</value>

        [DataMember(Name="affiliatedPrimaryProgram")]
        public List<NcProgramType> AffiliatedPrimaryProgram { get; set; }

        /// <summary>
        /// A person who is a staff member involved in an applied force incident. NIEM reference is j:StaffMemberAppliedForce
        /// </summary>
        /// <value>A person who is a staff member involved in an applied force incident. NIEM reference is j:StaffMemberAppliedForce</value>

        [DataMember(Name="appliedForce")]
        public List<JForceType> AppliedForce { get; set; }

        /// <summary>
        /// A unique identifier of the badge assigned to a staff member. NIEM reference is j:StaffMemberBadgeNumberID
        /// </summary>
        /// <value>A unique identifier of the badge assigned to a staff member. NIEM reference is j:StaffMemberBadgeNumberID</value>

        [DataMember(Name="badgeNumberId")]
        public List<NiemXsstring> BadgeNumberId { get; set; }

        /// <summary>
        /// An identification for a staff member. NIEM reference is j:StaffMemberIdentification
        /// </summary>
        /// <value>An identification for a staff member. NIEM reference is j:StaffMemberIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A status of the staff member. NIEM reference is j:StaffMemberStatus
        /// </summary>
        /// <value>A status of the staff member. NIEM reference is j:StaffMemberStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A weapon used by a staff member. NIEM reference is j:StaffMemberAssignedWeapon
        /// </summary>
        /// <value>A weapon used by a staff member. NIEM reference is j:StaffMemberAssignedWeapon</value>

        [DataMember(Name="assignedWeapon")]
        public List<NcWeaponType> AssignedWeapon { get; set; }

        /// <summary>
        /// An activity or event involving a specific staff member. NIEM reference is j:StaffMemberIncident
        /// </summary>
        /// <value>An activity or event involving a specific staff member. NIEM reference is j:StaffMemberIncident</value>

        [DataMember(Name="incident")]
        public List<NcIncidentType> Incident { get; set; }

        /// <summary>
        /// True if of whether the staff member is currently a felon or civil addict; or is on parole or probation or under any structured supervision; false otherwise. NIEM reference is j:StaffMemberJusticeSupervisionIndicator
        /// </summary>
        /// <value>True if of whether the staff member is currently a felon or civil addict; or is on parole or probation or under any structured supervision; false otherwise. NIEM reference is j:StaffMemberJusticeSupervisionIndicator</value>

        [DataMember(Name="isJusticeSupervision")]
        public List<NiemXsboolean> IsJusticeSupervision { get; set; }

        /// <summary>
        /// True if the staff person maintains a key position in the agency; false otherwise. NIEM reference is j:StaffMemberKeyPositionIndicator
        /// </summary>
        /// <value>True if the staff person maintains a key position in the agency; false otherwise. NIEM reference is j:StaffMemberKeyPositionIndicator</value>

        [DataMember(Name="isKeyPosition")]
        public List<NiemXsboolean> IsKeyPosition { get; set; }

        /// <summary>
        /// A physical location of a staff member. NIEM reference is j:StaffMemberLocation
        /// </summary>
        /// <value>A physical location of a staff member. NIEM reference is j:StaffMemberLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A person or entity associated with a staff member. NIEM reference is j:StaffMemberAssociatedSubject
        /// </summary>
        /// <value>A person or entity associated with a staff member. NIEM reference is j:StaffMemberAssociatedSubject</value>

        [DataMember(Name="associatedSubject")]
        public List<JSubjectType> AssociatedSubject { get; set; }

        /// <summary>
        /// jStaffMemberType JSON-LD context
        /// </summary>
        /// <value>jStaffMemberType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjStaffMemberTypeContextJsonldEnum for ../JSON-LD_Contexts/jStaffMemberTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jStaffMemberTypeContext.jsonld")]
            JSONLDContextsjStaffMemberTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jStaffMemberType JSON-LD context
        /// </summary>
        /// <value>jStaffMemberType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JStaffMemberType {\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  Qualification: ").Append(Qualification).Append("\n");
            sb.Append("  AffiliatedPrimaryProgram: ").Append(AffiliatedPrimaryProgram).Append("\n");
            sb.Append("  AppliedForce: ").Append(AppliedForce).Append("\n");
            sb.Append("  BadgeNumberId: ").Append(BadgeNumberId).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AssignedWeapon: ").Append(AssignedWeapon).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  IsJusticeSupervision: ").Append(IsJusticeSupervision).Append("\n");
            sb.Append("  IsKeyPosition: ").Append(IsKeyPosition).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  AssociatedSubject: ").Append(AssociatedSubject).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JStaffMemberType)obj);
        }

        /// <summary>
        /// Returns true if JStaffMemberType instances are equal
        /// </summary>
        /// <param name="other">Instance of JStaffMemberType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JStaffMemberType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Discipline == other.Discipline ||
                    Discipline != null &&
                    Discipline.SequenceEqual(other.Discipline)
                ) && 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    Qualification == other.Qualification ||
                    Qualification != null &&
                    Qualification.SequenceEqual(other.Qualification)
                ) && 
                (
                    AffiliatedPrimaryProgram == other.AffiliatedPrimaryProgram ||
                    AffiliatedPrimaryProgram != null &&
                    AffiliatedPrimaryProgram.SequenceEqual(other.AffiliatedPrimaryProgram)
                ) && 
                (
                    AppliedForce == other.AppliedForce ||
                    AppliedForce != null &&
                    AppliedForce.SequenceEqual(other.AppliedForce)
                ) && 
                (
                    BadgeNumberId == other.BadgeNumberId ||
                    BadgeNumberId != null &&
                    BadgeNumberId.SequenceEqual(other.BadgeNumberId)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    AssignedWeapon == other.AssignedWeapon ||
                    AssignedWeapon != null &&
                    AssignedWeapon.SequenceEqual(other.AssignedWeapon)
                ) && 
                (
                    Incident == other.Incident ||
                    Incident != null &&
                    Incident.SequenceEqual(other.Incident)
                ) && 
                (
                    IsJusticeSupervision == other.IsJusticeSupervision ||
                    IsJusticeSupervision != null &&
                    IsJusticeSupervision.SequenceEqual(other.IsJusticeSupervision)
                ) && 
                (
                    IsKeyPosition == other.IsKeyPosition ||
                    IsKeyPosition != null &&
                    IsKeyPosition.SequenceEqual(other.IsKeyPosition)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    AssociatedSubject == other.AssociatedSubject ||
                    AssociatedSubject != null &&
                    AssociatedSubject.SequenceEqual(other.AssociatedSubject)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Discipline != null)
                    hashCode = hashCode * 59 + Discipline.GetHashCode();
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (Qualification != null)
                    hashCode = hashCode * 59 + Qualification.GetHashCode();
                    if (AffiliatedPrimaryProgram != null)
                    hashCode = hashCode * 59 + AffiliatedPrimaryProgram.GetHashCode();
                    if (AppliedForce != null)
                    hashCode = hashCode * 59 + AppliedForce.GetHashCode();
                    if (BadgeNumberId != null)
                    hashCode = hashCode * 59 + BadgeNumberId.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (AssignedWeapon != null)
                    hashCode = hashCode * 59 + AssignedWeapon.GetHashCode();
                    if (Incident != null)
                    hashCode = hashCode * 59 + Incident.GetHashCode();
                    if (IsJusticeSupervision != null)
                    hashCode = hashCode * 59 + IsJusticeSupervision.GetHashCode();
                    if (IsKeyPosition != null)
                    hashCode = hashCode * 59 + IsKeyPosition.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (AssociatedSubject != null)
                    hashCode = hashCode * 59 + AssociatedSubject.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JStaffMemberType left, JStaffMemberType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JStaffMemberType left, JStaffMemberType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
