/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a proceeding before an administrative agency or authority to decide how to deal with failure to comply with rules, to determine an issue of fact, or to reach an administrative decision based on evidence.
    /// </summary>
    [DataContract]
    public partial class JHearingType : NcActivityType, IEquatable<JHearingType>
    { 
        /// <summary>
        /// A set of specific information from the medical report used as evidence. NIEM reference is j:HearingMedicalReportDetailsText
        /// </summary>
        /// <value>A set of specific information from the medical report used as evidence. NIEM reference is j:HearingMedicalReportDetailsText</value>

        [DataMember(Name="medicalReportDetails")]
        public List<NcTextType> MedicalReportDetails { get; set; }

        /// <summary>
        /// A cancellation of a scheduled hearing. NIEM reference is j:HearingCancellation
        /// </summary>
        /// <value>A cancellation of a scheduled hearing. NIEM reference is j:HearingCancellation</value>

        [DataMember(Name="cancellation")]
        public List<NcActivityType> Cancellation { get; set; }

        /// <summary>
        /// A comment provided about the hearing. NIEM reference is j:HearingBoardActionHearingComment
        /// </summary>
        /// <value>A comment provided about the hearing. NIEM reference is j:HearingBoardActionHearingComment</value>

        [DataMember(Name="boardActionHearingComment")]
        public List<NcCommentType> BoardActionHearingComment { get; set; }

        /// <summary>
        /// A data type for a name of a staff member assigned as an investigator to a hearing. NIEM reference is j:HearingInvestigator
        /// </summary>
        /// <value>A data type for a name of a staff member assigned as an investigator to a hearing. NIEM reference is j:HearingInvestigator</value>

        [DataMember(Name="investigator")]
        public List<JHearingInvestigatorType> Investigator { get; set; }

        /// <summary>
        /// True if the Keyhea injunction was waived; false otherwise. NIEM reference is j:HearingInjunctionWaivedIndicator
        /// </summary>
        /// <value>True if the Keyhea injunction was waived; false otherwise. NIEM reference is j:HearingInjunctionWaivedIndicator</value>

        [DataMember(Name="isInjunctionWaived")]
        public List<NiemXsboolean> IsInjunctionWaived { get; set; }

        /// <summary>
        /// A signing date for a hearing. NIEM reference is j:HearingSignatureDate
        /// </summary>
        /// <value>A signing date for a hearing. NIEM reference is j:HearingSignatureDate</value>

        [DataMember(Name="signatureDate")]
        public List<NcDateType> SignatureDate { get; set; }

        /// <summary>
        /// A date when a hearing review is due. NIEM reference is j:HearingReviewDueDate
        /// </summary>
        /// <value>A date when a hearing review is due. NIEM reference is j:HearingReviewDueDate</value>

        [DataMember(Name="reviewDueDate")]
        public List<NcDateType> ReviewDueDate { get; set; }

        /// <summary>
        /// A date the hearing was reconvened. NIEM reference is j:HearingReconvenedDate
        /// </summary>
        /// <value>A date the hearing was reconvened. NIEM reference is j:HearingReconvenedDate</value>

        [DataMember(Name="reconvenedDate")]
        public List<NcDateType> ReconvenedDate { get; set; }

        /// <summary>
        /// A rule or infraction a subject was identified as violating and for which a guilty or not guilty verdict was reached. NIEM reference is j:HearingFindingViolatedText
        /// </summary>
        /// <value>A rule or infraction a subject was identified as violating and for which a guilty or not guilty verdict was reached. NIEM reference is j:HearingFindingViolatedText</value>

        [DataMember(Name="findingViolated")]
        public List<NcTextType> FindingViolated { get; set; }

        /// <summary>
        /// True if the hearing is a kind of subsequent hearing; false otherwise. NIEM reference is j:HearingSubsequentCategoryIndicator
        /// </summary>
        /// <value>True if the hearing is a kind of subsequent hearing; false otherwise. NIEM reference is j:HearingSubsequentCategoryIndicator</value>

        [DataMember(Name="isSubsequentCategory")]
        public List<NiemXsboolean> IsSubsequentCategory { get; set; }

        /// <summary>
        /// A kind of topic discussed during a hearing. NIEM reference is j:HearingDiscussionTopicText
        /// </summary>
        /// <value>A kind of topic discussed during a hearing. NIEM reference is j:HearingDiscussionTopicText</value>

        [DataMember(Name="discussionTopic")]
        public List<NcTextType> DiscussionTopic { get; set; }

        /// <summary>
        /// A process of rescheduling a hearing, hearing events or of hearing process. NIEM reference is j:HearingRescheduling
        /// </summary>
        /// <value>A process of rescheduling a hearing, hearing events or of hearing process. NIEM reference is j:HearingRescheduling</value>

        [DataMember(Name="rescheduling")]
        public List<JHearingReschedulingType> Rescheduling { get; set; }

        /// <summary>
        /// A staff member associated with a hearing process. NIEM reference is j:HearingStaffMember
        /// </summary>
        /// <value>A staff member associated with a hearing process. NIEM reference is j:HearingStaffMember</value>

        [DataMember(Name="staffMember")]
        public List<JStaffMemberType> StaffMember { get; set; }

        /// <summary>
        /// True if the subject appeared at the hearing; false otherwise. NIEM reference is j:HearingSubjectPresentIndicator
        /// </summary>
        /// <value>True if the subject appeared at the hearing; false otherwise. NIEM reference is j:HearingSubjectPresentIndicator</value>

        [DataMember(Name="isSubjectPresent")]
        public List<NiemXsboolean> IsSubjectPresent { get; set; }

        /// <summary>
        /// True if all time constraints have been met and all reports and evidence were submitted 24 hours prior to the hearing; false otherwise. NIEM reference is j:HearingTimeConstraintsMetIndicator
        /// </summary>
        /// <value>True if all time constraints have been met and all reports and evidence were submitted 24 hours prior to the hearing; false otherwise. NIEM reference is j:HearingTimeConstraintsMetIndicator</value>

        [DataMember(Name="isTimeConstraintsMet")]
        public List<NiemXsboolean> IsTimeConstraintsMet { get; set; }

        /// <summary>
        /// True if the subject waived rights to appear at the hearing; false otherwise. NIEM reference is j:HearingSubjectWaivedRightsToAppearIndicator
        /// </summary>
        /// <value>True if the subject waived rights to appear at the hearing; false otherwise. NIEM reference is j:HearingSubjectWaivedRightsToAppearIndicator</value>

        [DataMember(Name="isSubjectWaivedRightsToAppear")]
        public List<NiemXsboolean> IsSubjectWaivedRightsToAppear { get; set; }

        /// <summary>
        /// True if a hearing was rescheduled; false otherwise. NIEM reference is j:HearingRescheduledIndicator
        /// </summary>
        /// <value>True if a hearing was rescheduled; false otherwise. NIEM reference is j:HearingRescheduledIndicator</value>

        [DataMember(Name="isRescheduled")]
        public List<NiemXsboolean> IsRescheduled { get; set; }

        /// <summary>
        /// A referral as the result or in the process of a hearing. NIEM reference is j:HearingReferral
        /// </summary>
        /// <value>A referral as the result or in the process of a hearing. NIEM reference is j:HearingReferral</value>

        [DataMember(Name="referral")]
        public List<NcReferralType> Referral { get; set; }

        /// <summary>
        /// True if evidence was presented as specified; false otherwise. NIEM reference is j:HearingEvidencePresentedIndicator
        /// </summary>
        /// <value>True if evidence was presented as specified; false otherwise. NIEM reference is j:HearingEvidencePresentedIndicator</value>

        [DataMember(Name="isEvidencePresented")]
        public List<NiemXsboolean> IsEvidencePresented { get; set; }

        /// <summary>
        /// A date the psychologists report was finalized. NIEM reference is j:HearingPsychologistReportFinalizedDate
        /// </summary>
        /// <value>A date the psychologists report was finalized. NIEM reference is j:HearingPsychologistReportFinalizedDate</value>

        [DataMember(Name="psychologistReportFinalizedDate")]
        public List<NcDateType> PsychologistReportFinalizedDate { get; set; }

        /// <summary>
        /// True if evidence included oral testimony; false otherwise. NIEM reference is j:HearingEvidenceIncludedTestimonyIndicator
        /// </summary>
        /// <value>True if evidence included oral testimony; false otherwise. NIEM reference is j:HearingEvidenceIncludedTestimonyIndicator</value>

        [DataMember(Name="isEvidenceIncludedTestimony")]
        public List<NiemXsboolean> IsEvidenceIncludedTestimony { get; set; }

        /// <summary>
        /// A collection of evidence introduced or considered during a hearing. NIEM reference is j:HearingEvidence
        /// </summary>
        /// <value>A collection of evidence introduced or considered during a hearing. NIEM reference is j:HearingEvidence</value>

        [DataMember(Name="evidence")]
        public List<JEvidenceType> Evidence { get; set; }

        /// <summary>
        /// True if the hearing records must be electronically signed; false otherwise. NIEM reference is j:HearingRecordsElectronicSignatureRequiredIndicator
        /// </summary>
        /// <value>True if the hearing records must be electronically signed; false otherwise. NIEM reference is j:HearingRecordsElectronicSignatureRequiredIndicator</value>

        [DataMember(Name="isRecordsElectronicSignatureRequired")]
        public List<NiemXsboolean> IsRecordsElectronicSignatureRequired { get; set; }

        /// <summary>
        /// A person who offers witness testimony as part of hearing. NIEM reference is j:HearingWitness
        /// </summary>
        /// <value>A person who offers witness testimony as part of hearing. NIEM reference is j:HearingWitness</value>

        [DataMember(Name="witness")]
        public List<JHearingWitnessType> Witness { get; set; }

        /// <summary>
        /// A staff member assigned to a hearing process. NIEM reference is j:HearingStaffMemberAssignment
        /// </summary>
        /// <value>A staff member assigned to a hearing process. NIEM reference is j:HearingStaffMemberAssignment</value>

        [DataMember(Name="staffMemberAssignment")]
        public List<JAssignmentType> StaffMemberAssignment { get; set; }

        /// <summary>
        /// A set of details and subject matter central to a hearing process. NIEM reference is j:HearingSubjectMatter
        /// </summary>
        /// <value>A set of details and subject matter central to a hearing process. NIEM reference is j:HearingSubjectMatter</value>

        [DataMember(Name="subjectMatter")]
        public List<JHearingSubjectMatterType> SubjectMatter { get; set; }

        /// <summary>
        /// A date the attorney was assigned to this hearing. NIEM reference is j:HearingDateAttorneyAssignedDate
        /// </summary>
        /// <value>A date the attorney was assigned to this hearing. NIEM reference is j:HearingDateAttorneyAssignedDate</value>

        [DataMember(Name="dateAttorneyAssignedDate")]
        public List<NcDateType> DateAttorneyAssignedDate { get; set; }

        /// <summary>
        /// A status of a subject&#x27;s visitation privileges during disciplinary proceedings. NIEM reference is j:HearingVisitation
        /// </summary>
        /// <value>A status of a subject&#x27;s visitation privileges during disciplinary proceedings. NIEM reference is j:HearingVisitation</value>

        [DataMember(Name="visitation")]
        public List<JVisitationType> Visitation { get; set; }

        /// <summary>
        /// A kind of hearing conducted. NIEM reference is j:HearingCategoryText
        /// </summary>
        /// <value>A kind of hearing conducted. NIEM reference is j:HearingCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A date the notice was received. NIEM reference is j:HearingNoticeDateReceivedDate
        /// </summary>
        /// <value>A date the notice was received. NIEM reference is j:HearingNoticeDateReceivedDate</value>

        [DataMember(Name="noticeDateReceivedDate")]
        public List<NcDateType> NoticeDateReceivedDate { get; set; }

        /// <summary>
        /// A person responsible for rendering a hearing decision. NIEM reference is j:HearingOfficial
        /// </summary>
        /// <value>A person responsible for rendering a hearing decision. NIEM reference is j:HearingOfficial</value>

        [DataMember(Name="official")]
        public List<NcPersonType> Official { get; set; }

        /// <summary>
        /// A comment on the discussion that took place and an evaluation of the responses by the parolee. NIEM reference is j:HearingComment
        /// </summary>
        /// <value>A comment on the discussion that took place and an evaluation of the responses by the parolee. NIEM reference is j:HearingComment</value>

        [DataMember(Name="comment")]
        public List<NcCommentType> Comment { get; set; }

        /// <summary>
        /// A date to which a hearing matter has been continued. NIEM reference is j:HearingContinuanceDate
        /// </summary>
        /// <value>A date to which a hearing matter has been continued. NIEM reference is j:HearingContinuanceDate</value>

        [DataMember(Name="continuanceDate")]
        public List<NcDateType> ContinuanceDate { get; set; }

        /// <summary>
        /// A reason for the continuance of the existing orders. NIEM reference is j:HearingContinuationReasonText
        /// </summary>
        /// <value>A reason for the continuance of the existing orders. NIEM reference is j:HearingContinuationReasonText</value>

        [DataMember(Name="continuationReason")]
        public List<NcTextType> ContinuationReason { get; set; }

        /// <summary>
        /// A set of factors considered as part of the hearing. NIEM reference is j:HearingOtherFactorsText
        /// </summary>
        /// <value>A set of factors considered as part of the hearing. NIEM reference is j:HearingOtherFactorsText</value>

        [DataMember(Name="otherFactors")]
        public List<NcTextType> OtherFactors { get; set; }

        /// <summary>
        /// An outcome decision or disposition of a hearing. NIEM reference is j:HearingDecision
        /// </summary>
        /// <value>An outcome decision or disposition of a hearing. NIEM reference is j:HearingDecision</value>

        [DataMember(Name="decision")]
        public List<NcActivityType> Decision { get; set; }

        /// <summary>
        /// A due date for the psychologists report. NIEM reference is j:HearingPsychologistReportDueDate
        /// </summary>
        /// <value>A due date for the psychologists report. NIEM reference is j:HearingPsychologistReportDueDate</value>

        [DataMember(Name="psychologistReportDueDate")]
        public List<NcDateType> PsychologistReportDueDate { get; set; }

        /// <summary>
        /// A due date for the hearing notice. NIEM reference is j:HearingDateNoticeDate
        /// </summary>
        /// <value>A due date for the hearing notice. NIEM reference is j:HearingDateNoticeDate</value>

        [DataMember(Name="dateNoticeDate")]
        public List<NcDateType> DateNoticeDate { get; set; }

        /// <summary>
        /// A no later date associated with this hearing. NIEM reference is j:HearingNoLaterThanDate
        /// </summary>
        /// <value>A no later date associated with this hearing. NIEM reference is j:HearingNoLaterThanDate</value>

        [DataMember(Name="noLaterThanDate")]
        public List<NcDateType> NoLaterThanDate { get; set; }

        /// <summary>
        /// A person attending a hearing. NIEM reference is j:HearingAttendee
        /// </summary>
        /// <value>A person attending a hearing. NIEM reference is j:HearingAttendee</value>

        [DataMember(Name="attendee")]
        public List<NcPersonType> Attendee { get; set; }

        /// <summary>
        /// A person associated with a hearing. NIEM reference is j:HearingAssociatedSubject
        /// </summary>
        /// <value>A person associated with a hearing. NIEM reference is j:HearingAssociatedSubject</value>

        [DataMember(Name="associatedSubject")]
        public List<JSubjectType> AssociatedSubject { get; set; }

        /// <summary>
        /// True if GOOD CAUSE appearing, the hearing in the aforementioned matter is continued until a specific date and time; false otherwise. NIEM reference is j:HearingContinuanceGoodCauseIndicator
        /// </summary>
        /// <value>True if GOOD CAUSE appearing, the hearing in the aforementioned matter is continued until a specific date and time; false otherwise. NIEM reference is j:HearingContinuanceGoodCauseIndicator</value>

        [DataMember(Name="isContinuanceGoodCause")]
        public List<NiemXsboolean> IsContinuanceGoodCause { get; set; }

        /// <summary>
        /// A person who serves as a witness associated to a hearing. NIEM reference is j:HearingAssociatedWitness
        /// </summary>
        /// <value>A person who serves as a witness associated to a hearing. NIEM reference is j:HearingAssociatedWitness</value>

        [DataMember(Name="associatedWitness")]
        public List<JWitnessType> AssociatedWitness { get; set; }

        /// <summary>
        /// An event or activity associated with the process of a hearing. NIEM reference is j:HearingPreparationActivity
        /// </summary>
        /// <value>An event or activity associated with the process of a hearing. NIEM reference is j:HearingPreparationActivity</value>

        [DataMember(Name="preparationActivity")]
        public List<NcActivityType> PreparationActivity { get; set; }

        /// <summary>
        /// True if the offender retained an attorney for the hearing; false otherwise. NIEM reference is j:HearingAttorneyRetainedIndicator
        /// </summary>
        /// <value>True if the offender retained an attorney for the hearing; false otherwise. NIEM reference is j:HearingAttorneyRetainedIndicator</value>

        [DataMember(Name="isAttorneyRetained")]
        public List<NiemXsboolean> IsAttorneyRetained { get; set; }

        /// <summary>
        /// True if the subject was found guilty of a rule violation; false otherwise. NIEM reference is j:HearingFindingGuiltyIndicator
        /// </summary>
        /// <value>True if the subject was found guilty of a rule violation; false otherwise. NIEM reference is j:HearingFindingGuiltyIndicator</value>

        [DataMember(Name="isFindingGuilty")]
        public List<NiemXsboolean> IsFindingGuilty { get; set; }

        /// <summary>
        /// A hearing decision which has been postponed to a later time. NIEM reference is j:HearingDeferredDecision
        /// </summary>
        /// <value>A hearing decision which has been postponed to a later time. NIEM reference is j:HearingDeferredDecision</value>

        [DataMember(Name="deferredDecision")]
        public List<NcActivityType> DeferredDecision { get; set; }

        /// <summary>
        /// A group of officials assembled for determining a hearing decision. NIEM reference is j:HearingPanel
        /// </summary>
        /// <value>A group of officials assembled for determining a hearing decision. NIEM reference is j:HearingPanel</value>

        [DataMember(Name="panel")]
        public List<JPanelType> Panel { get; set; }

        /// <summary>
        /// A statement of why a hearing was postponed. NIEM reference is j:HearingPostponementText
        /// </summary>
        /// <value>A statement of why a hearing was postponed. NIEM reference is j:HearingPostponementText</value>

        [DataMember(Name="postponement")]
        public List<NcTextType> Postponement { get; set; }

        /// <summary>
        /// True if the hearing is an initial hearing; false otherwise. NIEM reference is j:HearingInitialIndicator
        /// </summary>
        /// <value>True if the hearing is an initial hearing; false otherwise. NIEM reference is j:HearingInitialIndicator</value>

        [DataMember(Name="isInitial")]
        public List<NiemXsboolean> IsInitial { get; set; }

        /// <summary>
        /// A set of objectives for a hearing process. NIEM reference is j:HearingPlan
        /// </summary>
        /// <value>A set of objectives for a hearing process. NIEM reference is j:HearingPlan</value>

        [DataMember(Name="plan")]
        public List<JPlanType> Plan { get; set; }

        /// <summary>
        /// A date on which hearing paperwork was sent. NIEM reference is j:HearingPaperworkSentDate
        /// </summary>
        /// <value>A date on which hearing paperwork was sent. NIEM reference is j:HearingPaperworkSentDate</value>

        [DataMember(Name="paperworkSentDate")]
        public List<NcDateType> PaperworkSentDate { get; set; }

        /// <summary>
        /// A kind of rules violation associated with a hearing. NIEM reference is j:HearingRuleViolationCategoryText
        /// </summary>
        /// <value>A kind of rules violation associated with a hearing. NIEM reference is j:HearingRuleViolationCategoryText</value>

        [DataMember(Name="ruleViolationCategory")]
        public List<NcTextType> RuleViolationCategory { get; set; }

        /// <summary>
        /// jHearingType JSON-LD context
        /// </summary>
        /// <value>jHearingType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjHearingTypeContextJsonldEnum for ../JSON-LD_Contexts/jHearingTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jHearingTypeContext.jsonld")]
            JSONLDContextsjHearingTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jHearingType JSON-LD context
        /// </summary>
        /// <value>jHearingType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JHearingType {\n");
            sb.Append("  MedicalReportDetails: ").Append(MedicalReportDetails).Append("\n");
            sb.Append("  Cancellation: ").Append(Cancellation).Append("\n");
            sb.Append("  BoardActionHearingComment: ").Append(BoardActionHearingComment).Append("\n");
            sb.Append("  Investigator: ").Append(Investigator).Append("\n");
            sb.Append("  IsInjunctionWaived: ").Append(IsInjunctionWaived).Append("\n");
            sb.Append("  SignatureDate: ").Append(SignatureDate).Append("\n");
            sb.Append("  ReviewDueDate: ").Append(ReviewDueDate).Append("\n");
            sb.Append("  ReconvenedDate: ").Append(ReconvenedDate).Append("\n");
            sb.Append("  FindingViolated: ").Append(FindingViolated).Append("\n");
            sb.Append("  IsSubsequentCategory: ").Append(IsSubsequentCategory).Append("\n");
            sb.Append("  DiscussionTopic: ").Append(DiscussionTopic).Append("\n");
            sb.Append("  Rescheduling: ").Append(Rescheduling).Append("\n");
            sb.Append("  StaffMember: ").Append(StaffMember).Append("\n");
            sb.Append("  IsSubjectPresent: ").Append(IsSubjectPresent).Append("\n");
            sb.Append("  IsTimeConstraintsMet: ").Append(IsTimeConstraintsMet).Append("\n");
            sb.Append("  IsSubjectWaivedRightsToAppear: ").Append(IsSubjectWaivedRightsToAppear).Append("\n");
            sb.Append("  IsRescheduled: ").Append(IsRescheduled).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  IsEvidencePresented: ").Append(IsEvidencePresented).Append("\n");
            sb.Append("  PsychologistReportFinalizedDate: ").Append(PsychologistReportFinalizedDate).Append("\n");
            sb.Append("  IsEvidenceIncludedTestimony: ").Append(IsEvidenceIncludedTestimony).Append("\n");
            sb.Append("  Evidence: ").Append(Evidence).Append("\n");
            sb.Append("  IsRecordsElectronicSignatureRequired: ").Append(IsRecordsElectronicSignatureRequired).Append("\n");
            sb.Append("  Witness: ").Append(Witness).Append("\n");
            sb.Append("  StaffMemberAssignment: ").Append(StaffMemberAssignment).Append("\n");
            sb.Append("  SubjectMatter: ").Append(SubjectMatter).Append("\n");
            sb.Append("  DateAttorneyAssignedDate: ").Append(DateAttorneyAssignedDate).Append("\n");
            sb.Append("  Visitation: ").Append(Visitation).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  NoticeDateReceivedDate: ").Append(NoticeDateReceivedDate).Append("\n");
            sb.Append("  Official: ").Append(Official).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ContinuanceDate: ").Append(ContinuanceDate).Append("\n");
            sb.Append("  ContinuationReason: ").Append(ContinuationReason).Append("\n");
            sb.Append("  OtherFactors: ").Append(OtherFactors).Append("\n");
            sb.Append("  Decision: ").Append(Decision).Append("\n");
            sb.Append("  PsychologistReportDueDate: ").Append(PsychologistReportDueDate).Append("\n");
            sb.Append("  DateNoticeDate: ").Append(DateNoticeDate).Append("\n");
            sb.Append("  NoLaterThanDate: ").Append(NoLaterThanDate).Append("\n");
            sb.Append("  Attendee: ").Append(Attendee).Append("\n");
            sb.Append("  AssociatedSubject: ").Append(AssociatedSubject).Append("\n");
            sb.Append("  IsContinuanceGoodCause: ").Append(IsContinuanceGoodCause).Append("\n");
            sb.Append("  AssociatedWitness: ").Append(AssociatedWitness).Append("\n");
            sb.Append("  PreparationActivity: ").Append(PreparationActivity).Append("\n");
            sb.Append("  IsAttorneyRetained: ").Append(IsAttorneyRetained).Append("\n");
            sb.Append("  IsFindingGuilty: ").Append(IsFindingGuilty).Append("\n");
            sb.Append("  DeferredDecision: ").Append(DeferredDecision).Append("\n");
            sb.Append("  Panel: ").Append(Panel).Append("\n");
            sb.Append("  Postponement: ").Append(Postponement).Append("\n");
            sb.Append("  IsInitial: ").Append(IsInitial).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  PaperworkSentDate: ").Append(PaperworkSentDate).Append("\n");
            sb.Append("  RuleViolationCategory: ").Append(RuleViolationCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JHearingType)obj);
        }

        /// <summary>
        /// Returns true if JHearingType instances are equal
        /// </summary>
        /// <param name="other">Instance of JHearingType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JHearingType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MedicalReportDetails == other.MedicalReportDetails ||
                    MedicalReportDetails != null &&
                    MedicalReportDetails.SequenceEqual(other.MedicalReportDetails)
                ) && 
                (
                    Cancellation == other.Cancellation ||
                    Cancellation != null &&
                    Cancellation.SequenceEqual(other.Cancellation)
                ) && 
                (
                    BoardActionHearingComment == other.BoardActionHearingComment ||
                    BoardActionHearingComment != null &&
                    BoardActionHearingComment.SequenceEqual(other.BoardActionHearingComment)
                ) && 
                (
                    Investigator == other.Investigator ||
                    Investigator != null &&
                    Investigator.SequenceEqual(other.Investigator)
                ) && 
                (
                    IsInjunctionWaived == other.IsInjunctionWaived ||
                    IsInjunctionWaived != null &&
                    IsInjunctionWaived.SequenceEqual(other.IsInjunctionWaived)
                ) && 
                (
                    SignatureDate == other.SignatureDate ||
                    SignatureDate != null &&
                    SignatureDate.SequenceEqual(other.SignatureDate)
                ) && 
                (
                    ReviewDueDate == other.ReviewDueDate ||
                    ReviewDueDate != null &&
                    ReviewDueDate.SequenceEqual(other.ReviewDueDate)
                ) && 
                (
                    ReconvenedDate == other.ReconvenedDate ||
                    ReconvenedDate != null &&
                    ReconvenedDate.SequenceEqual(other.ReconvenedDate)
                ) && 
                (
                    FindingViolated == other.FindingViolated ||
                    FindingViolated != null &&
                    FindingViolated.SequenceEqual(other.FindingViolated)
                ) && 
                (
                    IsSubsequentCategory == other.IsSubsequentCategory ||
                    IsSubsequentCategory != null &&
                    IsSubsequentCategory.SequenceEqual(other.IsSubsequentCategory)
                ) && 
                (
                    DiscussionTopic == other.DiscussionTopic ||
                    DiscussionTopic != null &&
                    DiscussionTopic.SequenceEqual(other.DiscussionTopic)
                ) && 
                (
                    Rescheduling == other.Rescheduling ||
                    Rescheduling != null &&
                    Rescheduling.SequenceEqual(other.Rescheduling)
                ) && 
                (
                    StaffMember == other.StaffMember ||
                    StaffMember != null &&
                    StaffMember.SequenceEqual(other.StaffMember)
                ) && 
                (
                    IsSubjectPresent == other.IsSubjectPresent ||
                    IsSubjectPresent != null &&
                    IsSubjectPresent.SequenceEqual(other.IsSubjectPresent)
                ) && 
                (
                    IsTimeConstraintsMet == other.IsTimeConstraintsMet ||
                    IsTimeConstraintsMet != null &&
                    IsTimeConstraintsMet.SequenceEqual(other.IsTimeConstraintsMet)
                ) && 
                (
                    IsSubjectWaivedRightsToAppear == other.IsSubjectWaivedRightsToAppear ||
                    IsSubjectWaivedRightsToAppear != null &&
                    IsSubjectWaivedRightsToAppear.SequenceEqual(other.IsSubjectWaivedRightsToAppear)
                ) && 
                (
                    IsRescheduled == other.IsRescheduled ||
                    IsRescheduled != null &&
                    IsRescheduled.SequenceEqual(other.IsRescheduled)
                ) && 
                (
                    Referral == other.Referral ||
                    Referral != null &&
                    Referral.SequenceEqual(other.Referral)
                ) && 
                (
                    IsEvidencePresented == other.IsEvidencePresented ||
                    IsEvidencePresented != null &&
                    IsEvidencePresented.SequenceEqual(other.IsEvidencePresented)
                ) && 
                (
                    PsychologistReportFinalizedDate == other.PsychologistReportFinalizedDate ||
                    PsychologistReportFinalizedDate != null &&
                    PsychologistReportFinalizedDate.SequenceEqual(other.PsychologistReportFinalizedDate)
                ) && 
                (
                    IsEvidenceIncludedTestimony == other.IsEvidenceIncludedTestimony ||
                    IsEvidenceIncludedTestimony != null &&
                    IsEvidenceIncludedTestimony.SequenceEqual(other.IsEvidenceIncludedTestimony)
                ) && 
                (
                    Evidence == other.Evidence ||
                    Evidence != null &&
                    Evidence.SequenceEqual(other.Evidence)
                ) && 
                (
                    IsRecordsElectronicSignatureRequired == other.IsRecordsElectronicSignatureRequired ||
                    IsRecordsElectronicSignatureRequired != null &&
                    IsRecordsElectronicSignatureRequired.SequenceEqual(other.IsRecordsElectronicSignatureRequired)
                ) && 
                (
                    Witness == other.Witness ||
                    Witness != null &&
                    Witness.SequenceEqual(other.Witness)
                ) && 
                (
                    StaffMemberAssignment == other.StaffMemberAssignment ||
                    StaffMemberAssignment != null &&
                    StaffMemberAssignment.SequenceEqual(other.StaffMemberAssignment)
                ) && 
                (
                    SubjectMatter == other.SubjectMatter ||
                    SubjectMatter != null &&
                    SubjectMatter.SequenceEqual(other.SubjectMatter)
                ) && 
                (
                    DateAttorneyAssignedDate == other.DateAttorneyAssignedDate ||
                    DateAttorneyAssignedDate != null &&
                    DateAttorneyAssignedDate.SequenceEqual(other.DateAttorneyAssignedDate)
                ) && 
                (
                    Visitation == other.Visitation ||
                    Visitation != null &&
                    Visitation.SequenceEqual(other.Visitation)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    NoticeDateReceivedDate == other.NoticeDateReceivedDate ||
                    NoticeDateReceivedDate != null &&
                    NoticeDateReceivedDate.SequenceEqual(other.NoticeDateReceivedDate)
                ) && 
                (
                    Official == other.Official ||
                    Official != null &&
                    Official.SequenceEqual(other.Official)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    ContinuanceDate == other.ContinuanceDate ||
                    ContinuanceDate != null &&
                    ContinuanceDate.SequenceEqual(other.ContinuanceDate)
                ) && 
                (
                    ContinuationReason == other.ContinuationReason ||
                    ContinuationReason != null &&
                    ContinuationReason.SequenceEqual(other.ContinuationReason)
                ) && 
                (
                    OtherFactors == other.OtherFactors ||
                    OtherFactors != null &&
                    OtherFactors.SequenceEqual(other.OtherFactors)
                ) && 
                (
                    Decision == other.Decision ||
                    Decision != null &&
                    Decision.SequenceEqual(other.Decision)
                ) && 
                (
                    PsychologistReportDueDate == other.PsychologistReportDueDate ||
                    PsychologistReportDueDate != null &&
                    PsychologistReportDueDate.SequenceEqual(other.PsychologistReportDueDate)
                ) && 
                (
                    DateNoticeDate == other.DateNoticeDate ||
                    DateNoticeDate != null &&
                    DateNoticeDate.SequenceEqual(other.DateNoticeDate)
                ) && 
                (
                    NoLaterThanDate == other.NoLaterThanDate ||
                    NoLaterThanDate != null &&
                    NoLaterThanDate.SequenceEqual(other.NoLaterThanDate)
                ) && 
                (
                    Attendee == other.Attendee ||
                    Attendee != null &&
                    Attendee.SequenceEqual(other.Attendee)
                ) && 
                (
                    AssociatedSubject == other.AssociatedSubject ||
                    AssociatedSubject != null &&
                    AssociatedSubject.SequenceEqual(other.AssociatedSubject)
                ) && 
                (
                    IsContinuanceGoodCause == other.IsContinuanceGoodCause ||
                    IsContinuanceGoodCause != null &&
                    IsContinuanceGoodCause.SequenceEqual(other.IsContinuanceGoodCause)
                ) && 
                (
                    AssociatedWitness == other.AssociatedWitness ||
                    AssociatedWitness != null &&
                    AssociatedWitness.SequenceEqual(other.AssociatedWitness)
                ) && 
                (
                    PreparationActivity == other.PreparationActivity ||
                    PreparationActivity != null &&
                    PreparationActivity.SequenceEqual(other.PreparationActivity)
                ) && 
                (
                    IsAttorneyRetained == other.IsAttorneyRetained ||
                    IsAttorneyRetained != null &&
                    IsAttorneyRetained.SequenceEqual(other.IsAttorneyRetained)
                ) && 
                (
                    IsFindingGuilty == other.IsFindingGuilty ||
                    IsFindingGuilty != null &&
                    IsFindingGuilty.SequenceEqual(other.IsFindingGuilty)
                ) && 
                (
                    DeferredDecision == other.DeferredDecision ||
                    DeferredDecision != null &&
                    DeferredDecision.SequenceEqual(other.DeferredDecision)
                ) && 
                (
                    Panel == other.Panel ||
                    Panel != null &&
                    Panel.SequenceEqual(other.Panel)
                ) && 
                (
                    Postponement == other.Postponement ||
                    Postponement != null &&
                    Postponement.SequenceEqual(other.Postponement)
                ) && 
                (
                    IsInitial == other.IsInitial ||
                    IsInitial != null &&
                    IsInitial.SequenceEqual(other.IsInitial)
                ) && 
                (
                    Plan == other.Plan ||
                    Plan != null &&
                    Plan.SequenceEqual(other.Plan)
                ) && 
                (
                    PaperworkSentDate == other.PaperworkSentDate ||
                    PaperworkSentDate != null &&
                    PaperworkSentDate.SequenceEqual(other.PaperworkSentDate)
                ) && 
                (
                    RuleViolationCategory == other.RuleViolationCategory ||
                    RuleViolationCategory != null &&
                    RuleViolationCategory.SequenceEqual(other.RuleViolationCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MedicalReportDetails != null)
                    hashCode = hashCode * 59 + MedicalReportDetails.GetHashCode();
                    if (Cancellation != null)
                    hashCode = hashCode * 59 + Cancellation.GetHashCode();
                    if (BoardActionHearingComment != null)
                    hashCode = hashCode * 59 + BoardActionHearingComment.GetHashCode();
                    if (Investigator != null)
                    hashCode = hashCode * 59 + Investigator.GetHashCode();
                    if (IsInjunctionWaived != null)
                    hashCode = hashCode * 59 + IsInjunctionWaived.GetHashCode();
                    if (SignatureDate != null)
                    hashCode = hashCode * 59 + SignatureDate.GetHashCode();
                    if (ReviewDueDate != null)
                    hashCode = hashCode * 59 + ReviewDueDate.GetHashCode();
                    if (ReconvenedDate != null)
                    hashCode = hashCode * 59 + ReconvenedDate.GetHashCode();
                    if (FindingViolated != null)
                    hashCode = hashCode * 59 + FindingViolated.GetHashCode();
                    if (IsSubsequentCategory != null)
                    hashCode = hashCode * 59 + IsSubsequentCategory.GetHashCode();
                    if (DiscussionTopic != null)
                    hashCode = hashCode * 59 + DiscussionTopic.GetHashCode();
                    if (Rescheduling != null)
                    hashCode = hashCode * 59 + Rescheduling.GetHashCode();
                    if (StaffMember != null)
                    hashCode = hashCode * 59 + StaffMember.GetHashCode();
                    if (IsSubjectPresent != null)
                    hashCode = hashCode * 59 + IsSubjectPresent.GetHashCode();
                    if (IsTimeConstraintsMet != null)
                    hashCode = hashCode * 59 + IsTimeConstraintsMet.GetHashCode();
                    if (IsSubjectWaivedRightsToAppear != null)
                    hashCode = hashCode * 59 + IsSubjectWaivedRightsToAppear.GetHashCode();
                    if (IsRescheduled != null)
                    hashCode = hashCode * 59 + IsRescheduled.GetHashCode();
                    if (Referral != null)
                    hashCode = hashCode * 59 + Referral.GetHashCode();
                    if (IsEvidencePresented != null)
                    hashCode = hashCode * 59 + IsEvidencePresented.GetHashCode();
                    if (PsychologistReportFinalizedDate != null)
                    hashCode = hashCode * 59 + PsychologistReportFinalizedDate.GetHashCode();
                    if (IsEvidenceIncludedTestimony != null)
                    hashCode = hashCode * 59 + IsEvidenceIncludedTestimony.GetHashCode();
                    if (Evidence != null)
                    hashCode = hashCode * 59 + Evidence.GetHashCode();
                    if (IsRecordsElectronicSignatureRequired != null)
                    hashCode = hashCode * 59 + IsRecordsElectronicSignatureRequired.GetHashCode();
                    if (Witness != null)
                    hashCode = hashCode * 59 + Witness.GetHashCode();
                    if (StaffMemberAssignment != null)
                    hashCode = hashCode * 59 + StaffMemberAssignment.GetHashCode();
                    if (SubjectMatter != null)
                    hashCode = hashCode * 59 + SubjectMatter.GetHashCode();
                    if (DateAttorneyAssignedDate != null)
                    hashCode = hashCode * 59 + DateAttorneyAssignedDate.GetHashCode();
                    if (Visitation != null)
                    hashCode = hashCode * 59 + Visitation.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (NoticeDateReceivedDate != null)
                    hashCode = hashCode * 59 + NoticeDateReceivedDate.GetHashCode();
                    if (Official != null)
                    hashCode = hashCode * 59 + Official.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (ContinuanceDate != null)
                    hashCode = hashCode * 59 + ContinuanceDate.GetHashCode();
                    if (ContinuationReason != null)
                    hashCode = hashCode * 59 + ContinuationReason.GetHashCode();
                    if (OtherFactors != null)
                    hashCode = hashCode * 59 + OtherFactors.GetHashCode();
                    if (Decision != null)
                    hashCode = hashCode * 59 + Decision.GetHashCode();
                    if (PsychologistReportDueDate != null)
                    hashCode = hashCode * 59 + PsychologistReportDueDate.GetHashCode();
                    if (DateNoticeDate != null)
                    hashCode = hashCode * 59 + DateNoticeDate.GetHashCode();
                    if (NoLaterThanDate != null)
                    hashCode = hashCode * 59 + NoLaterThanDate.GetHashCode();
                    if (Attendee != null)
                    hashCode = hashCode * 59 + Attendee.GetHashCode();
                    if (AssociatedSubject != null)
                    hashCode = hashCode * 59 + AssociatedSubject.GetHashCode();
                    if (IsContinuanceGoodCause != null)
                    hashCode = hashCode * 59 + IsContinuanceGoodCause.GetHashCode();
                    if (AssociatedWitness != null)
                    hashCode = hashCode * 59 + AssociatedWitness.GetHashCode();
                    if (PreparationActivity != null)
                    hashCode = hashCode * 59 + PreparationActivity.GetHashCode();
                    if (IsAttorneyRetained != null)
                    hashCode = hashCode * 59 + IsAttorneyRetained.GetHashCode();
                    if (IsFindingGuilty != null)
                    hashCode = hashCode * 59 + IsFindingGuilty.GetHashCode();
                    if (DeferredDecision != null)
                    hashCode = hashCode * 59 + DeferredDecision.GetHashCode();
                    if (Panel != null)
                    hashCode = hashCode * 59 + Panel.GetHashCode();
                    if (Postponement != null)
                    hashCode = hashCode * 59 + Postponement.GetHashCode();
                    if (IsInitial != null)
                    hashCode = hashCode * 59 + IsInitial.GetHashCode();
                    if (Plan != null)
                    hashCode = hashCode * 59 + Plan.GetHashCode();
                    if (PaperworkSentDate != null)
                    hashCode = hashCode * 59 + PaperworkSentDate.GetHashCode();
                    if (RuleViolationCategory != null)
                    hashCode = hashCode * 59 + RuleViolationCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JHearingType left, JHearingType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JHearingType left, JHearingType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
