/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for medical equipment or devices required by a subject due to a physical disability.
    /// </summary>
    [DataContract]
    public partial class JMedicalEquipmentType : NcItemType, IEquatable<JMedicalEquipmentType>
    { 
        /// <summary>
        /// A kind of medical equipment required by a subject for a disability. NIEM reference is j:MedicalEquipmentCategoryText
        /// </summary>
        /// <value>A kind of medical equipment required by a subject for a disability. NIEM reference is j:MedicalEquipmentCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// True if the requirement for the use of the medical equipment is temporary; false otherwise. NIEM reference is j:MedicalEquipmentTemporaryIndicator
        /// </summary>
        /// <value>True if the requirement for the use of the medical equipment is temporary; false otherwise. NIEM reference is j:MedicalEquipmentTemporaryIndicator</value>

        [DataMember(Name="isTemporary")]
        public List<NiemXsboolean> IsTemporary { get; set; }

        /// <summary>
        /// A date on which the requirement for the use of the medical equipment expires. NIEM reference is j:MedicalEquipmentExpirationDate
        /// </summary>
        /// <value>A date on which the requirement for the use of the medical equipment expires. NIEM reference is j:MedicalEquipmentExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// jMedicalEquipmentType JSON-LD context
        /// </summary>
        /// <value>jMedicalEquipmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjMedicalEquipmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jMedicalEquipmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jMedicalEquipmentTypeContext.jsonld")]
            JSONLDContextsjMedicalEquipmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jMedicalEquipmentType JSON-LD context
        /// </summary>
        /// <value>jMedicalEquipmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JMedicalEquipmentType {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  IsTemporary: ").Append(IsTemporary).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JMedicalEquipmentType)obj);
        }

        /// <summary>
        /// Returns true if JMedicalEquipmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JMedicalEquipmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JMedicalEquipmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    IsTemporary == other.IsTemporary ||
                    IsTemporary != null &&
                    IsTemporary.SequenceEqual(other.IsTemporary)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (IsTemporary != null)
                    hashCode = hashCode * 59 + IsTemporary.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JMedicalEquipmentType left, JMedicalEquipmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JMedicalEquipmentType left, JMedicalEquipmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
