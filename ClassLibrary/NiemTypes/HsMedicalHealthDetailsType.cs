/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details about a person&#x27;s medical health.
    /// </summary>
    [DataContract]
    public partial class HsMedicalHealthDetailsType : NcActivityType, IEquatable<HsMedicalHealthDetailsType>
    { 
        /// <summary>
        /// A description of the details of a person&#x27;s dental history, which may include diagnosis, treatment plans, and medications. NIEM reference is hs:DentalHistoryDescriptionText
        /// </summary>
        /// <value>A description of the details of a person&#x27;s dental history, which may include diagnosis, treatment plans, and medications. NIEM reference is hs:DentalHistoryDescriptionText</value>

        [DataMember(Name="dentalHistoryDescription")]
        public List<NcTextType> DentalHistoryDescription { get; set; }

        /// <summary>
        /// A description of known medical history. NIEM reference is hs:MedicalHistoryDescriptionText
        /// </summary>
        /// <value>A description of known medical history. NIEM reference is hs:MedicalHistoryDescriptionText</value>

        [DataMember(Name="medicalHistoryDescription")]
        public List<NcTextType> MedicalHistoryDescription { get; set; }

        /// <summary>
        /// True if the juvenile has a hearing disability; false otherwise. NIEM reference is hs:HearingDisabilityIndicator
        /// </summary>
        /// <value>True if the juvenile has a hearing disability; false otherwise. NIEM reference is hs:HearingDisabilityIndicator</value>

        [DataMember(Name="isHearingDisability")]
        public List<NiemXsboolean> IsHearingDisability { get; set; }

        /// <summary>
        /// True if the juvenile has a visual disability; false otherwise. NIEM reference is hs:VisualDisabilityIndicator
        /// </summary>
        /// <value>True if the juvenile has a visual disability; false otherwise. NIEM reference is hs:VisualDisabilityIndicator</value>

        [DataMember(Name="isVisualDisability")]
        public List<NiemXsboolean> IsVisualDisability { get; set; }

        /// <summary>
        /// True if the juvenile has a physical disability other than a visual or hearing impairment; false otherwise. NIEM reference is hs:OtherPhysicalDisabilityIndicator
        /// </summary>
        /// <value>True if the juvenile has a physical disability other than a visual or hearing impairment; false otherwise. NIEM reference is hs:OtherPhysicalDisabilityIndicator</value>

        [DataMember(Name="isOtherPhysicalDisability")]
        public List<NiemXsboolean> IsOtherPhysicalDisability { get; set; }

        /// <summary>
        /// hsMedicalHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsMedicalHealthDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsMedicalHealthDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/hsMedicalHealthDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsMedicalHealthDetailsTypeContext.jsonld")]
            JSONLDContextshsMedicalHealthDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsMedicalHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsMedicalHealthDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsMedicalHealthDetailsType {\n");
            sb.Append("  DentalHistoryDescription: ").Append(DentalHistoryDescription).Append("\n");
            sb.Append("  MedicalHistoryDescription: ").Append(MedicalHistoryDescription).Append("\n");
            sb.Append("  IsHearingDisability: ").Append(IsHearingDisability).Append("\n");
            sb.Append("  IsVisualDisability: ").Append(IsVisualDisability).Append("\n");
            sb.Append("  IsOtherPhysicalDisability: ").Append(IsOtherPhysicalDisability).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsMedicalHealthDetailsType)obj);
        }

        /// <summary>
        /// Returns true if HsMedicalHealthDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsMedicalHealthDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsMedicalHealthDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DentalHistoryDescription == other.DentalHistoryDescription ||
                    DentalHistoryDescription != null &&
                    DentalHistoryDescription.SequenceEqual(other.DentalHistoryDescription)
                ) && 
                (
                    MedicalHistoryDescription == other.MedicalHistoryDescription ||
                    MedicalHistoryDescription != null &&
                    MedicalHistoryDescription.SequenceEqual(other.MedicalHistoryDescription)
                ) && 
                (
                    IsHearingDisability == other.IsHearingDisability ||
                    IsHearingDisability != null &&
                    IsHearingDisability.SequenceEqual(other.IsHearingDisability)
                ) && 
                (
                    IsVisualDisability == other.IsVisualDisability ||
                    IsVisualDisability != null &&
                    IsVisualDisability.SequenceEqual(other.IsVisualDisability)
                ) && 
                (
                    IsOtherPhysicalDisability == other.IsOtherPhysicalDisability ||
                    IsOtherPhysicalDisability != null &&
                    IsOtherPhysicalDisability.SequenceEqual(other.IsOtherPhysicalDisability)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DentalHistoryDescription != null)
                    hashCode = hashCode * 59 + DentalHistoryDescription.GetHashCode();
                    if (MedicalHistoryDescription != null)
                    hashCode = hashCode * 59 + MedicalHistoryDescription.GetHashCode();
                    if (IsHearingDisability != null)
                    hashCode = hashCode * 59 + IsHearingDisability.GetHashCode();
                    if (IsVisualDisability != null)
                    hashCode = hashCode * 59 + IsVisualDisability.GetHashCode();
                    if (IsOtherPhysicalDisability != null)
                    hashCode = hashCode * 59 + IsOtherPhysicalDisability.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsMedicalHealthDetailsType left, HsMedicalHealthDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsMedicalHealthDetailsType left, HsMedicalHealthDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
