/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
        /// <summary>
        /// A data type for a kind of localized friction ridge transfer quality issue
        /// </summary>
        /// <value>A data type for a kind of localized friction ridge transfer quality issue</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BiomMinutiaeLocalQualityIssuesCategoryCodeSimpleType
        {
            /// <summary>
            /// Enum ARTIFACTEnum for ARTIFACT
            /// </summary>
            [EnumMember(Value = "ARTIFACT")]
            ARTIFACTEnum = 0,
            /// <summary>
            /// Enum BACKGROUNDEnum for BACKGROUND
            /// </summary>
            [EnumMember(Value = "BACKGROUND")]
            BACKGROUNDEnum = 1,
            /// <summary>
            /// Enum COMPRESSEDEnum for COMPRESSED
            /// </summary>
            [EnumMember(Value = "COMPRESSED")]
            COMPRESSEDEnum = 2,
            /// <summary>
            /// Enum DISTORTEnum for DISTORT
            /// </summary>
            [EnumMember(Value = "DISTORT")]
            DISTORTEnum = 3,
            /// <summary>
            /// Enum NEGATIVEEnum for NEGATIVE
            /// </summary>
            [EnumMember(Value = "NEGATIVE")]
            NEGATIVEEnum = 4,
            /// <summary>
            /// Enum OTHEREnum for OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHEREnum = 5,
            /// <summary>
            /// Enum OVERDEVEnum for OVERDEV
            /// </summary>
            [EnumMember(Value = "OVERDEV")]
            OVERDEVEnum = 6,
            /// <summary>
            /// Enum OVERLAPEnum for OVERLAP
            /// </summary>
            [EnumMember(Value = "OVERLAP")]
            OVERLAPEnum = 7,
            /// <summary>
            /// Enum SMEAREnum for SMEAR
            /// </summary>
            [EnumMember(Value = "SMEAR")]
            SMEAREnum = 8,
            /// <summary>
            /// Enum STRETCHEDEnum for STRETCHED
            /// </summary>
            [EnumMember(Value = "STRETCHED")]
            STRETCHEDEnum = 9,
            /// <summary>
            /// Enum TAPEEnum for TAPE
            /// </summary>
            [EnumMember(Value = "TAPE")]
            TAPEEnum = 10        }
}
