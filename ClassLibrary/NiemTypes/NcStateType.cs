/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a state, commonwealth, province, or other such geopolitical subdivision of a country.
    /// </summary>
    [DataContract]
    public partial class NcStateType : IEquatable<NcStateType>
    { 
        /// <summary>
        /// A province. NIEM reference is nc:LocationCanadianProvinceCode
        /// </summary>
        /// <value>A province. NIEM reference is nc:LocationCanadianProvinceCode</value>

        [DataMember(Name="locationCanadianProvinceCode")]
        public List<CanCanadianProvinceCodeType> LocationCanadianProvinceCode { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateFIPS5-2Code
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateFIPS5-2Code</value>

        [DataMember(Name="locationFips5-2Code")]
        public List<Fips52USStateNumericCodeType> LocationFips52Code { get; set; }

        /// <summary>
        /// A name of a state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateName
        /// </summary>
        /// <value>A name of a state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateName</value>

        [DataMember(Name="locationName")]
        public List<NcProperNameTextType> LocationName { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICLISCode
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICLISCode</value>

        [DataMember(Name="locationNciclisCode")]
        public List<NcicCountryCodeType> LocationNciclisCode { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICLSTACode
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICLSTACode</value>

        [DataMember(Name="locationNciclstaCode")]
        public List<NcicCountryCodeType> LocationNciclstaCode { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICRESCode
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is j:LocationStateNCICRESCode</value>

        [DataMember(Name="locationNcicresCode")]
        public List<NcicCountryCodeType> LocationNcicresCode { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateUSPostalServiceCode
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateUSPostalServiceCode</value>

        [DataMember(Name="locationUsPostalServiceCode")]
        public List<UspsUSStateCodeType> LocationUsPostalServiceCode { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:StateCode
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:StateCode</value>

        [DataMember(Name="code")]
        public List<NcCodeType> Code { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:StateISO3166Code
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:StateISO3166Code</value>

        [DataMember(Name="iso3166Code")]
        public List<Iso3166CountrySubdivisionCodeType> Iso3166Code { get; set; }

        /// <summary>
        /// ncStateType JSON-LD context
        /// </summary>
        /// <value>ncStateType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncStateTypeContextJsonldEnum for ../JSON-LD_Contexts/ncStateTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncStateTypeContext.jsonld")]
            JSONLDContextsncStateTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncStateType JSON-LD context
        /// </summary>
        /// <value>ncStateType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcStateType {\n");
            sb.Append("  LocationCanadianProvinceCode: ").Append(LocationCanadianProvinceCode).Append("\n");
            sb.Append("  LocationFips52Code: ").Append(LocationFips52Code).Append("\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  LocationNciclisCode: ").Append(LocationNciclisCode).Append("\n");
            sb.Append("  LocationNciclstaCode: ").Append(LocationNciclstaCode).Append("\n");
            sb.Append("  LocationNcicresCode: ").Append(LocationNcicresCode).Append("\n");
            sb.Append("  LocationUsPostalServiceCode: ").Append(LocationUsPostalServiceCode).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Iso3166Code: ").Append(Iso3166Code).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcStateType)obj);
        }

        /// <summary>
        /// Returns true if NcStateType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcStateType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcStateType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationCanadianProvinceCode == other.LocationCanadianProvinceCode ||
                    LocationCanadianProvinceCode != null &&
                    LocationCanadianProvinceCode.SequenceEqual(other.LocationCanadianProvinceCode)
                ) && 
                (
                    LocationFips52Code == other.LocationFips52Code ||
                    LocationFips52Code != null &&
                    LocationFips52Code.SequenceEqual(other.LocationFips52Code)
                ) && 
                (
                    LocationName == other.LocationName ||
                    LocationName != null &&
                    LocationName.SequenceEqual(other.LocationName)
                ) && 
                (
                    LocationNciclisCode == other.LocationNciclisCode ||
                    LocationNciclisCode != null &&
                    LocationNciclisCode.SequenceEqual(other.LocationNciclisCode)
                ) && 
                (
                    LocationNciclstaCode == other.LocationNciclstaCode ||
                    LocationNciclstaCode != null &&
                    LocationNciclstaCode.SequenceEqual(other.LocationNciclstaCode)
                ) && 
                (
                    LocationNcicresCode == other.LocationNcicresCode ||
                    LocationNcicresCode != null &&
                    LocationNcicresCode.SequenceEqual(other.LocationNcicresCode)
                ) && 
                (
                    LocationUsPostalServiceCode == other.LocationUsPostalServiceCode ||
                    LocationUsPostalServiceCode != null &&
                    LocationUsPostalServiceCode.SequenceEqual(other.LocationUsPostalServiceCode)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    Iso3166Code == other.Iso3166Code ||
                    Iso3166Code != null &&
                    Iso3166Code.SequenceEqual(other.Iso3166Code)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationCanadianProvinceCode != null)
                    hashCode = hashCode * 59 + LocationCanadianProvinceCode.GetHashCode();
                    if (LocationFips52Code != null)
                    hashCode = hashCode * 59 + LocationFips52Code.GetHashCode();
                    if (LocationName != null)
                    hashCode = hashCode * 59 + LocationName.GetHashCode();
                    if (LocationNciclisCode != null)
                    hashCode = hashCode * 59 + LocationNciclisCode.GetHashCode();
                    if (LocationNciclstaCode != null)
                    hashCode = hashCode * 59 + LocationNciclstaCode.GetHashCode();
                    if (LocationNcicresCode != null)
                    hashCode = hashCode * 59 + LocationNcicresCode.GetHashCode();
                    if (LocationUsPostalServiceCode != null)
                    hashCode = hashCode * 59 + LocationUsPostalServiceCode.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Iso3166Code != null)
                    hashCode = hashCode * 59 + Iso3166Code.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcStateType left, NcStateType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcStateType left, NcStateType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
