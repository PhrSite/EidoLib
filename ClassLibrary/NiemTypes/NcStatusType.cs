/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a state of something or someone.
    /// </summary>
    [DataContract]
    public partial class NcStatusType : IEquatable<NcStatusType>
    { 
        /// <summary>
        /// A code that identifies the status of a request. NIEM reference is j:ApprovalStatusCode
        /// </summary>
        /// <value>A code that identifies the status of a request. NIEM reference is j:ApprovalStatusCode</value>

        [DataMember(Name="approvalCode")]
        public List<NdexApprovalStatusCodeType> ApprovalCode { get; set; }

        /// <summary>
        /// An immigration status of an immigrant. NIEM reference is im:ImmigrationStatusCode
        /// </summary>
        /// <value>An immigration status of an immigrant. NIEM reference is im:ImmigrationStatusCode</value>

        [DataMember(Name="immigrationCode")]
        public List<ImImmigrationClassOfAdmissionCategoryCodeType> ImmigrationCode { get; set; }

        /// <summary>
        /// A status of the current disposition of an incident. NIEM reference is j:IncidentStatusCode
        /// </summary>
        /// <value>A status of the current disposition of an incident. NIEM reference is j:IncidentStatusCode</value>

        [DataMember(Name="incidentCode")]
        public List<NdexIncidentStatusCodeType> IncidentCode { get; set; }

        /// <summary>
        /// A status of a property item. NIEM reference is j:ItemStatusCode
        /// </summary>
        /// <value>A status of a property item. NIEM reference is j:ItemStatusCode</value>

        [DataMember(Name="itemCode")]
        public List<JItemStatusCodeType> ItemCode { get; set; }

        /// <summary>
        /// A status or condition of something or someone. NIEM reference is nc:StatusText
        /// </summary>
        /// <value>A status or condition of something or someone. NIEM reference is nc:StatusText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A status of a supervised release. NIEM reference is j:SupervisedReleaseStatusCode
        /// </summary>
        /// <value>A status of a supervised release. NIEM reference is j:SupervisedReleaseStatusCode</value>

        [DataMember(Name="supervisedReleaseCode")]
        public List<NdexSupervisedReleaseStatusCodeType> SupervisedReleaseCode { get; set; }

        /// <summary>
        /// A comment regarding a status. NIEM reference is nc:StatusCommentText
        /// </summary>
        /// <value>A comment regarding a status. NIEM reference is nc:StatusCommentText</value>

        [DataMember(Name="comment")]
        public List<NcTextType> Comment { get; set; }

        /// <summary>
        /// A description of a status or condition of something or someone. NIEM reference is nc:StatusDescriptionText
        /// </summary>
        /// <value>A description of a status or condition of something or someone. NIEM reference is nc:StatusDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// An identification of a person or organization which assigns a status. NIEM reference is nc:StatusIssuerIdentification
        /// </summary>
        /// <value>An identification of a person or organization which assigns a status. NIEM reference is nc:StatusIssuerIdentification</value>

        [DataMember(Name="issuerIdentification")]
        public List<NcIdentificationType> IssuerIdentification { get; set; }

        /// <summary>
        /// A name, identifier, or other reference of a person or organization which assigns a status. NIEM reference is nc:StatusIssuerText
        /// </summary>
        /// <value>A name, identifier, or other reference of a person or organization which assigns a status. NIEM reference is nc:StatusIssuerText</value>

        [DataMember(Name="issuer")]
        public List<NcTextType> Issuer { get; set; }

        /// <summary>
        /// A date a status was set, effected, or reported. NIEM reference is nc:StatusDate
        /// </summary>
        /// <value>A date a status was set, effected, or reported. NIEM reference is nc:StatusDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// Additional information about a status. NIEM reference is im:StatusAugmentation
        /// </summary>
        /// <value>Additional information about a status. NIEM reference is im:StatusAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ImStatusAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncStatusType JSON-LD context
        /// </summary>
        /// <value>ncStatusType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncStatusTypeContextJsonldEnum for ../JSON-LD_Contexts/ncStatusTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncStatusTypeContext.jsonld")]
            JSONLDContextsncStatusTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncStatusType JSON-LD context
        /// </summary>
        /// <value>ncStatusType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcStatusType {\n");
            sb.Append("  ApprovalCode: ").Append(ApprovalCode).Append("\n");
            sb.Append("  ImmigrationCode: ").Append(ImmigrationCode).Append("\n");
            sb.Append("  IncidentCode: ").Append(IncidentCode).Append("\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  SupervisedReleaseCode: ").Append(SupervisedReleaseCode).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IssuerIdentification: ").Append(IssuerIdentification).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcStatusType)obj);
        }

        /// <summary>
        /// Returns true if NcStatusType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcStatusType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcStatusType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApprovalCode == other.ApprovalCode ||
                    ApprovalCode != null &&
                    ApprovalCode.SequenceEqual(other.ApprovalCode)
                ) && 
                (
                    ImmigrationCode == other.ImmigrationCode ||
                    ImmigrationCode != null &&
                    ImmigrationCode.SequenceEqual(other.ImmigrationCode)
                ) && 
                (
                    IncidentCode == other.IncidentCode ||
                    IncidentCode != null &&
                    IncidentCode.SequenceEqual(other.IncidentCode)
                ) && 
                (
                    ItemCode == other.ItemCode ||
                    ItemCode != null &&
                    ItemCode.SequenceEqual(other.ItemCode)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    SupervisedReleaseCode == other.SupervisedReleaseCode ||
                    SupervisedReleaseCode != null &&
                    SupervisedReleaseCode.SequenceEqual(other.SupervisedReleaseCode)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    IssuerIdentification == other.IssuerIdentification ||
                    IssuerIdentification != null &&
                    IssuerIdentification.SequenceEqual(other.IssuerIdentification)
                ) && 
                (
                    Issuer == other.Issuer ||
                    Issuer != null &&
                    Issuer.SequenceEqual(other.Issuer)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApprovalCode != null)
                    hashCode = hashCode * 59 + ApprovalCode.GetHashCode();
                    if (ImmigrationCode != null)
                    hashCode = hashCode * 59 + ImmigrationCode.GetHashCode();
                    if (IncidentCode != null)
                    hashCode = hashCode * 59 + IncidentCode.GetHashCode();
                    if (ItemCode != null)
                    hashCode = hashCode * 59 + ItemCode.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (SupervisedReleaseCode != null)
                    hashCode = hashCode * 59 + SupervisedReleaseCode.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IssuerIdentification != null)
                    hashCode = hashCode * 59 + IssuerIdentification.GetHashCode();
                    if (Issuer != null)
                    hashCode = hashCode * 59 + Issuer.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcStatusType left, NcStatusType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcStatusType left, NcStatusType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
