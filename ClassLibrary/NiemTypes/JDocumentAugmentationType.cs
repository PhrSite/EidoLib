/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a document.
    /// </summary>
    [DataContract]
    public partial class JDocumentAugmentationType : IEquatable<JDocumentAugmentationType>
    { 
        /// <summary>
        /// True if a the document is associated with a Parole; false otherwise. NIEM reference is j:ParoleIndicator
        /// </summary>
        /// <value>True if a the document is associated with a Parole; false otherwise. NIEM reference is j:ParoleIndicator</value>

        [DataMember(Name="isParole")]
        public List<NiemXsboolean> IsParole { get; set; }

        /// <summary>
        /// True if a the document is associated with a Probation; false otherwise. NIEM reference is j:ProbationIndicator
        /// </summary>
        /// <value>True if a the document is associated with a Probation; false otherwise. NIEM reference is j:ProbationIndicator</value>

        [DataMember(Name="isProbation")]
        public List<NiemXsboolean> IsProbation { get; set; }

        /// <summary>
        /// True if a the document is associated with a Correctional Institute; false otherwise. NIEM reference is j:CorrectionalInstituteIndicator
        /// </summary>
        /// <value>True if a the document is associated with a Correctional Institute; false otherwise. NIEM reference is j:CorrectionalInstituteIndicator</value>

        [DataMember(Name="isCorrectionalInstitute")]
        public List<NiemXsboolean> IsCorrectionalInstitute { get; set; }

        /// <summary>
        /// A signature on a document. NIEM reference is j:DocumentSignature
        /// </summary>
        /// <value>A signature on a document. NIEM reference is j:DocumentSignature</value>

        [DataMember(Name="documentSignature")]
        public List<JSignatureType> DocumentSignature { get; set; }

        /// <summary>
        /// A comment about or a description of the allocation. NIEM reference is j:DocumentComment
        /// </summary>
        /// <value>A comment about or a description of the allocation. NIEM reference is j:DocumentComment</value>

        [DataMember(Name="documentComment")]
        public List<NcCommentType> DocumentComment { get; set; }

        /// <summary>
        /// A date a document was approved. NIEM reference is j:DocumentApprovedDate
        /// </summary>
        /// <value>A date a document was approved. NIEM reference is j:DocumentApprovedDate</value>

        [DataMember(Name="documentApprovedDate")]
        public List<NcDateType> DocumentApprovedDate { get; set; }

        /// <summary>
        /// True if a document has been amended; false otherwise. NIEM reference is j:DocumentAmendedIndicator
        /// </summary>
        /// <value>True if a document has been amended; false otherwise. NIEM reference is j:DocumentAmendedIndicator</value>

        [DataMember(Name="isDocumentAmended")]
        public List<NiemXsboolean> IsDocumentAmended { get; set; }

        /// <summary>
        /// A date a document was reviewed. NIEM reference is j:DocumentReviewDate
        /// </summary>
        /// <value>A date a document was reviewed. NIEM reference is j:DocumentReviewDate</value>

        [DataMember(Name="documentReviewDate")]
        public List<NcDateType> DocumentReviewDate { get; set; }

        /// <summary>
        /// jDocumentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jDocumentAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDocumentAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jDocumentAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDocumentAugmentationTypeContext.jsonld")]
            JSONLDContextsjDocumentAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDocumentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jDocumentAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDocumentAugmentationType {\n");
            sb.Append("  IsParole: ").Append(IsParole).Append("\n");
            sb.Append("  IsProbation: ").Append(IsProbation).Append("\n");
            sb.Append("  IsCorrectionalInstitute: ").Append(IsCorrectionalInstitute).Append("\n");
            sb.Append("  DocumentSignature: ").Append(DocumentSignature).Append("\n");
            sb.Append("  DocumentComment: ").Append(DocumentComment).Append("\n");
            sb.Append("  DocumentApprovedDate: ").Append(DocumentApprovedDate).Append("\n");
            sb.Append("  IsDocumentAmended: ").Append(IsDocumentAmended).Append("\n");
            sb.Append("  DocumentReviewDate: ").Append(DocumentReviewDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDocumentAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JDocumentAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDocumentAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDocumentAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsParole == other.IsParole ||
                    IsParole != null &&
                    IsParole.SequenceEqual(other.IsParole)
                ) && 
                (
                    IsProbation == other.IsProbation ||
                    IsProbation != null &&
                    IsProbation.SequenceEqual(other.IsProbation)
                ) && 
                (
                    IsCorrectionalInstitute == other.IsCorrectionalInstitute ||
                    IsCorrectionalInstitute != null &&
                    IsCorrectionalInstitute.SequenceEqual(other.IsCorrectionalInstitute)
                ) && 
                (
                    DocumentSignature == other.DocumentSignature ||
                    DocumentSignature != null &&
                    DocumentSignature.SequenceEqual(other.DocumentSignature)
                ) && 
                (
                    DocumentComment == other.DocumentComment ||
                    DocumentComment != null &&
                    DocumentComment.SequenceEqual(other.DocumentComment)
                ) && 
                (
                    DocumentApprovedDate == other.DocumentApprovedDate ||
                    DocumentApprovedDate != null &&
                    DocumentApprovedDate.SequenceEqual(other.DocumentApprovedDate)
                ) && 
                (
                    IsDocumentAmended == other.IsDocumentAmended ||
                    IsDocumentAmended != null &&
                    IsDocumentAmended.SequenceEqual(other.IsDocumentAmended)
                ) && 
                (
                    DocumentReviewDate == other.DocumentReviewDate ||
                    DocumentReviewDate != null &&
                    DocumentReviewDate.SequenceEqual(other.DocumentReviewDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsParole != null)
                    hashCode = hashCode * 59 + IsParole.GetHashCode();
                    if (IsProbation != null)
                    hashCode = hashCode * 59 + IsProbation.GetHashCode();
                    if (IsCorrectionalInstitute != null)
                    hashCode = hashCode * 59 + IsCorrectionalInstitute.GetHashCode();
                    if (DocumentSignature != null)
                    hashCode = hashCode * 59 + DocumentSignature.GetHashCode();
                    if (DocumentComment != null)
                    hashCode = hashCode * 59 + DocumentComment.GetHashCode();
                    if (DocumentApprovedDate != null)
                    hashCode = hashCode * 59 + DocumentApprovedDate.GetHashCode();
                    if (IsDocumentAmended != null)
                    hashCode = hashCode * 59 + IsDocumentAmended.GetHashCode();
                    if (DocumentReviewDate != null)
                    hashCode = hashCode * 59 + DocumentReviewDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDocumentAugmentationType left, JDocumentAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDocumentAugmentationType left, JDocumentAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
