/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details pertaining to facts attained from an actual crime scene, giving investigators insights into the subjects method of working or operating, actions used to execute the crime, prevent detection, and/or avoid apprehension.
    /// </summary>
    [DataContract]
    public partial class JSubjectMOType : IEquatable<JSubjectMOType>
    { 
        /// <summary>
        /// A characteristic sexual practice or preference of the subject. NIEM reference is j:SubjectMOSexualPracticesText
        /// </summary>
        /// <value>A characteristic sexual practice or preference of the subject. NIEM reference is j:SubjectMOSexualPracticesText</value>

        [DataMember(Name="sexualPractices")]
        public List<NcTextType> SexualPractices { get; set; }

        /// <summary>
        /// An observation of the subject. NIEM reference is j:SubjectMOObservationText
        /// </summary>
        /// <value>An observation of the subject. NIEM reference is j:SubjectMOObservationText</value>

        [DataMember(Name="observation")]
        public List<NcTextType> Observation { get; set; }

        /// <summary>
        /// A lifestyle characteristic for a subject. NIEM reference is j:SubjectMOGeneralLifestyleText
        /// </summary>
        /// <value>A lifestyle characteristic for a subject. NIEM reference is j:SubjectMOGeneralLifestyleText</value>

        [DataMember(Name="generalLifestyle")]
        public List<NcTextType> GeneralLifestyle { get; set; }

        /// <summary>
        /// A crime scene feature (i.e., object, picture, written word, sound, or particular mark that represents something else by association, resemblance, or convention), e.g., brand, tattoo, tag, graffiti, left behind by the subject, which the subject adopts as his signature or trademark behavior, gaining feeling such as satisfaction, remorse, or pride that allows him to justify his crime and fuel future acts.. NIEM reference is j:SubjectMOActionFeature
        /// </summary>
        /// <value>A crime scene feature (i.e., object, picture, written word, sound, or particular mark that represents something else by association, resemblance, or convention), e.g., brand, tattoo, tag, graffiti, left behind by the subject, which the subject adopts as his signature or trademark behavior, gaining feeling such as satisfaction, remorse, or pride that allows him to justify his crime and fuel future acts.. NIEM reference is j:SubjectMOActionFeature</value>

        [DataMember(Name="actionFeature")]
        public List<BiomPhysicalFeatureDescriptionType> ActionFeature { get; set; }

        /// <summary>
        /// An action of the subject at the crime scene to perpetrate the crime and/or avoid apprehension. NIEM reference is j:SubjectMOActionCode
        /// </summary>
        /// <value>An action of the subject at the crime scene to perpetrate the crime and/or avoid apprehension. NIEM reference is j:SubjectMOActionCode</value>

        [DataMember(Name="actionCode")]
        public List<NdexSubjectMOActionCodeType> ActionCode { get; set; }

        /// <summary>
        /// A lifestyle characteristic for a subject. NIEM reference is j:SubjectMOGeneralLifestyleCode
        /// </summary>
        /// <value>A lifestyle characteristic for a subject. NIEM reference is j:SubjectMOGeneralLifestyleCode</value>

        [DataMember(Name="generalLifestyleCode")]
        public List<NdexSubjectMOGeneralLifestyleCodeType> GeneralLifestyleCode { get; set; }

        /// <summary>
        /// An observation of the subject. NIEM reference is j:SubjectMOObservationCode
        /// </summary>
        /// <value>An observation of the subject. NIEM reference is j:SubjectMOObservationCode</value>

        [DataMember(Name="observationCode")]
        public List<NdexSubjectMOObservationCodeType> ObservationCode { get; set; }

        /// <summary>
        /// A characteristic sexual practice or preference of the subject. NIEM reference is j:SubjectMOSexualPracticesCode
        /// </summary>
        /// <value>A characteristic sexual practice or preference of the subject. NIEM reference is j:SubjectMOSexualPracticesCode</value>

        [DataMember(Name="sexualPracticesCode")]
        public List<NdexSubjectMOSexualPracticesCodeType> SexualPracticesCode { get; set; }

        /// <summary>
        /// jSubjectMOType JSON-LD context
        /// </summary>
        /// <value>jSubjectMOType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectMOTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectMOTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectMOTypeContext.jsonld")]
            JSONLDContextsjSubjectMOTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectMOType JSON-LD context
        /// </summary>
        /// <value>jSubjectMOType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectMOType {\n");
            sb.Append("  SexualPractices: ").Append(SexualPractices).Append("\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  GeneralLifestyle: ").Append(GeneralLifestyle).Append("\n");
            sb.Append("  ActionFeature: ").Append(ActionFeature).Append("\n");
            sb.Append("  ActionCode: ").Append(ActionCode).Append("\n");
            sb.Append("  GeneralLifestyleCode: ").Append(GeneralLifestyleCode).Append("\n");
            sb.Append("  ObservationCode: ").Append(ObservationCode).Append("\n");
            sb.Append("  SexualPracticesCode: ").Append(SexualPracticesCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectMOType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectMOType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectMOType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectMOType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SexualPractices == other.SexualPractices ||
                    SexualPractices != null &&
                    SexualPractices.SequenceEqual(other.SexualPractices)
                ) && 
                (
                    Observation == other.Observation ||
                    Observation != null &&
                    Observation.SequenceEqual(other.Observation)
                ) && 
                (
                    GeneralLifestyle == other.GeneralLifestyle ||
                    GeneralLifestyle != null &&
                    GeneralLifestyle.SequenceEqual(other.GeneralLifestyle)
                ) && 
                (
                    ActionFeature == other.ActionFeature ||
                    ActionFeature != null &&
                    ActionFeature.SequenceEqual(other.ActionFeature)
                ) && 
                (
                    ActionCode == other.ActionCode ||
                    ActionCode != null &&
                    ActionCode.SequenceEqual(other.ActionCode)
                ) && 
                (
                    GeneralLifestyleCode == other.GeneralLifestyleCode ||
                    GeneralLifestyleCode != null &&
                    GeneralLifestyleCode.SequenceEqual(other.GeneralLifestyleCode)
                ) && 
                (
                    ObservationCode == other.ObservationCode ||
                    ObservationCode != null &&
                    ObservationCode.SequenceEqual(other.ObservationCode)
                ) && 
                (
                    SexualPracticesCode == other.SexualPracticesCode ||
                    SexualPracticesCode != null &&
                    SexualPracticesCode.SequenceEqual(other.SexualPracticesCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SexualPractices != null)
                    hashCode = hashCode * 59 + SexualPractices.GetHashCode();
                    if (Observation != null)
                    hashCode = hashCode * 59 + Observation.GetHashCode();
                    if (GeneralLifestyle != null)
                    hashCode = hashCode * 59 + GeneralLifestyle.GetHashCode();
                    if (ActionFeature != null)
                    hashCode = hashCode * 59 + ActionFeature.GetHashCode();
                    if (ActionCode != null)
                    hashCode = hashCode * 59 + ActionCode.GetHashCode();
                    if (GeneralLifestyleCode != null)
                    hashCode = hashCode * 59 + GeneralLifestyleCode.GetHashCode();
                    if (ObservationCode != null)
                    hashCode = hashCode * 59 + ObservationCode.GetHashCode();
                    if (SexualPracticesCode != null)
                    hashCode = hashCode * 59 + SexualPracticesCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectMOType left, JSubjectMOType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectMOType left, JSubjectMOType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
