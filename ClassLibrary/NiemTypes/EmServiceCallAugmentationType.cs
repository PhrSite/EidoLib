/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a call for service
    /// </summary>
    [DataContract]
    public partial class EmServiceCallAugmentationType : IEquatable<EmServiceCallAugmentationType>
    { 
        /// <summary>
        /// A data element for the location of a service call NIEM reference is em:ServiceCallResponseLocation
        /// </summary>
        /// <value>A data element for the location of a service call NIEM reference is em:ServiceCallResponseLocation</value>

        [DataMember(Name="serviceCallResponseLocation")]
        public List<EmServiceCallResponseLocationType> ServiceCallResponseLocation { get; set; }

        /// <summary>
        /// A data element for the severity of a fire and the corresponding response based on procedure (e.g. three alarm fire). NIEM reference is em:FireSeverityLevelText
        /// </summary>
        /// <value>A data element for the severity of a fire and the corresponding response based on procedure (e.g. three alarm fire). NIEM reference is em:FireSeverityLevelText</value>

        [DataMember(Name="fireSeverityLevel")]
        public List<NcTextType> FireSeverityLevel { get; set; }

        /// <summary>
        /// A kind of call, e.g., Alarm, Burglary, Fire, Accident. NIEM reference is em:CallCategoryText
        /// </summary>
        /// <value>A kind of call, e.g., Alarm, Burglary, Fire, Accident. NIEM reference is em:CallCategoryText</value>

        [DataMember(Name="callCategory")]
        public List<NcTextType> CallCategory { get; set; }

        /// <summary>
        /// A kind of sub-type of the call (e.g. Robbery Alarm, Fire Alarm, Intrusion Alarm). NIEM reference is em:CallSubCategoryText
        /// </summary>
        /// <value>A kind of sub-type of the call (e.g. Robbery Alarm, Fire Alarm, Intrusion Alarm). NIEM reference is em:CallSubCategoryText</value>

        [DataMember(Name="callSubCategory")]
        public List<NcTextType> CallSubCategory { get; set; }

        /// <summary>
        /// A data element for the priority assigned to the call based on the type of call (burglary, shooting, etc.) and other additional information provided by the caller. NIEM reference is em:CallPriorityText
        /// </summary>
        /// <value>A data element for the priority assigned to the call based on the type of call (burglary, shooting, etc.) and other additional information provided by the caller. NIEM reference is em:CallPriorityText</value>

        [DataMember(Name="callPriority")]
        public List<NcTextType> CallPriority { get; set; }

        /// <summary>
        /// A comment, note, or remark. NIEM reference is nc:Comment
        /// </summary>
        /// <value>A comment, note, or remark. NIEM reference is nc:Comment</value>

        [DataMember(Name="comment")]
        public List<NcCommentType> Comment { get; set; }

        /// <summary>
        /// An element for the structure that contains a data link NIEM reference is em:DataLink
        /// </summary>
        /// <value>An element for the structure that contains a data link NIEM reference is em:DataLink</value>

        [DataMember(Name="dataLink")]
        public List<EmDataLinkType> DataLink { get; set; }

        /// <summary>
        /// A data element for the staging information for resources NIEM reference is em:Staging
        /// </summary>
        /// <value>A data element for the staging information for resources NIEM reference is em:Staging</value>

        [DataMember(Name="staging")]
        public List<EmStagingType> Staging { get; set; }

        /// <summary>
        /// A kind of substance. NIEM reference is nc:SubstanceCategoryText
        /// </summary>
        /// <value>A kind of substance. NIEM reference is nc:SubstanceCategoryText</value>

        [DataMember(Name="substanceCategory")]
        public List<NcTextType> SubstanceCategory { get; set; }

        /// <summary>
        /// A date for when the call started NIEM reference is em:CallOpenDate
        /// </summary>
        /// <value>A date for when the call started NIEM reference is em:CallOpenDate</value>

        [DataMember(Name="callOpenDate")]
        public List<NcDateType> CallOpenDate { get; set; }

        /// <summary>
        /// A date for when the call was updated NIEM reference is em:CallUpdateDate
        /// </summary>
        /// <value>A date for when the call was updated NIEM reference is em:CallUpdateDate</value>

        [DataMember(Name="callUpdateDate")]
        public List<NcDateType> CallUpdateDate { get; set; }

        /// <summary>
        /// A date for when the call stopped NIEM reference is em:CallCloseDate
        /// </summary>
        /// <value>A date for when the call stopped NIEM reference is em:CallCloseDate</value>

        [DataMember(Name="callCloseDate")]
        public List<NcDateType> CallCloseDate { get; set; }

        /// <summary>
        /// emServiceCallAugmentationType JSON-LD context
        /// </summary>
        /// <value>emServiceCallAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemServiceCallAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/emServiceCallAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emServiceCallAugmentationTypeContext.jsonld")]
            JSONLDContextsemServiceCallAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emServiceCallAugmentationType JSON-LD context
        /// </summary>
        /// <value>emServiceCallAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmServiceCallAugmentationType {\n");
            sb.Append("  ServiceCallResponseLocation: ").Append(ServiceCallResponseLocation).Append("\n");
            sb.Append("  FireSeverityLevel: ").Append(FireSeverityLevel).Append("\n");
            sb.Append("  CallCategory: ").Append(CallCategory).Append("\n");
            sb.Append("  CallSubCategory: ").Append(CallSubCategory).Append("\n");
            sb.Append("  CallPriority: ").Append(CallPriority).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DataLink: ").Append(DataLink).Append("\n");
            sb.Append("  Staging: ").Append(Staging).Append("\n");
            sb.Append("  SubstanceCategory: ").Append(SubstanceCategory).Append("\n");
            sb.Append("  CallOpenDate: ").Append(CallOpenDate).Append("\n");
            sb.Append("  CallUpdateDate: ").Append(CallUpdateDate).Append("\n");
            sb.Append("  CallCloseDate: ").Append(CallCloseDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmServiceCallAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if EmServiceCallAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmServiceCallAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmServiceCallAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceCallResponseLocation == other.ServiceCallResponseLocation ||
                    ServiceCallResponseLocation != null &&
                    ServiceCallResponseLocation.SequenceEqual(other.ServiceCallResponseLocation)
                ) && 
                (
                    FireSeverityLevel == other.FireSeverityLevel ||
                    FireSeverityLevel != null &&
                    FireSeverityLevel.SequenceEqual(other.FireSeverityLevel)
                ) && 
                (
                    CallCategory == other.CallCategory ||
                    CallCategory != null &&
                    CallCategory.SequenceEqual(other.CallCategory)
                ) && 
                (
                    CallSubCategory == other.CallSubCategory ||
                    CallSubCategory != null &&
                    CallSubCategory.SequenceEqual(other.CallSubCategory)
                ) && 
                (
                    CallPriority == other.CallPriority ||
                    CallPriority != null &&
                    CallPriority.SequenceEqual(other.CallPriority)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    DataLink == other.DataLink ||
                    DataLink != null &&
                    DataLink.SequenceEqual(other.DataLink)
                ) && 
                (
                    Staging == other.Staging ||
                    Staging != null &&
                    Staging.SequenceEqual(other.Staging)
                ) && 
                (
                    SubstanceCategory == other.SubstanceCategory ||
                    SubstanceCategory != null &&
                    SubstanceCategory.SequenceEqual(other.SubstanceCategory)
                ) && 
                (
                    CallOpenDate == other.CallOpenDate ||
                    CallOpenDate != null &&
                    CallOpenDate.SequenceEqual(other.CallOpenDate)
                ) && 
                (
                    CallUpdateDate == other.CallUpdateDate ||
                    CallUpdateDate != null &&
                    CallUpdateDate.SequenceEqual(other.CallUpdateDate)
                ) && 
                (
                    CallCloseDate == other.CallCloseDate ||
                    CallCloseDate != null &&
                    CallCloseDate.SequenceEqual(other.CallCloseDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServiceCallResponseLocation != null)
                    hashCode = hashCode * 59 + ServiceCallResponseLocation.GetHashCode();
                    if (FireSeverityLevel != null)
                    hashCode = hashCode * 59 + FireSeverityLevel.GetHashCode();
                    if (CallCategory != null)
                    hashCode = hashCode * 59 + CallCategory.GetHashCode();
                    if (CallSubCategory != null)
                    hashCode = hashCode * 59 + CallSubCategory.GetHashCode();
                    if (CallPriority != null)
                    hashCode = hashCode * 59 + CallPriority.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (DataLink != null)
                    hashCode = hashCode * 59 + DataLink.GetHashCode();
                    if (Staging != null)
                    hashCode = hashCode * 59 + Staging.GetHashCode();
                    if (SubstanceCategory != null)
                    hashCode = hashCode * 59 + SubstanceCategory.GetHashCode();
                    if (CallOpenDate != null)
                    hashCode = hashCode * 59 + CallOpenDate.GetHashCode();
                    if (CallUpdateDate != null)
                    hashCode = hashCode * 59 + CallUpdateDate.GetHashCode();
                    if (CallCloseDate != null)
                    hashCode = hashCode * 59 + CallCloseDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmServiceCallAugmentationType left, EmServiceCallAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmServiceCallAugmentationType left, EmServiceCallAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
