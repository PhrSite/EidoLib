/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a sanction or penalty ordered for a subject as a result of a disposition of a charge.
    /// </summary>
    [DataContract]
    public partial class JSanctionType : NcActivityType, IEquatable<JSanctionType>
    { 
        /// <summary>
        /// True if a sanction for an extended jurisdiction juvenile is part of an adult or a juvenile sentence; false otherwise. NIEM reference is j:SanctionAdultSentenceIndicator
        /// </summary>
        /// <value>True if a sanction for an extended jurisdiction juvenile is part of an adult or a juvenile sentence; false otherwise. NIEM reference is j:SanctionAdultSentenceIndicator</value>

        [DataMember(Name="isAdultSentence")]
        public List<NiemXsboolean> IsAdultSentence { get; set; }

        /// <summary>
        /// True if the sanction runs concurrently with other sanctions imposed; false otherwise. NIEM reference is j:SanctionConcurrentIndicator
        /// </summary>
        /// <value>True if the sanction runs concurrently with other sanctions imposed; false otherwise. NIEM reference is j:SanctionConcurrentIndicator</value>

        [DataMember(Name="isConcurrent")]
        public List<NiemXsboolean> IsConcurrent { get; set; }

        /// <summary>
        /// A description of a sanction imposed by a hearing. NIEM reference is j:SanctionDescriptionText
        /// </summary>
        /// <value>A description of a sanction imposed by a hearing. NIEM reference is j:SanctionDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A number of days for which the execution of the sanction is to be suspended pending clear conduct by a subject. NIEM reference is j:SanctionDaysSuspendedQuantity
        /// </summary>
        /// <value>A number of days for which the execution of the sanction is to be suspended pending clear conduct by a subject. NIEM reference is j:SanctionDaysSuspendedQuantity</value>

        [DataMember(Name="daysSuspendedQuantity")]
        public List<NiemXsnonNegativeInteger> DaysSuspendedQuantity { get; set; }

        /// <summary>
        /// An amount of money or time requirement of a sanction already paid. NIEM reference is j:SanctionCreditedObligation
        /// </summary>
        /// <value>An amount of money or time requirement of a sanction already paid. NIEM reference is j:SanctionCreditedObligation</value>

        [DataMember(Name="creditedObligation")]
        public List<NcObligationType> CreditedObligation { get; set; }

        /// <summary>
        /// A correction action that is assigned as part of a sanction. NIEM reference is j:SanctionDisciplinaryAction
        /// </summary>
        /// <value>A correction action that is assigned as part of a sanction. NIEM reference is j:SanctionDisciplinaryAction</value>

        [DataMember(Name="disciplinaryAction")]
        public List<NcDisciplinaryActionType> DisciplinaryAction { get; set; }

        /// <summary>
        /// A frequency with which a sanction is to be met. NIEM reference is j:SanctionFrequencyText
        /// </summary>
        /// <value>A frequency with which a sanction is to be met. NIEM reference is j:SanctionFrequencyText</value>

        [DataMember(Name="frequency")]
        public List<NcTextType> Frequency { get; set; }

        /// <summary>
        /// A way of grouping multiple sanctions. NIEM reference is j:SanctionGroupingText
        /// </summary>
        /// <value>A way of grouping multiple sanctions. NIEM reference is j:SanctionGroupingText</value>

        [DataMember(Name="grouping")]
        public List<NcTextType> Grouping { get; set; }

        /// <summary>
        /// A court that sets a sanction. NIEM reference is j:SanctionIssuingAgency
        /// </summary>
        /// <value>A court that sets a sanction. NIEM reference is j:SanctionIssuingAgency</value>

        [DataMember(Name="issuingAgency")]
        public List<NcOrganizationType> IssuingAgency { get; set; }

        /// <summary>
        /// A court that has jurisdiction over a sanction. NIEM reference is j:SanctionJurisdictionalAgency
        /// </summary>
        /// <value>A court that has jurisdiction over a sanction. NIEM reference is j:SanctionJurisdictionalAgency</value>

        [DataMember(Name="jurisdictionalAgency")]
        public List<NcOrganizationType> JurisdictionalAgency { get; set; }

        /// <summary>
        /// A tracking of changes in a subject&#x27;s progress toward fulfillment of the terms of a sanction. NIEM reference is j:SanctionProgress
        /// </summary>
        /// <value>A tracking of changes in a subject&#x27;s progress toward fulfillment of the terms of a sanction. NIEM reference is j:SanctionProgress</value>

        [DataMember(Name="progress")]
        public List<NcProgressType> Progress { get; set; }

        /// <summary>
        /// A final version of a disposed Charge. NIEM reference is j:SanctionRelatedChargeDispositionText
        /// </summary>
        /// <value>A final version of a disposed Charge. NIEM reference is j:SanctionRelatedChargeDispositionText</value>

        [DataMember(Name="relatedChargeDisposition")]
        public List<NcTextType> RelatedChargeDisposition { get; set; }

        /// <summary>
        /// A sanction identification from related court case. NIEM reference is j:SanctionRelatedSanctionIdentification
        /// </summary>
        /// <value>A sanction identification from related court case. NIEM reference is j:SanctionRelatedSanctionIdentification</value>

        [DataMember(Name="relatedSanctionIdentification")]
        public List<NcIdentificationType> RelatedSanctionIdentification { get; set; }

        /// <summary>
        /// True if a sanction &#x27;defines&#x27; a sentence; false otherwise. NIEM reference is j:SanctionSentenceDefinitionIndicator
        /// </summary>
        /// <value>True if a sanction &#x27;defines&#x27; a sentence; false otherwise. NIEM reference is j:SanctionSentenceDefinitionIndicator</value>

        [DataMember(Name="isSentenceDefinition")]
        public List<NiemXsboolean> IsSentenceDefinition { get; set; }

        /// <summary>
        /// A date a sanction was set or ordered. NIEM reference is j:SanctionSetDate
        /// </summary>
        /// <value>A date a sanction was set or ordered. NIEM reference is j:SanctionSetDate</value>

        [DataMember(Name="setDate")]
        public List<NcDateType> SetDate { get; set; }

        /// <summary>
        /// An amount of money or time requirement of a sanction that has been set. NIEM reference is j:SanctionSetObligation
        /// </summary>
        /// <value>An amount of money or time requirement of a sanction that has been set. NIEM reference is j:SanctionSetObligation</value>

        [DataMember(Name="setObligation")]
        public List<NcObligationType> SetObligation { get; set; }

        /// <summary>
        /// An amount of money or time requirement of a sanction that is temporarily suspended. NIEM reference is j:SanctionStayedObligation
        /// </summary>
        /// <value>An amount of money or time requirement of a sanction that is temporarily suspended. NIEM reference is j:SanctionStayedObligation</value>

        [DataMember(Name="stayedObligation")]
        public List<NcObligationType> StayedObligation { get; set; }

        /// <summary>
        /// An amount of money or time requirement of a sanction that is no longer required to be paid. NIEM reference is j:SanctionSuspendedObligation
        /// </summary>
        /// <value>An amount of money or time requirement of a sanction that is no longer required to be paid. NIEM reference is j:SanctionSuspendedObligation</value>

        [DataMember(Name="suspendedObligation")]
        public List<NcObligationType> SuspendedObligation { get; set; }

        /// <summary>
        /// A kind of sanction. NIEM reference is j:SanctionCategoryText
        /// </summary>
        /// <value>A kind of sanction. NIEM reference is j:SanctionCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A severity level of a sentence. NIEM reference is j:SentenceSeverityLevel
        /// </summary>
        /// <value>A severity level of a sentence. NIEM reference is j:SentenceSeverityLevel</value>

        [DataMember(Name="sentenceSeverityLevel")]
        public List<JSeverityLevelType> SentenceSeverityLevel { get; set; }

        /// <summary>
        /// A sentencing guideline. NIEM reference is j:SentencingGuideline
        /// </summary>
        /// <value>A sentencing guideline. NIEM reference is j:SentencingGuideline</value>

        [DataMember(Name="sentencingGuideline")]
        public List<JSentencingGuidelineType> SentencingGuideline { get; set; }

        /// <summary>
        /// A reason a judge departs from a sentencing guideline. NIEM reference is j:SentencingGuidelineDepartureReasonText
        /// </summary>
        /// <value>A reason a judge departs from a sentencing guideline. NIEM reference is j:SentencingGuidelineDepartureReasonText</value>

        [DataMember(Name="sentencingGuidelineDepartureReason")]
        public List<NcTextType> SentencingGuidelineDepartureReason { get; set; }

        /// <summary>
        /// A kind of departure from sentencing guidelines represented by a sentence for a charge.. NIEM reference is j:SentencingGuidelineDepartureCategoryText
        /// </summary>
        /// <value>A kind of departure from sentencing guidelines represented by a sentence for a charge.. NIEM reference is j:SentencingGuidelineDepartureCategoryText</value>

        [DataMember(Name="sentencingGuidelineDepartureCategory")]
        public List<NcTextType> SentencingGuidelineDepartureCategory { get; set; }

        /// <summary>
        /// jSanctionType JSON-LD context
        /// </summary>
        /// <value>jSanctionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSanctionTypeContextJsonldEnum for ../JSON-LD_Contexts/jSanctionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSanctionTypeContext.jsonld")]
            JSONLDContextsjSanctionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSanctionType JSON-LD context
        /// </summary>
        /// <value>jSanctionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSanctionType {\n");
            sb.Append("  IsAdultSentence: ").Append(IsAdultSentence).Append("\n");
            sb.Append("  IsConcurrent: ").Append(IsConcurrent).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DaysSuspendedQuantity: ").Append(DaysSuspendedQuantity).Append("\n");
            sb.Append("  CreditedObligation: ").Append(CreditedObligation).Append("\n");
            sb.Append("  DisciplinaryAction: ").Append(DisciplinaryAction).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("  IssuingAgency: ").Append(IssuingAgency).Append("\n");
            sb.Append("  JurisdictionalAgency: ").Append(JurisdictionalAgency).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  RelatedChargeDisposition: ").Append(RelatedChargeDisposition).Append("\n");
            sb.Append("  RelatedSanctionIdentification: ").Append(RelatedSanctionIdentification).Append("\n");
            sb.Append("  IsSentenceDefinition: ").Append(IsSentenceDefinition).Append("\n");
            sb.Append("  SetDate: ").Append(SetDate).Append("\n");
            sb.Append("  SetObligation: ").Append(SetObligation).Append("\n");
            sb.Append("  StayedObligation: ").Append(StayedObligation).Append("\n");
            sb.Append("  SuspendedObligation: ").Append(SuspendedObligation).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  SentenceSeverityLevel: ").Append(SentenceSeverityLevel).Append("\n");
            sb.Append("  SentencingGuideline: ").Append(SentencingGuideline).Append("\n");
            sb.Append("  SentencingGuidelineDepartureReason: ").Append(SentencingGuidelineDepartureReason).Append("\n");
            sb.Append("  SentencingGuidelineDepartureCategory: ").Append(SentencingGuidelineDepartureCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSanctionType)obj);
        }

        /// <summary>
        /// Returns true if JSanctionType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSanctionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSanctionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsAdultSentence == other.IsAdultSentence ||
                    IsAdultSentence != null &&
                    IsAdultSentence.SequenceEqual(other.IsAdultSentence)
                ) && 
                (
                    IsConcurrent == other.IsConcurrent ||
                    IsConcurrent != null &&
                    IsConcurrent.SequenceEqual(other.IsConcurrent)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DaysSuspendedQuantity == other.DaysSuspendedQuantity ||
                    DaysSuspendedQuantity != null &&
                    DaysSuspendedQuantity.SequenceEqual(other.DaysSuspendedQuantity)
                ) && 
                (
                    CreditedObligation == other.CreditedObligation ||
                    CreditedObligation != null &&
                    CreditedObligation.SequenceEqual(other.CreditedObligation)
                ) && 
                (
                    DisciplinaryAction == other.DisciplinaryAction ||
                    DisciplinaryAction != null &&
                    DisciplinaryAction.SequenceEqual(other.DisciplinaryAction)
                ) && 
                (
                    Frequency == other.Frequency ||
                    Frequency != null &&
                    Frequency.SequenceEqual(other.Frequency)
                ) && 
                (
                    Grouping == other.Grouping ||
                    Grouping != null &&
                    Grouping.SequenceEqual(other.Grouping)
                ) && 
                (
                    IssuingAgency == other.IssuingAgency ||
                    IssuingAgency != null &&
                    IssuingAgency.SequenceEqual(other.IssuingAgency)
                ) && 
                (
                    JurisdictionalAgency == other.JurisdictionalAgency ||
                    JurisdictionalAgency != null &&
                    JurisdictionalAgency.SequenceEqual(other.JurisdictionalAgency)
                ) && 
                (
                    Progress == other.Progress ||
                    Progress != null &&
                    Progress.SequenceEqual(other.Progress)
                ) && 
                (
                    RelatedChargeDisposition == other.RelatedChargeDisposition ||
                    RelatedChargeDisposition != null &&
                    RelatedChargeDisposition.SequenceEqual(other.RelatedChargeDisposition)
                ) && 
                (
                    RelatedSanctionIdentification == other.RelatedSanctionIdentification ||
                    RelatedSanctionIdentification != null &&
                    RelatedSanctionIdentification.SequenceEqual(other.RelatedSanctionIdentification)
                ) && 
                (
                    IsSentenceDefinition == other.IsSentenceDefinition ||
                    IsSentenceDefinition != null &&
                    IsSentenceDefinition.SequenceEqual(other.IsSentenceDefinition)
                ) && 
                (
                    SetDate == other.SetDate ||
                    SetDate != null &&
                    SetDate.SequenceEqual(other.SetDate)
                ) && 
                (
                    SetObligation == other.SetObligation ||
                    SetObligation != null &&
                    SetObligation.SequenceEqual(other.SetObligation)
                ) && 
                (
                    StayedObligation == other.StayedObligation ||
                    StayedObligation != null &&
                    StayedObligation.SequenceEqual(other.StayedObligation)
                ) && 
                (
                    SuspendedObligation == other.SuspendedObligation ||
                    SuspendedObligation != null &&
                    SuspendedObligation.SequenceEqual(other.SuspendedObligation)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    SentenceSeverityLevel == other.SentenceSeverityLevel ||
                    SentenceSeverityLevel != null &&
                    SentenceSeverityLevel.SequenceEqual(other.SentenceSeverityLevel)
                ) && 
                (
                    SentencingGuideline == other.SentencingGuideline ||
                    SentencingGuideline != null &&
                    SentencingGuideline.SequenceEqual(other.SentencingGuideline)
                ) && 
                (
                    SentencingGuidelineDepartureReason == other.SentencingGuidelineDepartureReason ||
                    SentencingGuidelineDepartureReason != null &&
                    SentencingGuidelineDepartureReason.SequenceEqual(other.SentencingGuidelineDepartureReason)
                ) && 
                (
                    SentencingGuidelineDepartureCategory == other.SentencingGuidelineDepartureCategory ||
                    SentencingGuidelineDepartureCategory != null &&
                    SentencingGuidelineDepartureCategory.SequenceEqual(other.SentencingGuidelineDepartureCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsAdultSentence != null)
                    hashCode = hashCode * 59 + IsAdultSentence.GetHashCode();
                    if (IsConcurrent != null)
                    hashCode = hashCode * 59 + IsConcurrent.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DaysSuspendedQuantity != null)
                    hashCode = hashCode * 59 + DaysSuspendedQuantity.GetHashCode();
                    if (CreditedObligation != null)
                    hashCode = hashCode * 59 + CreditedObligation.GetHashCode();
                    if (DisciplinaryAction != null)
                    hashCode = hashCode * 59 + DisciplinaryAction.GetHashCode();
                    if (Frequency != null)
                    hashCode = hashCode * 59 + Frequency.GetHashCode();
                    if (Grouping != null)
                    hashCode = hashCode * 59 + Grouping.GetHashCode();
                    if (IssuingAgency != null)
                    hashCode = hashCode * 59 + IssuingAgency.GetHashCode();
                    if (JurisdictionalAgency != null)
                    hashCode = hashCode * 59 + JurisdictionalAgency.GetHashCode();
                    if (Progress != null)
                    hashCode = hashCode * 59 + Progress.GetHashCode();
                    if (RelatedChargeDisposition != null)
                    hashCode = hashCode * 59 + RelatedChargeDisposition.GetHashCode();
                    if (RelatedSanctionIdentification != null)
                    hashCode = hashCode * 59 + RelatedSanctionIdentification.GetHashCode();
                    if (IsSentenceDefinition != null)
                    hashCode = hashCode * 59 + IsSentenceDefinition.GetHashCode();
                    if (SetDate != null)
                    hashCode = hashCode * 59 + SetDate.GetHashCode();
                    if (SetObligation != null)
                    hashCode = hashCode * 59 + SetObligation.GetHashCode();
                    if (StayedObligation != null)
                    hashCode = hashCode * 59 + StayedObligation.GetHashCode();
                    if (SuspendedObligation != null)
                    hashCode = hashCode * 59 + SuspendedObligation.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (SentenceSeverityLevel != null)
                    hashCode = hashCode * 59 + SentenceSeverityLevel.GetHashCode();
                    if (SentencingGuideline != null)
                    hashCode = hashCode * 59 + SentencingGuideline.GetHashCode();
                    if (SentencingGuidelineDepartureReason != null)
                    hashCode = hashCode * 59 + SentencingGuidelineDepartureReason.GetHashCode();
                    if (SentencingGuidelineDepartureCategory != null)
                    hashCode = hashCode * 59 + SentencingGuidelineDepartureCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSanctionType left, JSanctionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSanctionType left, JSanctionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
