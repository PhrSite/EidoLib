/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an assessment of the content of the voice data within a list of identified time segments, including provision for semantic transcripts, phonetic transcriptions and translations of the segments.
    /// </summary>
    [DataContract]
    public partial class BiomSegmentContentInformationType : IEquatable<BiomSegmentContentInformationType>
    { 
        /// <summary>
        /// A list of segment identifiers. NIEM reference is biom:SegmentIDList
        /// </summary>
        /// <value>A list of segment identifiers. NIEM reference is biom:SegmentIDList</value>

        [DataMember(Name="segmentIdList")]
        public List<BiomSegmentIDListType> SegmentIdList { get; set; }

        /// <summary>
        /// A semantic transcription of the contents of an identified list of time segments. NIEM reference is biom:SegmentTranscriptText
        /// </summary>
        /// <value>A semantic transcription of the contents of an identified list of time segments. NIEM reference is biom:SegmentTranscriptText</value>

        [DataMember(Name="segmentTranscript")]
        public List<NcTextType> SegmentTranscript { get; set; }

        /// <summary>
        /// A 3 character ISO 639-3 code for the transcript language. NIEM reference is biom:SegmentTranscriptLanguageCode
        /// </summary>
        /// <value>A 3 character ISO 639-3 code for the transcript language. NIEM reference is biom:SegmentTranscriptLanguageCode</value>

        [DataMember(Name="segmentTranscriptLanguageCode")]
        public List<Iso6393LanguageCodeType> SegmentTranscriptLanguageCode { get; set; }

        /// <summary>
        /// A phonetic transcription of the contents of an identified list of time segments. NIEM reference is biom:SegmentPhoneticTranscriptText
        /// </summary>
        /// <value>A phonetic transcription of the contents of an identified list of time segments. NIEM reference is biom:SegmentPhoneticTranscriptText</value>

        [DataMember(Name="segmentPhoneticTranscript")]
        public List<NcTextType> SegmentPhoneticTranscript { get; set; }

        /// <summary>
        /// A phonetic transcript convention of an identified list of time segments. NIEM reference is biom:PhoneticTranscriptConventionText
        /// </summary>
        /// <value>A phonetic transcript convention of an identified list of time segments. NIEM reference is biom:PhoneticTranscriptConventionText</value>

        [DataMember(Name="phoneticTranscriptConvention")]
        public List<NcTextType> PhoneticTranscriptConvention { get; set; }

        /// <summary>
        /// A translation into a language other than the one in which the original segment was spoken. NIEM reference is biom:SegmentTranslationText
        /// </summary>
        /// <value>A translation into a language other than the one in which the original segment was spoken. NIEM reference is biom:SegmentTranslationText</value>

        [DataMember(Name="segmentTranslation")]
        public List<NcTextType> SegmentTranslation { get; set; }

        /// <summary>
        /// A 3 character ISO 639-3 code for the translation language. NIEM reference is biom:SegmentTranslationLanguageCode
        /// </summary>
        /// <value>A 3 character ISO 639-3 code for the translation language. NIEM reference is biom:SegmentTranslationLanguageCode</value>

        [DataMember(Name="segmentTranslationLanguageCode")]
        public List<Iso6393LanguageCodeType> SegmentTranslationLanguageCode { get; set; }

        /// <summary>
        /// A comment on the content of the segment. NIEM reference is biom:SegmentContentCommentText
        /// </summary>
        /// <value>A comment on the content of the segment. NIEM reference is biom:SegmentContentCommentText</value>

        [DataMember(Name="segmentContentComment")]
        public List<NcTextType> SegmentContentComment { get; set; }

        /// <summary>
        /// A transcript authority comment text on the content of the segment. NIEM reference is biom:TranscriptAuthorityCommentText
        /// </summary>
        /// <value>A transcript authority comment text on the content of the segment. NIEM reference is biom:TranscriptAuthorityCommentText</value>

        [DataMember(Name="transcriptAuthorityComment")]
        public List<NcTextType> TranscriptAuthorityComment { get; set; }

        /// <summary>
        /// biomSegmentContentInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentContentInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomSegmentContentInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomSegmentContentInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomSegmentContentInformationTypeContext.jsonld")]
            JSONLDContextsbiomSegmentContentInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomSegmentContentInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentContentInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomSegmentContentInformationType {\n");
            sb.Append("  SegmentIdList: ").Append(SegmentIdList).Append("\n");
            sb.Append("  SegmentTranscript: ").Append(SegmentTranscript).Append("\n");
            sb.Append("  SegmentTranscriptLanguageCode: ").Append(SegmentTranscriptLanguageCode).Append("\n");
            sb.Append("  SegmentPhoneticTranscript: ").Append(SegmentPhoneticTranscript).Append("\n");
            sb.Append("  PhoneticTranscriptConvention: ").Append(PhoneticTranscriptConvention).Append("\n");
            sb.Append("  SegmentTranslation: ").Append(SegmentTranslation).Append("\n");
            sb.Append("  SegmentTranslationLanguageCode: ").Append(SegmentTranslationLanguageCode).Append("\n");
            sb.Append("  SegmentContentComment: ").Append(SegmentContentComment).Append("\n");
            sb.Append("  TranscriptAuthorityComment: ").Append(TranscriptAuthorityComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomSegmentContentInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomSegmentContentInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomSegmentContentInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomSegmentContentInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SegmentIdList == other.SegmentIdList ||
                    SegmentIdList != null &&
                    SegmentIdList.SequenceEqual(other.SegmentIdList)
                ) && 
                (
                    SegmentTranscript == other.SegmentTranscript ||
                    SegmentTranscript != null &&
                    SegmentTranscript.SequenceEqual(other.SegmentTranscript)
                ) && 
                (
                    SegmentTranscriptLanguageCode == other.SegmentTranscriptLanguageCode ||
                    SegmentTranscriptLanguageCode != null &&
                    SegmentTranscriptLanguageCode.SequenceEqual(other.SegmentTranscriptLanguageCode)
                ) && 
                (
                    SegmentPhoneticTranscript == other.SegmentPhoneticTranscript ||
                    SegmentPhoneticTranscript != null &&
                    SegmentPhoneticTranscript.SequenceEqual(other.SegmentPhoneticTranscript)
                ) && 
                (
                    PhoneticTranscriptConvention == other.PhoneticTranscriptConvention ||
                    PhoneticTranscriptConvention != null &&
                    PhoneticTranscriptConvention.SequenceEqual(other.PhoneticTranscriptConvention)
                ) && 
                (
                    SegmentTranslation == other.SegmentTranslation ||
                    SegmentTranslation != null &&
                    SegmentTranslation.SequenceEqual(other.SegmentTranslation)
                ) && 
                (
                    SegmentTranslationLanguageCode == other.SegmentTranslationLanguageCode ||
                    SegmentTranslationLanguageCode != null &&
                    SegmentTranslationLanguageCode.SequenceEqual(other.SegmentTranslationLanguageCode)
                ) && 
                (
                    SegmentContentComment == other.SegmentContentComment ||
                    SegmentContentComment != null &&
                    SegmentContentComment.SequenceEqual(other.SegmentContentComment)
                ) && 
                (
                    TranscriptAuthorityComment == other.TranscriptAuthorityComment ||
                    TranscriptAuthorityComment != null &&
                    TranscriptAuthorityComment.SequenceEqual(other.TranscriptAuthorityComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SegmentIdList != null)
                    hashCode = hashCode * 59 + SegmentIdList.GetHashCode();
                    if (SegmentTranscript != null)
                    hashCode = hashCode * 59 + SegmentTranscript.GetHashCode();
                    if (SegmentTranscriptLanguageCode != null)
                    hashCode = hashCode * 59 + SegmentTranscriptLanguageCode.GetHashCode();
                    if (SegmentPhoneticTranscript != null)
                    hashCode = hashCode * 59 + SegmentPhoneticTranscript.GetHashCode();
                    if (PhoneticTranscriptConvention != null)
                    hashCode = hashCode * 59 + PhoneticTranscriptConvention.GetHashCode();
                    if (SegmentTranslation != null)
                    hashCode = hashCode * 59 + SegmentTranslation.GetHashCode();
                    if (SegmentTranslationLanguageCode != null)
                    hashCode = hashCode * 59 + SegmentTranslationLanguageCode.GetHashCode();
                    if (SegmentContentComment != null)
                    hashCode = hashCode * 59 + SegmentContentComment.GetHashCode();
                    if (TranscriptAuthorityComment != null)
                    hashCode = hashCode * 59 + TranscriptAuthorityComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomSegmentContentInformationType left, BiomSegmentContentInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomSegmentContentInformationType left, BiomSegmentContentInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
