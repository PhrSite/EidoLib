/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a referral.
    /// </summary>
    [DataContract]
    public partial class JReferralAugmentationType : IEquatable<JReferralAugmentationType>
    { 
        /// <summary>
        /// An entity, organization or person, making a referral approval. NIEM reference is j:ReferralApprovalAuthorityEntity
        /// </summary>
        /// <value>An entity, organization or person, making a referral approval. NIEM reference is j:ReferralApprovalAuthorityEntity</value>

        [DataMember(Name="referralApprovalAuthorityEntity")]
        public List<NcEntityType> ReferralApprovalAuthorityEntity { get; set; }

        /// <summary>
        /// A Service Delivery Program Name to which the subject was referred; thus, allowing intake processing. NIEM reference is j:ReferralServiceDeliveryProgram
        /// </summary>
        /// <value>A Service Delivery Program Name to which the subject was referred; thus, allowing intake processing. NIEM reference is j:ReferralServiceDeliveryProgram</value>

        [DataMember(Name="referralServiceDeliveryProgram")]
        public List<NcProgramType> ReferralServiceDeliveryProgram { get; set; }

        /// <summary>
        /// A date that is calculated from the referral constraint element in days where the Supervisor of Record has to refer by a certain date due to the nature of the risk for the subject being in Custody. NIEM reference is j:ReferralDueDate
        /// </summary>
        /// <value>A date that is calculated from the referral constraint element in days where the Supervisor of Record has to refer by a certain date due to the nature of the risk for the subject being in Custody. NIEM reference is j:ReferralDueDate</value>

        [DataMember(Name="referralDueDate")]
        public List<NcDateType> ReferralDueDate { get; set; }

        /// <summary>
        /// A court order that issues a referral for a person. NIEM reference is j:ReferralCourtOrder
        /// </summary>
        /// <value>A court order that issues a referral for a person. NIEM reference is j:ReferralCourtOrder</value>

        [DataMember(Name="referralCourtOrder")]
        public List<JCourtOrderType> ReferralCourtOrder { get; set; }

        /// <summary>
        /// A number of days that will calculate how rapid the subject needs to be referred. NIEM reference is j:ReferralConstraintDayTotalNumeric
        /// </summary>
        /// <value>A number of days that will calculate how rapid the subject needs to be referred. NIEM reference is j:ReferralConstraintDayTotalNumeric</value>

        [DataMember(Name="referralConstraintDayTotalNumeric")]
        public List<NcNumericType> ReferralConstraintDayTotalNumeric { get; set; }

        /// <summary>
        /// jReferralAugmentationType JSON-LD context
        /// </summary>
        /// <value>jReferralAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjReferralAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jReferralAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jReferralAugmentationTypeContext.jsonld")]
            JSONLDContextsjReferralAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jReferralAugmentationType JSON-LD context
        /// </summary>
        /// <value>jReferralAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JReferralAugmentationType {\n");
            sb.Append("  ReferralApprovalAuthorityEntity: ").Append(ReferralApprovalAuthorityEntity).Append("\n");
            sb.Append("  ReferralServiceDeliveryProgram: ").Append(ReferralServiceDeliveryProgram).Append("\n");
            sb.Append("  ReferralDueDate: ").Append(ReferralDueDate).Append("\n");
            sb.Append("  ReferralCourtOrder: ").Append(ReferralCourtOrder).Append("\n");
            sb.Append("  ReferralConstraintDayTotalNumeric: ").Append(ReferralConstraintDayTotalNumeric).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JReferralAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JReferralAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JReferralAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JReferralAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReferralApprovalAuthorityEntity == other.ReferralApprovalAuthorityEntity ||
                    ReferralApprovalAuthorityEntity != null &&
                    ReferralApprovalAuthorityEntity.SequenceEqual(other.ReferralApprovalAuthorityEntity)
                ) && 
                (
                    ReferralServiceDeliveryProgram == other.ReferralServiceDeliveryProgram ||
                    ReferralServiceDeliveryProgram != null &&
                    ReferralServiceDeliveryProgram.SequenceEqual(other.ReferralServiceDeliveryProgram)
                ) && 
                (
                    ReferralDueDate == other.ReferralDueDate ||
                    ReferralDueDate != null &&
                    ReferralDueDate.SequenceEqual(other.ReferralDueDate)
                ) && 
                (
                    ReferralCourtOrder == other.ReferralCourtOrder ||
                    ReferralCourtOrder != null &&
                    ReferralCourtOrder.SequenceEqual(other.ReferralCourtOrder)
                ) && 
                (
                    ReferralConstraintDayTotalNumeric == other.ReferralConstraintDayTotalNumeric ||
                    ReferralConstraintDayTotalNumeric != null &&
                    ReferralConstraintDayTotalNumeric.SequenceEqual(other.ReferralConstraintDayTotalNumeric)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReferralApprovalAuthorityEntity != null)
                    hashCode = hashCode * 59 + ReferralApprovalAuthorityEntity.GetHashCode();
                    if (ReferralServiceDeliveryProgram != null)
                    hashCode = hashCode * 59 + ReferralServiceDeliveryProgram.GetHashCode();
                    if (ReferralDueDate != null)
                    hashCode = hashCode * 59 + ReferralDueDate.GetHashCode();
                    if (ReferralCourtOrder != null)
                    hashCode = hashCode * 59 + ReferralCourtOrder.GetHashCode();
                    if (ReferralConstraintDayTotalNumeric != null)
                    hashCode = hashCode * 59 + ReferralConstraintDayTotalNumeric.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JReferralAugmentationType left, JReferralAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JReferralAugmentationType left, JReferralAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
