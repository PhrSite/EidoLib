/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a mode of transportation capable of flying in the air.
    /// </summary>
    [DataContract]
    public partial class NcAircraftType : NcConveyanceType, IEquatable<NcAircraftType>
    { 
        /// <summary>
        /// An identification of an aircraft. NIEM reference is nc:AircraftTailIdentification
        /// </summary>
        /// <value>An identification of an aircraft. NIEM reference is nc:AircraftTailIdentification</value>

        [DataMember(Name="tailIdentification")]
        public List<NcIdentificationType> TailIdentification { get; set; }

        /// <summary>
        /// A manufacturer of an aircraft. NIEM reference is j:AircraftMakeCode
        /// </summary>
        /// <value>A manufacturer of an aircraft. NIEM reference is j:AircraftMakeCode</value>

        [DataMember(Name="makeCode")]
        public List<NcicVMACodeType> MakeCode { get; set; }

        /// <summary>
        /// A specific design or kind of aircraft made by a manufacturer. NIEM reference is j:AircraftModelCode
        /// </summary>
        /// <value>A specific design or kind of aircraft made by a manufacturer. NIEM reference is j:AircraftModelCode</value>

        [DataMember(Name="modelCode")]
        public List<NcicVMOCodeType> ModelCode { get; set; }

        /// <summary>
        /// A style of an aircraft. NIEM reference is j:AircraftStyleCode
        /// </summary>
        /// <value>A style of an aircraft. NIEM reference is j:AircraftStyleCode</value>

        [DataMember(Name="styleCode")]
        public List<NcicVSTCodeType> StyleCode { get; set; }

        /// <summary>
        /// A color of the main body of an aircraft. NIEM reference is j:AircraftFuselageColorCode
        /// </summary>
        /// <value>A color of the main body of an aircraft. NIEM reference is j:AircraftFuselageColorCode</value>

        [DataMember(Name="fuselageColorCode")]
        public List<NcicVCOCodeType> FuselageColorCode { get; set; }

        /// <summary>
        /// A color of the main body of an aircraft. NIEM reference is nc:AircraftFuselageColorText
        /// </summary>
        /// <value>A color of the main body of an aircraft. NIEM reference is nc:AircraftFuselageColorText</value>

        [DataMember(Name="fuselageColor")]
        public List<NcTextType> FuselageColor { get; set; }

        /// <summary>
        /// A color of the wings of an aircraft. NIEM reference is j:AircraftWingColorCode
        /// </summary>
        /// <value>A color of the wings of an aircraft. NIEM reference is j:AircraftWingColorCode</value>

        [DataMember(Name="wingColorCode")]
        public List<NcicVCOCodeType> WingColorCode { get; set; }

        /// <summary>
        /// A color of the wings of an aircraft. NIEM reference is nc:AircraftWingColorText
        /// </summary>
        /// <value>A color of the wings of an aircraft. NIEM reference is nc:AircraftWingColorText</value>

        [DataMember(Name="wingColor")]
        public List<NcTextType> WingColor { get; set; }

        /// <summary>
        /// A facility at which an aircraft is usually kept. NIEM reference is nc:AircraftBaseAirport
        /// </summary>
        /// <value>A facility at which an aircraft is usually kept. NIEM reference is nc:AircraftBaseAirport</value>

        [DataMember(Name="baseAirport")]
        public List<NcAirportType> BaseAirport { get; set; }

        /// <summary>
        /// Additional information about an nc:Aircraft. NIEM reference is mo:AircraftAugmentation
        /// </summary>
        /// <value>Additional information about an nc:Aircraft. NIEM reference is mo:AircraftAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<MoAircraftAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncAircraftType JSON-LD context
        /// </summary>
        /// <value>ncAircraftType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncAircraftTypeContextJsonldEnum for ../JSON-LD_Contexts/ncAircraftTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncAircraftTypeContext.jsonld")]
            JSONLDContextsncAircraftTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncAircraftType JSON-LD context
        /// </summary>
        /// <value>ncAircraftType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcAircraftType {\n");
            sb.Append("  TailIdentification: ").Append(TailIdentification).Append("\n");
            sb.Append("  MakeCode: ").Append(MakeCode).Append("\n");
            sb.Append("  ModelCode: ").Append(ModelCode).Append("\n");
            sb.Append("  StyleCode: ").Append(StyleCode).Append("\n");
            sb.Append("  FuselageColorCode: ").Append(FuselageColorCode).Append("\n");
            sb.Append("  FuselageColor: ").Append(FuselageColor).Append("\n");
            sb.Append("  WingColorCode: ").Append(WingColorCode).Append("\n");
            sb.Append("  WingColor: ").Append(WingColor).Append("\n");
            sb.Append("  BaseAirport: ").Append(BaseAirport).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcAircraftType)obj);
        }

        /// <summary>
        /// Returns true if NcAircraftType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcAircraftType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcAircraftType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TailIdentification == other.TailIdentification ||
                    TailIdentification != null &&
                    TailIdentification.SequenceEqual(other.TailIdentification)
                ) && 
                (
                    MakeCode == other.MakeCode ||
                    MakeCode != null &&
                    MakeCode.SequenceEqual(other.MakeCode)
                ) && 
                (
                    ModelCode == other.ModelCode ||
                    ModelCode != null &&
                    ModelCode.SequenceEqual(other.ModelCode)
                ) && 
                (
                    StyleCode == other.StyleCode ||
                    StyleCode != null &&
                    StyleCode.SequenceEqual(other.StyleCode)
                ) && 
                (
                    FuselageColorCode == other.FuselageColorCode ||
                    FuselageColorCode != null &&
                    FuselageColorCode.SequenceEqual(other.FuselageColorCode)
                ) && 
                (
                    FuselageColor == other.FuselageColor ||
                    FuselageColor != null &&
                    FuselageColor.SequenceEqual(other.FuselageColor)
                ) && 
                (
                    WingColorCode == other.WingColorCode ||
                    WingColorCode != null &&
                    WingColorCode.SequenceEqual(other.WingColorCode)
                ) && 
                (
                    WingColor == other.WingColor ||
                    WingColor != null &&
                    WingColor.SequenceEqual(other.WingColor)
                ) && 
                (
                    BaseAirport == other.BaseAirport ||
                    BaseAirport != null &&
                    BaseAirport.SequenceEqual(other.BaseAirport)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TailIdentification != null)
                    hashCode = hashCode * 59 + TailIdentification.GetHashCode();
                    if (MakeCode != null)
                    hashCode = hashCode * 59 + MakeCode.GetHashCode();
                    if (ModelCode != null)
                    hashCode = hashCode * 59 + ModelCode.GetHashCode();
                    if (StyleCode != null)
                    hashCode = hashCode * 59 + StyleCode.GetHashCode();
                    if (FuselageColorCode != null)
                    hashCode = hashCode * 59 + FuselageColorCode.GetHashCode();
                    if (FuselageColor != null)
                    hashCode = hashCode * 59 + FuselageColor.GetHashCode();
                    if (WingColorCode != null)
                    hashCode = hashCode * 59 + WingColorCode.GetHashCode();
                    if (WingColor != null)
                    hashCode = hashCode * 59 + WingColor.GetHashCode();
                    if (BaseAirport != null)
                    hashCode = hashCode * 59 + BaseAirport.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcAircraftType left, NcAircraftType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcAircraftType left, NcAircraftType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
