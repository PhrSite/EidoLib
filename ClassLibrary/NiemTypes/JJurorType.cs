/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person who serves on a jury and listens to a case to determine the guilt or innocence of a person accused of a crime.
    /// </summary>
    [DataContract]
    public partial class JJurorType : IEquatable<JJurorType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// A date a juror was dismissed from jury service. NIEM reference is j:JurorDismissedDate
        /// </summary>
        /// <value>A date a juror was dismissed from jury service. NIEM reference is j:JurorDismissedDate</value>

        [DataMember(Name="dismissedDate")]
        public List<NcDateType> DismissedDate { get; set; }

        /// <summary>
        /// True if a juror has been dismissed; false otherwise. NIEM reference is j:JurorDismissedIndicator
        /// </summary>
        /// <value>True if a juror has been dismissed; false otherwise. NIEM reference is j:JurorDismissedIndicator</value>

        [DataMember(Name="isDismissed")]
        public List<NiemXsboolean> IsDismissed { get; set; }

        /// <summary>
        /// A reason why a juror was dismissed or excused. NIEM reference is j:JurorDismissedReasonText
        /// </summary>
        /// <value>A reason why a juror was dismissed or excused. NIEM reference is j:JurorDismissedReasonText</value>

        [DataMember(Name="dismissedReason")]
        public List<NcTextType> DismissedReason { get; set; }

        /// <summary>
        /// True if a juror has been appointed as juror leader; false otherwise. NIEM reference is j:JurorForemanIndicator
        /// </summary>
        /// <value>True if a juror has been appointed as juror leader; false otherwise. NIEM reference is j:JurorForemanIndicator</value>

        [DataMember(Name="isForeman")]
        public List<NiemXsboolean> IsForeman { get; set; }

        /// <summary>
        /// A juror identification number that identifies a juror within a panel on which he or she is serving NIEM reference is j:JurorIdentification
        /// </summary>
        /// <value>A juror identification number that identifies a juror within a panel on which he or she is serving NIEM reference is j:JurorIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A panel identification number identifying the panel on which a juror is serving. NIEM reference is j:JurorPanelIdentification
        /// </summary>
        /// <value>A panel identification number identifying the panel on which a juror is serving. NIEM reference is j:JurorPanelIdentification</value>

        [DataMember(Name="panelIdentification")]
        public List<NcIdentificationType> PanelIdentification { get; set; }

        /// <summary>
        /// True if a person is a primary indicator; false if a person in an alternate juror. NIEM reference is j:JurorPrimaryIndicator
        /// </summary>
        /// <value>True if a person is a primary indicator; false if a person in an alternate juror. NIEM reference is j:JurorPrimaryIndicator</value>

        [DataMember(Name="isPrimary")]
        public List<NiemXsboolean> IsPrimary { get; set; }

        /// <summary>
        /// jJurorType JSON-LD context
        /// </summary>
        /// <value>jJurorType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjJurorTypeContextJsonldEnum for ../JSON-LD_Contexts/jJurorTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jJurorTypeContext.jsonld")]
            JSONLDContextsjJurorTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jJurorType JSON-LD context
        /// </summary>
        /// <value>jJurorType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JJurorType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  DismissedDate: ").Append(DismissedDate).Append("\n");
            sb.Append("  IsDismissed: ").Append(IsDismissed).Append("\n");
            sb.Append("  DismissedReason: ").Append(DismissedReason).Append("\n");
            sb.Append("  IsForeman: ").Append(IsForeman).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  PanelIdentification: ").Append(PanelIdentification).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JJurorType)obj);
        }

        /// <summary>
        /// Returns true if JJurorType instances are equal
        /// </summary>
        /// <param name="other">Instance of JJurorType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JJurorType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    DismissedDate == other.DismissedDate ||
                    DismissedDate != null &&
                    DismissedDate.SequenceEqual(other.DismissedDate)
                ) && 
                (
                    IsDismissed == other.IsDismissed ||
                    IsDismissed != null &&
                    IsDismissed.SequenceEqual(other.IsDismissed)
                ) && 
                (
                    DismissedReason == other.DismissedReason ||
                    DismissedReason != null &&
                    DismissedReason.SequenceEqual(other.DismissedReason)
                ) && 
                (
                    IsForeman == other.IsForeman ||
                    IsForeman != null &&
                    IsForeman.SequenceEqual(other.IsForeman)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    PanelIdentification == other.PanelIdentification ||
                    PanelIdentification != null &&
                    PanelIdentification.SequenceEqual(other.PanelIdentification)
                ) && 
                (
                    IsPrimary == other.IsPrimary ||
                    IsPrimary != null &&
                    IsPrimary.SequenceEqual(other.IsPrimary)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (DismissedDate != null)
                    hashCode = hashCode * 59 + DismissedDate.GetHashCode();
                    if (IsDismissed != null)
                    hashCode = hashCode * 59 + IsDismissed.GetHashCode();
                    if (DismissedReason != null)
                    hashCode = hashCode * 59 + DismissedReason.GetHashCode();
                    if (IsForeman != null)
                    hashCode = hashCode * 59 + IsForeman.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (PanelIdentification != null)
                    hashCode = hashCode * 59 + PanelIdentification.GetHashCode();
                    if (IsPrimary != null)
                    hashCode = hashCode * 59 + IsPrimary.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JJurorType left, JJurorType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JJurorType left, JJurorType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
