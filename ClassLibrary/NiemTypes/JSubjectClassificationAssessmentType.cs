/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an activity that assesses a subject&#x27;s need for treatment to correct characteristics, conditions, or behavioral patterns that limit motivation or ability to obey the law.
    /// </summary>
    [DataContract]
    public partial class JSubjectClassificationAssessmentType : NcAssessmentType, IEquatable<JSubjectClassificationAssessmentType>
    { 
        /// <summary>
        /// A purpose for which a subject classification assessment was administered. NIEM reference is j:SubjectClassificationAssessmentPurposeText
        /// </summary>
        /// <value>A purpose for which a subject classification assessment was administered. NIEM reference is j:SubjectClassificationAssessmentPurposeText</value>

        [DataMember(Name="purpose")]
        public List<NcTextType> Purpose { get; set; }

        /// <summary>
        /// A score assigned based on assessment of a subject&#x27;s criminal history. NIEM reference is j:SubjectClassificationAssessmentCriminalHistoryScoreText
        /// </summary>
        /// <value>A score assigned based on assessment of a subject&#x27;s criminal history. NIEM reference is j:SubjectClassificationAssessmentCriminalHistoryScoreText</value>

        [DataMember(Name="criminalHistoryScore")]
        public List<NcTextType> CriminalHistoryScore { get; set; }

        /// <summary>
        /// A kind of subject classification assessment. NIEM reference is j:SubjectClassificationAssessmentCategoryText
        /// </summary>
        /// <value>A kind of subject classification assessment. NIEM reference is j:SubjectClassificationAssessmentCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A description of release conditions that are recommended as a result of assessment findings. NIEM reference is j:SubjectClassificationAssessmentRecommendedReleaseConditionsText
        /// </summary>
        /// <value>A description of release conditions that are recommended as a result of assessment findings. NIEM reference is j:SubjectClassificationAssessmentRecommendedReleaseConditionsText</value>

        [DataMember(Name="recommendedReleaseConditions")]
        public List<NcTextType> RecommendedReleaseConditions { get; set; }

        /// <summary>
        /// A risk level corresponding to the assessment score estimating the likelihood that the offender will recidivate during his or her term of supervision. NIEM reference is j:SubjectClassificationAssessmentRiskLevelCode
        /// </summary>
        /// <value>A risk level corresponding to the assessment score estimating the likelihood that the offender will recidivate during his or her term of supervision. NIEM reference is j:SubjectClassificationAssessmentRiskLevelCode</value>

        [DataMember(Name="riskLevelCode")]
        public List<NdexRiskLevelCodeType> RiskLevelCode { get; set; }

        /// <summary>
        /// jSubjectClassificationAssessmentType JSON-LD context
        /// </summary>
        /// <value>jSubjectClassificationAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectClassificationAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectClassificationAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectClassificationAssessmentTypeContext.jsonld")]
            JSONLDContextsjSubjectClassificationAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectClassificationAssessmentType JSON-LD context
        /// </summary>
        /// <value>jSubjectClassificationAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectClassificationAssessmentType {\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  CriminalHistoryScore: ").Append(CriminalHistoryScore).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  RecommendedReleaseConditions: ").Append(RecommendedReleaseConditions).Append("\n");
            sb.Append("  RiskLevelCode: ").Append(RiskLevelCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectClassificationAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectClassificationAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectClassificationAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectClassificationAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.SequenceEqual(other.Purpose)
                ) && 
                (
                    CriminalHistoryScore == other.CriminalHistoryScore ||
                    CriminalHistoryScore != null &&
                    CriminalHistoryScore.SequenceEqual(other.CriminalHistoryScore)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    RecommendedReleaseConditions == other.RecommendedReleaseConditions ||
                    RecommendedReleaseConditions != null &&
                    RecommendedReleaseConditions.SequenceEqual(other.RecommendedReleaseConditions)
                ) && 
                (
                    RiskLevelCode == other.RiskLevelCode ||
                    RiskLevelCode != null &&
                    RiskLevelCode.SequenceEqual(other.RiskLevelCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (CriminalHistoryScore != null)
                    hashCode = hashCode * 59 + CriminalHistoryScore.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (RecommendedReleaseConditions != null)
                    hashCode = hashCode * 59 + RecommendedReleaseConditions.GetHashCode();
                    if (RiskLevelCode != null)
                    hashCode = hashCode * 59 + RiskLevelCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectClassificationAssessmentType left, JSubjectClassificationAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectClassificationAssessmentType left, JSubjectClassificationAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
