/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a structure that extends nc:LocationType
    /// </summary>
    [DataContract]
    public partial class EmServiceCallResponseLocationType : NcLocationType, IEquatable<EmServiceCallResponseLocationType>
    { 
        /// <summary>
        /// A data element for text that specifically identifies a particular cell tower. NIEM reference is em:CellIDText
        /// </summary>
        /// <value>A data element for text that specifically identifies a particular cell tower. NIEM reference is em:CellIDText</value>

        [DataMember(Name="cellId")]
        public List<NcTextType> CellId { get; set; }

        /// <summary>
        /// A data element for text that specifically identifies a particular cell sector. NIEM reference is em:CellSectorIDText
        /// </summary>
        /// <value>A data element for text that specifically identifies a particular cell sector. NIEM reference is em:CellSectorIDText</value>

        [DataMember(Name="cellSectorId")]
        public List<NcTextType> CellSectorId { get; set; }

        /// <summary>
        /// A data element for the Date/Time that the coordinates were recorded by the device in UTC. NIEM reference is em:CoordinateDateTime
        /// </summary>
        /// <value>A data element for the Date/Time that the coordinates were recorded by the device in UTC. NIEM reference is em:CoordinateDateTime</value>

        [DataMember(Name="coordinateDateTime")]
        public List<NiemXsdateTime> CoordinateDateTime { get; set; }

        /// <summary>
        /// A measure of a speed or rate of motion. NIEM reference is nc:SpeedMeasure
        /// </summary>
        /// <value>A measure of a speed or rate of motion. NIEM reference is nc:SpeedMeasure</value>

        [DataMember(Name="speedMeasure")]
        public List<NcSpeedMeasureType> SpeedMeasure { get; set; }

        /// <summary>
        /// A confidence measure derived from the number of cell sites, distance of the coordinates recorded from the cell site, accuracy of measurement of the coordinates and is typically expressed in meters. NIEM reference is em:UncertaintyDistanceText
        /// </summary>
        /// <value>A confidence measure derived from the number of cell sites, distance of the coordinates recorded from the cell site, accuracy of measurement of the coordinates and is typically expressed in meters. NIEM reference is em:UncertaintyDistanceText</value>

        [DataMember(Name="uncertaintyDistance")]
        public List<NcTextType> UncertaintyDistance { get; set; }

        /// <summary>
        /// A data element for the name of ID of a firebox NIEM reference is em:FireboxText
        /// </summary>
        /// <value>A data element for the name of ID of a firebox NIEM reference is em:FireboxText</value>

        [DataMember(Name="firebox")]
        public List<NcTextType> Firebox { get; set; }

        /// <summary>
        /// emServiceCallResponseLocationType JSON-LD context
        /// </summary>
        /// <value>emServiceCallResponseLocationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemServiceCallResponseLocationTypeContextJsonldEnum for ../JSON-LD_Contexts/emServiceCallResponseLocationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emServiceCallResponseLocationTypeContext.jsonld")]
            JSONLDContextsemServiceCallResponseLocationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emServiceCallResponseLocationType JSON-LD context
        /// </summary>
        /// <value>emServiceCallResponseLocationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmServiceCallResponseLocationType {\n");
            sb.Append("  CellId: ").Append(CellId).Append("\n");
            sb.Append("  CellSectorId: ").Append(CellSectorId).Append("\n");
            sb.Append("  CoordinateDateTime: ").Append(CoordinateDateTime).Append("\n");
            sb.Append("  SpeedMeasure: ").Append(SpeedMeasure).Append("\n");
            sb.Append("  UncertaintyDistance: ").Append(UncertaintyDistance).Append("\n");
            sb.Append("  Firebox: ").Append(Firebox).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmServiceCallResponseLocationType)obj);
        }

        /// <summary>
        /// Returns true if EmServiceCallResponseLocationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmServiceCallResponseLocationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmServiceCallResponseLocationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CellId == other.CellId ||
                    CellId != null &&
                    CellId.SequenceEqual(other.CellId)
                ) && 
                (
                    CellSectorId == other.CellSectorId ||
                    CellSectorId != null &&
                    CellSectorId.SequenceEqual(other.CellSectorId)
                ) && 
                (
                    CoordinateDateTime == other.CoordinateDateTime ||
                    CoordinateDateTime != null &&
                    CoordinateDateTime.SequenceEqual(other.CoordinateDateTime)
                ) && 
                (
                    SpeedMeasure == other.SpeedMeasure ||
                    SpeedMeasure != null &&
                    SpeedMeasure.SequenceEqual(other.SpeedMeasure)
                ) && 
                (
                    UncertaintyDistance == other.UncertaintyDistance ||
                    UncertaintyDistance != null &&
                    UncertaintyDistance.SequenceEqual(other.UncertaintyDistance)
                ) && 
                (
                    Firebox == other.Firebox ||
                    Firebox != null &&
                    Firebox.SequenceEqual(other.Firebox)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CellId != null)
                    hashCode = hashCode * 59 + CellId.GetHashCode();
                    if (CellSectorId != null)
                    hashCode = hashCode * 59 + CellSectorId.GetHashCode();
                    if (CoordinateDateTime != null)
                    hashCode = hashCode * 59 + CoordinateDateTime.GetHashCode();
                    if (SpeedMeasure != null)
                    hashCode = hashCode * 59 + SpeedMeasure.GetHashCode();
                    if (UncertaintyDistance != null)
                    hashCode = hashCode * 59 + UncertaintyDistance.GetHashCode();
                    if (Firebox != null)
                    hashCode = hashCode * 59 + Firebox.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmServiceCallResponseLocationType left, EmServiceCallResponseLocationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmServiceCallResponseLocationType left, EmServiceCallResponseLocationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
