/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of information regarding the status of the individual at the time when the relevant data was recorded.
    /// </summary>
    [DataContract]
    public partial class BiomDentalSubjectInformationType : IEquatable<BiomDentalSubjectInformationType>
    { 
        /// <summary>
        /// A mortal status of a subject NIEM reference is biom:SubjectExistentialStatusCode
        /// </summary>
        /// <value>A mortal status of a subject NIEM reference is biom:SubjectExistentialStatusCode</value>

        [DataMember(Name="subjectExistentialStatusCode")]
        public List<BiomExistentialStatusCodeType> SubjectExistentialStatusCode { get; set; }

        /// <summary>
        /// A date the subject made last contact. This is typically the last examination date if the records are from a dentist&#x27;s office. NIEM reference is biom:SubjectLastContactDate
        /// </summary>
        /// <value>A date the subject made last contact. This is typically the last examination date if the records are from a dentist&#x27;s office. NIEM reference is biom:SubjectLastContactDate</value>

        [DataMember(Name="subjectLastContactDate")]
        public List<NcDateType> SubjectLastContactDate { get; set; }

        /// <summary>
        /// A subject range of last contact date estimate. NIEM reference is biom:SubjectLastContactDateEstimateRangeDuration
        /// </summary>
        /// <value>A subject range of last contact date estimate. NIEM reference is biom:SubjectLastContactDateEstimateRangeDuration</value>

        [DataMember(Name="subjectLastContactDateEstimateRangeDuration")]
        public List<NiemXsduration> SubjectLastContactDateEstimateRangeDuration { get; set; }

        /// <summary>
        /// A date a person was born. NIEM reference is nc:PersonBirthDate
        /// </summary>
        /// <value>A date a person was born. NIEM reference is nc:PersonBirthDate</value>

        [DataMember(Name="personBirthDate")]
        public List<NcDateType> PersonBirthDate { get; set; }

        /// <summary>
        /// A subject range of birth date estimate. NIEM reference is biom:SubjectBirthDateEstimateRangeDuration
        /// </summary>
        /// <value>A subject range of birth date estimate. NIEM reference is biom:SubjectBirthDateEstimateRangeDuration</value>

        [DataMember(Name="subjectBirthDateEstimateRangeDuration")]
        public List<NiemXsduration> SubjectBirthDateEstimateRangeDuration { get; set; }

        /// <summary>
        /// A cultural lineage of a person. NIEM reference is nc:PersonEthnicityText
        /// </summary>
        /// <value>A cultural lineage of a person. NIEM reference is nc:PersonEthnicityText</value>

        [DataMember(Name="personEthnicity")]
        public List<NcTextType> PersonEthnicity { get; set; }

        /// <summary>
        /// A code to indicate if DNA records are available for the subject NIEM reference is biom:SubjectDNARecordsAvailableCode
        /// </summary>
        /// <value>A code to indicate if DNA records are available for the subject NIEM reference is biom:SubjectDNARecordsAvailableCode</value>

        [DataMember(Name="subjectDnaRecordsAvailableCode")]
        public List<BiomSubjectDNARecordsAvailableCodeType> SubjectDnaRecordsAvailableCode { get; set; }

        /// <summary>
        /// A description of subject collection location NIEM reference is biom:SubjectCollectionLocationDescriptionText
        /// </summary>
        /// <value>A description of subject collection location NIEM reference is biom:SubjectCollectionLocationDescriptionText</value>

        [DataMember(Name="subjectCollectionLocationDescription")]
        public List<NcTextType> SubjectCollectionLocationDescription { get; set; }

        /// <summary>
        /// A date of the subject death NIEM reference is biom:SubjectEstimatedDeathDate
        /// </summary>
        /// <value>A date of the subject death NIEM reference is biom:SubjectEstimatedDeathDate</value>

        [DataMember(Name="subjectEstimatedDeathDate")]
        public List<NcDateType> SubjectEstimatedDeathDate { get; set; }

        /// <summary>
        /// A kind of subject range of death date. NIEM reference is biom:SubjectDeathDateRangeDuration
        /// </summary>
        /// <value>A kind of subject range of death date. NIEM reference is biom:SubjectDeathDateRangeDuration</value>

        [DataMember(Name="subjectDeathDateRangeDuration")]
        public List<NiemXsduration> SubjectDeathDateRangeDuration { get; set; }

        /// <summary>
        /// A kind of subject death time estimate rationale text NIEM reference is biom:SubjectDeathTimeEstimateRationaleText
        /// </summary>
        /// <value>A kind of subject death time estimate rationale text NIEM reference is biom:SubjectDeathTimeEstimateRationaleText</value>

        [DataMember(Name="subjectDeathTimeEstimateRationale")]
        public List<NcTextType> SubjectDeathTimeEstimateRationale { get; set; }

        /// <summary>
        /// A kind of subject death age estimate text NIEM reference is biom:SubjectDeathAgeEstimateText
        /// </summary>
        /// <value>A kind of subject death age estimate text NIEM reference is biom:SubjectDeathAgeEstimateText</value>

        [DataMember(Name="subjectDeathAgeEstimate")]
        public List<NcTextType> SubjectDeathAgeEstimate { get; set; }

        /// <summary>
        /// biomDentalSubjectInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalSubjectInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDentalSubjectInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDentalSubjectInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDentalSubjectInformationTypeContext.jsonld")]
            JSONLDContextsbiomDentalSubjectInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDentalSubjectInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalSubjectInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDentalSubjectInformationType {\n");
            sb.Append("  SubjectExistentialStatusCode: ").Append(SubjectExistentialStatusCode).Append("\n");
            sb.Append("  SubjectLastContactDate: ").Append(SubjectLastContactDate).Append("\n");
            sb.Append("  SubjectLastContactDateEstimateRangeDuration: ").Append(SubjectLastContactDateEstimateRangeDuration).Append("\n");
            sb.Append("  PersonBirthDate: ").Append(PersonBirthDate).Append("\n");
            sb.Append("  SubjectBirthDateEstimateRangeDuration: ").Append(SubjectBirthDateEstimateRangeDuration).Append("\n");
            sb.Append("  PersonEthnicity: ").Append(PersonEthnicity).Append("\n");
            sb.Append("  SubjectDnaRecordsAvailableCode: ").Append(SubjectDnaRecordsAvailableCode).Append("\n");
            sb.Append("  SubjectCollectionLocationDescription: ").Append(SubjectCollectionLocationDescription).Append("\n");
            sb.Append("  SubjectEstimatedDeathDate: ").Append(SubjectEstimatedDeathDate).Append("\n");
            sb.Append("  SubjectDeathDateRangeDuration: ").Append(SubjectDeathDateRangeDuration).Append("\n");
            sb.Append("  SubjectDeathTimeEstimateRationale: ").Append(SubjectDeathTimeEstimateRationale).Append("\n");
            sb.Append("  SubjectDeathAgeEstimate: ").Append(SubjectDeathAgeEstimate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDentalSubjectInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomDentalSubjectInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDentalSubjectInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDentalSubjectInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubjectExistentialStatusCode == other.SubjectExistentialStatusCode ||
                    SubjectExistentialStatusCode != null &&
                    SubjectExistentialStatusCode.SequenceEqual(other.SubjectExistentialStatusCode)
                ) && 
                (
                    SubjectLastContactDate == other.SubjectLastContactDate ||
                    SubjectLastContactDate != null &&
                    SubjectLastContactDate.SequenceEqual(other.SubjectLastContactDate)
                ) && 
                (
                    SubjectLastContactDateEstimateRangeDuration == other.SubjectLastContactDateEstimateRangeDuration ||
                    SubjectLastContactDateEstimateRangeDuration != null &&
                    SubjectLastContactDateEstimateRangeDuration.SequenceEqual(other.SubjectLastContactDateEstimateRangeDuration)
                ) && 
                (
                    PersonBirthDate == other.PersonBirthDate ||
                    PersonBirthDate != null &&
                    PersonBirthDate.SequenceEqual(other.PersonBirthDate)
                ) && 
                (
                    SubjectBirthDateEstimateRangeDuration == other.SubjectBirthDateEstimateRangeDuration ||
                    SubjectBirthDateEstimateRangeDuration != null &&
                    SubjectBirthDateEstimateRangeDuration.SequenceEqual(other.SubjectBirthDateEstimateRangeDuration)
                ) && 
                (
                    PersonEthnicity == other.PersonEthnicity ||
                    PersonEthnicity != null &&
                    PersonEthnicity.SequenceEqual(other.PersonEthnicity)
                ) && 
                (
                    SubjectDnaRecordsAvailableCode == other.SubjectDnaRecordsAvailableCode ||
                    SubjectDnaRecordsAvailableCode != null &&
                    SubjectDnaRecordsAvailableCode.SequenceEqual(other.SubjectDnaRecordsAvailableCode)
                ) && 
                (
                    SubjectCollectionLocationDescription == other.SubjectCollectionLocationDescription ||
                    SubjectCollectionLocationDescription != null &&
                    SubjectCollectionLocationDescription.SequenceEqual(other.SubjectCollectionLocationDescription)
                ) && 
                (
                    SubjectEstimatedDeathDate == other.SubjectEstimatedDeathDate ||
                    SubjectEstimatedDeathDate != null &&
                    SubjectEstimatedDeathDate.SequenceEqual(other.SubjectEstimatedDeathDate)
                ) && 
                (
                    SubjectDeathDateRangeDuration == other.SubjectDeathDateRangeDuration ||
                    SubjectDeathDateRangeDuration != null &&
                    SubjectDeathDateRangeDuration.SequenceEqual(other.SubjectDeathDateRangeDuration)
                ) && 
                (
                    SubjectDeathTimeEstimateRationale == other.SubjectDeathTimeEstimateRationale ||
                    SubjectDeathTimeEstimateRationale != null &&
                    SubjectDeathTimeEstimateRationale.SequenceEqual(other.SubjectDeathTimeEstimateRationale)
                ) && 
                (
                    SubjectDeathAgeEstimate == other.SubjectDeathAgeEstimate ||
                    SubjectDeathAgeEstimate != null &&
                    SubjectDeathAgeEstimate.SequenceEqual(other.SubjectDeathAgeEstimate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubjectExistentialStatusCode != null)
                    hashCode = hashCode * 59 + SubjectExistentialStatusCode.GetHashCode();
                    if (SubjectLastContactDate != null)
                    hashCode = hashCode * 59 + SubjectLastContactDate.GetHashCode();
                    if (SubjectLastContactDateEstimateRangeDuration != null)
                    hashCode = hashCode * 59 + SubjectLastContactDateEstimateRangeDuration.GetHashCode();
                    if (PersonBirthDate != null)
                    hashCode = hashCode * 59 + PersonBirthDate.GetHashCode();
                    if (SubjectBirthDateEstimateRangeDuration != null)
                    hashCode = hashCode * 59 + SubjectBirthDateEstimateRangeDuration.GetHashCode();
                    if (PersonEthnicity != null)
                    hashCode = hashCode * 59 + PersonEthnicity.GetHashCode();
                    if (SubjectDnaRecordsAvailableCode != null)
                    hashCode = hashCode * 59 + SubjectDnaRecordsAvailableCode.GetHashCode();
                    if (SubjectCollectionLocationDescription != null)
                    hashCode = hashCode * 59 + SubjectCollectionLocationDescription.GetHashCode();
                    if (SubjectEstimatedDeathDate != null)
                    hashCode = hashCode * 59 + SubjectEstimatedDeathDate.GetHashCode();
                    if (SubjectDeathDateRangeDuration != null)
                    hashCode = hashCode * 59 + SubjectDeathDateRangeDuration.GetHashCode();
                    if (SubjectDeathTimeEstimateRationale != null)
                    hashCode = hashCode * 59 + SubjectDeathTimeEstimateRationale.GetHashCode();
                    if (SubjectDeathAgeEstimate != null)
                    hashCode = hashCode * 59 + SubjectDeathAgeEstimate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDentalSubjectInformationType left, BiomDentalSubjectInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDentalSubjectInformationType left, BiomDentalSubjectInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
