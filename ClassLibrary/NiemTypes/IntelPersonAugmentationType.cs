/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a person.
    /// </summary>
    [DataContract]
    public partial class IntelPersonAugmentationType : IEquatable<IntelPersonAugmentationType>
    { 
        /// <summary>
        /// A description of why an agency placed the person in its repository or why the data on the person is being exchanged. NIEM reference is intel:AgencySubjectInterest
        /// </summary>
        /// <value>A description of why an agency placed the person in its repository or why the data on the person is being exchanged. NIEM reference is intel:AgencySubjectInterest</value>

        [DataMember(Name="agencySubjectInterest")]
        public List<IntelAgencySubjectInterestType> AgencySubjectInterest { get; set; }

        /// <summary>
        /// A persons allegiance to a sovereign state by right of birthplace or naturalization. NIEM reference is intel:PersonCitizenshipDetails
        /// </summary>
        /// <value>A persons allegiance to a sovereign state by right of birthplace or naturalization. NIEM reference is intel:PersonCitizenshipDetails</value>

        [DataMember(Name="personCitizenshipDetails")]
        public List<IntelPersonCitizenshipDetailsType> PersonCitizenshipDetails { get; set; }

        /// <summary>
        /// A structure that describes details about how to contact a person. NIEM reference is intel:PersonContactDetails
        /// </summary>
        /// <value>A structure that describes details about how to contact a person. NIEM reference is intel:PersonContactDetails</value>

        [DataMember(Name="personContactDetails")]
        public List<NcContactInformationType> PersonContactDetails { get; set; }

        /// <summary>
        /// A relationship between a person and an organization in which the organization is providing a service as an educational institution. NIEM reference is intel:PersonEducationDetails
        /// </summary>
        /// <value>A relationship between a person and an organization in which the organization is providing a service as an educational institution. NIEM reference is intel:PersonEducationDetails</value>

        [DataMember(Name="personEducationDetails")]
        public List<IntelPersonEducationDetailsType> PersonEducationDetails { get; set; }

        /// <summary>
        /// A geospatial location. NIEM reference is nc:Location
        /// </summary>
        /// <value>A geospatial location. NIEM reference is nc:Location</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A non-textual indicator of a persons identity. NIEM reference is intel:PersonMultimediaIDBinary
        /// </summary>
        /// <value>A non-textual indicator of a persons identity. NIEM reference is intel:PersonMultimediaIDBinary</value>

        [DataMember(Name="personMultimediaIdBinary")]
        public List<NcBinaryType> PersonMultimediaIdBinary { get; set; }

        /// <summary>
        /// A system identification that references a person. NIEM reference is intel:PersonSystemIdentification
        /// </summary>
        /// <value>A system identification that references a person. NIEM reference is intel:PersonSystemIdentification</value>

        [DataMember(Name="personSystemIdentification")]
        public List<NcSystemIdentificationType> PersonSystemIdentification { get; set; }

        /// <summary>
        /// A cause which produces or effects a persons death. NIEM reference is intel:PersonCauseOfDeathText
        /// </summary>
        /// <value>A cause which produces or effects a persons death. NIEM reference is intel:PersonCauseOfDeathText</value>

        [DataMember(Name="personCauseOfDeath")]
        public List<NcTextType> PersonCauseOfDeath { get; set; }

        /// <summary>
        /// A text description of the characteristics of a persons eyes. NIEM reference is intel:PersonEyeDescriptionText
        /// </summary>
        /// <value>A text description of the characteristics of a persons eyes. NIEM reference is intel:PersonEyeDescriptionText</value>

        [DataMember(Name="personEyeDescription")]
        public List<NcTextType> PersonEyeDescription { get; set; }

        /// <summary>
        /// A name of an occupation. NIEM reference is intel:OccupationName
        /// </summary>
        /// <value>A name of an occupation. NIEM reference is intel:OccupationName</value>

        [DataMember(Name="occupationName")]
        public List<NcTextType> OccupationName { get; set; }

        /// <summary>
        /// A mode of transportation capable of flying in the air. NIEM reference is nc:Aircraft
        /// </summary>
        /// <value>A mode of transportation capable of flying in the air. NIEM reference is nc:Aircraft</value>

        [DataMember(Name="aircraft")]
        public List<NcAircraftType> Aircraft { get; set; }

        /// <summary>
        /// A mode of transportation capable of transport by water. NIEM reference is nc:Vessel
        /// </summary>
        /// <value>A mode of transportation capable of transport by water. NIEM reference is nc:Vessel</value>

        [DataMember(Name="vessel")]
        public List<NcVesselType> Vessel { get; set; }

        /// <summary>
        /// intelPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>intelPersonAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsintelPersonAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/intelPersonAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/intelPersonAugmentationTypeContext.jsonld")]
            JSONLDContextsintelPersonAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// intelPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>intelPersonAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntelPersonAugmentationType {\n");
            sb.Append("  AgencySubjectInterest: ").Append(AgencySubjectInterest).Append("\n");
            sb.Append("  PersonCitizenshipDetails: ").Append(PersonCitizenshipDetails).Append("\n");
            sb.Append("  PersonContactDetails: ").Append(PersonContactDetails).Append("\n");
            sb.Append("  PersonEducationDetails: ").Append(PersonEducationDetails).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  PersonMultimediaIdBinary: ").Append(PersonMultimediaIdBinary).Append("\n");
            sb.Append("  PersonSystemIdentification: ").Append(PersonSystemIdentification).Append("\n");
            sb.Append("  PersonCauseOfDeath: ").Append(PersonCauseOfDeath).Append("\n");
            sb.Append("  PersonEyeDescription: ").Append(PersonEyeDescription).Append("\n");
            sb.Append("  OccupationName: ").Append(OccupationName).Append("\n");
            sb.Append("  Aircraft: ").Append(Aircraft).Append("\n");
            sb.Append("  Vessel: ").Append(Vessel).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IntelPersonAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if IntelPersonAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of IntelPersonAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntelPersonAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AgencySubjectInterest == other.AgencySubjectInterest ||
                    AgencySubjectInterest != null &&
                    AgencySubjectInterest.SequenceEqual(other.AgencySubjectInterest)
                ) && 
                (
                    PersonCitizenshipDetails == other.PersonCitizenshipDetails ||
                    PersonCitizenshipDetails != null &&
                    PersonCitizenshipDetails.SequenceEqual(other.PersonCitizenshipDetails)
                ) && 
                (
                    PersonContactDetails == other.PersonContactDetails ||
                    PersonContactDetails != null &&
                    PersonContactDetails.SequenceEqual(other.PersonContactDetails)
                ) && 
                (
                    PersonEducationDetails == other.PersonEducationDetails ||
                    PersonEducationDetails != null &&
                    PersonEducationDetails.SequenceEqual(other.PersonEducationDetails)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    PersonMultimediaIdBinary == other.PersonMultimediaIdBinary ||
                    PersonMultimediaIdBinary != null &&
                    PersonMultimediaIdBinary.SequenceEqual(other.PersonMultimediaIdBinary)
                ) && 
                (
                    PersonSystemIdentification == other.PersonSystemIdentification ||
                    PersonSystemIdentification != null &&
                    PersonSystemIdentification.SequenceEqual(other.PersonSystemIdentification)
                ) && 
                (
                    PersonCauseOfDeath == other.PersonCauseOfDeath ||
                    PersonCauseOfDeath != null &&
                    PersonCauseOfDeath.SequenceEqual(other.PersonCauseOfDeath)
                ) && 
                (
                    PersonEyeDescription == other.PersonEyeDescription ||
                    PersonEyeDescription != null &&
                    PersonEyeDescription.SequenceEqual(other.PersonEyeDescription)
                ) && 
                (
                    OccupationName == other.OccupationName ||
                    OccupationName != null &&
                    OccupationName.SequenceEqual(other.OccupationName)
                ) && 
                (
                    Aircraft == other.Aircraft ||
                    Aircraft != null &&
                    Aircraft.SequenceEqual(other.Aircraft)
                ) && 
                (
                    Vessel == other.Vessel ||
                    Vessel != null &&
                    Vessel.SequenceEqual(other.Vessel)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AgencySubjectInterest != null)
                    hashCode = hashCode * 59 + AgencySubjectInterest.GetHashCode();
                    if (PersonCitizenshipDetails != null)
                    hashCode = hashCode * 59 + PersonCitizenshipDetails.GetHashCode();
                    if (PersonContactDetails != null)
                    hashCode = hashCode * 59 + PersonContactDetails.GetHashCode();
                    if (PersonEducationDetails != null)
                    hashCode = hashCode * 59 + PersonEducationDetails.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (PersonMultimediaIdBinary != null)
                    hashCode = hashCode * 59 + PersonMultimediaIdBinary.GetHashCode();
                    if (PersonSystemIdentification != null)
                    hashCode = hashCode * 59 + PersonSystemIdentification.GetHashCode();
                    if (PersonCauseOfDeath != null)
                    hashCode = hashCode * 59 + PersonCauseOfDeath.GetHashCode();
                    if (PersonEyeDescription != null)
                    hashCode = hashCode * 59 + PersonEyeDescription.GetHashCode();
                    if (OccupationName != null)
                    hashCode = hashCode * 59 + OccupationName.GetHashCode();
                    if (Aircraft != null)
                    hashCode = hashCode * 59 + Aircraft.GetHashCode();
                    if (Vessel != null)
                    hashCode = hashCode * 59 + Vessel.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IntelPersonAugmentationType left, IntelPersonAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IntelPersonAugmentationType left, IntelPersonAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
