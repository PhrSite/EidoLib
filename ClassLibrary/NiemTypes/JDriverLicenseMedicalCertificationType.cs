/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a medical certification associated with a driver license.
    /// </summary>
    [DataContract]
    public partial class JDriverLicenseMedicalCertificationType : IEquatable<JDriverLicenseMedicalCertificationType>
    { 
        /// <summary>
        /// A date on which a medical practitioner issued a medical certificate to a commercial driver. NIEM reference is j:DriverLicenseMedicalCertificationIssueDate
        /// </summary>
        /// <value>A date on which a medical practitioner issued a medical certificate to a commercial driver. NIEM reference is j:DriverLicenseMedicalCertificationIssueDate</value>

        [DataMember(Name="issueDate")]
        public List<NcDateType> IssueDate { get; set; }

        /// <summary>
        /// A date on which a medical certificate issued to a commercial driver expires. NIEM reference is j:DriverLicenseMedicalCertificationExpirationDate
        /// </summary>
        /// <value>A date on which a medical certificate issued to a commercial driver expires. NIEM reference is j:DriverLicenseMedicalCertificationExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// A start date of the most recent variance of a medical certificate, due to a commercial driver&#x27;s Skills Performance Evaluation. NIEM reference is j:DriverLicenseSkillsPerformanceEvaluationEffectiveDate
        /// </summary>
        /// <value>A start date of the most recent variance of a medical certificate, due to a commercial driver&#x27;s Skills Performance Evaluation. NIEM reference is j:DriverLicenseSkillsPerformanceEvaluationEffectiveDate</value>

        [DataMember(Name="driverLicenseSkillsPerformanceEvaluationEffectiveDate")]
        public List<NcDateType> DriverLicenseSkillsPerformanceEvaluationEffectiveDate { get; set; }

        /// <summary>
        /// An expiration date of the most recent variance of a medical certificate, due to a waiver or exemption. NIEM reference is j:DriverLicenseWaiverExemptExpirationDate
        /// </summary>
        /// <value>An expiration date of the most recent variance of a medical certificate, due to a waiver or exemption. NIEM reference is j:DriverLicenseWaiverExemptExpirationDate</value>

        [DataMember(Name="driverLicenseWaiverExemptExpirationDate")]
        public List<NcDateType> DriverLicenseWaiverExemptExpirationDate { get; set; }

        /// <summary>
        /// A start date of the most recent variance of a medical certificate, due to a waiver or exemption. NIEM reference is j:DriverLicenseWaiverExemptEffectiveDate
        /// </summary>
        /// <value>A start date of the most recent variance of a medical certificate, due to a waiver or exemption. NIEM reference is j:DriverLicenseWaiverExemptEffectiveDate</value>

        [DataMember(Name="driverLicenseWaiverExemptEffectiveDate")]
        public List<NcDateType> DriverLicenseWaiverExemptEffectiveDate { get; set; }

        /// <summary>
        /// An expiration date of the most recent variance of a medical certificate, due to a commercial driver&#x27;s Skills Performance Evaluation. NIEM reference is j:DriverLicenseSkillsPerformanceEvaluationExpirationDate
        /// </summary>
        /// <value>An expiration date of the most recent variance of a medical certificate, due to a commercial driver&#x27;s Skills Performance Evaluation. NIEM reference is j:DriverLicenseSkillsPerformanceEvaluationExpirationDate</value>

        [DataMember(Name="driverLicenseSkillsPerformanceEvaluationExpirationDate")]
        public List<NcDateType> DriverLicenseSkillsPerformanceEvaluationExpirationDate { get; set; }

        /// <summary>
        /// True if the expiration date of the most recent variance of a medical certificate is indefinite; false otherwise. NIEM reference is j:DriverLicenseWaiverExemptExpirationIndefiniteIndicator
        /// </summary>
        /// <value>True if the expiration date of the most recent variance of a medical certificate is indefinite; false otherwise. NIEM reference is j:DriverLicenseWaiverExemptExpirationIndefiniteIndicator</value>

        [DataMember(Name="isDriverLicenseWaiverExemptExpirationIndefinite")]
        public List<NiemXsboolean> IsDriverLicenseWaiverExemptExpirationIndefinite { get; set; }

        /// <summary>
        /// A restriction imposed on a commercial driver by a medical examiner. NIEM reference is j:DriverLicenseMedicalCertificationRestrictionCode
        /// </summary>
        /// <value>A restriction imposed on a commercial driver by a medical examiner. NIEM reference is j:DriverLicenseMedicalCertificationRestrictionCode</value>

        [DataMember(Name="restrictionCode")]
        public List<AamvaD20DriverLicenseMedicalCertificationRestrictionCodeType> RestrictionCode { get; set; }

        /// <summary>
        /// An indication of the status of a driver&#x27;s medical certification. NIEM reference is j:DriverLicenseMedicalCertificationStatusCode
        /// </summary>
        /// <value>An indication of the status of a driver&#x27;s medical certification. NIEM reference is j:DriverLicenseMedicalCertificationStatusCode</value>

        [DataMember(Name="statusCode")]
        public List<AamvaD20DriverLicenseMedicalCertificationStatusCodeType> StatusCode { get; set; }

        /// <summary>
        /// A driver&#x27;s self certification of the commercial driver&#x27;s status regarding 49 CFR 390.3 and the type of driving. NIEM reference is j:DriverLicenseMedicalSelfCertificationCode
        /// </summary>
        /// <value>A driver&#x27;s self certification of the commercial driver&#x27;s status regarding 49 CFR 390.3 and the type of driving. NIEM reference is j:DriverLicenseMedicalSelfCertificationCode</value>

        [DataMember(Name="driverLicenseMedicalSelfCertificationCode")]
        public List<AamvaD20DriverLicenseMedicalSelfCertificationCodeType> DriverLicenseMedicalSelfCertificationCode { get; set; }

        /// <summary>
        /// jDriverLicenseMedicalCertificationType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseMedicalCertificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDriverLicenseMedicalCertificationTypeContextJsonldEnum for ../JSON-LD_Contexts/jDriverLicenseMedicalCertificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDriverLicenseMedicalCertificationTypeContext.jsonld")]
            JSONLDContextsjDriverLicenseMedicalCertificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDriverLicenseMedicalCertificationType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseMedicalCertificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDriverLicenseMedicalCertificationType {\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  DriverLicenseSkillsPerformanceEvaluationEffectiveDate: ").Append(DriverLicenseSkillsPerformanceEvaluationEffectiveDate).Append("\n");
            sb.Append("  DriverLicenseWaiverExemptExpirationDate: ").Append(DriverLicenseWaiverExemptExpirationDate).Append("\n");
            sb.Append("  DriverLicenseWaiverExemptEffectiveDate: ").Append(DriverLicenseWaiverExemptEffectiveDate).Append("\n");
            sb.Append("  DriverLicenseSkillsPerformanceEvaluationExpirationDate: ").Append(DriverLicenseSkillsPerformanceEvaluationExpirationDate).Append("\n");
            sb.Append("  IsDriverLicenseWaiverExemptExpirationIndefinite: ").Append(IsDriverLicenseWaiverExemptExpirationIndefinite).Append("\n");
            sb.Append("  RestrictionCode: ").Append(RestrictionCode).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  DriverLicenseMedicalSelfCertificationCode: ").Append(DriverLicenseMedicalSelfCertificationCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDriverLicenseMedicalCertificationType)obj);
        }

        /// <summary>
        /// Returns true if JDriverLicenseMedicalCertificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDriverLicenseMedicalCertificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDriverLicenseMedicalCertificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IssueDate == other.IssueDate ||
                    IssueDate != null &&
                    IssueDate.SequenceEqual(other.IssueDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    DriverLicenseSkillsPerformanceEvaluationEffectiveDate == other.DriverLicenseSkillsPerformanceEvaluationEffectiveDate ||
                    DriverLicenseSkillsPerformanceEvaluationEffectiveDate != null &&
                    DriverLicenseSkillsPerformanceEvaluationEffectiveDate.SequenceEqual(other.DriverLicenseSkillsPerformanceEvaluationEffectiveDate)
                ) && 
                (
                    DriverLicenseWaiverExemptExpirationDate == other.DriverLicenseWaiverExemptExpirationDate ||
                    DriverLicenseWaiverExemptExpirationDate != null &&
                    DriverLicenseWaiverExemptExpirationDate.SequenceEqual(other.DriverLicenseWaiverExemptExpirationDate)
                ) && 
                (
                    DriverLicenseWaiverExemptEffectiveDate == other.DriverLicenseWaiverExemptEffectiveDate ||
                    DriverLicenseWaiverExemptEffectiveDate != null &&
                    DriverLicenseWaiverExemptEffectiveDate.SequenceEqual(other.DriverLicenseWaiverExemptEffectiveDate)
                ) && 
                (
                    DriverLicenseSkillsPerformanceEvaluationExpirationDate == other.DriverLicenseSkillsPerformanceEvaluationExpirationDate ||
                    DriverLicenseSkillsPerformanceEvaluationExpirationDate != null &&
                    DriverLicenseSkillsPerformanceEvaluationExpirationDate.SequenceEqual(other.DriverLicenseSkillsPerformanceEvaluationExpirationDate)
                ) && 
                (
                    IsDriverLicenseWaiverExemptExpirationIndefinite == other.IsDriverLicenseWaiverExemptExpirationIndefinite ||
                    IsDriverLicenseWaiverExemptExpirationIndefinite != null &&
                    IsDriverLicenseWaiverExemptExpirationIndefinite.SequenceEqual(other.IsDriverLicenseWaiverExemptExpirationIndefinite)
                ) && 
                (
                    RestrictionCode == other.RestrictionCode ||
                    RestrictionCode != null &&
                    RestrictionCode.SequenceEqual(other.RestrictionCode)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.SequenceEqual(other.StatusCode)
                ) && 
                (
                    DriverLicenseMedicalSelfCertificationCode == other.DriverLicenseMedicalSelfCertificationCode ||
                    DriverLicenseMedicalSelfCertificationCode != null &&
                    DriverLicenseMedicalSelfCertificationCode.SequenceEqual(other.DriverLicenseMedicalSelfCertificationCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IssueDate != null)
                    hashCode = hashCode * 59 + IssueDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (DriverLicenseSkillsPerformanceEvaluationEffectiveDate != null)
                    hashCode = hashCode * 59 + DriverLicenseSkillsPerformanceEvaluationEffectiveDate.GetHashCode();
                    if (DriverLicenseWaiverExemptExpirationDate != null)
                    hashCode = hashCode * 59 + DriverLicenseWaiverExemptExpirationDate.GetHashCode();
                    if (DriverLicenseWaiverExemptEffectiveDate != null)
                    hashCode = hashCode * 59 + DriverLicenseWaiverExemptEffectiveDate.GetHashCode();
                    if (DriverLicenseSkillsPerformanceEvaluationExpirationDate != null)
                    hashCode = hashCode * 59 + DriverLicenseSkillsPerformanceEvaluationExpirationDate.GetHashCode();
                    if (IsDriverLicenseWaiverExemptExpirationIndefinite != null)
                    hashCode = hashCode * 59 + IsDriverLicenseWaiverExemptExpirationIndefinite.GetHashCode();
                    if (RestrictionCode != null)
                    hashCode = hashCode * 59 + RestrictionCode.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (DriverLicenseMedicalSelfCertificationCode != null)
                    hashCode = hashCode * 59 + DriverLicenseMedicalSelfCertificationCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDriverLicenseMedicalCertificationType left, JDriverLicenseMedicalCertificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDriverLicenseMedicalCertificationType left, JDriverLicenseMedicalCertificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
