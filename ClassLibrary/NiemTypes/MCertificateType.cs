/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an official or government-issued certificate or license.
    /// </summary>
    [DataContract]
    public partial class MCertificateType : NcDocumentType, IEquatable<MCertificateType>
    { 
        /// <summary>
        /// An endorsement, qualification, or rating listed on a certificate which authorizes the performance of certain duties or actions. NIEM reference is m:CertificateEndorsementText
        /// </summary>
        /// <value>An endorsement, qualification, or rating listed on a certificate which authorizes the performance of certain duties or actions. NIEM reference is m:CertificateEndorsementText</value>

        [DataMember(Name="endorsement")]
        public List<NcTextType> Endorsement { get; set; }

        /// <summary>
        /// A date when a certificate was issued. NIEM reference is m:CertificateIssueDate
        /// </summary>
        /// <value>A date when a certificate was issued. NIEM reference is m:CertificateIssueDate</value>

        [DataMember(Name="issueDate")]
        public List<NcDateType> IssueDate { get; set; }

        /// <summary>
        /// An agency or organization that issued a certificate. NIEM reference is m:CertificateIssuingAgency
        /// </summary>
        /// <value>An agency or organization that issued a certificate. NIEM reference is m:CertificateIssuingAgency</value>

        [DataMember(Name="issuingAgency")]
        public List<NcEntityType> IssuingAgency { get; set; }

        /// <summary>
        /// A description of locations or regions for which a certificate is valid or appropriate. NIEM reference is m:CertificateJurisdiction
        /// </summary>
        /// <value>A description of locations or regions for which a certificate is valid or appropriate. NIEM reference is m:CertificateJurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public List<NcJurisdictionType> Jurisdiction { get; set; }

        /// <summary>
        /// A restriction on a certificate. NIEM reference is m:CertificateRestrictionText
        /// </summary>
        /// <value>A restriction on a certificate. NIEM reference is m:CertificateRestrictionText</value>

        [DataMember(Name="restriction")]
        public List<NcTextType> Restriction { get; set; }

        /// <summary>
        /// mCertificateType JSON-LD context
        /// </summary>
        /// <value>mCertificateType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmCertificateTypeContextJsonldEnum for ../JSON-LD_Contexts/mCertificateTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mCertificateTypeContext.jsonld")]
            JSONLDContextsmCertificateTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mCertificateType JSON-LD context
        /// </summary>
        /// <value>mCertificateType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MCertificateType {\n");
            sb.Append("  Endorsement: ").Append(Endorsement).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  IssuingAgency: ").Append(IssuingAgency).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MCertificateType)obj);
        }

        /// <summary>
        /// Returns true if MCertificateType instances are equal
        /// </summary>
        /// <param name="other">Instance of MCertificateType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MCertificateType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Endorsement == other.Endorsement ||
                    Endorsement != null &&
                    Endorsement.SequenceEqual(other.Endorsement)
                ) && 
                (
                    IssueDate == other.IssueDate ||
                    IssueDate != null &&
                    IssueDate.SequenceEqual(other.IssueDate)
                ) && 
                (
                    IssuingAgency == other.IssuingAgency ||
                    IssuingAgency != null &&
                    IssuingAgency.SequenceEqual(other.IssuingAgency)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.SequenceEqual(other.Jurisdiction)
                ) && 
                (
                    Restriction == other.Restriction ||
                    Restriction != null &&
                    Restriction.SequenceEqual(other.Restriction)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Endorsement != null)
                    hashCode = hashCode * 59 + Endorsement.GetHashCode();
                    if (IssueDate != null)
                    hashCode = hashCode * 59 + IssueDate.GetHashCode();
                    if (IssuingAgency != null)
                    hashCode = hashCode * 59 + IssuingAgency.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (Restriction != null)
                    hashCode = hashCode * 59 + Restriction.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MCertificateType left, MCertificateType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MCertificateType left, MCertificateType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
