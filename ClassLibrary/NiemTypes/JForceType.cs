/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details of a force used, whether physical or aided by a tool or weapon.
    /// </summary>
    [DataContract]
    public partial class JForceType : NcActivityType, IEquatable<JForceType>
    { 
        /// <summary>
        /// A description of a kind of applied force. NIEM reference is j:ForceDescriptionText
        /// </summary>
        /// <value>A description of a kind of applied force. NIEM reference is j:ForceDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A kind of other force. NIEM reference is j:ForceOtherForceCategoryText
        /// </summary>
        /// <value>A kind of other force. NIEM reference is j:ForceOtherForceCategoryText</value>

        [DataMember(Name="otherForceCategory")]
        public List<NcTextType> OtherForceCategory { get; set; }

        /// <summary>
        /// A number of shots fired which were determined to have been effective. NIEM reference is j:ForceEffectiveShotsQuantity
        /// </summary>
        /// <value>A number of shots fired which were determined to have been effective. NIEM reference is j:ForceEffectiveShotsQuantity</value>

        [DataMember(Name="effectiveShotsQuantity")]
        public List<NcQuantityType> EffectiveShotsQuantity { get; set; }

        /// <summary>
        /// A number of shots fired as warning shots. NIEM reference is j:ForceWarningShotsQuantity
        /// </summary>
        /// <value>A number of shots fired as warning shots. NIEM reference is j:ForceWarningShotsQuantity</value>

        [DataMember(Name="warningShotsQuantity")]
        public List<NcQuantityType> WarningShotsQuantity { get; set; }

        /// <summary>
        /// A total number of shots fired from firearm(s). NIEM reference is j:ForceShotsFiredQuantity
        /// </summary>
        /// <value>A total number of shots fired from firearm(s). NIEM reference is j:ForceShotsFiredQuantity</value>

        [DataMember(Name="shotsFiredQuantity")]
        public List<NcQuantityType> ShotsFiredQuantity { get; set; }

        /// <summary>
        /// A maximum number of rounds for a firearm. NIEM reference is j:ForceRoundsQuantity
        /// </summary>
        /// <value>A maximum number of rounds for a firearm. NIEM reference is j:ForceRoundsQuantity</value>

        [DataMember(Name="roundsQuantity")]
        public List<NcQuantityType> RoundsQuantity { get; set; }

        /// <summary>
        /// A description of the physical force a person used against another person. NIEM reference is j:ForcePhysicalDescriptionText
        /// </summary>
        /// <value>A description of the physical force a person used against another person. NIEM reference is j:ForcePhysicalDescriptionText</value>

        [DataMember(Name="physicalDescription")]
        public List<NcTextType> PhysicalDescription { get; set; }

        /// <summary>
        /// A number of times an applied force type was used. NIEM reference is j:ForceNumberOfTimesUsedQuantity
        /// </summary>
        /// <value>A number of times an applied force type was used. NIEM reference is j:ForceNumberOfTimesUsedQuantity</value>

        [DataMember(Name="numberOfTimesUsedQuantity")]
        public List<NcQuantityType> NumberOfTimesUsedQuantity { get; set; }

        /// <summary>
        /// A person who used force against another. NIEM reference is j:ForceSubject
        /// </summary>
        /// <value>A person who used force against another. NIEM reference is j:ForceSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// An evidence taken in an incident when specifically a tool or weapon was used. NIEM reference is j:ForceTakenAsEvidence
        /// </summary>
        /// <value>An evidence taken in an incident when specifically a tool or weapon was used. NIEM reference is j:ForceTakenAsEvidence</value>

        [DataMember(Name="takenAsEvidence")]
        public List<JEvidenceType> TakenAsEvidence { get; set; }

        /// <summary>
        /// A tool used to apply force to a person. NIEM reference is j:ForceToolItem
        /// </summary>
        /// <value>A tool used to apply force to a person. NIEM reference is j:ForceToolItem</value>

        [DataMember(Name="toolItem")]
        public List<NcItemType> ToolItem { get; set; }

        /// <summary>
        /// A kind of force used. NIEM reference is j:ForceCategoryCode
        /// </summary>
        /// <value>A kind of force used. NIEM reference is j:ForceCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<UcrForceCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of force used, which may be physical or aided by a weapon or tool. NIEM reference is j:ForceCategoryText
        /// </summary>
        /// <value>A kind of force used, which may be physical or aided by a weapon or tool. NIEM reference is j:ForceCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// An entity which used particular force/tool/weapon. NIEM reference is j:ForceUserEntity
        /// </summary>
        /// <value>An entity which used particular force/tool/weapon. NIEM reference is j:ForceUserEntity</value>

        [DataMember(Name="userEntity")]
        public List<NcEntityType> UserEntity { get; set; }

        /// <summary>
        /// A person who was a victim of force. NIEM reference is j:ForceVictim
        /// </summary>
        /// <value>A person who was a victim of force. NIEM reference is j:ForceVictim</value>

        [DataMember(Name="victim")]
        public List<JVictimType> Victim { get; set; }

        /// <summary>
        /// A weapon used to apply force to a person. NIEM reference is j:ForceWeaponItem
        /// </summary>
        /// <value>A weapon used to apply force to a person. NIEM reference is j:ForceWeaponItem</value>

        [DataMember(Name="weaponItem")]
        public List<NcItemType> WeaponItem { get; set; }

        /// <summary>
        /// jForceType JSON-LD context
        /// </summary>
        /// <value>jForceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjForceTypeContextJsonldEnum for ../JSON-LD_Contexts/jForceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jForceTypeContext.jsonld")]
            JSONLDContextsjForceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jForceType JSON-LD context
        /// </summary>
        /// <value>jForceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JForceType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  OtherForceCategory: ").Append(OtherForceCategory).Append("\n");
            sb.Append("  EffectiveShotsQuantity: ").Append(EffectiveShotsQuantity).Append("\n");
            sb.Append("  WarningShotsQuantity: ").Append(WarningShotsQuantity).Append("\n");
            sb.Append("  ShotsFiredQuantity: ").Append(ShotsFiredQuantity).Append("\n");
            sb.Append("  RoundsQuantity: ").Append(RoundsQuantity).Append("\n");
            sb.Append("  PhysicalDescription: ").Append(PhysicalDescription).Append("\n");
            sb.Append("  NumberOfTimesUsedQuantity: ").Append(NumberOfTimesUsedQuantity).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TakenAsEvidence: ").Append(TakenAsEvidence).Append("\n");
            sb.Append("  ToolItem: ").Append(ToolItem).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  UserEntity: ").Append(UserEntity).Append("\n");
            sb.Append("  Victim: ").Append(Victim).Append("\n");
            sb.Append("  WeaponItem: ").Append(WeaponItem).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JForceType)obj);
        }

        /// <summary>
        /// Returns true if JForceType instances are equal
        /// </summary>
        /// <param name="other">Instance of JForceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JForceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    OtherForceCategory == other.OtherForceCategory ||
                    OtherForceCategory != null &&
                    OtherForceCategory.SequenceEqual(other.OtherForceCategory)
                ) && 
                (
                    EffectiveShotsQuantity == other.EffectiveShotsQuantity ||
                    EffectiveShotsQuantity != null &&
                    EffectiveShotsQuantity.SequenceEqual(other.EffectiveShotsQuantity)
                ) && 
                (
                    WarningShotsQuantity == other.WarningShotsQuantity ||
                    WarningShotsQuantity != null &&
                    WarningShotsQuantity.SequenceEqual(other.WarningShotsQuantity)
                ) && 
                (
                    ShotsFiredQuantity == other.ShotsFiredQuantity ||
                    ShotsFiredQuantity != null &&
                    ShotsFiredQuantity.SequenceEqual(other.ShotsFiredQuantity)
                ) && 
                (
                    RoundsQuantity == other.RoundsQuantity ||
                    RoundsQuantity != null &&
                    RoundsQuantity.SequenceEqual(other.RoundsQuantity)
                ) && 
                (
                    PhysicalDescription == other.PhysicalDescription ||
                    PhysicalDescription != null &&
                    PhysicalDescription.SequenceEqual(other.PhysicalDescription)
                ) && 
                (
                    NumberOfTimesUsedQuantity == other.NumberOfTimesUsedQuantity ||
                    NumberOfTimesUsedQuantity != null &&
                    NumberOfTimesUsedQuantity.SequenceEqual(other.NumberOfTimesUsedQuantity)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    TakenAsEvidence == other.TakenAsEvidence ||
                    TakenAsEvidence != null &&
                    TakenAsEvidence.SequenceEqual(other.TakenAsEvidence)
                ) && 
                (
                    ToolItem == other.ToolItem ||
                    ToolItem != null &&
                    ToolItem.SequenceEqual(other.ToolItem)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    UserEntity == other.UserEntity ||
                    UserEntity != null &&
                    UserEntity.SequenceEqual(other.UserEntity)
                ) && 
                (
                    Victim == other.Victim ||
                    Victim != null &&
                    Victim.SequenceEqual(other.Victim)
                ) && 
                (
                    WeaponItem == other.WeaponItem ||
                    WeaponItem != null &&
                    WeaponItem.SequenceEqual(other.WeaponItem)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (OtherForceCategory != null)
                    hashCode = hashCode * 59 + OtherForceCategory.GetHashCode();
                    if (EffectiveShotsQuantity != null)
                    hashCode = hashCode * 59 + EffectiveShotsQuantity.GetHashCode();
                    if (WarningShotsQuantity != null)
                    hashCode = hashCode * 59 + WarningShotsQuantity.GetHashCode();
                    if (ShotsFiredQuantity != null)
                    hashCode = hashCode * 59 + ShotsFiredQuantity.GetHashCode();
                    if (RoundsQuantity != null)
                    hashCode = hashCode * 59 + RoundsQuantity.GetHashCode();
                    if (PhysicalDescription != null)
                    hashCode = hashCode * 59 + PhysicalDescription.GetHashCode();
                    if (NumberOfTimesUsedQuantity != null)
                    hashCode = hashCode * 59 + NumberOfTimesUsedQuantity.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (TakenAsEvidence != null)
                    hashCode = hashCode * 59 + TakenAsEvidence.GetHashCode();
                    if (ToolItem != null)
                    hashCode = hashCode * 59 + ToolItem.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (UserEntity != null)
                    hashCode = hashCode * 59 + UserEntity.GetHashCode();
                    if (Victim != null)
                    hashCode = hashCode * 59 + Victim.GetHashCode();
                    if (WeaponItem != null)
                    hashCode = hashCode * 59 + WeaponItem.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JForceType left, JForceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JForceType left, JForceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
