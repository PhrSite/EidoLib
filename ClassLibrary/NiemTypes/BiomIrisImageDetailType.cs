/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details about a Type-17 iris image record
    /// </summary>
    [DataContract]
    public partial class BiomIrisImageDetailType : BiomImageType, IEquatable<BiomIrisImageDetailType>
    { 
        /// <summary>
        /// A designator of which eye is represented by the image NIEM reference is biom:IrisEyePositionCode
        /// </summary>
        /// <value>A designator of which eye is represented by the image NIEM reference is biom:IrisEyePositionCode</value>

        [DataMember(Name="irisEyePositionCode")]
        public List<BiomEyePositionCodeType> IrisEyePositionCode { get; set; }

        /// <summary>
        /// A data of which to represent Iris Eye Position image data is missing NIEM reference is biom:IrisImageMissing
        /// </summary>
        /// <value>A data of which to represent Iris Eye Position image data is missing NIEM reference is biom:IrisImageMissing</value>

        [DataMember(Name="irisImageMissing")]
        public List<BiomIrisImageMissingType> IrisImageMissing { get; set; }

        /// <summary>
        /// A reason for a missing iris image NIEM reference is biom:IrisImageMissingReasonCode
        /// </summary>
        /// <value>A reason for a missing iris image NIEM reference is biom:IrisImageMissingReasonCode</value>

        [DataMember(Name="irisImageMissingReasonCode")]
        public List<BiomIrisImageMissingReasonCodeType> IrisImageMissingReasonCode { get; set; }

        /// <summary>
        /// An optional field states the method used for determining the pixel density of the image. NIEM reference is biom:ResolutionMethodInformation
        /// </summary>
        /// <value>An optional field states the method used for determining the pixel density of the image. NIEM reference is biom:ResolutionMethodInformation</value>

        [DataMember(Name="resolutionMethodInformation")]
        public List<BiomResolutionMethodInformationType> ResolutionMethodInformation { get; set; }

        /// <summary>
        /// A rotation angle of an image NIEM reference is biom:IrisEyeRotationAngleValue
        /// </summary>
        /// <value>A rotation angle of an image NIEM reference is biom:IrisEyeRotationAngleValue</value>

        [DataMember(Name="irisEyeRotationAngleValue")]
        public List<BiomHexDoubleByteType> IrisEyeRotationAngleValue { get; set; }

        /// <summary>
        /// An image rotation uncertainty NIEM reference is biom:IrisEyeRotationUncertaintyValue
        /// </summary>
        /// <value>An image rotation uncertainty NIEM reference is biom:IrisEyeRotationUncertaintyValue</value>

        [DataMember(Name="irisEyeRotationUncertaintyValue")]
        public List<BiomHexDoubleByteType> IrisEyeRotationUncertaintyValue { get; set; }

        /// <summary>
        /// An iris image capture NIEM reference is biom:IrisImageCapture
        /// </summary>
        /// <value>An iris image capture NIEM reference is biom:IrisImageCapture</value>

        [DataMember(Name="irisImageCapture")]
        public List<BiomIrisImageCaptureType> IrisImageCapture { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode</value>

        [DataMember(Name="personEyeColorCode")]
        public List<NcicEYECodeType> PersonEyeColorCode { get; set; }

        /// <summary>
        /// A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode</value>

        [DataMember(Name="personEyeColorRapSheetCode")]
        public List<JPersonEyeColorCodeType> PersonEyeColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText</value>

        [DataMember(Name="personEyeColor")]
        public List<NcTextType> PersonEyeColor { get; set; }

        /// <summary>
        /// A lighting spectrum used in capturing an iris image NIEM reference is biom:IrisImageAcquisitionLightingSpectrum
        /// </summary>
        /// <value>A lighting spectrum used in capturing an iris image NIEM reference is biom:IrisImageAcquisitionLightingSpectrum</value>

        [DataMember(Name="irisImageAcquisitionLightingSpectrum")]
        public List<BiomAcquisitionLightingSpectrumType> IrisImageAcquisitionLightingSpectrum { get; set; }

        /// <summary>
        /// A number of pixels in the diameter of an iris NIEM reference is biom:IrisDiameterPixelQuantity
        /// </summary>
        /// <value>A number of pixels in the diameter of an iris NIEM reference is biom:IrisDiameterPixelQuantity</value>

        [DataMember(Name="irisDiameterPixelQuantity")]
        public List<BiomInteger1to9999Type> IrisDiameterPixelQuantity { get; set; }

        /// <summary>
        /// A set of criteria under which the iris image was captured NIEM reference is biom:IrisImageAcquisitionProfileCode
        /// </summary>
        /// <value>A set of criteria under which the iris image was captured NIEM reference is biom:IrisImageAcquisitionProfileCode</value>

        [DataMember(Name="irisImageAcquisitionProfileCode")]
        public List<BiomIrisImageAcquisitionProfileCodeType> IrisImageAcquisitionProfileCode { get; set; }

        /// <summary>
        /// A data type for a storage format used for this iris image NIEM reference is biom:IrisImageStorageFormatCode
        /// </summary>
        /// <value>A data type for a storage format used for this iris image NIEM reference is biom:IrisImageStorageFormatCode</value>

        [DataMember(Name="irisImageStorageFormatCode")]
        public List<BiomIrisImageStorageFormatCodeType> IrisImageStorageFormatCode { get; set; }

        /// <summary>
        /// An iris-pupil boundary in an iris image NIEM reference is biom:IrisImageIrisPupilBoundary
        /// </summary>
        /// <value>An iris-pupil boundary in an iris image NIEM reference is biom:IrisImageIrisPupilBoundary</value>

        [DataMember(Name="irisImageIrisPupilBoundary")]
        public List<BiomIrisImageIrisBoundaryType> IrisImageIrisPupilBoundary { get; set; }

        /// <summary>
        /// An iris-sclera boundary in an iris image NIEM reference is biom:IrisImageIrisScleraBoundary
        /// </summary>
        /// <value>An iris-sclera boundary in an iris image NIEM reference is biom:IrisImageIrisScleraBoundary</value>

        [DataMember(Name="irisImageIrisScleraBoundary")]
        public List<BiomIrisImageIrisBoundaryType> IrisImageIrisScleraBoundary { get; set; }

        /// <summary>
        /// An iris-upper eyelid boundary in an iris image NIEM reference is biom:IrisImageIrisUpperEyelidBoundary
        /// </summary>
        /// <value>An iris-upper eyelid boundary in an iris image NIEM reference is biom:IrisImageIrisUpperEyelidBoundary</value>

        [DataMember(Name="irisImageIrisUpperEyelidBoundary")]
        public List<BiomIrisImageIrisBoundaryType> IrisImageIrisUpperEyelidBoundary { get; set; }

        /// <summary>
        /// An iris-lower eyelid boundary in an iris image NIEM reference is biom:IrisImageIrisLowerEyelidBoundary
        /// </summary>
        /// <value>An iris-lower eyelid boundary in an iris image NIEM reference is biom:IrisImageIrisLowerEyelidBoundary</value>

        [DataMember(Name="irisImageIrisLowerEyelidBoundary")]
        public List<BiomIrisImageIrisBoundaryType> IrisImageIrisLowerEyelidBoundary { get; set; }

        /// <summary>
        /// A blockage in an iris image NIEM reference is biom:IrisImageOcclusion
        /// </summary>
        /// <value>A blockage in an iris image NIEM reference is biom:IrisImageOcclusion</value>

        [DataMember(Name="irisImageOcclusion")]
        public List<BiomIrisImageOcclusionType> IrisImageOcclusion { get; set; }

        /// <summary>
        /// An estimated distance in centimeters from the camera to the iris for this iris image NIEM reference is biom:IrisImageRangeMeasure
        /// </summary>
        /// <value>An estimated distance in centimeters from the camera to the iris for this iris image NIEM reference is biom:IrisImageRangeMeasure</value>

        [DataMember(Name="irisImageRangeMeasure")]
        public List<NiemXspositiveInteger> IrisImageRangeMeasure { get; set; }

        /// <summary>
        /// An angular extent (off front angle) in degrees imaged by the camera for this iris image NIEM reference is biom:IrisImageGazeAngleMeasure
        /// </summary>
        /// <value>An angular extent (off front angle) in degrees imaged by the camera for this iris image NIEM reference is biom:IrisImageGazeAngleMeasure</value>

        [DataMember(Name="irisImageGazeAngleMeasure")]
        public List<BiomInteger0to99Type> IrisImageGazeAngleMeasure { get; set; }

        /// <summary>
        /// biomIrisImageDetailType JSON-LD context
        /// </summary>
        /// <value>biomIrisImageDetailType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomIrisImageDetailTypeContextJsonldEnum for ../JSON-LD_Contexts/biomIrisImageDetailTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomIrisImageDetailTypeContext.jsonld")]
            JSONLDContextsbiomIrisImageDetailTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomIrisImageDetailType JSON-LD context
        /// </summary>
        /// <value>biomIrisImageDetailType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomIrisImageDetailType {\n");
            sb.Append("  IrisEyePositionCode: ").Append(IrisEyePositionCode).Append("\n");
            sb.Append("  IrisImageMissing: ").Append(IrisImageMissing).Append("\n");
            sb.Append("  IrisImageMissingReasonCode: ").Append(IrisImageMissingReasonCode).Append("\n");
            sb.Append("  ResolutionMethodInformation: ").Append(ResolutionMethodInformation).Append("\n");
            sb.Append("  IrisEyeRotationAngleValue: ").Append(IrisEyeRotationAngleValue).Append("\n");
            sb.Append("  IrisEyeRotationUncertaintyValue: ").Append(IrisEyeRotationUncertaintyValue).Append("\n");
            sb.Append("  IrisImageCapture: ").Append(IrisImageCapture).Append("\n");
            sb.Append("  PersonEyeColorCode: ").Append(PersonEyeColorCode).Append("\n");
            sb.Append("  PersonEyeColorRapSheetCode: ").Append(PersonEyeColorRapSheetCode).Append("\n");
            sb.Append("  PersonEyeColor: ").Append(PersonEyeColor).Append("\n");
            sb.Append("  IrisImageAcquisitionLightingSpectrum: ").Append(IrisImageAcquisitionLightingSpectrum).Append("\n");
            sb.Append("  IrisDiameterPixelQuantity: ").Append(IrisDiameterPixelQuantity).Append("\n");
            sb.Append("  IrisImageAcquisitionProfileCode: ").Append(IrisImageAcquisitionProfileCode).Append("\n");
            sb.Append("  IrisImageStorageFormatCode: ").Append(IrisImageStorageFormatCode).Append("\n");
            sb.Append("  IrisImageIrisPupilBoundary: ").Append(IrisImageIrisPupilBoundary).Append("\n");
            sb.Append("  IrisImageIrisScleraBoundary: ").Append(IrisImageIrisScleraBoundary).Append("\n");
            sb.Append("  IrisImageIrisUpperEyelidBoundary: ").Append(IrisImageIrisUpperEyelidBoundary).Append("\n");
            sb.Append("  IrisImageIrisLowerEyelidBoundary: ").Append(IrisImageIrisLowerEyelidBoundary).Append("\n");
            sb.Append("  IrisImageOcclusion: ").Append(IrisImageOcclusion).Append("\n");
            sb.Append("  IrisImageRangeMeasure: ").Append(IrisImageRangeMeasure).Append("\n");
            sb.Append("  IrisImageGazeAngleMeasure: ").Append(IrisImageGazeAngleMeasure).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomIrisImageDetailType)obj);
        }

        /// <summary>
        /// Returns true if BiomIrisImageDetailType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomIrisImageDetailType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomIrisImageDetailType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IrisEyePositionCode == other.IrisEyePositionCode ||
                    IrisEyePositionCode != null &&
                    IrisEyePositionCode.SequenceEqual(other.IrisEyePositionCode)
                ) && 
                (
                    IrisImageMissing == other.IrisImageMissing ||
                    IrisImageMissing != null &&
                    IrisImageMissing.SequenceEqual(other.IrisImageMissing)
                ) && 
                (
                    IrisImageMissingReasonCode == other.IrisImageMissingReasonCode ||
                    IrisImageMissingReasonCode != null &&
                    IrisImageMissingReasonCode.SequenceEqual(other.IrisImageMissingReasonCode)
                ) && 
                (
                    ResolutionMethodInformation == other.ResolutionMethodInformation ||
                    ResolutionMethodInformation != null &&
                    ResolutionMethodInformation.SequenceEqual(other.ResolutionMethodInformation)
                ) && 
                (
                    IrisEyeRotationAngleValue == other.IrisEyeRotationAngleValue ||
                    IrisEyeRotationAngleValue != null &&
                    IrisEyeRotationAngleValue.SequenceEqual(other.IrisEyeRotationAngleValue)
                ) && 
                (
                    IrisEyeRotationUncertaintyValue == other.IrisEyeRotationUncertaintyValue ||
                    IrisEyeRotationUncertaintyValue != null &&
                    IrisEyeRotationUncertaintyValue.SequenceEqual(other.IrisEyeRotationUncertaintyValue)
                ) && 
                (
                    IrisImageCapture == other.IrisImageCapture ||
                    IrisImageCapture != null &&
                    IrisImageCapture.SequenceEqual(other.IrisImageCapture)
                ) && 
                (
                    PersonEyeColorCode == other.PersonEyeColorCode ||
                    PersonEyeColorCode != null &&
                    PersonEyeColorCode.SequenceEqual(other.PersonEyeColorCode)
                ) && 
                (
                    PersonEyeColorRapSheetCode == other.PersonEyeColorRapSheetCode ||
                    PersonEyeColorRapSheetCode != null &&
                    PersonEyeColorRapSheetCode.SequenceEqual(other.PersonEyeColorRapSheetCode)
                ) && 
                (
                    PersonEyeColor == other.PersonEyeColor ||
                    PersonEyeColor != null &&
                    PersonEyeColor.SequenceEqual(other.PersonEyeColor)
                ) && 
                (
                    IrisImageAcquisitionLightingSpectrum == other.IrisImageAcquisitionLightingSpectrum ||
                    IrisImageAcquisitionLightingSpectrum != null &&
                    IrisImageAcquisitionLightingSpectrum.SequenceEqual(other.IrisImageAcquisitionLightingSpectrum)
                ) && 
                (
                    IrisDiameterPixelQuantity == other.IrisDiameterPixelQuantity ||
                    IrisDiameterPixelQuantity != null &&
                    IrisDiameterPixelQuantity.SequenceEqual(other.IrisDiameterPixelQuantity)
                ) && 
                (
                    IrisImageAcquisitionProfileCode == other.IrisImageAcquisitionProfileCode ||
                    IrisImageAcquisitionProfileCode != null &&
                    IrisImageAcquisitionProfileCode.SequenceEqual(other.IrisImageAcquisitionProfileCode)
                ) && 
                (
                    IrisImageStorageFormatCode == other.IrisImageStorageFormatCode ||
                    IrisImageStorageFormatCode != null &&
                    IrisImageStorageFormatCode.SequenceEqual(other.IrisImageStorageFormatCode)
                ) && 
                (
                    IrisImageIrisPupilBoundary == other.IrisImageIrisPupilBoundary ||
                    IrisImageIrisPupilBoundary != null &&
                    IrisImageIrisPupilBoundary.SequenceEqual(other.IrisImageIrisPupilBoundary)
                ) && 
                (
                    IrisImageIrisScleraBoundary == other.IrisImageIrisScleraBoundary ||
                    IrisImageIrisScleraBoundary != null &&
                    IrisImageIrisScleraBoundary.SequenceEqual(other.IrisImageIrisScleraBoundary)
                ) && 
                (
                    IrisImageIrisUpperEyelidBoundary == other.IrisImageIrisUpperEyelidBoundary ||
                    IrisImageIrisUpperEyelidBoundary != null &&
                    IrisImageIrisUpperEyelidBoundary.SequenceEqual(other.IrisImageIrisUpperEyelidBoundary)
                ) && 
                (
                    IrisImageIrisLowerEyelidBoundary == other.IrisImageIrisLowerEyelidBoundary ||
                    IrisImageIrisLowerEyelidBoundary != null &&
                    IrisImageIrisLowerEyelidBoundary.SequenceEqual(other.IrisImageIrisLowerEyelidBoundary)
                ) && 
                (
                    IrisImageOcclusion == other.IrisImageOcclusion ||
                    IrisImageOcclusion != null &&
                    IrisImageOcclusion.SequenceEqual(other.IrisImageOcclusion)
                ) && 
                (
                    IrisImageRangeMeasure == other.IrisImageRangeMeasure ||
                    IrisImageRangeMeasure != null &&
                    IrisImageRangeMeasure.SequenceEqual(other.IrisImageRangeMeasure)
                ) && 
                (
                    IrisImageGazeAngleMeasure == other.IrisImageGazeAngleMeasure ||
                    IrisImageGazeAngleMeasure != null &&
                    IrisImageGazeAngleMeasure.SequenceEqual(other.IrisImageGazeAngleMeasure)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IrisEyePositionCode != null)
                    hashCode = hashCode * 59 + IrisEyePositionCode.GetHashCode();
                    if (IrisImageMissing != null)
                    hashCode = hashCode * 59 + IrisImageMissing.GetHashCode();
                    if (IrisImageMissingReasonCode != null)
                    hashCode = hashCode * 59 + IrisImageMissingReasonCode.GetHashCode();
                    if (ResolutionMethodInformation != null)
                    hashCode = hashCode * 59 + ResolutionMethodInformation.GetHashCode();
                    if (IrisEyeRotationAngleValue != null)
                    hashCode = hashCode * 59 + IrisEyeRotationAngleValue.GetHashCode();
                    if (IrisEyeRotationUncertaintyValue != null)
                    hashCode = hashCode * 59 + IrisEyeRotationUncertaintyValue.GetHashCode();
                    if (IrisImageCapture != null)
                    hashCode = hashCode * 59 + IrisImageCapture.GetHashCode();
                    if (PersonEyeColorCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorCode.GetHashCode();
                    if (PersonEyeColorRapSheetCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorRapSheetCode.GetHashCode();
                    if (PersonEyeColor != null)
                    hashCode = hashCode * 59 + PersonEyeColor.GetHashCode();
                    if (IrisImageAcquisitionLightingSpectrum != null)
                    hashCode = hashCode * 59 + IrisImageAcquisitionLightingSpectrum.GetHashCode();
                    if (IrisDiameterPixelQuantity != null)
                    hashCode = hashCode * 59 + IrisDiameterPixelQuantity.GetHashCode();
                    if (IrisImageAcquisitionProfileCode != null)
                    hashCode = hashCode * 59 + IrisImageAcquisitionProfileCode.GetHashCode();
                    if (IrisImageStorageFormatCode != null)
                    hashCode = hashCode * 59 + IrisImageStorageFormatCode.GetHashCode();
                    if (IrisImageIrisPupilBoundary != null)
                    hashCode = hashCode * 59 + IrisImageIrisPupilBoundary.GetHashCode();
                    if (IrisImageIrisScleraBoundary != null)
                    hashCode = hashCode * 59 + IrisImageIrisScleraBoundary.GetHashCode();
                    if (IrisImageIrisUpperEyelidBoundary != null)
                    hashCode = hashCode * 59 + IrisImageIrisUpperEyelidBoundary.GetHashCode();
                    if (IrisImageIrisLowerEyelidBoundary != null)
                    hashCode = hashCode * 59 + IrisImageIrisLowerEyelidBoundary.GetHashCode();
                    if (IrisImageOcclusion != null)
                    hashCode = hashCode * 59 + IrisImageOcclusion.GetHashCode();
                    if (IrisImageRangeMeasure != null)
                    hashCode = hashCode * 59 + IrisImageRangeMeasure.GetHashCode();
                    if (IrisImageGazeAngleMeasure != null)
                    hashCode = hashCode * 59 + IrisImageGazeAngleMeasure.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomIrisImageDetailType left, BiomIrisImageDetailType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomIrisImageDetailType left, BiomIrisImageDetailType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
