/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a target or object against which an action is taken.
    /// </summary>
    [DataContract]
    public partial class JTargetType : IEquatable<JTargetType>
    { 
        /// <summary>
        /// A description of a target or object for which an action taken. NIEM reference is j:TargetDescriptionText
        /// </summary>
        /// <value>A description of a target or object for which an action taken. NIEM reference is j:TargetDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A location that is a target of an action. NIEM reference is j:TargetLocation
        /// </summary>
        /// <value>A location that is a target of an action. NIEM reference is j:TargetLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A name or a target or object for which an action is taken. NIEM reference is j:TargetName
        /// </summary>
        /// <value>A name or a target or object for which an action is taken. NIEM reference is j:TargetName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// An organization that is a target of an action. NIEM reference is j:TargetOrganization
        /// </summary>
        /// <value>An organization that is a target of an action. NIEM reference is j:TargetOrganization</value>

        [DataMember(Name="organization")]
        public List<NcOrganizationType> Organization { get; set; }

        /// <summary>
        /// A person that is a target of an action. NIEM reference is j:TargetPerson
        /// </summary>
        /// <value>A person that is a target of an action. NIEM reference is j:TargetPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A property item that is a target of an action. NIEM reference is j:TargetItem
        /// </summary>
        /// <value>A property item that is a target of an action. NIEM reference is j:TargetItem</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// An explanation of why a target was chosen for action. NIEM reference is j:TargetReasonText
        /// </summary>
        /// <value>An explanation of why a target was chosen for action. NIEM reference is j:TargetReasonText</value>

        [DataMember(Name="reason")]
        public List<NcTextType> Reason { get; set; }

        /// <summary>
        /// A kind of target or object for which an action is taken. NIEM reference is j:TargetCategoryText
        /// </summary>
        /// <value>A kind of target or object for which an action is taken. NIEM reference is j:TargetCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A broad categorization of the infrastructure type. NIEM reference is j:TargetSectorCode
        /// </summary>
        /// <value>A broad categorization of the infrastructure type. NIEM reference is j:TargetSectorCode</value>

        [DataMember(Name="sectorCode")]
        public List<SarTargetSectorCodeType> SectorCode { get; set; }

        /// <summary>
        /// jTargetType JSON-LD context
        /// </summary>
        /// <value>jTargetType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjTargetTypeContextJsonldEnum for ../JSON-LD_Contexts/jTargetTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jTargetTypeContext.jsonld")]
            JSONLDContextsjTargetTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jTargetType JSON-LD context
        /// </summary>
        /// <value>jTargetType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JTargetType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  SectorCode: ").Append(SectorCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JTargetType)obj);
        }

        /// <summary>
        /// Returns true if JTargetType instances are equal
        /// </summary>
        /// <param name="other">Instance of JTargetType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JTargetType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.SequenceEqual(other.Organization)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.SequenceEqual(other.Reason)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    SectorCode == other.SectorCode ||
                    SectorCode != null &&
                    SectorCode.SequenceEqual(other.SectorCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (SectorCode != null)
                    hashCode = hashCode * 59 + SectorCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JTargetType left, JTargetType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JTargetType left, JTargetType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
