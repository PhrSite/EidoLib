/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the apprehension of a subject by a peace official.
    /// </summary>
    [DataContract]
    public partial class JArrestType : NcActivityType, IEquatable<JArrestType>
    { 
        /// <summary>
        /// True if a person was under some kind of community criminal justice supervision, e.g., probation, parole, pre-trial services, day reporting, at the time of the arrest; false otherwise. NIEM reference is j:ArrestCommunitySupervisionIndicator
        /// </summary>
        /// <value>True if a person was under some kind of community criminal justice supervision, e.g., probation, parole, pre-trial services, day reporting, at the time of the arrest; false otherwise. NIEM reference is j:ArrestCommunitySupervisionIndicator</value>

        [DataMember(Name="isCommunitySupervision")]
        public List<NiemXsboolean> IsCommunitySupervision { get; set; }

        /// <summary>
        /// An agency which employs the arresting official. NIEM reference is j:ArrestAgency
        /// </summary>
        /// <value>An agency which employs the arresting official. NIEM reference is j:ArrestAgency</value>

        [DataMember(Name="agency")]
        public List<NcOrganizationType> Agency { get; set; }

        /// <summary>
        /// True if a person was under the influence of a controlled substance at the time of arrest; false otherwise. NIEM reference is j:ArrestUnderInfluenceIndicator
        /// </summary>
        /// <value>True if a person was under the influence of a controlled substance at the time of arrest; false otherwise. NIEM reference is j:ArrestUnderInfluenceIndicator</value>

        [DataMember(Name="isUnderInfluence")]
        public List<NiemXsboolean> IsUnderInfluence { get; set; }

        /// <summary>
        /// A records management system identification of the originating case agency for an arrest. NIEM reference is j:ArrestAgencyRecordIdentification
        /// </summary>
        /// <value>A records management system identification of the originating case agency for an arrest. NIEM reference is j:ArrestAgencyRecordIdentification</value>

        [DataMember(Name="agencyRecordIdentification")]
        public List<NcIdentificationType> AgencyRecordIdentification { get; set; }

        /// <summary>
        /// An order issued by a judge or the  Department of Corrections to arrest a subject for technical violation of probation, parole, supervised release or institution status. NIEM reference is j:ArrestApprehensionDetentionOrder
        /// </summary>
        /// <value>An order issued by a judge or the  Department of Corrections to arrest a subject for technical violation of probation, parole, supervised release or institution status. NIEM reference is j:ArrestApprehensionDetentionOrder</value>

        [DataMember(Name="apprehensionDetentionOrder")]
        public List<JCourtOrderType> ApprehensionDetentionOrder { get; set; }

        /// <summary>
        /// A date a subject is due to appear in court after an arrest to answer the charges filed. NIEM reference is j:ArrestArraignmentDate
        /// </summary>
        /// <value>A date a subject is due to appear in court after an arrest to answer the charges filed. NIEM reference is j:ArrestArraignmentDate</value>

        [DataMember(Name="arraignmentDate")]
        public List<NcDateType> ArraignmentDate { get; set; }

        /// <summary>
        /// A bail amount on a schedule recommended according to the offense(s). NIEM reference is j:ArrestBailRecommendationText
        /// </summary>
        /// <value>A bail amount on a schedule recommended according to the offense(s). NIEM reference is j:ArrestBailRecommendationText</value>

        [DataMember(Name="bailRecommendation")]
        public List<NcTextType> BailRecommendation { get; set; }

        /// <summary>
        /// A formal allegation of a violation of a statute and/or ordinance in association with an arrest. NIEM reference is j:ArrestCharge
        /// </summary>
        /// <value>A formal allegation of a violation of a statute and/or ordinance in association with an arrest. NIEM reference is j:ArrestCharge</value>

        [DataMember(Name="charge")]
        public List<JChargeType> Charge { get; set; }

        /// <summary>
        /// True if drugs or alcohol were involved in an arrest; false otherwise. NIEM reference is j:ArrestIntoxicantInvolvedIndicator
        /// </summary>
        /// <value>True if drugs or alcohol were involved in an arrest; false otherwise. NIEM reference is j:ArrestIntoxicantInvolvedIndicator</value>

        [DataMember(Name="isIntoxicantInvolved")]
        public List<NiemXsboolean> IsIntoxicantInvolved { get; set; }

        /// <summary>
        /// An organization associated with an arrest. NIEM reference is j:ArrestInvolvedOrganization
        /// </summary>
        /// <value>An organization associated with an arrest. NIEM reference is j:ArrestInvolvedOrganization</value>

        [DataMember(Name="involvedOrganization")]
        public List<NcOrganizationType> InvolvedOrganization { get; set; }

        /// <summary>
        /// A piece of property associated with an arrest. NIEM reference is j:ArrestInvolvedItem
        /// </summary>
        /// <value>A piece of property associated with an arrest. NIEM reference is j:ArrestInvolvedItem</value>

        [DataMember(Name="involvedItem")]
        public List<NcItemType> InvolvedItem { get; set; }

        /// <summary>
        /// A description of a weapon associated with an arrested subject. NIEM reference is j:ArrestInvolvedWeapon
        /// </summary>
        /// <value>A description of a weapon associated with an arrested subject. NIEM reference is j:ArrestInvolvedWeapon</value>

        [DataMember(Name="involvedWeapon")]
        public List<NcWeaponType> InvolvedWeapon { get; set; }

        /// <summary>
        /// A location where a subject was arrested. NIEM reference is j:ArrestLocation
        /// </summary>
        /// <value>A location where a subject was arrested. NIEM reference is j:ArrestLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A peace official who makes an arrest. NIEM reference is j:ArrestOfficial
        /// </summary>
        /// <value>A peace official who makes an arrest. NIEM reference is j:ArrestOfficial</value>

        [DataMember(Name="official")]
        public List<JEnforcementOfficialType> Official { get; set; }

        /// <summary>
        /// An observed or reported violation of a law or ordinance, which can be a sufficient cause to arrest a subject. NIEM reference is j:ArrestProbableCauseText
        /// </summary>
        /// <value>An observed or reported violation of a law or ordinance, which can be a sufficient cause to arrest a subject. NIEM reference is j:ArrestProbableCauseText</value>

        [DataMember(Name="probableCause")]
        public List<NcTextType> ProbableCause { get; set; }

        /// <summary>
        /// A release of a subject from an arrest. NIEM reference is j:ArrestRelease
        /// </summary>
        /// <value>A release of a subject from an arrest. NIEM reference is j:ArrestRelease</value>

        [DataMember(Name="release")]
        public List<NcReleaseType> Release { get; set; }

        /// <summary>
        /// True if a subject resisted arrest; false otherwise. NIEM reference is j:ArrestResistedIndicator
        /// </summary>
        /// <value>True if a subject resisted arrest; false otherwise. NIEM reference is j:ArrestResistedIndicator</value>

        [DataMember(Name="isResisted")]
        public List<NiemXsboolean> IsResisted { get; set; }

        /// <summary>
        /// A sequential identifier number assigned to the arrest of a subject. NIEM reference is j:ArrestSequenceID
        /// </summary>
        /// <value>A sequential identifier number assigned to the arrest of a subject. NIEM reference is j:ArrestSequenceID</value>

        [DataMember(Name="sequenceId")]
        public List<NiemXsstring> SequenceId { get; set; }

        /// <summary>
        /// A person who is arrested. NIEM reference is j:ArrestSubject
        /// </summary>
        /// <value>A person who is arrested. NIEM reference is j:ArrestSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// A transfer of custody or transportation of a subject from one peace official or location to another. NIEM reference is j:ArrestSubjectCustodyTransfer
        /// </summary>
        /// <value>A transfer of custody or transportation of a subject from one peace official or location to another. NIEM reference is j:ArrestSubjectCustodyTransfer</value>

        [DataMember(Name="subjectCustodyTransfer")]
        public List<JCustodyTransferType> SubjectCustodyTransfer { get; set; }

        /// <summary>
        /// True if a person&#x27;s legal rights (Miranda Rights) were read to a subject during an arrest; false otherwise. NIEM reference is j:ArrestSubjectRightsReadIndicator
        /// </summary>
        /// <value>True if a person&#x27;s legal rights (Miranda Rights) were read to a subject during an arrest; false otherwise. NIEM reference is j:ArrestSubjectRightsReadIndicator</value>

        [DataMember(Name="isSubjectRightsRead")]
        public List<NiemXsboolean> IsSubjectRightsRead { get; set; }

        /// <summary>
        /// A subject&#x27;s response after legal rights were read. NIEM reference is j:ArrestSubjectRightsReadResponseText
        /// </summary>
        /// <value>A subject&#x27;s response after legal rights were read. NIEM reference is j:ArrestSubjectRightsReadResponseText</value>

        [DataMember(Name="subjectRightsReadResponse")]
        public List<NcTextType> SubjectRightsReadResponse { get; set; }

        /// <summary>
        /// True if an arrest occurred due to a summons; false otherwise. NIEM reference is j:ArrestSummonsIndicator
        /// </summary>
        /// <value>True if an arrest occurred due to a summons; false otherwise. NIEM reference is j:ArrestSummonsIndicator</value>

        [DataMember(Name="isSummons")]
        public List<NiemXsboolean> IsSummons { get; set; }

        /// <summary>
        /// A court authorized order which commands a peace official to arrest a subject and bring that subject before the court. NIEM reference is j:ArrestWarrant
        /// </summary>
        /// <value>A court authorized order which commands a peace official to arrest a subject and bring that subject before the court. NIEM reference is j:ArrestWarrant</value>

        [DataMember(Name="warrant")]
        public List<JWarrantType> Warrant { get; set; }

        /// <summary>
        /// An administrative step taken after an arrested subject is brought to a police station or detention facility, which involves entry of the subject&#x27;s name and other relevant facts on the police blotter, and which may also include photographing, NIEM reference is j:Booking
        /// </summary>
        /// <value>An administrative step taken after an arrested subject is brought to a police station or detention facility, which involves entry of the subject&#x27;s name and other relevant facts on the police blotter, and which may also include photographing, NIEM reference is j:Booking</value>

        [DataMember(Name="booking")]
        public List<JBookingType> Booking { get; set; }

        /// <summary>
        /// A kind of arrest that occurred. NIEM reference is j:ArrestCategoryCode
        /// </summary>
        /// <value>A kind of arrest that occurred. NIEM reference is j:ArrestCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<UcrArrestCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of apprehension. NIEM reference is j:ArrestCategoryJABSCode
        /// </summary>
        /// <value>A kind of apprehension. NIEM reference is j:ArrestCategoryJABSCode</value>

        [DataMember(Name="categoryJabsCode")]
        public List<NdexArrestCategoryJABSCodeType> CategoryJabsCode { get; set; }

        /// <summary>
        /// An indication of whether or not to count or score an arrested subject in a system to avoid duplicate counts in the event that the subject may be a part of multiple arrests. NIEM reference is j:ArrestSubjectCountCode
        /// </summary>
        /// <value>An indication of whether or not to count or score an arrested subject in a system to avoid duplicate counts in the event that the subject may be a part of multiple arrests. NIEM reference is j:ArrestSubjectCountCode</value>

        [DataMember(Name="subjectCountCode")]
        public List<UcrMultipleArresteeSegmentsCodeType> SubjectCountCode { get; set; }

        /// <summary>
        /// Additional information about an arrest. NIEM reference is scr:ArrestAugmentation
        /// </summary>
        /// <value>Additional information about an arrest. NIEM reference is scr:ArrestAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ScrArrestAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// jArrestType JSON-LD context
        /// </summary>
        /// <value>jArrestType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjArrestTypeContextJsonldEnum for ../JSON-LD_Contexts/jArrestTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jArrestTypeContext.jsonld")]
            JSONLDContextsjArrestTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jArrestType JSON-LD context
        /// </summary>
        /// <value>jArrestType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JArrestType {\n");
            sb.Append("  IsCommunitySupervision: ").Append(IsCommunitySupervision).Append("\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  IsUnderInfluence: ").Append(IsUnderInfluence).Append("\n");
            sb.Append("  AgencyRecordIdentification: ").Append(AgencyRecordIdentification).Append("\n");
            sb.Append("  ApprehensionDetentionOrder: ").Append(ApprehensionDetentionOrder).Append("\n");
            sb.Append("  ArraignmentDate: ").Append(ArraignmentDate).Append("\n");
            sb.Append("  BailRecommendation: ").Append(BailRecommendation).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  IsIntoxicantInvolved: ").Append(IsIntoxicantInvolved).Append("\n");
            sb.Append("  InvolvedOrganization: ").Append(InvolvedOrganization).Append("\n");
            sb.Append("  InvolvedItem: ").Append(InvolvedItem).Append("\n");
            sb.Append("  InvolvedWeapon: ").Append(InvolvedWeapon).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Official: ").Append(Official).Append("\n");
            sb.Append("  ProbableCause: ").Append(ProbableCause).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  IsResisted: ").Append(IsResisted).Append("\n");
            sb.Append("  SequenceId: ").Append(SequenceId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  SubjectCustodyTransfer: ").Append(SubjectCustodyTransfer).Append("\n");
            sb.Append("  IsSubjectRightsRead: ").Append(IsSubjectRightsRead).Append("\n");
            sb.Append("  SubjectRightsReadResponse: ").Append(SubjectRightsReadResponse).Append("\n");
            sb.Append("  IsSummons: ").Append(IsSummons).Append("\n");
            sb.Append("  Warrant: ").Append(Warrant).Append("\n");
            sb.Append("  Booking: ").Append(Booking).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryJabsCode: ").Append(CategoryJabsCode).Append("\n");
            sb.Append("  SubjectCountCode: ").Append(SubjectCountCode).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JArrestType)obj);
        }

        /// <summary>
        /// Returns true if JArrestType instances are equal
        /// </summary>
        /// <param name="other">Instance of JArrestType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JArrestType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsCommunitySupervision == other.IsCommunitySupervision ||
                    IsCommunitySupervision != null &&
                    IsCommunitySupervision.SequenceEqual(other.IsCommunitySupervision)
                ) && 
                (
                    Agency == other.Agency ||
                    Agency != null &&
                    Agency.SequenceEqual(other.Agency)
                ) && 
                (
                    IsUnderInfluence == other.IsUnderInfluence ||
                    IsUnderInfluence != null &&
                    IsUnderInfluence.SequenceEqual(other.IsUnderInfluence)
                ) && 
                (
                    AgencyRecordIdentification == other.AgencyRecordIdentification ||
                    AgencyRecordIdentification != null &&
                    AgencyRecordIdentification.SequenceEqual(other.AgencyRecordIdentification)
                ) && 
                (
                    ApprehensionDetentionOrder == other.ApprehensionDetentionOrder ||
                    ApprehensionDetentionOrder != null &&
                    ApprehensionDetentionOrder.SequenceEqual(other.ApprehensionDetentionOrder)
                ) && 
                (
                    ArraignmentDate == other.ArraignmentDate ||
                    ArraignmentDate != null &&
                    ArraignmentDate.SequenceEqual(other.ArraignmentDate)
                ) && 
                (
                    BailRecommendation == other.BailRecommendation ||
                    BailRecommendation != null &&
                    BailRecommendation.SequenceEqual(other.BailRecommendation)
                ) && 
                (
                    Charge == other.Charge ||
                    Charge != null &&
                    Charge.SequenceEqual(other.Charge)
                ) && 
                (
                    IsIntoxicantInvolved == other.IsIntoxicantInvolved ||
                    IsIntoxicantInvolved != null &&
                    IsIntoxicantInvolved.SequenceEqual(other.IsIntoxicantInvolved)
                ) && 
                (
                    InvolvedOrganization == other.InvolvedOrganization ||
                    InvolvedOrganization != null &&
                    InvolvedOrganization.SequenceEqual(other.InvolvedOrganization)
                ) && 
                (
                    InvolvedItem == other.InvolvedItem ||
                    InvolvedItem != null &&
                    InvolvedItem.SequenceEqual(other.InvolvedItem)
                ) && 
                (
                    InvolvedWeapon == other.InvolvedWeapon ||
                    InvolvedWeapon != null &&
                    InvolvedWeapon.SequenceEqual(other.InvolvedWeapon)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Official == other.Official ||
                    Official != null &&
                    Official.SequenceEqual(other.Official)
                ) && 
                (
                    ProbableCause == other.ProbableCause ||
                    ProbableCause != null &&
                    ProbableCause.SequenceEqual(other.ProbableCause)
                ) && 
                (
                    Release == other.Release ||
                    Release != null &&
                    Release.SequenceEqual(other.Release)
                ) && 
                (
                    IsResisted == other.IsResisted ||
                    IsResisted != null &&
                    IsResisted.SequenceEqual(other.IsResisted)
                ) && 
                (
                    SequenceId == other.SequenceId ||
                    SequenceId != null &&
                    SequenceId.SequenceEqual(other.SequenceId)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    SubjectCustodyTransfer == other.SubjectCustodyTransfer ||
                    SubjectCustodyTransfer != null &&
                    SubjectCustodyTransfer.SequenceEqual(other.SubjectCustodyTransfer)
                ) && 
                (
                    IsSubjectRightsRead == other.IsSubjectRightsRead ||
                    IsSubjectRightsRead != null &&
                    IsSubjectRightsRead.SequenceEqual(other.IsSubjectRightsRead)
                ) && 
                (
                    SubjectRightsReadResponse == other.SubjectRightsReadResponse ||
                    SubjectRightsReadResponse != null &&
                    SubjectRightsReadResponse.SequenceEqual(other.SubjectRightsReadResponse)
                ) && 
                (
                    IsSummons == other.IsSummons ||
                    IsSummons != null &&
                    IsSummons.SequenceEqual(other.IsSummons)
                ) && 
                (
                    Warrant == other.Warrant ||
                    Warrant != null &&
                    Warrant.SequenceEqual(other.Warrant)
                ) && 
                (
                    Booking == other.Booking ||
                    Booking != null &&
                    Booking.SequenceEqual(other.Booking)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CategoryJabsCode == other.CategoryJabsCode ||
                    CategoryJabsCode != null &&
                    CategoryJabsCode.SequenceEqual(other.CategoryJabsCode)
                ) && 
                (
                    SubjectCountCode == other.SubjectCountCode ||
                    SubjectCountCode != null &&
                    SubjectCountCode.SequenceEqual(other.SubjectCountCode)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsCommunitySupervision != null)
                    hashCode = hashCode * 59 + IsCommunitySupervision.GetHashCode();
                    if (Agency != null)
                    hashCode = hashCode * 59 + Agency.GetHashCode();
                    if (IsUnderInfluence != null)
                    hashCode = hashCode * 59 + IsUnderInfluence.GetHashCode();
                    if (AgencyRecordIdentification != null)
                    hashCode = hashCode * 59 + AgencyRecordIdentification.GetHashCode();
                    if (ApprehensionDetentionOrder != null)
                    hashCode = hashCode * 59 + ApprehensionDetentionOrder.GetHashCode();
                    if (ArraignmentDate != null)
                    hashCode = hashCode * 59 + ArraignmentDate.GetHashCode();
                    if (BailRecommendation != null)
                    hashCode = hashCode * 59 + BailRecommendation.GetHashCode();
                    if (Charge != null)
                    hashCode = hashCode * 59 + Charge.GetHashCode();
                    if (IsIntoxicantInvolved != null)
                    hashCode = hashCode * 59 + IsIntoxicantInvolved.GetHashCode();
                    if (InvolvedOrganization != null)
                    hashCode = hashCode * 59 + InvolvedOrganization.GetHashCode();
                    if (InvolvedItem != null)
                    hashCode = hashCode * 59 + InvolvedItem.GetHashCode();
                    if (InvolvedWeapon != null)
                    hashCode = hashCode * 59 + InvolvedWeapon.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Official != null)
                    hashCode = hashCode * 59 + Official.GetHashCode();
                    if (ProbableCause != null)
                    hashCode = hashCode * 59 + ProbableCause.GetHashCode();
                    if (Release != null)
                    hashCode = hashCode * 59 + Release.GetHashCode();
                    if (IsResisted != null)
                    hashCode = hashCode * 59 + IsResisted.GetHashCode();
                    if (SequenceId != null)
                    hashCode = hashCode * 59 + SequenceId.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (SubjectCustodyTransfer != null)
                    hashCode = hashCode * 59 + SubjectCustodyTransfer.GetHashCode();
                    if (IsSubjectRightsRead != null)
                    hashCode = hashCode * 59 + IsSubjectRightsRead.GetHashCode();
                    if (SubjectRightsReadResponse != null)
                    hashCode = hashCode * 59 + SubjectRightsReadResponse.GetHashCode();
                    if (IsSummons != null)
                    hashCode = hashCode * 59 + IsSummons.GetHashCode();
                    if (Warrant != null)
                    hashCode = hashCode * 59 + Warrant.GetHashCode();
                    if (Booking != null)
                    hashCode = hashCode * 59 + Booking.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CategoryJabsCode != null)
                    hashCode = hashCode * 59 + CategoryJabsCode.GetHashCode();
                    if (SubjectCountCode != null)
                    hashCode = hashCode * 59 + SubjectCountCode.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JArrestType left, JArrestType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JArrestType left, JArrestType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
