/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a combination of names and/or titles by which a person is known.
    /// </summary>
    [DataContract]
    public partial class NcPersonNameType : IEquatable<NcPersonNameType>
    { 
        /// <summary>
        /// A title or honorific used by a person. NIEM reference is nc:PersonNamePrefixText
        /// </summary>
        /// <value>A title or honorific used by a person. NIEM reference is nc:PersonNamePrefixText</value>

        [DataMember(Name="prefix")]
        public List<NcTextType> Prefix { get; set; }

        /// <summary>
        /// A first name of a person. NIEM reference is nc:PersonGivenName
        /// </summary>
        /// <value>A first name of a person. NIEM reference is nc:PersonGivenName</value>

        [DataMember(Name="personGivenName")]
        public List<NcPersonNameTextType> PersonGivenName { get; set; }

        /// <summary>
        /// A middle name of a person. NIEM reference is nc:PersonMiddleName
        /// </summary>
        /// <value>A middle name of a person. NIEM reference is nc:PersonMiddleName</value>

        [DataMember(Name="personMiddleName")]
        public List<NcPersonNameTextType> PersonMiddleName { get; set; }

        /// <summary>
        /// A last name or family name of a person. NIEM reference is nc:PersonSurName
        /// </summary>
        /// <value>A last name or family name of a person. NIEM reference is nc:PersonSurName</value>

        [DataMember(Name="personSurName")]
        public List<NcPersonNameTextType> PersonSurName { get; set; }

        /// <summary>
        /// A term appended after the family name that qualifies the name. NIEM reference is nc:PersonNameSuffixText
        /// </summary>
        /// <value>A term appended after the family name that qualifies the name. NIEM reference is nc:PersonNameSuffixText</value>

        [DataMember(Name="suffix")]
        public List<NcTextType> Suffix { get; set; }

        /// <summary>
        /// An original last name or surname of a person before changed by marriage. NIEM reference is nc:PersonMaidenName
        /// </summary>
        /// <value>An original last name or surname of a person before changed by marriage. NIEM reference is nc:PersonMaidenName</value>

        [DataMember(Name="personMaidenName")]
        public List<NcPersonNameTextType> PersonMaidenName { get; set; }

        /// <summary>
        /// A complete name of a person. NIEM reference is nc:PersonFullName
        /// </summary>
        /// <value>A complete name of a person. NIEM reference is nc:PersonFullName</value>

        [DataMember(Name="personFullName")]
        public List<NcPersonNameTextType> PersonFullName { get; set; }

        /// <summary>
        /// A kind of name for a person. NIEM reference is j:PersonNameCategoryCode
        /// </summary>
        /// <value>A kind of name for a person. NIEM reference is j:PersonNameCategoryCode</value>

        [DataMember(Name="jCategoryCode")]
        public List<JPersonNameCategoryCodeType> JCategoryCode { get; set; }

        /// <summary>
        /// A kind of person name. NIEM reference is nc:PersonNameCategoryCode
        /// </summary>
        /// <value>A kind of person name. NIEM reference is nc:PersonNameCategoryCode</value>

        [DataMember(Name="ncCategoryCode")]
        public List<NcPersonNameCategoryCodeType> NcCategoryCode { get; set; }

        /// <summary>
        /// A kind of person name. NIEM reference is nc:PersonNameCategoryText
        /// </summary>
        /// <value>A kind of person name. NIEM reference is nc:PersonNameCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A name, out of possibly multiple given names, that a person selects to use as his or her official given name. NIEM reference is nc:PersonOfficialGivenName
        /// </summary>
        /// <value>A name, out of possibly multiple given names, that a person selects to use as his or her official given name. NIEM reference is nc:PersonOfficialGivenName</value>

        [DataMember(Name="personOfficialGivenName")]
        public List<NcPersonNameTextType> PersonOfficialGivenName { get; set; }

        /// <summary>
        /// A formal sign or expression of greeting that is appropriate for this person. NIEM reference is nc:PersonNameSalutationText
        /// </summary>
        /// <value>A formal sign or expression of greeting that is appropriate for this person. NIEM reference is nc:PersonNameSalutationText</value>

        [DataMember(Name="salutation")]
        public List<NcTextType> Salutation { get; set; }

        /// <summary>
        /// A prefix that precedes this person&#x27;s family name such as Van, Von. NIEM reference is nc:PersonSurNamePrefixText
        /// </summary>
        /// <value>A prefix that precedes this person&#x27;s family name such as Van, Von. NIEM reference is nc:PersonSurNamePrefixText</value>

        [DataMember(Name="personSurNamePrefix")]
        public List<NcTextType> PersonSurNamePrefix { get; set; }

        /// <summary>
        /// A name by which this person prefers to be known. NIEM reference is nc:PersonPreferredName
        /// </summary>
        /// <value>A name by which this person prefers to be known. NIEM reference is nc:PersonPreferredName</value>

        [DataMember(Name="personPreferredName")]
        public List<NcTextType> PersonPreferredName { get; set; }

        /// <summary>
        /// A comment about a kind of name for a person. NIEM reference is nc:personNameCommentText
        /// </summary>
        /// <value>A comment about a kind of name for a person. NIEM reference is nc:personNameCommentText</value>

        [DataMember(Name="personNameComment")]
        public string PersonNameComment { get; set; }

        /// <summary>
        /// Additional information about a person name. NIEM reference is im:PersonNameAugmentation
        /// </summary>
        /// <value>Additional information about a person name. NIEM reference is im:PersonNameAugmentation</value>

        [DataMember(Name="imAugmentation")]
        public List<ImPersonNameAugmentationType> ImAugmentation { get; set; }

        /// <summary>
        /// Additional information about a name of a person. NIEM reference is j:PersonNameAugmentation
        /// </summary>
        /// <value>Additional information about a name of a person. NIEM reference is j:PersonNameAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JPersonNameAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person name. NIEM reference is scr:PersonNameAugmentation
        /// </summary>
        /// <value>Additional information about a person name. NIEM reference is scr:PersonNameAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrPersonNameAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// Additional information about a name of a person. NIEM reference is scr:PersonNameTextAugmentation
        /// </summary>
        /// <value>Additional information about a name of a person. NIEM reference is scr:PersonNameTextAugmentation</value>

        [DataMember(Name="textAugmentation")]
        public List<ScrPersonNameTextAugmentationType> TextAugmentation { get; set; }

        /// <summary>
        /// ncPersonNameType JSON-LD context
        /// </summary>
        /// <value>ncPersonNameType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonNameTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonNameTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonNameTypeContext.jsonld")]
            JSONLDContextsncPersonNameTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonNameType JSON-LD context
        /// </summary>
        /// <value>ncPersonNameType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonNameType {\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  PersonGivenName: ").Append(PersonGivenName).Append("\n");
            sb.Append("  PersonMiddleName: ").Append(PersonMiddleName).Append("\n");
            sb.Append("  PersonSurName: ").Append(PersonSurName).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  PersonMaidenName: ").Append(PersonMaidenName).Append("\n");
            sb.Append("  PersonFullName: ").Append(PersonFullName).Append("\n");
            sb.Append("  JCategoryCode: ").Append(JCategoryCode).Append("\n");
            sb.Append("  NcCategoryCode: ").Append(NcCategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  PersonOfficialGivenName: ").Append(PersonOfficialGivenName).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  PersonSurNamePrefix: ").Append(PersonSurNamePrefix).Append("\n");
            sb.Append("  PersonPreferredName: ").Append(PersonPreferredName).Append("\n");
            sb.Append("  PersonNameComment: ").Append(PersonNameComment).Append("\n");
            sb.Append("  ImAugmentation: ").Append(ImAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  TextAugmentation: ").Append(TextAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonNameType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonNameType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonNameType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonNameType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Prefix == other.Prefix ||
                    Prefix != null &&
                    Prefix.SequenceEqual(other.Prefix)
                ) && 
                (
                    PersonGivenName == other.PersonGivenName ||
                    PersonGivenName != null &&
                    PersonGivenName.SequenceEqual(other.PersonGivenName)
                ) && 
                (
                    PersonMiddleName == other.PersonMiddleName ||
                    PersonMiddleName != null &&
                    PersonMiddleName.SequenceEqual(other.PersonMiddleName)
                ) && 
                (
                    PersonSurName == other.PersonSurName ||
                    PersonSurName != null &&
                    PersonSurName.SequenceEqual(other.PersonSurName)
                ) && 
                (
                    Suffix == other.Suffix ||
                    Suffix != null &&
                    Suffix.SequenceEqual(other.Suffix)
                ) && 
                (
                    PersonMaidenName == other.PersonMaidenName ||
                    PersonMaidenName != null &&
                    PersonMaidenName.SequenceEqual(other.PersonMaidenName)
                ) && 
                (
                    PersonFullName == other.PersonFullName ||
                    PersonFullName != null &&
                    PersonFullName.SequenceEqual(other.PersonFullName)
                ) && 
                (
                    JCategoryCode == other.JCategoryCode ||
                    JCategoryCode != null &&
                    JCategoryCode.SequenceEqual(other.JCategoryCode)
                ) && 
                (
                    NcCategoryCode == other.NcCategoryCode ||
                    NcCategoryCode != null &&
                    NcCategoryCode.SequenceEqual(other.NcCategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    PersonOfficialGivenName == other.PersonOfficialGivenName ||
                    PersonOfficialGivenName != null &&
                    PersonOfficialGivenName.SequenceEqual(other.PersonOfficialGivenName)
                ) && 
                (
                    Salutation == other.Salutation ||
                    Salutation != null &&
                    Salutation.SequenceEqual(other.Salutation)
                ) && 
                (
                    PersonSurNamePrefix == other.PersonSurNamePrefix ||
                    PersonSurNamePrefix != null &&
                    PersonSurNamePrefix.SequenceEqual(other.PersonSurNamePrefix)
                ) && 
                (
                    PersonPreferredName == other.PersonPreferredName ||
                    PersonPreferredName != null &&
                    PersonPreferredName.SequenceEqual(other.PersonPreferredName)
                ) && 
                (
                    PersonNameComment == other.PersonNameComment ||
                    PersonNameComment != null &&
                    PersonNameComment.Equals(other.PersonNameComment)
                ) && 
                (
                    ImAugmentation == other.ImAugmentation ||
                    ImAugmentation != null &&
                    ImAugmentation.SequenceEqual(other.ImAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    TextAugmentation == other.TextAugmentation ||
                    TextAugmentation != null &&
                    TextAugmentation.SequenceEqual(other.TextAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Prefix != null)
                    hashCode = hashCode * 59 + Prefix.GetHashCode();
                    if (PersonGivenName != null)
                    hashCode = hashCode * 59 + PersonGivenName.GetHashCode();
                    if (PersonMiddleName != null)
                    hashCode = hashCode * 59 + PersonMiddleName.GetHashCode();
                    if (PersonSurName != null)
                    hashCode = hashCode * 59 + PersonSurName.GetHashCode();
                    if (Suffix != null)
                    hashCode = hashCode * 59 + Suffix.GetHashCode();
                    if (PersonMaidenName != null)
                    hashCode = hashCode * 59 + PersonMaidenName.GetHashCode();
                    if (PersonFullName != null)
                    hashCode = hashCode * 59 + PersonFullName.GetHashCode();
                    if (JCategoryCode != null)
                    hashCode = hashCode * 59 + JCategoryCode.GetHashCode();
                    if (NcCategoryCode != null)
                    hashCode = hashCode * 59 + NcCategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (PersonOfficialGivenName != null)
                    hashCode = hashCode * 59 + PersonOfficialGivenName.GetHashCode();
                    if (Salutation != null)
                    hashCode = hashCode * 59 + Salutation.GetHashCode();
                    if (PersonSurNamePrefix != null)
                    hashCode = hashCode * 59 + PersonSurNamePrefix.GetHashCode();
                    if (PersonPreferredName != null)
                    hashCode = hashCode * 59 + PersonPreferredName.GetHashCode();
                    if (PersonNameComment != null)
                    hashCode = hashCode * 59 + PersonNameComment.GetHashCode();
                    if (ImAugmentation != null)
                    hashCode = hashCode * 59 + ImAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (TextAugmentation != null)
                    hashCode = hashCode * 59 + TextAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonNameType left, NcPersonNameType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonNameType left, NcPersonNameType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
