/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of details about a person&#x27;s death.
    /// </summary>
    [DataContract]
    public partial class JPersonDeathType : NcActivityType, IEquatable<JPersonDeathType>
    { 
        /// <summary>
        /// True if the person declines the first staff assistant assignment; false otherwise. NIEM reference is j:PersonDecliningFirstStaffAssistantAssignmentIndicator
        /// </summary>
        /// <value>True if the person declines the first staff assistant assignment; false otherwise. NIEM reference is j:PersonDecliningFirstStaffAssistantAssignmentIndicator</value>

        [DataMember(Name="isPersonDecliningFirstStaffAssistantAssignment")]
        public List<NiemXsboolean> IsPersonDecliningFirstStaffAssistantAssignment { get; set; }

        /// <summary>
        /// A date on which the person was pronounced to be dead. NIEM reference is j:PersonDeathPronouncedDate
        /// </summary>
        /// <value>A date on which the person was pronounced to be dead. NIEM reference is j:PersonDeathPronouncedDate</value>

        [DataMember(Name="pronouncedDate")]
        public List<NcDateType> PronouncedDate { get; set; }

        /// <summary>
        /// A kind of location where the death of the person occurred NIEM reference is j:PersonDeathLocationText
        /// </summary>
        /// <value>A kind of location where the death of the person occurred NIEM reference is j:PersonDeathLocationText</value>

        [DataMember(Name="location")]
        public List<NcTextType> Location { get; set; }

        /// <summary>
        /// A kind of probability the litigation occurring because of the death of the person. NIEM reference is j:PersonDeathLitigationProbabilityText
        /// </summary>
        /// <value>A kind of probability the litigation occurring because of the death of the person. NIEM reference is j:PersonDeathLitigationProbabilityText</value>

        [DataMember(Name="litigationProbability")]
        public List<NcTextType> LitigationProbability { get; set; }

        /// <summary>
        /// True if an investigator has been requested; false otherwise. NIEM reference is j:PersonDeathInvestigatorRequestedIndicator
        /// </summary>
        /// <value>True if an investigator has been requested; false otherwise. NIEM reference is j:PersonDeathInvestigatorRequestedIndicator</value>

        [DataMember(Name="isInvestigatorRequested")]
        public List<NiemXsboolean> IsInvestigatorRequested { get; set; }

        /// <summary>
        /// A set of details about an incident causing the person&#x27;s death. NIEM reference is j:PersonDeathIncident
        /// </summary>
        /// <value>A set of details about an incident causing the person&#x27;s death. NIEM reference is j:PersonDeathIncident</value>

        [DataMember(Name="incident")]
        public List<NcIncidentType> Incident { get; set; }

        /// <summary>
        /// A set of details of the determination of the cause of death for a human being. NIEM reference is j:PersonCauseOfDeath
        /// </summary>
        /// <value>A set of details of the determination of the cause of death for a human being. NIEM reference is j:PersonCauseOfDeath</value>

        [DataMember(Name="personCauseOfDeath")]
        public List<JCauseOfDeathAssessmentType> PersonCauseOfDeath { get; set; }

        /// <summary>
        /// True if the person declined the first Investigative employee; false otherwise. NIEM reference is j:PersonDeclinedFirstInvestigativeEmployeeIndicator
        /// </summary>
        /// <value>True if the person declined the first Investigative employee; false otherwise. NIEM reference is j:PersonDeclinedFirstInvestigativeEmployeeIndicator</value>

        [DataMember(Name="isPersonDeclinedFirstInvestigativeEmployee")]
        public List<NiemXsboolean> IsPersonDeclinedFirstInvestigativeEmployee { get; set; }

        /// <summary>
        /// True if resuscitation was attempted; false otherwise. NIEM reference is j:PersonDeathResuscitationAttemptedIndicator
        /// </summary>
        /// <value>True if resuscitation was attempted; false otherwise. NIEM reference is j:PersonDeathResuscitationAttemptedIndicator</value>

        [DataMember(Name="isResuscitationAttempted")]
        public List<NiemXsboolean> IsResuscitationAttempted { get; set; }

        /// <summary>
        /// A name of the official who pronounced the subject person. NIEM reference is j:PersonDeathPronouncedDeadByText
        /// </summary>
        /// <value>A name of the official who pronounced the subject person. NIEM reference is j:PersonDeathPronouncedDeadByText</value>

        [DataMember(Name="pronouncedDeadBy")]
        public List<NcTextType> PronouncedDeadBy { get; set; }

        /// <summary>
        /// jPersonDeathType JSON-LD context
        /// </summary>
        /// <value>jPersonDeathType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPersonDeathTypeContextJsonldEnum for ../JSON-LD_Contexts/jPersonDeathTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPersonDeathTypeContext.jsonld")]
            JSONLDContextsjPersonDeathTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPersonDeathType JSON-LD context
        /// </summary>
        /// <value>jPersonDeathType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPersonDeathType {\n");
            sb.Append("  IsPersonDecliningFirstStaffAssistantAssignment: ").Append(IsPersonDecliningFirstStaffAssistantAssignment).Append("\n");
            sb.Append("  PronouncedDate: ").Append(PronouncedDate).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LitigationProbability: ").Append(LitigationProbability).Append("\n");
            sb.Append("  IsInvestigatorRequested: ").Append(IsInvestigatorRequested).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  PersonCauseOfDeath: ").Append(PersonCauseOfDeath).Append("\n");
            sb.Append("  IsPersonDeclinedFirstInvestigativeEmployee: ").Append(IsPersonDeclinedFirstInvestigativeEmployee).Append("\n");
            sb.Append("  IsResuscitationAttempted: ").Append(IsResuscitationAttempted).Append("\n");
            sb.Append("  PronouncedDeadBy: ").Append(PronouncedDeadBy).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPersonDeathType)obj);
        }

        /// <summary>
        /// Returns true if JPersonDeathType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPersonDeathType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPersonDeathType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsPersonDecliningFirstStaffAssistantAssignment == other.IsPersonDecliningFirstStaffAssistantAssignment ||
                    IsPersonDecliningFirstStaffAssistantAssignment != null &&
                    IsPersonDecliningFirstStaffAssistantAssignment.SequenceEqual(other.IsPersonDecliningFirstStaffAssistantAssignment)
                ) && 
                (
                    PronouncedDate == other.PronouncedDate ||
                    PronouncedDate != null &&
                    PronouncedDate.SequenceEqual(other.PronouncedDate)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    LitigationProbability == other.LitigationProbability ||
                    LitigationProbability != null &&
                    LitigationProbability.SequenceEqual(other.LitigationProbability)
                ) && 
                (
                    IsInvestigatorRequested == other.IsInvestigatorRequested ||
                    IsInvestigatorRequested != null &&
                    IsInvestigatorRequested.SequenceEqual(other.IsInvestigatorRequested)
                ) && 
                (
                    Incident == other.Incident ||
                    Incident != null &&
                    Incident.SequenceEqual(other.Incident)
                ) && 
                (
                    PersonCauseOfDeath == other.PersonCauseOfDeath ||
                    PersonCauseOfDeath != null &&
                    PersonCauseOfDeath.SequenceEqual(other.PersonCauseOfDeath)
                ) && 
                (
                    IsPersonDeclinedFirstInvestigativeEmployee == other.IsPersonDeclinedFirstInvestigativeEmployee ||
                    IsPersonDeclinedFirstInvestigativeEmployee != null &&
                    IsPersonDeclinedFirstInvestigativeEmployee.SequenceEqual(other.IsPersonDeclinedFirstInvestigativeEmployee)
                ) && 
                (
                    IsResuscitationAttempted == other.IsResuscitationAttempted ||
                    IsResuscitationAttempted != null &&
                    IsResuscitationAttempted.SequenceEqual(other.IsResuscitationAttempted)
                ) && 
                (
                    PronouncedDeadBy == other.PronouncedDeadBy ||
                    PronouncedDeadBy != null &&
                    PronouncedDeadBy.SequenceEqual(other.PronouncedDeadBy)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsPersonDecliningFirstStaffAssistantAssignment != null)
                    hashCode = hashCode * 59 + IsPersonDecliningFirstStaffAssistantAssignment.GetHashCode();
                    if (PronouncedDate != null)
                    hashCode = hashCode * 59 + PronouncedDate.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (LitigationProbability != null)
                    hashCode = hashCode * 59 + LitigationProbability.GetHashCode();
                    if (IsInvestigatorRequested != null)
                    hashCode = hashCode * 59 + IsInvestigatorRequested.GetHashCode();
                    if (Incident != null)
                    hashCode = hashCode * 59 + Incident.GetHashCode();
                    if (PersonCauseOfDeath != null)
                    hashCode = hashCode * 59 + PersonCauseOfDeath.GetHashCode();
                    if (IsPersonDeclinedFirstInvestigativeEmployee != null)
                    hashCode = hashCode * 59 + IsPersonDeclinedFirstInvestigativeEmployee.GetHashCode();
                    if (IsResuscitationAttempted != null)
                    hashCode = hashCode * 59 + IsResuscitationAttempted.GetHashCode();
                    if (PronouncedDeadBy != null)
                    hashCode = hashCode * 59 + PronouncedDeadBy.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPersonDeathType left, JPersonDeathType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPersonDeathType left, JPersonDeathType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
