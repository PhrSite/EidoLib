/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a calendar date.
    /// </summary>
    [DataContract]
    public partial class NcDateType : IEquatable<NcDateType>
    { 
        /// <summary>
        /// A full date. NIEM reference is nc:Date
        /// </summary>
        /// <value>A full date. NIEM reference is nc:Date</value>

        [DataMember(Name="date")]
        public List<NiemXsdate> Date { get; set; }

        /// <summary>
        /// A time period measured by a starting and ending point. NIEM reference is nc:DateRange
        /// </summary>
        /// <value>A time period measured by a starting and ending point. NIEM reference is nc:DateRange</value>

        [DataMember(Name="range")]
        public List<NcDateRangeType> Range { get; set; }

        /// <summary>
        /// A full date and time. NIEM reference is nc:DateTime
        /// </summary>
        /// <value>A full date and time. NIEM reference is nc:DateTime</value>

        [DataMember(Name="time")]
        public List<NiemXsdateTime> Time { get; set; }

        /// <summary>
        /// A day date. NIEM reference is nc:DayDate
        /// </summary>
        /// <value>A day date. NIEM reference is nc:DayDate</value>

        [DataMember(Name="day")]
        public List<NiemXsgDay> Day { get; set; }

        /// <summary>
        /// A year of a twelve month period that does not necessarily correspond to the calendar year. NIEM reference is nc:FiscalYearDate
        /// </summary>
        /// <value>A year of a twelve month period that does not necessarily correspond to the calendar year. NIEM reference is nc:FiscalYearDate</value>

        [DataMember(Name="fiscalYear")]
        public List<NcFiscalYearDateType> FiscalYear { get; set; }

        /// <summary>
        /// A month. NIEM reference is nc:MonthDate
        /// </summary>
        /// <value>A month. NIEM reference is nc:MonthDate</value>

        [DataMember(Name="month")]
        public List<NiemXsgMonth> Month { get; set; }

        /// <summary>
        /// An identifier of a three-month period in a calendar or fiscal year. NIEM reference is nc:QuarterID
        /// </summary>
        /// <value>An identifier of a three-month period in a calendar or fiscal year. NIEM reference is nc:QuarterID</value>

        [DataMember(Name="quarterId")]
        public List<NcQuarterIDType> QuarterId { get; set; }

        /// <summary>
        /// A year. NIEM reference is nc:YearDate
        /// </summary>
        /// <value>A year. NIEM reference is nc:YearDate</value>

        [DataMember(Name="year")]
        public List<NiemXsgYear> Year { get; set; }

        /// <summary>
        /// A year and month. NIEM reference is nc:YearMonthDate
        /// </summary>
        /// <value>A year and month. NIEM reference is nc:YearMonthDate</value>

        [DataMember(Name="yearMonth")]
        public List<NiemXsgYearMonth> YearMonth { get; set; }

        /// <summary>
        /// A date and time with no offset from Coordinated Universal Time (UTC). NIEM reference is nc:ZuluDateTime
        /// </summary>
        /// <value>A date and time with no offset from Coordinated Universal Time (UTC). NIEM reference is nc:ZuluDateTime</value>

        [DataMember(Name="zuluTime")]
        public List<NcZuluDateTimeType> ZuluTime { get; set; }

        /// <summary>
        /// Gets or Sets MarginOfErrorDuration
        /// </summary>

        [DataMember(Name="marginOfErrorDuration")]
        public NiemXsduration MarginOfErrorDuration { get; set; }

        /// <summary>
        /// ncDateType JSON-LD context
        /// </summary>
        /// <value>ncDateType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncDateTypeContextJsonldEnum for ../JSON-LD_Contexts/ncDateTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncDateTypeContext.jsonld")]
            JSONLDContextsncDateTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncDateType JSON-LD context
        /// </summary>
        /// <value>ncDateType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcDateType {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  FiscalYear: ").Append(FiscalYear).Append("\n");
            sb.Append("  Month: ").Append(Month).Append("\n");
            sb.Append("  QuarterId: ").Append(QuarterId).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  YearMonth: ").Append(YearMonth).Append("\n");
            sb.Append("  ZuluTime: ").Append(ZuluTime).Append("\n");
            sb.Append("  MarginOfErrorDuration: ").Append(MarginOfErrorDuration).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcDateType)obj);
        }

        /// <summary>
        /// Returns true if NcDateType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcDateType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcDateType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Range == other.Range ||
                    Range != null &&
                    Range.SequenceEqual(other.Range)
                ) && 
                (
                    Time == other.Time ||
                    Time != null &&
                    Time.SequenceEqual(other.Time)
                ) && 
                (
                    Day == other.Day ||
                    Day != null &&
                    Day.SequenceEqual(other.Day)
                ) && 
                (
                    FiscalYear == other.FiscalYear ||
                    FiscalYear != null &&
                    FiscalYear.SequenceEqual(other.FiscalYear)
                ) && 
                (
                    Month == other.Month ||
                    Month != null &&
                    Month.SequenceEqual(other.Month)
                ) && 
                (
                    QuarterId == other.QuarterId ||
                    QuarterId != null &&
                    QuarterId.SequenceEqual(other.QuarterId)
                ) && 
                (
                    Year == other.Year ||
                    Year != null &&
                    Year.SequenceEqual(other.Year)
                ) && 
                (
                    YearMonth == other.YearMonth ||
                    YearMonth != null &&
                    YearMonth.SequenceEqual(other.YearMonth)
                ) && 
                (
                    ZuluTime == other.ZuluTime ||
                    ZuluTime != null &&
                    ZuluTime.SequenceEqual(other.ZuluTime)
                ) && 
                (
                    MarginOfErrorDuration == other.MarginOfErrorDuration ||
                    MarginOfErrorDuration != null &&
                    MarginOfErrorDuration.Equals(other.MarginOfErrorDuration)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Range != null)
                    hashCode = hashCode * 59 + Range.GetHashCode();
                    if (Time != null)
                    hashCode = hashCode * 59 + Time.GetHashCode();
                    if (Day != null)
                    hashCode = hashCode * 59 + Day.GetHashCode();
                    if (FiscalYear != null)
                    hashCode = hashCode * 59 + FiscalYear.GetHashCode();
                    if (Month != null)
                    hashCode = hashCode * 59 + Month.GetHashCode();
                    if (QuarterId != null)
                    hashCode = hashCode * 59 + QuarterId.GetHashCode();
                    if (Year != null)
                    hashCode = hashCode * 59 + Year.GetHashCode();
                    if (YearMonth != null)
                    hashCode = hashCode * 59 + YearMonth.GetHashCode();
                    if (ZuluTime != null)
                    hashCode = hashCode * 59 + ZuluTime.GetHashCode();
                    if (MarginOfErrorDuration != null)
                    hashCode = hashCode * 59 + MarginOfErrorDuration.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcDateType left, NcDateType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcDateType left, NcDateType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
