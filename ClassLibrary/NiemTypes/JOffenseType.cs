/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an alleged violation of a statute, ordinance, or rule.
    /// </summary>
    [DataContract]
    public partial class JOffenseType : NcActivityType, IEquatable<JOffenseType>
    { 
        /// <summary>
        /// A driving offense designation as specified by the AAMVA Code Dictionary (ACD). NIEM reference is j:DrivingOffenseCode
        /// </summary>
        /// <value>A driving offense designation as specified by the AAMVA Code Dictionary (ACD). NIEM reference is j:DrivingOffenseCode</value>

        [DataMember(Name="drivingCode")]
        public List<AamvaD20DrivingOffenseCodeType> DrivingCode { get; set; }

        /// <summary>
        /// An offense designation as specified by APCO. NIEM reference is j:OffenseAPCOCode
        /// </summary>
        /// <value>An offense designation as specified by APCO. NIEM reference is j:OffenseAPCOCode</value>

        [DataMember(Name="apcoCode")]
        public List<ApcoIncidentCategoryCodeType> ApcoCode { get; set; }

        /// <summary>
        /// A name or designation of an offense. NIEM reference is j:OffenseName
        /// </summary>
        /// <value>A name or designation of an offense. NIEM reference is j:OffenseName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// An offense designation as specified by FBI&#x27;s National Crime Information Center (NCIC) system. NIEM reference is j:OffenseNCICCode
        /// </summary>
        /// <value>An offense designation as specified by FBI&#x27;s National Crime Information Center (NCIC) system. NIEM reference is j:OffenseNCICCode</value>

        [DataMember(Name="ncicCode")]
        public List<NcicOFFCodeType> NcicCode { get; set; }

        /// <summary>
        /// An offense designation. NIEM reference is j:OffenseNDExCode
        /// </summary>
        /// <value>An offense designation. NIEM reference is j:OffenseNDExCode</value>

        [DataMember(Name="ndExCode")]
        public List<NdexOffenseCodeType> NdExCode { get; set; }

        /// <summary>
        /// An offense designation as specified by FBI&#x27;s Uniform Crime Reporting (UCR) program. NIEM reference is j:OffenseUCRCode
        /// </summary>
        /// <value>An offense designation as specified by FBI&#x27;s Uniform Crime Reporting (UCR) program. NIEM reference is j:OffenseUCRCode</value>

        [DataMember(Name="ucrCode")]
        public List<UcrOffenseCodeType> UcrCode { get; set; }

        /// <summary>
        /// A kind of offense. NIEM reference is j:OffenseCategoryCode
        /// </summary>
        /// <value>A kind of offense. NIEM reference is j:OffenseCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<UcrCriminalActivityCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of offense. NIEM reference is j:OffenseCategoryNDExCode
        /// </summary>
        /// <value>A kind of offense. NIEM reference is j:OffenseCategoryNDExCode</value>

        [DataMember(Name="categoryNdExCode")]
        public List<NdexOffenseCategoryNDExCodeType> CategoryNdExCode { get; set; }

        /// <summary>
        /// A kind of offense. NIEM reference is j:OffenseCategoryText
        /// </summary>
        /// <value>A kind of offense. NIEM reference is j:OffenseCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A probable crime type and/or motive based on a usual way in which a criminal organization or person acts or operates. NIEM reference is j:OffenseMOCrimeAndMotiveCode
        /// </summary>
        /// <value>A probable crime type and/or motive based on a usual way in which a criminal organization or person acts or operates. NIEM reference is j:OffenseMOCrimeAndMotiveCode</value>

        [DataMember(Name="moCrimeAndMotiveCode")]
        public List<NdexOffenseMOCrimeAndMotiveCodeType> MoCrimeAndMotiveCode { get; set; }

        /// <summary>
        /// A probable crime type and/or motive based on a usual way in which a criminal organization or person acts or operates. NIEM reference is j:OffenseMOCrimeAndMotiveText
        /// </summary>
        /// <value>A probable crime type and/or motive based on a usual way in which a criminal organization or person acts or operates. NIEM reference is j:OffenseMOCrimeAndMotiveText</value>

        [DataMember(Name="moCrimeAndMotive")]
        public List<NcTextType> MoCrimeAndMotive { get; set; }

        /// <summary>
        /// True if evidence was held due to an offense; false otherwise. NIEM reference is j:OffenseEvidenceHeldIndicator
        /// </summary>
        /// <value>True if evidence was held due to an offense; false otherwise. NIEM reference is j:OffenseEvidenceHeldIndicator</value>

        [DataMember(Name="isEvidenceHeld")]
        public List<NiemXsboolean> IsEvidenceHeld { get; set; }

        /// <summary>
        /// A date a person was sentenced. NIEM reference is j:OffenseSentenceDate
        /// </summary>
        /// <value>A date a person was sentenced. NIEM reference is j:OffenseSentenceDate</value>

        [DataMember(Name="sentenceDate")]
        public List<NcDateType> SentenceDate { get; set; }

        /// <summary>
        /// A description of a bias that motivated an offense. NIEM reference is j:OffenseFactorBiasMotivationDescriptionText
        /// </summary>
        /// <value>A description of a bias that motivated an offense. NIEM reference is j:OffenseFactorBiasMotivationDescriptionText</value>

        [DataMember(Name="factorBiasMotivationDescription")]
        public List<NcTextType> FactorBiasMotivationDescription { get; set; }

        /// <summary>
        /// True if a juvenile is to be processed as an adult; false otherwise. NIEM reference is j:JuvenileAsAdultIndicator
        /// </summary>
        /// <value>True if a juvenile is to be processed as an adult; false otherwise. NIEM reference is j:JuvenileAsAdultIndicator</value>

        [DataMember(Name="isJuvenileAsAdult")]
        public List<NiemXsboolean> IsJuvenileAsAdult { get; set; }

        /// <summary>
        /// True if gambling is connected with offense; false otherwise. NIEM reference is j:OffenseGamblingConnectedIndicator
        /// </summary>
        /// <value>True if gambling is connected with offense; false otherwise. NIEM reference is j:OffenseGamblingConnectedIndicator</value>

        [DataMember(Name="isGamblingConnected")]
        public List<NiemXsboolean> IsGamblingConnected { get; set; }

        /// <summary>
        /// True if the legal status of a person is a juvenile; false otherwise. NIEM reference is j:JuvenileOffenderIndicator
        /// </summary>
        /// <value>True if the legal status of a person is a juvenile; false otherwise. NIEM reference is j:JuvenileOffenderIndicator</value>

        [DataMember(Name="isJuvenileOffender")]
        public List<NiemXsboolean> IsJuvenileOffender { get; set; }

        /// <summary>
        /// True if a psychological or psychiatric condition is connected with offense; false otherwise. NIEM reference is j:OffensePsychologicalPsychiatricConditionConnectedIndicator
        /// </summary>
        /// <value>True if a psychological or psychiatric condition is connected with offense; false otherwise. NIEM reference is j:OffensePsychologicalPsychiatricConditionConnectedIndicator</value>

        [DataMember(Name="isPsychologicalPsychiatricConditionConnected")]
        public List<NiemXsboolean> IsPsychologicalPsychiatricConditionConnected { get; set; }

        /// <summary>
        /// A kind of bias that motivated an offense, if any. NIEM reference is j:OffenseFactorBiasMotivationCode
        /// </summary>
        /// <value>A kind of bias that motivated an offense, if any. NIEM reference is j:OffenseFactorBiasMotivationCode</value>

        [DataMember(Name="factorBiasMotivationCode")]
        public List<NdexBiasMotivationCodeType> FactorBiasMotivationCode { get; set; }

        /// <summary>
        /// A kind of bias that motivated an offense, if any. NIEM reference is j:OffenseFactorBiasMotivationText
        /// </summary>
        /// <value>A kind of bias that motivated an offense, if any. NIEM reference is j:OffenseFactorBiasMotivationText</value>

        [DataMember(Name="factorBiasMotivation")]
        public List<NcTextType> FactorBiasMotivation { get; set; }

        /// <summary>
        /// An indication that the offender was motivated to commit the offense, in whole/part, because of bias. NIEM reference is j:OffenseFactorBiasMotivationCauseCode
        /// </summary>
        /// <value>An indication that the offender was motivated to commit the offense, in whole/part, because of bias. NIEM reference is j:OffenseFactorBiasMotivationCauseCode</value>

        [DataMember(Name="factorBiasMotivationCauseCode")]
        public List<NdexBiasMotivationCauseCodeType> FactorBiasMotivationCauseCode { get; set; }

        /// <summary>
        /// An indication that the offender was motivated to commit the offense, in whole/part, because of bias. NIEM reference is j:OffenseFactorBiasMotivationCauseText
        /// </summary>
        /// <value>An indication that the offender was motivated to commit the offense, in whole/part, because of bias. NIEM reference is j:OffenseFactorBiasMotivationCauseText</value>

        [DataMember(Name="factorBiasMotivationCause")]
        public List<NcTextType> FactorBiasMotivationCause { get; set; }

        /// <summary>
        /// True if alcohol or a drug was connected with offense; false otherwise. NIEM reference is j:OffenseAlcoholDrugConnectedIndicator
        /// </summary>
        /// <value>True if alcohol or a drug was connected with offense; false otherwise. NIEM reference is j:OffenseAlcoholDrugConnectedIndicator</value>

        [DataMember(Name="isAlcoholDrugConnected")]
        public List<NiemXsboolean> IsAlcoholDrugConnected { get; set; }

        /// <summary>
        /// A kind of criminal activity. NIEM reference is j:CriminalActivityCategoryCode
        /// </summary>
        /// <value>A kind of criminal activity. NIEM reference is j:CriminalActivityCategoryCode</value>

        [DataMember(Name="criminalActivityCategoryCode")]
        public List<UcrCriminalActivityCategoryCodeType> CriminalActivityCategoryCode { get; set; }

        /// <summary>
        /// A kind of criminal activity. NIEM reference is j:CriminalActivityCategoryText
        /// </summary>
        /// <value>A kind of criminal activity. NIEM reference is j:CriminalActivityCategoryText</value>

        [DataMember(Name="criminalActivityCategory")]
        public List<NcTextType> CriminalActivityCategory { get; set; }

        /// <summary>
        /// A kind of criminal activity. NIEM reference is j:CriminalActivityNDExCategoryCode
        /// </summary>
        /// <value>A kind of criminal activity. NIEM reference is j:CriminalActivityNDExCategoryCode</value>

        [DataMember(Name="criminalActivityNdExCategoryCode")]
        public List<NdexCriminalActivityCategoryNDExCodeType> CriminalActivityNdExCategoryCode { get; set; }

        /// <summary>
        /// A set of details that further characterizes an offense. NIEM reference is j:OffenseQualifierText
        /// </summary>
        /// <value>A set of details that further characterizes an offense. NIEM reference is j:OffenseQualifierText</value>

        [DataMember(Name="qualifier")]
        public List<NcTextType> Qualifier { get; set; }

        /// <summary>
        /// True if a gang is involved in an offense; false otherwise. NIEM reference is j:OffenseGangInvolvementIndicator
        /// </summary>
        /// <value>True if a gang is involved in an offense; false otherwise. NIEM reference is j:OffenseGangInvolvementIndicator</value>

        [DataMember(Name="isGangInvolvement")]
        public List<NiemXsboolean> IsGangInvolvement { get; set; }

        /// <summary>
        /// A description of the level of severity of an offense. NIEM reference is j:OffenseSeverityLevelText
        /// </summary>
        /// <value>A description of the level of severity of an offense. NIEM reference is j:OffenseSeverityLevelText</value>

        [DataMember(Name="severityLevel")]
        public List<NcTextType> SeverityLevel { get; set; }

        /// <summary>
        /// True if offense involves entering a private and occupied dwelling, with the intent of committing a crime, often while threatening the resident of the dwelling; false otherwise. NIEM reference is j:OffenseHomeInvasionIndicator
        /// </summary>
        /// <value>True if offense involves entering a private and occupied dwelling, with the intent of committing a crime, often while threatening the resident of the dwelling; false otherwise. NIEM reference is j:OffenseHomeInvasionIndicator</value>

        [DataMember(Name="isHomeInvasion")]
        public List<NiemXsboolean> IsHomeInvasion { get; set; }

        /// <summary>
        /// True if an offense involves the infliction of physical injury, or the creation of a reasonable fear that physical injury or harm will be inflicted, by a parent or member or former member of a child&#x27;s household, against a child or against another member of the household; false otherwise. NIEM reference is j:OffenseDomesticViolenceIndicator
        /// </summary>
        /// <value>True if an offense involves the infliction of physical injury, or the creation of a reasonable fear that physical injury or harm will be inflicted, by a parent or member or former member of a child&#x27;s household, against a child or against another member of the household; false otherwise. NIEM reference is j:OffenseDomesticViolenceIndicator</value>

        [DataMember(Name="isDomesticViolence")]
        public List<NiemXsboolean> IsDomesticViolence { get; set; }

        /// <summary>
        /// True if an offense was against a family member and by statute is not considered to be domestic violence; false otherwise. NIEM reference is j:OffenseFamilyMemberIndicator
        /// </summary>
        /// <value>True if an offense was against a family member and by statute is not considered to be domestic violence; false otherwise. NIEM reference is j:OffenseFamilyMemberIndicator</value>

        [DataMember(Name="isFamilyMember")]
        public List<NiemXsboolean> IsFamilyMember { get; set; }

        /// <summary>
        /// True if an offense involves use of identity information of another person, fraudulently and without permission to obtain money, goods, services, or false official documents; false otherwise. NIEM reference is j:OffenseIdentityTheftIndicator
        /// </summary>
        /// <value>True if an offense involves use of identity information of another person, fraudulently and without permission to obtain money, goods, services, or false official documents; false otherwise. NIEM reference is j:OffenseIdentityTheftIndicator</value>

        [DataMember(Name="isIdentityTheft")]
        public List<NiemXsboolean> IsIdentityTheft { get; set; }

        /// <summary>
        /// True if a Racketeer Influenced and Corrupt Organizations Act (RICO) Act or &#x27;little RICO Act&#x27; applicable offense; false otherwise. NIEM reference is j:OffenseRacketeerInfluencedAndCorruptOrganizationsActIndicator
        /// </summary>
        /// <value>True if a Racketeer Influenced and Corrupt Organizations Act (RICO) Act or &#x27;little RICO Act&#x27; applicable offense; false otherwise. NIEM reference is j:OffenseRacketeerInfluencedAndCorruptOrganizationsActIndicator</value>

        [DataMember(Name="isRacketeerInfluencedAndCorruptOrganizationsAct")]
        public List<NiemXsboolean> IsRacketeerInfluencedAndCorruptOrganizationsAct { get; set; }

        /// <summary>
        /// True if an offense involves the criminal taking of any cargo that constitutes, in whole or in part, a commercial shipment of freight moving in commerce; false otherwise. NIEM reference is j:OffenseCargoTheftIndicator
        /// </summary>
        /// <value>True if an offense involves the criminal taking of any cargo that constitutes, in whole or in part, a commercial shipment of freight moving in commerce; false otherwise. NIEM reference is j:OffenseCargoTheftIndicator</value>

        [DataMember(Name="isCargoTheft")]
        public List<NiemXsboolean> IsCargoTheft { get; set; }

        /// <summary>
        /// True if an offense involves the use of force or violence against persons or property to intimidate or coerce a Government, the civilian population, or any segment thereof, in furtherance of political or social objectives; false otherwise. NIEM reference is j:OffenseTerrorismIndicator
        /// </summary>
        /// <value>True if an offense involves the use of force or violence against persons or property to intimidate or coerce a Government, the civilian population, or any segment thereof, in furtherance of political or social objectives; false otherwise. NIEM reference is j:OffenseTerrorismIndicator</value>

        [DataMember(Name="isTerrorism")]
        public List<NiemXsboolean> IsTerrorism { get; set; }

        /// <summary>
        /// A number of structures or premises entered by the subject during an offense. NIEM reference is j:OffenseStructuresEnteredQuantity
        /// </summary>
        /// <value>A number of structures or premises entered by the subject during an offense. NIEM reference is j:OffenseStructuresEnteredQuantity</value>

        [DataMember(Name="structuresEnteredQuantity")]
        public List<NcQuantityType> StructuresEnteredQuantity { get; set; }

        /// <summary>
        /// A set of details about a circumstance or factor that has an effect on an offense. NIEM reference is j:OffenseFactor
        /// </summary>
        /// <value>A set of details about a circumstance or factor that has an effect on an offense. NIEM reference is j:OffenseFactor</value>

        [DataMember(Name="factor")]
        public List<JOffenseFactorType> Factor { get; set; }

        /// <summary>
        /// A point of entry to a location or structure involved in an offense. NIEM reference is j:OffenseEntryPoint
        /// </summary>
        /// <value>A point of entry to a location or structure involved in an offense. NIEM reference is j:OffenseEntryPoint</value>

        [DataMember(Name="entryPoint")]
        public List<JPassagePointType> EntryPoint { get; set; }

        /// <summary>
        /// A point of exit to a location or structure involved in an offense. NIEM reference is j:OffenseExitPoint
        /// </summary>
        /// <value>A point of exit to a location or structure involved in an offense. NIEM reference is j:OffenseExitPoint</value>

        [DataMember(Name="exitPoint")]
        public List<JPassagePointType> ExitPoint { get; set; }

        /// <summary>
        /// A force used during an offense, whether physical or aided by a tool or weapon. NIEM reference is j:OffenseForce
        /// </summary>
        /// <value>A force used during an offense, whether physical or aided by a tool or weapon. NIEM reference is j:OffenseForce</value>

        [DataMember(Name="force")]
        public List<JForceType> Force { get; set; }

        /// <summary>
        /// A set of details about a statute, rule, or ordinance that was violated as a result of an offense. NIEM reference is j:OffenseViolatedStatute
        /// </summary>
        /// <value>A set of details about a statute, rule, or ordinance that was violated as a result of an offense. NIEM reference is j:OffenseViolatedStatute</value>

        [DataMember(Name="violatedStatute")]
        public List<JStatuteType> ViolatedStatute { get; set; }

        /// <summary>
        /// True if an offense was attempted but not completed; false otherwise. NIEM reference is j:OffenseAttemptedIndicator
        /// </summary>
        /// <value>True if an offense was attempted but not completed; false otherwise. NIEM reference is j:OffenseAttemptedIndicator</value>

        [DataMember(Name="isAttempted")]
        public List<NiemXsboolean> IsAttempted { get; set; }

        /// <summary>
        /// A level of an offense, such as a felony or misdemeanor. NIEM reference is j:OffenseLevelText
        /// </summary>
        /// <value>A level of an offense, such as a felony or misdemeanor. NIEM reference is j:OffenseLevelText</value>

        [DataMember(Name="level")]
        public List<NcTextType> Level { get; set; }

        /// <summary>
        /// A kind of gang involved in an offense. NIEM reference is j:OffenseGangInvolvementCategoryCode
        /// </summary>
        /// <value>A kind of gang involved in an offense. NIEM reference is j:OffenseGangInvolvementCategoryCode</value>

        [DataMember(Name="gangInvolvementCategoryCode")]
        public List<NdexGangInvolvementCategoryCodeType> GangInvolvementCategoryCode { get; set; }

        /// <summary>
        /// jOffenseType JSON-LD context
        /// </summary>
        /// <value>jOffenseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjOffenseTypeContextJsonldEnum for ../JSON-LD_Contexts/jOffenseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jOffenseTypeContext.jsonld")]
            JSONLDContextsjOffenseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jOffenseType JSON-LD context
        /// </summary>
        /// <value>jOffenseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JOffenseType {\n");
            sb.Append("  DrivingCode: ").Append(DrivingCode).Append("\n");
            sb.Append("  ApcoCode: ").Append(ApcoCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NcicCode: ").Append(NcicCode).Append("\n");
            sb.Append("  NdExCode: ").Append(NdExCode).Append("\n");
            sb.Append("  UcrCode: ").Append(UcrCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryNdExCode: ").Append(CategoryNdExCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  MoCrimeAndMotiveCode: ").Append(MoCrimeAndMotiveCode).Append("\n");
            sb.Append("  MoCrimeAndMotive: ").Append(MoCrimeAndMotive).Append("\n");
            sb.Append("  IsEvidenceHeld: ").Append(IsEvidenceHeld).Append("\n");
            sb.Append("  SentenceDate: ").Append(SentenceDate).Append("\n");
            sb.Append("  FactorBiasMotivationDescription: ").Append(FactorBiasMotivationDescription).Append("\n");
            sb.Append("  IsJuvenileAsAdult: ").Append(IsJuvenileAsAdult).Append("\n");
            sb.Append("  IsGamblingConnected: ").Append(IsGamblingConnected).Append("\n");
            sb.Append("  IsJuvenileOffender: ").Append(IsJuvenileOffender).Append("\n");
            sb.Append("  IsPsychologicalPsychiatricConditionConnected: ").Append(IsPsychologicalPsychiatricConditionConnected).Append("\n");
            sb.Append("  FactorBiasMotivationCode: ").Append(FactorBiasMotivationCode).Append("\n");
            sb.Append("  FactorBiasMotivation: ").Append(FactorBiasMotivation).Append("\n");
            sb.Append("  FactorBiasMotivationCauseCode: ").Append(FactorBiasMotivationCauseCode).Append("\n");
            sb.Append("  FactorBiasMotivationCause: ").Append(FactorBiasMotivationCause).Append("\n");
            sb.Append("  IsAlcoholDrugConnected: ").Append(IsAlcoholDrugConnected).Append("\n");
            sb.Append("  CriminalActivityCategoryCode: ").Append(CriminalActivityCategoryCode).Append("\n");
            sb.Append("  CriminalActivityCategory: ").Append(CriminalActivityCategory).Append("\n");
            sb.Append("  CriminalActivityNdExCategoryCode: ").Append(CriminalActivityNdExCategoryCode).Append("\n");
            sb.Append("  Qualifier: ").Append(Qualifier).Append("\n");
            sb.Append("  IsGangInvolvement: ").Append(IsGangInvolvement).Append("\n");
            sb.Append("  SeverityLevel: ").Append(SeverityLevel).Append("\n");
            sb.Append("  IsHomeInvasion: ").Append(IsHomeInvasion).Append("\n");
            sb.Append("  IsDomesticViolence: ").Append(IsDomesticViolence).Append("\n");
            sb.Append("  IsFamilyMember: ").Append(IsFamilyMember).Append("\n");
            sb.Append("  IsIdentityTheft: ").Append(IsIdentityTheft).Append("\n");
            sb.Append("  IsRacketeerInfluencedAndCorruptOrganizationsAct: ").Append(IsRacketeerInfluencedAndCorruptOrganizationsAct).Append("\n");
            sb.Append("  IsCargoTheft: ").Append(IsCargoTheft).Append("\n");
            sb.Append("  IsTerrorism: ").Append(IsTerrorism).Append("\n");
            sb.Append("  StructuresEnteredQuantity: ").Append(StructuresEnteredQuantity).Append("\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  EntryPoint: ").Append(EntryPoint).Append("\n");
            sb.Append("  ExitPoint: ").Append(ExitPoint).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  ViolatedStatute: ").Append(ViolatedStatute).Append("\n");
            sb.Append("  IsAttempted: ").Append(IsAttempted).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  GangInvolvementCategoryCode: ").Append(GangInvolvementCategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JOffenseType)obj);
        }

        /// <summary>
        /// Returns true if JOffenseType instances are equal
        /// </summary>
        /// <param name="other">Instance of JOffenseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JOffenseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DrivingCode == other.DrivingCode ||
                    DrivingCode != null &&
                    DrivingCode.SequenceEqual(other.DrivingCode)
                ) && 
                (
                    ApcoCode == other.ApcoCode ||
                    ApcoCode != null &&
                    ApcoCode.SequenceEqual(other.ApcoCode)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    NcicCode == other.NcicCode ||
                    NcicCode != null &&
                    NcicCode.SequenceEqual(other.NcicCode)
                ) && 
                (
                    NdExCode == other.NdExCode ||
                    NdExCode != null &&
                    NdExCode.SequenceEqual(other.NdExCode)
                ) && 
                (
                    UcrCode == other.UcrCode ||
                    UcrCode != null &&
                    UcrCode.SequenceEqual(other.UcrCode)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CategoryNdExCode == other.CategoryNdExCode ||
                    CategoryNdExCode != null &&
                    CategoryNdExCode.SequenceEqual(other.CategoryNdExCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    MoCrimeAndMotiveCode == other.MoCrimeAndMotiveCode ||
                    MoCrimeAndMotiveCode != null &&
                    MoCrimeAndMotiveCode.SequenceEqual(other.MoCrimeAndMotiveCode)
                ) && 
                (
                    MoCrimeAndMotive == other.MoCrimeAndMotive ||
                    MoCrimeAndMotive != null &&
                    MoCrimeAndMotive.SequenceEqual(other.MoCrimeAndMotive)
                ) && 
                (
                    IsEvidenceHeld == other.IsEvidenceHeld ||
                    IsEvidenceHeld != null &&
                    IsEvidenceHeld.SequenceEqual(other.IsEvidenceHeld)
                ) && 
                (
                    SentenceDate == other.SentenceDate ||
                    SentenceDate != null &&
                    SentenceDate.SequenceEqual(other.SentenceDate)
                ) && 
                (
                    FactorBiasMotivationDescription == other.FactorBiasMotivationDescription ||
                    FactorBiasMotivationDescription != null &&
                    FactorBiasMotivationDescription.SequenceEqual(other.FactorBiasMotivationDescription)
                ) && 
                (
                    IsJuvenileAsAdult == other.IsJuvenileAsAdult ||
                    IsJuvenileAsAdult != null &&
                    IsJuvenileAsAdult.SequenceEqual(other.IsJuvenileAsAdult)
                ) && 
                (
                    IsGamblingConnected == other.IsGamblingConnected ||
                    IsGamblingConnected != null &&
                    IsGamblingConnected.SequenceEqual(other.IsGamblingConnected)
                ) && 
                (
                    IsJuvenileOffender == other.IsJuvenileOffender ||
                    IsJuvenileOffender != null &&
                    IsJuvenileOffender.SequenceEqual(other.IsJuvenileOffender)
                ) && 
                (
                    IsPsychologicalPsychiatricConditionConnected == other.IsPsychologicalPsychiatricConditionConnected ||
                    IsPsychologicalPsychiatricConditionConnected != null &&
                    IsPsychologicalPsychiatricConditionConnected.SequenceEqual(other.IsPsychologicalPsychiatricConditionConnected)
                ) && 
                (
                    FactorBiasMotivationCode == other.FactorBiasMotivationCode ||
                    FactorBiasMotivationCode != null &&
                    FactorBiasMotivationCode.SequenceEqual(other.FactorBiasMotivationCode)
                ) && 
                (
                    FactorBiasMotivation == other.FactorBiasMotivation ||
                    FactorBiasMotivation != null &&
                    FactorBiasMotivation.SequenceEqual(other.FactorBiasMotivation)
                ) && 
                (
                    FactorBiasMotivationCauseCode == other.FactorBiasMotivationCauseCode ||
                    FactorBiasMotivationCauseCode != null &&
                    FactorBiasMotivationCauseCode.SequenceEqual(other.FactorBiasMotivationCauseCode)
                ) && 
                (
                    FactorBiasMotivationCause == other.FactorBiasMotivationCause ||
                    FactorBiasMotivationCause != null &&
                    FactorBiasMotivationCause.SequenceEqual(other.FactorBiasMotivationCause)
                ) && 
                (
                    IsAlcoholDrugConnected == other.IsAlcoholDrugConnected ||
                    IsAlcoholDrugConnected != null &&
                    IsAlcoholDrugConnected.SequenceEqual(other.IsAlcoholDrugConnected)
                ) && 
                (
                    CriminalActivityCategoryCode == other.CriminalActivityCategoryCode ||
                    CriminalActivityCategoryCode != null &&
                    CriminalActivityCategoryCode.SequenceEqual(other.CriminalActivityCategoryCode)
                ) && 
                (
                    CriminalActivityCategory == other.CriminalActivityCategory ||
                    CriminalActivityCategory != null &&
                    CriminalActivityCategory.SequenceEqual(other.CriminalActivityCategory)
                ) && 
                (
                    CriminalActivityNdExCategoryCode == other.CriminalActivityNdExCategoryCode ||
                    CriminalActivityNdExCategoryCode != null &&
                    CriminalActivityNdExCategoryCode.SequenceEqual(other.CriminalActivityNdExCategoryCode)
                ) && 
                (
                    Qualifier == other.Qualifier ||
                    Qualifier != null &&
                    Qualifier.SequenceEqual(other.Qualifier)
                ) && 
                (
                    IsGangInvolvement == other.IsGangInvolvement ||
                    IsGangInvolvement != null &&
                    IsGangInvolvement.SequenceEqual(other.IsGangInvolvement)
                ) && 
                (
                    SeverityLevel == other.SeverityLevel ||
                    SeverityLevel != null &&
                    SeverityLevel.SequenceEqual(other.SeverityLevel)
                ) && 
                (
                    IsHomeInvasion == other.IsHomeInvasion ||
                    IsHomeInvasion != null &&
                    IsHomeInvasion.SequenceEqual(other.IsHomeInvasion)
                ) && 
                (
                    IsDomesticViolence == other.IsDomesticViolence ||
                    IsDomesticViolence != null &&
                    IsDomesticViolence.SequenceEqual(other.IsDomesticViolence)
                ) && 
                (
                    IsFamilyMember == other.IsFamilyMember ||
                    IsFamilyMember != null &&
                    IsFamilyMember.SequenceEqual(other.IsFamilyMember)
                ) && 
                (
                    IsIdentityTheft == other.IsIdentityTheft ||
                    IsIdentityTheft != null &&
                    IsIdentityTheft.SequenceEqual(other.IsIdentityTheft)
                ) && 
                (
                    IsRacketeerInfluencedAndCorruptOrganizationsAct == other.IsRacketeerInfluencedAndCorruptOrganizationsAct ||
                    IsRacketeerInfluencedAndCorruptOrganizationsAct != null &&
                    IsRacketeerInfluencedAndCorruptOrganizationsAct.SequenceEqual(other.IsRacketeerInfluencedAndCorruptOrganizationsAct)
                ) && 
                (
                    IsCargoTheft == other.IsCargoTheft ||
                    IsCargoTheft != null &&
                    IsCargoTheft.SequenceEqual(other.IsCargoTheft)
                ) && 
                (
                    IsTerrorism == other.IsTerrorism ||
                    IsTerrorism != null &&
                    IsTerrorism.SequenceEqual(other.IsTerrorism)
                ) && 
                (
                    StructuresEnteredQuantity == other.StructuresEnteredQuantity ||
                    StructuresEnteredQuantity != null &&
                    StructuresEnteredQuantity.SequenceEqual(other.StructuresEnteredQuantity)
                ) && 
                (
                    Factor == other.Factor ||
                    Factor != null &&
                    Factor.SequenceEqual(other.Factor)
                ) && 
                (
                    EntryPoint == other.EntryPoint ||
                    EntryPoint != null &&
                    EntryPoint.SequenceEqual(other.EntryPoint)
                ) && 
                (
                    ExitPoint == other.ExitPoint ||
                    ExitPoint != null &&
                    ExitPoint.SequenceEqual(other.ExitPoint)
                ) && 
                (
                    Force == other.Force ||
                    Force != null &&
                    Force.SequenceEqual(other.Force)
                ) && 
                (
                    ViolatedStatute == other.ViolatedStatute ||
                    ViolatedStatute != null &&
                    ViolatedStatute.SequenceEqual(other.ViolatedStatute)
                ) && 
                (
                    IsAttempted == other.IsAttempted ||
                    IsAttempted != null &&
                    IsAttempted.SequenceEqual(other.IsAttempted)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.SequenceEqual(other.Level)
                ) && 
                (
                    GangInvolvementCategoryCode == other.GangInvolvementCategoryCode ||
                    GangInvolvementCategoryCode != null &&
                    GangInvolvementCategoryCode.SequenceEqual(other.GangInvolvementCategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DrivingCode != null)
                    hashCode = hashCode * 59 + DrivingCode.GetHashCode();
                    if (ApcoCode != null)
                    hashCode = hashCode * 59 + ApcoCode.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NcicCode != null)
                    hashCode = hashCode * 59 + NcicCode.GetHashCode();
                    if (NdExCode != null)
                    hashCode = hashCode * 59 + NdExCode.GetHashCode();
                    if (UcrCode != null)
                    hashCode = hashCode * 59 + UcrCode.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CategoryNdExCode != null)
                    hashCode = hashCode * 59 + CategoryNdExCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (MoCrimeAndMotiveCode != null)
                    hashCode = hashCode * 59 + MoCrimeAndMotiveCode.GetHashCode();
                    if (MoCrimeAndMotive != null)
                    hashCode = hashCode * 59 + MoCrimeAndMotive.GetHashCode();
                    if (IsEvidenceHeld != null)
                    hashCode = hashCode * 59 + IsEvidenceHeld.GetHashCode();
                    if (SentenceDate != null)
                    hashCode = hashCode * 59 + SentenceDate.GetHashCode();
                    if (FactorBiasMotivationDescription != null)
                    hashCode = hashCode * 59 + FactorBiasMotivationDescription.GetHashCode();
                    if (IsJuvenileAsAdult != null)
                    hashCode = hashCode * 59 + IsJuvenileAsAdult.GetHashCode();
                    if (IsGamblingConnected != null)
                    hashCode = hashCode * 59 + IsGamblingConnected.GetHashCode();
                    if (IsJuvenileOffender != null)
                    hashCode = hashCode * 59 + IsJuvenileOffender.GetHashCode();
                    if (IsPsychologicalPsychiatricConditionConnected != null)
                    hashCode = hashCode * 59 + IsPsychologicalPsychiatricConditionConnected.GetHashCode();
                    if (FactorBiasMotivationCode != null)
                    hashCode = hashCode * 59 + FactorBiasMotivationCode.GetHashCode();
                    if (FactorBiasMotivation != null)
                    hashCode = hashCode * 59 + FactorBiasMotivation.GetHashCode();
                    if (FactorBiasMotivationCauseCode != null)
                    hashCode = hashCode * 59 + FactorBiasMotivationCauseCode.GetHashCode();
                    if (FactorBiasMotivationCause != null)
                    hashCode = hashCode * 59 + FactorBiasMotivationCause.GetHashCode();
                    if (IsAlcoholDrugConnected != null)
                    hashCode = hashCode * 59 + IsAlcoholDrugConnected.GetHashCode();
                    if (CriminalActivityCategoryCode != null)
                    hashCode = hashCode * 59 + CriminalActivityCategoryCode.GetHashCode();
                    if (CriminalActivityCategory != null)
                    hashCode = hashCode * 59 + CriminalActivityCategory.GetHashCode();
                    if (CriminalActivityNdExCategoryCode != null)
                    hashCode = hashCode * 59 + CriminalActivityNdExCategoryCode.GetHashCode();
                    if (Qualifier != null)
                    hashCode = hashCode * 59 + Qualifier.GetHashCode();
                    if (IsGangInvolvement != null)
                    hashCode = hashCode * 59 + IsGangInvolvement.GetHashCode();
                    if (SeverityLevel != null)
                    hashCode = hashCode * 59 + SeverityLevel.GetHashCode();
                    if (IsHomeInvasion != null)
                    hashCode = hashCode * 59 + IsHomeInvasion.GetHashCode();
                    if (IsDomesticViolence != null)
                    hashCode = hashCode * 59 + IsDomesticViolence.GetHashCode();
                    if (IsFamilyMember != null)
                    hashCode = hashCode * 59 + IsFamilyMember.GetHashCode();
                    if (IsIdentityTheft != null)
                    hashCode = hashCode * 59 + IsIdentityTheft.GetHashCode();
                    if (IsRacketeerInfluencedAndCorruptOrganizationsAct != null)
                    hashCode = hashCode * 59 + IsRacketeerInfluencedAndCorruptOrganizationsAct.GetHashCode();
                    if (IsCargoTheft != null)
                    hashCode = hashCode * 59 + IsCargoTheft.GetHashCode();
                    if (IsTerrorism != null)
                    hashCode = hashCode * 59 + IsTerrorism.GetHashCode();
                    if (StructuresEnteredQuantity != null)
                    hashCode = hashCode * 59 + StructuresEnteredQuantity.GetHashCode();
                    if (Factor != null)
                    hashCode = hashCode * 59 + Factor.GetHashCode();
                    if (EntryPoint != null)
                    hashCode = hashCode * 59 + EntryPoint.GetHashCode();
                    if (ExitPoint != null)
                    hashCode = hashCode * 59 + ExitPoint.GetHashCode();
                    if (Force != null)
                    hashCode = hashCode * 59 + Force.GetHashCode();
                    if (ViolatedStatute != null)
                    hashCode = hashCode * 59 + ViolatedStatute.GetHashCode();
                    if (IsAttempted != null)
                    hashCode = hashCode * 59 + IsAttempted.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (GangInvolvementCategoryCode != null)
                    hashCode = hashCode * 59 + GangInvolvementCategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JOffenseType left, JOffenseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JOffenseType left, JOffenseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
