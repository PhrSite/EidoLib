/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a charge.
    /// </summary>
    [DataContract]
    public partial class ScrChargeAugmentationType : IEquatable<ScrChargeAugmentationType>
    { 
        /// <summary>
        /// An identification that represents an Apprehension Charge. NIEM reference is scr:ApprehensionChargeIdentification
        /// </summary>
        /// <value>An identification that represents an Apprehension Charge. NIEM reference is scr:ApprehensionChargeIdentification</value>

        [DataMember(Name="apprehensionChargeIdentification")]
        public List<NcIdentificationType> ApprehensionChargeIdentification { get; set; }

        /// <summary>
        /// True if the foreign authorities have been notified about this CHARGE; false otherwise. NIEM reference is scr:ForeignAuthorityNotifiedIndicator
        /// </summary>
        /// <value>True if the foreign authorities have been notified about this CHARGE; false otherwise. NIEM reference is scr:ForeignAuthorityNotifiedIndicator</value>

        [DataMember(Name="isForeignAuthorityNotified")]
        public List<NiemXsboolean> IsForeignAuthorityNotified { get; set; }

        /// <summary>
        /// A kind of charge. NIEM reference is scr:ChargeCategoryClassificationCode
        /// </summary>
        /// <value>A kind of charge. NIEM reference is scr:ChargeCategoryClassificationCode</value>

        [DataMember(Name="chargeCategoryClassificationCode")]
        public List<ScrChargeCategoryCodeType> ChargeCategoryClassificationCode { get; set; }

        /// <summary>
        /// A text that describes the section of law applicable to the CHARGE TYPE. NIEM reference is scr:ChargeSectionText
        /// </summary>
        /// <value>A text that describes the section of law applicable to the CHARGE TYPE. NIEM reference is scr:ChargeSectionText</value>

        [DataMember(Name="chargeSection")]
        public List<NcTextType> ChargeSection { get; set; }

        /// <summary>
        /// scrChargeAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrChargeAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrChargeAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrChargeAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrChargeAugmentationTypeContext.jsonld")]
            JSONLDContextsscrChargeAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrChargeAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrChargeAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrChargeAugmentationType {\n");
            sb.Append("  ApprehensionChargeIdentification: ").Append(ApprehensionChargeIdentification).Append("\n");
            sb.Append("  IsForeignAuthorityNotified: ").Append(IsForeignAuthorityNotified).Append("\n");
            sb.Append("  ChargeCategoryClassificationCode: ").Append(ChargeCategoryClassificationCode).Append("\n");
            sb.Append("  ChargeSection: ").Append(ChargeSection).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrChargeAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrChargeAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrChargeAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrChargeAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApprehensionChargeIdentification == other.ApprehensionChargeIdentification ||
                    ApprehensionChargeIdentification != null &&
                    ApprehensionChargeIdentification.SequenceEqual(other.ApprehensionChargeIdentification)
                ) && 
                (
                    IsForeignAuthorityNotified == other.IsForeignAuthorityNotified ||
                    IsForeignAuthorityNotified != null &&
                    IsForeignAuthorityNotified.SequenceEqual(other.IsForeignAuthorityNotified)
                ) && 
                (
                    ChargeCategoryClassificationCode == other.ChargeCategoryClassificationCode ||
                    ChargeCategoryClassificationCode != null &&
                    ChargeCategoryClassificationCode.SequenceEqual(other.ChargeCategoryClassificationCode)
                ) && 
                (
                    ChargeSection == other.ChargeSection ||
                    ChargeSection != null &&
                    ChargeSection.SequenceEqual(other.ChargeSection)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApprehensionChargeIdentification != null)
                    hashCode = hashCode * 59 + ApprehensionChargeIdentification.GetHashCode();
                    if (IsForeignAuthorityNotified != null)
                    hashCode = hashCode * 59 + IsForeignAuthorityNotified.GetHashCode();
                    if (ChargeCategoryClassificationCode != null)
                    hashCode = hashCode * 59 + ChargeCategoryClassificationCode.GetHashCode();
                    if (ChargeSection != null)
                    hashCode = hashCode * 59 + ChargeSection.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrChargeAugmentationType left, ScrChargeAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrChargeAugmentationType left, ScrChargeAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
