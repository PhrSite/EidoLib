/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a handwritten (and often stylized) depiction of someone&#x27;s name, nickname, or even a simple X or other mark that a person writes on documents as a proof of identity and intent.
    /// </summary>
    [DataContract]
    public partial class JSignatureType : IEquatable<JSignatureType>
    { 
        /// <summary>
        /// An image of a signature. NIEM reference is j:SignatureImage
        /// </summary>
        /// <value>An image of a signature. NIEM reference is j:SignatureImage</value>

        [DataMember(Name="image")]
        public List<NcImageType> Image { get; set; }

        /// <summary>
        /// A full name of an individual associated with a signature. NIEM reference is j:SignaturePersonName
        /// </summary>
        /// <value>A full name of an individual associated with a signature. NIEM reference is j:SignaturePersonName</value>

        [DataMember(Name="personName")]
        public List<NcPersonNameType> PersonName { get; set; }

        /// <summary>
        /// A name used in a signature. NIEM reference is j:SignatureNameText
        /// </summary>
        /// <value>A name used in a signature. NIEM reference is j:SignatureNameText</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// A location where a signature was captured. NIEM reference is j:SignatureLocationText
        /// </summary>
        /// <value>A location where a signature was captured. NIEM reference is j:SignatureLocationText</value>

        [DataMember(Name="location")]
        public List<NcTextType> Location { get; set; }

        /// <summary>
        /// A method used for capturing a signature (i.e. wet, digital, etc.) NIEM reference is j:SignatureMethodText
        /// </summary>
        /// <value>A method used for capturing a signature (i.e. wet, digital, etc.) NIEM reference is j:SignatureMethodText</value>

        [DataMember(Name="method")]
        public List<NcTextType> Method { get; set; }

        /// <summary>
        /// A date associated with a signature. NIEM reference is j:SignatureDate
        /// </summary>
        /// <value>A date associated with a signature. NIEM reference is j:SignatureDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// jSignatureType JSON-LD context
        /// </summary>
        /// <value>jSignatureType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSignatureTypeContextJsonldEnum for ../JSON-LD_Contexts/jSignatureTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSignatureTypeContext.jsonld")]
            JSONLDContextsjSignatureTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSignatureType JSON-LD context
        /// </summary>
        /// <value>jSignatureType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSignatureType {\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  PersonName: ").Append(PersonName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSignatureType)obj);
        }

        /// <summary>
        /// Returns true if JSignatureType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSignatureType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSignatureType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.SequenceEqual(other.Image)
                ) && 
                (
                    PersonName == other.PersonName ||
                    PersonName != null &&
                    PersonName.SequenceEqual(other.PersonName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.SequenceEqual(other.Method)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (PersonName != null)
                    hashCode = hashCode * 59 + PersonName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSignatureType left, JSignatureType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSignatureType left, JSignatureType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
