/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a requirement or stipulation.
    /// </summary>
    [DataContract]
    public partial class NcConditionType : NcActivityType, IEquatable<NcConditionType>
    { 
        /// <summary>
        /// An identifier of a group of conditions to which this condition belongs. NIEM reference is nc:ConditionGroupID
        /// </summary>
        /// <value>An identifier of a group of conditions to which this condition belongs. NIEM reference is nc:ConditionGroupID</value>

        [DataMember(Name="groupId")]
        public List<NiemXsstring> GroupId { get; set; }

        /// <summary>
        /// A date a condition was set. NIEM reference is nc:ConditionSetDate
        /// </summary>
        /// <value>A date a condition was set. NIEM reference is nc:ConditionSetDate</value>

        [DataMember(Name="setDate")]
        public List<NcDateType> SetDate { get; set; }

        /// <summary>
        /// A corrective action that is specified as part of a condition. NIEM reference is nc:ConditionDisciplinaryAction
        /// </summary>
        /// <value>A corrective action that is specified as part of a condition. NIEM reference is nc:ConditionDisciplinaryAction</value>

        [DataMember(Name="disciplinaryAction")]
        public List<NcDisciplinaryActionType> DisciplinaryAction { get; set; }

        /// <summary>
        /// True if a condition is strictly required; false otherwise. NIEM reference is nc:ConditionMandatoryIndicator
        /// </summary>
        /// <value>True if a condition is strictly required; false otherwise. NIEM reference is nc:ConditionMandatoryIndicator</value>

        [DataMember(Name="isMandatory")]
        public List<NiemXsboolean> IsMandatory { get; set; }

        /// <summary>
        /// True if a condition has been violated; false otherwise. NIEM reference is nc:ConditionViolatedIndicator
        /// </summary>
        /// <value>True if a condition has been violated; false otherwise. NIEM reference is nc:ConditionViolatedIndicator</value>

        [DataMember(Name="isViolated")]
        public List<NiemXsboolean> IsViolated { get; set; }

        /// <summary>
        /// A violation of a condition. NIEM reference is nc:ConditionViolationText
        /// </summary>
        /// <value>A violation of a condition. NIEM reference is nc:ConditionViolationText</value>

        [DataMember(Name="violation")]
        public List<NcTextType> Violation { get; set; }

        /// <summary>
        /// A date a condition was violated. NIEM reference is nc:ConditionViolationDate
        /// </summary>
        /// <value>A date a condition was violated. NIEM reference is nc:ConditionViolationDate</value>

        [DataMember(Name="violationDate")]
        public List<NcDateType> ViolationDate { get; set; }

        /// <summary>
        /// ncConditionType JSON-LD context
        /// </summary>
        /// <value>ncConditionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncConditionTypeContextJsonldEnum for ../JSON-LD_Contexts/ncConditionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncConditionTypeContext.jsonld")]
            JSONLDContextsncConditionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncConditionType JSON-LD context
        /// </summary>
        /// <value>ncConditionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcConditionType {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  SetDate: ").Append(SetDate).Append("\n");
            sb.Append("  DisciplinaryAction: ").Append(DisciplinaryAction).Append("\n");
            sb.Append("  IsMandatory: ").Append(IsMandatory).Append("\n");
            sb.Append("  IsViolated: ").Append(IsViolated).Append("\n");
            sb.Append("  Violation: ").Append(Violation).Append("\n");
            sb.Append("  ViolationDate: ").Append(ViolationDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcConditionType)obj);
        }

        /// <summary>
        /// Returns true if NcConditionType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcConditionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcConditionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.SequenceEqual(other.GroupId)
                ) && 
                (
                    SetDate == other.SetDate ||
                    SetDate != null &&
                    SetDate.SequenceEqual(other.SetDate)
                ) && 
                (
                    DisciplinaryAction == other.DisciplinaryAction ||
                    DisciplinaryAction != null &&
                    DisciplinaryAction.SequenceEqual(other.DisciplinaryAction)
                ) && 
                (
                    IsMandatory == other.IsMandatory ||
                    IsMandatory != null &&
                    IsMandatory.SequenceEqual(other.IsMandatory)
                ) && 
                (
                    IsViolated == other.IsViolated ||
                    IsViolated != null &&
                    IsViolated.SequenceEqual(other.IsViolated)
                ) && 
                (
                    Violation == other.Violation ||
                    Violation != null &&
                    Violation.SequenceEqual(other.Violation)
                ) && 
                (
                    ViolationDate == other.ViolationDate ||
                    ViolationDate != null &&
                    ViolationDate.SequenceEqual(other.ViolationDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (SetDate != null)
                    hashCode = hashCode * 59 + SetDate.GetHashCode();
                    if (DisciplinaryAction != null)
                    hashCode = hashCode * 59 + DisciplinaryAction.GetHashCode();
                    if (IsMandatory != null)
                    hashCode = hashCode * 59 + IsMandatory.GetHashCode();
                    if (IsViolated != null)
                    hashCode = hashCode * 59 + IsViolated.GetHashCode();
                    if (Violation != null)
                    hashCode = hashCode * 59 + Violation.GetHashCode();
                    if (ViolationDate != null)
                    hashCode = hashCode * 59 + ViolationDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcConditionType left, NcConditionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcConditionType left, NcConditionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
