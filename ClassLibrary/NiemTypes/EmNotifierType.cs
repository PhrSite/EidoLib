/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for notifier information
    /// </summary>
    [DataContract]
    public partial class EmNotifierType : IEquatable<EmNotifierType>
    { 
        /// <summary>
        /// A set of details about how to contact a person or an organization. NIEM reference is nc:ContactInformation
        /// </summary>
        /// <value>A set of details about how to contact a person or an organization. NIEM reference is nc:ContactInformation</value>

        [DataMember(Name="contactInformation")]
        public List<NcContactInformationType> ContactInformation { get; set; }

        /// <summary>
        /// An element for the date of a notification sent or received NIEM reference is em:NotificationDateTime
        /// </summary>
        /// <value>An element for the date of a notification sent or received NIEM reference is em:NotificationDateTime</value>

        [DataMember(Name="notificationDateTime")]
        public List<NiemXsdateTime> NotificationDateTime { get; set; }

        /// <summary>
        /// A description of the message Originator&#x27;s/Recipient&#x27;s role, as it may determine message distribution and presentation decisions. The list and associated value(s) is derived from the Uniform Resource Name of a published list of values and definitions, and the content is a string (which may represent a number) denoting the value itself NIEM reference is em:NotifierRoleDescriptionText
        /// </summary>
        /// <value>A description of the message Originator&#x27;s/Recipient&#x27;s role, as it may determine message distribution and presentation decisions. The list and associated value(s) is derived from the Uniform Resource Name of a published list of values and definitions, and the content is a string (which may represent a number) denoting the value itself NIEM reference is em:NotifierRoleDescriptionText</value>

        [DataMember(Name="roleDescription")]
        public List<NcTextType> RoleDescription { get; set; }

        /// <summary>
        /// An identification of the message Originator&#x27;s/Recipient&#x27;s role, as it may determine message distribution and presentation decisions. The list and associated value(s) is derived from the Uniform Resource Name of a published list of values and definitions, and the content NIEM reference is em:NotifierRoleIdentification
        /// </summary>
        /// <value>An identification of the message Originator&#x27;s/Recipient&#x27;s role, as it may determine message distribution and presentation decisions. The list and associated value(s) is derived from the Uniform Resource Name of a published list of values and definitions, and the content NIEM reference is em:NotifierRoleIdentification</value>

        [DataMember(Name="roleIdentification")]
        public List<NcIdentificationType> RoleIdentification { get; set; }

        /// <summary>
        /// emNotifierType JSON-LD context
        /// </summary>
        /// <value>emNotifierType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemNotifierTypeContextJsonldEnum for ../JSON-LD_Contexts/emNotifierTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emNotifierTypeContext.jsonld")]
            JSONLDContextsemNotifierTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emNotifierType JSON-LD context
        /// </summary>
        /// <value>emNotifierType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmNotifierType {\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  NotificationDateTime: ").Append(NotificationDateTime).Append("\n");
            sb.Append("  RoleDescription: ").Append(RoleDescription).Append("\n");
            sb.Append("  RoleIdentification: ").Append(RoleIdentification).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmNotifierType)obj);
        }

        /// <summary>
        /// Returns true if EmNotifierType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmNotifierType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmNotifierType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactInformation == other.ContactInformation ||
                    ContactInformation != null &&
                    ContactInformation.SequenceEqual(other.ContactInformation)
                ) && 
                (
                    NotificationDateTime == other.NotificationDateTime ||
                    NotificationDateTime != null &&
                    NotificationDateTime.SequenceEqual(other.NotificationDateTime)
                ) && 
                (
                    RoleDescription == other.RoleDescription ||
                    RoleDescription != null &&
                    RoleDescription.SequenceEqual(other.RoleDescription)
                ) && 
                (
                    RoleIdentification == other.RoleIdentification ||
                    RoleIdentification != null &&
                    RoleIdentification.SequenceEqual(other.RoleIdentification)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactInformation != null)
                    hashCode = hashCode * 59 + ContactInformation.GetHashCode();
                    if (NotificationDateTime != null)
                    hashCode = hashCode * 59 + NotificationDateTime.GetHashCode();
                    if (RoleDescription != null)
                    hashCode = hashCode * 59 + RoleDescription.GetHashCode();
                    if (RoleIdentification != null)
                    hashCode = hashCode * 59 + RoleIdentification.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmNotifierType left, EmNotifierType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmNotifierType left, EmNotifierType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
