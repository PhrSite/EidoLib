/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a direction of a judge not including a judgement, which determines some point or directs some steps in proceedings.
    /// </summary>
    [DataContract]
    public partial class JCourtOrderType : NcActivityType, IEquatable<JCourtOrderType>
    { 
        /// <summary>
        /// A condition described in a court order that is to be followed by a subject. NIEM reference is j:CourtOrderCondition
        /// </summary>
        /// <value>A condition described in a court order that is to be followed by a subject. NIEM reference is j:CourtOrderCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// True if the order was reviewed; false otherwise. NIEM reference is j:CourtOrderReviewedIndicator
        /// </summary>
        /// <value>True if the order was reviewed; false otherwise. NIEM reference is j:CourtOrderReviewedIndicator</value>

        [DataMember(Name="isReviewed")]
        public List<NiemXsboolean> IsReviewed { get; set; }

        /// <summary>
        /// True if the subject of an order is either out of state, or the order is in effect for agencies in other states; false otherwise. NIEM reference is j:CourtOrderOutOfStateIndicator
        /// </summary>
        /// <value>True if the subject of an order is either out of state, or the order is in effect for agencies in other states; false otherwise. NIEM reference is j:CourtOrderOutOfStateIndicator</value>

        [DataMember(Name="isOutOfState")]
        public List<NiemXsboolean> IsOutOfState { get; set; }

        /// <summary>
        /// A person, entity or organization receiving an order. NIEM reference is j:CourtOrderReceiver
        /// </summary>
        /// <value>A person, entity or organization receiving an order. NIEM reference is j:CourtOrderReceiver</value>

        [DataMember(Name="receiver")]
        public List<NcEntityType> Receiver { get; set; }

        /// <summary>
        /// True if an order to was issued by another agency; false otherwise. NIEM reference is j:CourtOrderFromOtherAgencyIndicator
        /// </summary>
        /// <value>True if an order to was issued by another agency; false otherwise. NIEM reference is j:CourtOrderFromOtherAgencyIndicator</value>

        [DataMember(Name="isFromOtherAgency")]
        public List<NiemXsboolean> IsFromOtherAgency { get; set; }

        /// <summary>
        /// True if an order to is due to an escape; false otherwise. NIEM reference is j:CourtOrderForEscapeSubjectIndicator
        /// </summary>
        /// <value>True if an order to is due to an escape; false otherwise. NIEM reference is j:CourtOrderForEscapeSubjectIndicator</value>

        [DataMember(Name="isForEscapeSubject")]
        public List<NiemXsboolean> IsForEscapeSubject { get; set; }

        /// <summary>
        /// A location to which a court order applies. NIEM reference is j:CourtOrderDesignatedLocation
        /// </summary>
        /// <value>A location to which a court order applies. NIEM reference is j:CourtOrderDesignatedLocation</value>

        [DataMember(Name="designatedLocation")]
        public List<NcLocationType> DesignatedLocation { get; set; }

        /// <summary>
        /// An organization to which a court order applies. NIEM reference is j:CourtOrderDesignatedOrganization
        /// </summary>
        /// <value>An organization to which a court order applies. NIEM reference is j:CourtOrderDesignatedOrganization</value>

        [DataMember(Name="designatedOrganization")]
        public List<NcOrganizationType> DesignatedOrganization { get; set; }

        /// <summary>
        /// A property item to which a court order applies. NIEM reference is j:CourtOrderDesignatedItem
        /// </summary>
        /// <value>A property item to which a court order applies. NIEM reference is j:CourtOrderDesignatedItem</value>

        [DataMember(Name="designatedItem")]
        public List<NcItemType> DesignatedItem { get; set; }

        /// <summary>
        /// A person to which a court order applies. The subject could be a Protected Party, the recipient of a Summons or Subpoena, the subject of a Warrant, etc. NIEM reference is j:CourtOrderDesignatedSubject
        /// </summary>
        /// <value>A person to which a court order applies. The subject could be a Protected Party, the recipient of a Summons or Subpoena, the subject of a Warrant, etc. NIEM reference is j:CourtOrderDesignatedSubject</value>

        [DataMember(Name="designatedSubject")]
        public List<JSubjectType> DesignatedSubject { get; set; }

        /// <summary>
        /// An agency responsible for enforcing a court order. NIEM reference is j:CourtOrderEnforcementAgency
        /// </summary>
        /// <value>An agency responsible for enforcing a court order. NIEM reference is j:CourtOrderEnforcementAgency</value>

        [DataMember(Name="enforcementAgency")]
        public List<NcOrganizationType> EnforcementAgency { get; set; }

        /// <summary>
        /// A court that issued a court order. NIEM reference is j:CourtOrderIssuingCourt
        /// </summary>
        /// <value>A court that issued a court order. NIEM reference is j:CourtOrderIssuingCourt</value>

        [DataMember(Name="issuingCourt")]
        public List<JCourtType> IssuingCourt { get; set; }

        /// <summary>
        /// A date a court order was issued by a judicial official. NIEM reference is j:CourtOrderIssuingDate
        /// </summary>
        /// <value>A date a court order was issued by a judicial official. NIEM reference is j:CourtOrderIssuingDate</value>

        [DataMember(Name="issuingDate")]
        public List<NcDateType> IssuingDate { get; set; }

        /// <summary>
        /// A judge or other judicial official that issued a court order. NIEM reference is j:CourtOrderIssuingJudicialOfficial
        /// </summary>
        /// <value>A judge or other judicial official that issued a court order. NIEM reference is j:CourtOrderIssuingJudicialOfficial</value>

        [DataMember(Name="issuingJudicialOfficial")]
        public List<JJudicialOfficialType> IssuingJudicialOfficial { get; set; }

        /// <summary>
        /// An area in which a court order can be enforced. NIEM reference is j:CourtOrderJurisdiction
        /// </summary>
        /// <value>An area in which a court order can be enforced. NIEM reference is j:CourtOrderJurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public List<NcJurisdictionType> Jurisdiction { get; set; }

        /// <summary>
        /// A date a court order was recalled or rescinded. NIEM reference is j:CourtOrderRecallDate
        /// </summary>
        /// <value>A date a court order was recalled or rescinded. NIEM reference is j:CourtOrderRecallDate</value>

        [DataMember(Name="recallDate")]
        public List<NcDateType> RecallDate { get; set; }

        /// <summary>
        /// A reason a court order was recalled or rescinded. NIEM reference is j:CourtOrderRecallReasonText
        /// </summary>
        /// <value>A reason a court order was recalled or rescinded. NIEM reference is j:CourtOrderRecallReasonText</value>

        [DataMember(Name="recallReason")]
        public List<NcTextType> RecallReason { get; set; }

        /// <summary>
        /// A date a court order was requested. NIEM reference is j:CourtOrderRequestDate
        /// </summary>
        /// <value>A date a court order was requested. NIEM reference is j:CourtOrderRequestDate</value>

        [DataMember(Name="requestDate")]
        public List<NcDateType> RequestDate { get; set; }

        /// <summary>
        /// A reason why a court order was requested. NIEM reference is j:CourtOrderRequestReasonText
        /// </summary>
        /// <value>A reason why a court order was requested. NIEM reference is j:CourtOrderRequestReasonText</value>

        [DataMember(Name="requestReason")]
        public List<NcTextType> RequestReason { get; set; }

        /// <summary>
        /// An entity which requested a court order. NIEM reference is j:CourtOrderRequestEntity
        /// </summary>
        /// <value>An entity which requested a court order. NIEM reference is j:CourtOrderRequestEntity</value>

        [DataMember(Name="requestEntity")]
        public List<NcEntityType> RequestEntity { get; set; }

        /// <summary>
        /// A date a court order was attempted but unable to be delivered. NIEM reference is j:CourtOrderServiceAttemptedDate
        /// </summary>
        /// <value>A date a court order was attempted but unable to be delivered. NIEM reference is j:CourtOrderServiceAttemptedDate</value>

        [DataMember(Name="serviceAttemptedDate")]
        public List<NcDateType> ServiceAttemptedDate { get; set; }

        /// <summary>
        /// A caution, warning, or risk advisement given as an alert to an official servicing a court order. NIEM reference is j:CourtOrderServiceCautionText
        /// </summary>
        /// <value>A caution, warning, or risk advisement given as an alert to an official servicing a court order. NIEM reference is j:CourtOrderServiceCautionText</value>

        [DataMember(Name="serviceCaution")]
        public List<NcTextType> ServiceCaution { get; set; }

        /// <summary>
        /// A date a court order was delivered. NIEM reference is j:CourtOrderServiceDate
        /// </summary>
        /// <value>A date a court order was delivered. NIEM reference is j:CourtOrderServiceDate</value>

        [DataMember(Name="serviceDate")]
        public List<NcDateType> ServiceDate { get; set; }

        /// <summary>
        /// A description of how a court order was delivered. NIEM reference is j:CourtOrderServiceDescriptionText
        /// </summary>
        /// <value>A description of how a court order was delivered. NIEM reference is j:CourtOrderServiceDescriptionText</value>

        [DataMember(Name="serviceDescription")]
        public List<NcTextType> ServiceDescription { get; set; }

        /// <summary>
        /// A date a service agency received a court order to deliver. NIEM reference is j:CourtOrderServiceReceivedDate
        /// </summary>
        /// <value>A date a service agency received a court order to deliver. NIEM reference is j:CourtOrderServiceReceivedDate</value>

        [DataMember(Name="serviceReceivedDate")]
        public List<NcDateType> ServiceReceivedDate { get; set; }

        /// <summary>
        /// A restriction or limitation on how a court order can be delivered. NIEM reference is j:CourtOrderServiceRestrictionText
        /// </summary>
        /// <value>A restriction or limitation on how a court order can be delivered. NIEM reference is j:CourtOrderServiceRestrictionText</value>

        [DataMember(Name="serviceRestriction")]
        public List<NcTextType> ServiceRestriction { get; set; }

        /// <summary>
        /// An enforcement official who delivered a court order. NIEM reference is j:CourtOrderServiceOfficialEnforcement
        /// </summary>
        /// <value>An enforcement official who delivered a court order. NIEM reference is j:CourtOrderServiceOfficialEnforcement</value>

        [DataMember(Name="serviceOfficialEnforcement")]
        public List<JEnforcementOfficialType> ServiceOfficialEnforcement { get; set; }

        /// <summary>
        /// A judicial official who delivered a court order. NIEM reference is j:CourtOrderServiceOfficialJudicial
        /// </summary>
        /// <value>A judicial official who delivered a court order. NIEM reference is j:CourtOrderServiceOfficialJudicial</value>

        [DataMember(Name="serviceOfficialJudicial")]
        public List<JJudicialOfficialType> ServiceOfficialJudicial { get; set; }

        /// <summary>
        /// A method used to obtain a signature on a court order. NIEM reference is j:CourtOrderSignatureMethodText
        /// </summary>
        /// <value>A method used to obtain a signature on a court order. NIEM reference is j:CourtOrderSignatureMethodText</value>

        [DataMember(Name="signatureMethod")]
        public List<NcTextType> SignatureMethod { get; set; }

        /// <summary>
        /// A description of inclusions and/or constraints of a court order. NIEM reference is j:CourtOrderSpecialInstructionText
        /// </summary>
        /// <value>A description of inclusions and/or constraints of a court order. NIEM reference is j:CourtOrderSpecialInstructionText</value>

        [DataMember(Name="specialInstruction")]
        public List<NcTextType> SpecialInstruction { get; set; }

        /// <summary>
        /// A state of a court order. NIEM reference is j:CourtOrderStatus
        /// </summary>
        /// <value>A state of a court order. NIEM reference is j:CourtOrderStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// An agency responsible for evaluating, investigating, supervising and/or setting conditions for a subject incarcerated, on probation, conditional release, supervised release, parole, or otherwise under the jurisdiction of the court, the Department of Corrections, or a Community Corrections Act county. NIEM reference is j:CourtOrderSupervisingAgency
        /// </summary>
        /// <value>An agency responsible for evaluating, investigating, supervising and/or setting conditions for a subject incarcerated, on probation, conditional release, supervised release, parole, or otherwise under the jurisdiction of the court, the Department of Corrections, or a Community Corrections Act county. NIEM reference is j:CourtOrderSupervisingAgency</value>

        [DataMember(Name="supervisingAgency")]
        public List<NcOrganizationType> SupervisingAgency { get; set; }

        /// <summary>
        /// Additional information about the court order. NIEM reference is hs:CourtOrderAugmentation
        /// </summary>
        /// <value>Additional information about the court order. NIEM reference is hs:CourtOrderAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<HsCourtOrderAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// jCourtOrderType JSON-LD context
        /// </summary>
        /// <value>jCourtOrderType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCourtOrderTypeContextJsonldEnum for ../JSON-LD_Contexts/jCourtOrderTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCourtOrderTypeContext.jsonld")]
            JSONLDContextsjCourtOrderTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCourtOrderType JSON-LD context
        /// </summary>
        /// <value>jCourtOrderType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCourtOrderType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  IsReviewed: ").Append(IsReviewed).Append("\n");
            sb.Append("  IsOutOfState: ").Append(IsOutOfState).Append("\n");
            sb.Append("  Receiver: ").Append(Receiver).Append("\n");
            sb.Append("  IsFromOtherAgency: ").Append(IsFromOtherAgency).Append("\n");
            sb.Append("  IsForEscapeSubject: ").Append(IsForEscapeSubject).Append("\n");
            sb.Append("  DesignatedLocation: ").Append(DesignatedLocation).Append("\n");
            sb.Append("  DesignatedOrganization: ").Append(DesignatedOrganization).Append("\n");
            sb.Append("  DesignatedItem: ").Append(DesignatedItem).Append("\n");
            sb.Append("  DesignatedSubject: ").Append(DesignatedSubject).Append("\n");
            sb.Append("  EnforcementAgency: ").Append(EnforcementAgency).Append("\n");
            sb.Append("  IssuingCourt: ").Append(IssuingCourt).Append("\n");
            sb.Append("  IssuingDate: ").Append(IssuingDate).Append("\n");
            sb.Append("  IssuingJudicialOfficial: ").Append(IssuingJudicialOfficial).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  RecallDate: ").Append(RecallDate).Append("\n");
            sb.Append("  RecallReason: ").Append(RecallReason).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  RequestReason: ").Append(RequestReason).Append("\n");
            sb.Append("  RequestEntity: ").Append(RequestEntity).Append("\n");
            sb.Append("  ServiceAttemptedDate: ").Append(ServiceAttemptedDate).Append("\n");
            sb.Append("  ServiceCaution: ").Append(ServiceCaution).Append("\n");
            sb.Append("  ServiceDate: ").Append(ServiceDate).Append("\n");
            sb.Append("  ServiceDescription: ").Append(ServiceDescription).Append("\n");
            sb.Append("  ServiceReceivedDate: ").Append(ServiceReceivedDate).Append("\n");
            sb.Append("  ServiceRestriction: ").Append(ServiceRestriction).Append("\n");
            sb.Append("  ServiceOfficialEnforcement: ").Append(ServiceOfficialEnforcement).Append("\n");
            sb.Append("  ServiceOfficialJudicial: ").Append(ServiceOfficialJudicial).Append("\n");
            sb.Append("  SignatureMethod: ").Append(SignatureMethod).Append("\n");
            sb.Append("  SpecialInstruction: ").Append(SpecialInstruction).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SupervisingAgency: ").Append(SupervisingAgency).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCourtOrderType)obj);
        }

        /// <summary>
        /// Returns true if JCourtOrderType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCourtOrderType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCourtOrderType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    IsReviewed == other.IsReviewed ||
                    IsReviewed != null &&
                    IsReviewed.SequenceEqual(other.IsReviewed)
                ) && 
                (
                    IsOutOfState == other.IsOutOfState ||
                    IsOutOfState != null &&
                    IsOutOfState.SequenceEqual(other.IsOutOfState)
                ) && 
                (
                    Receiver == other.Receiver ||
                    Receiver != null &&
                    Receiver.SequenceEqual(other.Receiver)
                ) && 
                (
                    IsFromOtherAgency == other.IsFromOtherAgency ||
                    IsFromOtherAgency != null &&
                    IsFromOtherAgency.SequenceEqual(other.IsFromOtherAgency)
                ) && 
                (
                    IsForEscapeSubject == other.IsForEscapeSubject ||
                    IsForEscapeSubject != null &&
                    IsForEscapeSubject.SequenceEqual(other.IsForEscapeSubject)
                ) && 
                (
                    DesignatedLocation == other.DesignatedLocation ||
                    DesignatedLocation != null &&
                    DesignatedLocation.SequenceEqual(other.DesignatedLocation)
                ) && 
                (
                    DesignatedOrganization == other.DesignatedOrganization ||
                    DesignatedOrganization != null &&
                    DesignatedOrganization.SequenceEqual(other.DesignatedOrganization)
                ) && 
                (
                    DesignatedItem == other.DesignatedItem ||
                    DesignatedItem != null &&
                    DesignatedItem.SequenceEqual(other.DesignatedItem)
                ) && 
                (
                    DesignatedSubject == other.DesignatedSubject ||
                    DesignatedSubject != null &&
                    DesignatedSubject.SequenceEqual(other.DesignatedSubject)
                ) && 
                (
                    EnforcementAgency == other.EnforcementAgency ||
                    EnforcementAgency != null &&
                    EnforcementAgency.SequenceEqual(other.EnforcementAgency)
                ) && 
                (
                    IssuingCourt == other.IssuingCourt ||
                    IssuingCourt != null &&
                    IssuingCourt.SequenceEqual(other.IssuingCourt)
                ) && 
                (
                    IssuingDate == other.IssuingDate ||
                    IssuingDate != null &&
                    IssuingDate.SequenceEqual(other.IssuingDate)
                ) && 
                (
                    IssuingJudicialOfficial == other.IssuingJudicialOfficial ||
                    IssuingJudicialOfficial != null &&
                    IssuingJudicialOfficial.SequenceEqual(other.IssuingJudicialOfficial)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.SequenceEqual(other.Jurisdiction)
                ) && 
                (
                    RecallDate == other.RecallDate ||
                    RecallDate != null &&
                    RecallDate.SequenceEqual(other.RecallDate)
                ) && 
                (
                    RecallReason == other.RecallReason ||
                    RecallReason != null &&
                    RecallReason.SequenceEqual(other.RecallReason)
                ) && 
                (
                    RequestDate == other.RequestDate ||
                    RequestDate != null &&
                    RequestDate.SequenceEqual(other.RequestDate)
                ) && 
                (
                    RequestReason == other.RequestReason ||
                    RequestReason != null &&
                    RequestReason.SequenceEqual(other.RequestReason)
                ) && 
                (
                    RequestEntity == other.RequestEntity ||
                    RequestEntity != null &&
                    RequestEntity.SequenceEqual(other.RequestEntity)
                ) && 
                (
                    ServiceAttemptedDate == other.ServiceAttemptedDate ||
                    ServiceAttemptedDate != null &&
                    ServiceAttemptedDate.SequenceEqual(other.ServiceAttemptedDate)
                ) && 
                (
                    ServiceCaution == other.ServiceCaution ||
                    ServiceCaution != null &&
                    ServiceCaution.SequenceEqual(other.ServiceCaution)
                ) && 
                (
                    ServiceDate == other.ServiceDate ||
                    ServiceDate != null &&
                    ServiceDate.SequenceEqual(other.ServiceDate)
                ) && 
                (
                    ServiceDescription == other.ServiceDescription ||
                    ServiceDescription != null &&
                    ServiceDescription.SequenceEqual(other.ServiceDescription)
                ) && 
                (
                    ServiceReceivedDate == other.ServiceReceivedDate ||
                    ServiceReceivedDate != null &&
                    ServiceReceivedDate.SequenceEqual(other.ServiceReceivedDate)
                ) && 
                (
                    ServiceRestriction == other.ServiceRestriction ||
                    ServiceRestriction != null &&
                    ServiceRestriction.SequenceEqual(other.ServiceRestriction)
                ) && 
                (
                    ServiceOfficialEnforcement == other.ServiceOfficialEnforcement ||
                    ServiceOfficialEnforcement != null &&
                    ServiceOfficialEnforcement.SequenceEqual(other.ServiceOfficialEnforcement)
                ) && 
                (
                    ServiceOfficialJudicial == other.ServiceOfficialJudicial ||
                    ServiceOfficialJudicial != null &&
                    ServiceOfficialJudicial.SequenceEqual(other.ServiceOfficialJudicial)
                ) && 
                (
                    SignatureMethod == other.SignatureMethod ||
                    SignatureMethod != null &&
                    SignatureMethod.SequenceEqual(other.SignatureMethod)
                ) && 
                (
                    SpecialInstruction == other.SpecialInstruction ||
                    SpecialInstruction != null &&
                    SpecialInstruction.SequenceEqual(other.SpecialInstruction)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    SupervisingAgency == other.SupervisingAgency ||
                    SupervisingAgency != null &&
                    SupervisingAgency.SequenceEqual(other.SupervisingAgency)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (IsReviewed != null)
                    hashCode = hashCode * 59 + IsReviewed.GetHashCode();
                    if (IsOutOfState != null)
                    hashCode = hashCode * 59 + IsOutOfState.GetHashCode();
                    if (Receiver != null)
                    hashCode = hashCode * 59 + Receiver.GetHashCode();
                    if (IsFromOtherAgency != null)
                    hashCode = hashCode * 59 + IsFromOtherAgency.GetHashCode();
                    if (IsForEscapeSubject != null)
                    hashCode = hashCode * 59 + IsForEscapeSubject.GetHashCode();
                    if (DesignatedLocation != null)
                    hashCode = hashCode * 59 + DesignatedLocation.GetHashCode();
                    if (DesignatedOrganization != null)
                    hashCode = hashCode * 59 + DesignatedOrganization.GetHashCode();
                    if (DesignatedItem != null)
                    hashCode = hashCode * 59 + DesignatedItem.GetHashCode();
                    if (DesignatedSubject != null)
                    hashCode = hashCode * 59 + DesignatedSubject.GetHashCode();
                    if (EnforcementAgency != null)
                    hashCode = hashCode * 59 + EnforcementAgency.GetHashCode();
                    if (IssuingCourt != null)
                    hashCode = hashCode * 59 + IssuingCourt.GetHashCode();
                    if (IssuingDate != null)
                    hashCode = hashCode * 59 + IssuingDate.GetHashCode();
                    if (IssuingJudicialOfficial != null)
                    hashCode = hashCode * 59 + IssuingJudicialOfficial.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (RecallDate != null)
                    hashCode = hashCode * 59 + RecallDate.GetHashCode();
                    if (RecallReason != null)
                    hashCode = hashCode * 59 + RecallReason.GetHashCode();
                    if (RequestDate != null)
                    hashCode = hashCode * 59 + RequestDate.GetHashCode();
                    if (RequestReason != null)
                    hashCode = hashCode * 59 + RequestReason.GetHashCode();
                    if (RequestEntity != null)
                    hashCode = hashCode * 59 + RequestEntity.GetHashCode();
                    if (ServiceAttemptedDate != null)
                    hashCode = hashCode * 59 + ServiceAttemptedDate.GetHashCode();
                    if (ServiceCaution != null)
                    hashCode = hashCode * 59 + ServiceCaution.GetHashCode();
                    if (ServiceDate != null)
                    hashCode = hashCode * 59 + ServiceDate.GetHashCode();
                    if (ServiceDescription != null)
                    hashCode = hashCode * 59 + ServiceDescription.GetHashCode();
                    if (ServiceReceivedDate != null)
                    hashCode = hashCode * 59 + ServiceReceivedDate.GetHashCode();
                    if (ServiceRestriction != null)
                    hashCode = hashCode * 59 + ServiceRestriction.GetHashCode();
                    if (ServiceOfficialEnforcement != null)
                    hashCode = hashCode * 59 + ServiceOfficialEnforcement.GetHashCode();
                    if (ServiceOfficialJudicial != null)
                    hashCode = hashCode * 59 + ServiceOfficialJudicial.GetHashCode();
                    if (SignatureMethod != null)
                    hashCode = hashCode * 59 + SignatureMethod.GetHashCode();
                    if (SpecialInstruction != null)
                    hashCode = hashCode * 59 + SpecialInstruction.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (SupervisingAgency != null)
                    hashCode = hashCode * 59 + SupervisingAgency.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCourtOrderType left, JCourtOrderType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCourtOrderType left, JCourtOrderType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
