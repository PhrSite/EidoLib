/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of attributes describing 2D, MPEG4 facial feature points and their locations
    /// </summary>
    [DataContract]
    public partial class BiomFaceImageFeaturePointType : IEquatable<BiomFaceImageFeaturePointType>
    { 
        /// <summary>
        /// An X coordinate of a facial feature point NIEM reference is biom:FeaturePointHorizontalCoordinateValue
        /// </summary>
        /// <value>An X coordinate of a facial feature point NIEM reference is biom:FeaturePointHorizontalCoordinateValue</value>

        [DataMember(Name="featurePointHorizontalCoordinateValue")]
        public List<NiemXsnonNegativeInteger> FeaturePointHorizontalCoordinateValue { get; set; }

        /// <summary>
        /// An identifier for a particular feature point, defined by ISO/IEC 14496-2 NIEM reference is biom:FeaturePointID
        /// </summary>
        /// <value>An identifier for a particular feature point, defined by ISO/IEC 14496-2 NIEM reference is biom:FeaturePointID</value>

        [DataMember(Name="featurePointId")]
        public List<NcTextType> FeaturePointId { get; set; }

        /// <summary>
        /// A kind of feature point of a captured facial image NIEM reference is biom:FeaturePointCategoryCode
        /// </summary>
        /// <value>A kind of feature point of a captured facial image NIEM reference is biom:FeaturePointCategoryCode</value>

        [DataMember(Name="featurePointCategoryCode")]
        public List<BiomFeaturePointCategoryCodeType> FeaturePointCategoryCode { get; set; }

        /// <summary>
        /// A Y coordinate of a facial feature point NIEM reference is biom:FeaturePointVerticalCoordinateValue
        /// </summary>
        /// <value>A Y coordinate of a facial feature point NIEM reference is biom:FeaturePointVerticalCoordinateValue</value>

        [DataMember(Name="featurePointVerticalCoordinateValue")]
        public List<NiemXsnonNegativeInteger> FeaturePointVerticalCoordinateValue { get; set; }

        /// <summary>
        /// biomFaceImageFeaturePointType JSON-LD context
        /// </summary>
        /// <value>biomFaceImageFeaturePointType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFaceImageFeaturePointTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFaceImageFeaturePointTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFaceImageFeaturePointTypeContext.jsonld")]
            JSONLDContextsbiomFaceImageFeaturePointTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFaceImageFeaturePointType JSON-LD context
        /// </summary>
        /// <value>biomFaceImageFeaturePointType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFaceImageFeaturePointType {\n");
            sb.Append("  FeaturePointHorizontalCoordinateValue: ").Append(FeaturePointHorizontalCoordinateValue).Append("\n");
            sb.Append("  FeaturePointId: ").Append(FeaturePointId).Append("\n");
            sb.Append("  FeaturePointCategoryCode: ").Append(FeaturePointCategoryCode).Append("\n");
            sb.Append("  FeaturePointVerticalCoordinateValue: ").Append(FeaturePointVerticalCoordinateValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFaceImageFeaturePointType)obj);
        }

        /// <summary>
        /// Returns true if BiomFaceImageFeaturePointType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFaceImageFeaturePointType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFaceImageFeaturePointType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeaturePointHorizontalCoordinateValue == other.FeaturePointHorizontalCoordinateValue ||
                    FeaturePointHorizontalCoordinateValue != null &&
                    FeaturePointHorizontalCoordinateValue.SequenceEqual(other.FeaturePointHorizontalCoordinateValue)
                ) && 
                (
                    FeaturePointId == other.FeaturePointId ||
                    FeaturePointId != null &&
                    FeaturePointId.SequenceEqual(other.FeaturePointId)
                ) && 
                (
                    FeaturePointCategoryCode == other.FeaturePointCategoryCode ||
                    FeaturePointCategoryCode != null &&
                    FeaturePointCategoryCode.SequenceEqual(other.FeaturePointCategoryCode)
                ) && 
                (
                    FeaturePointVerticalCoordinateValue == other.FeaturePointVerticalCoordinateValue ||
                    FeaturePointVerticalCoordinateValue != null &&
                    FeaturePointVerticalCoordinateValue.SequenceEqual(other.FeaturePointVerticalCoordinateValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FeaturePointHorizontalCoordinateValue != null)
                    hashCode = hashCode * 59 + FeaturePointHorizontalCoordinateValue.GetHashCode();
                    if (FeaturePointId != null)
                    hashCode = hashCode * 59 + FeaturePointId.GetHashCode();
                    if (FeaturePointCategoryCode != null)
                    hashCode = hashCode * 59 + FeaturePointCategoryCode.GetHashCode();
                    if (FeaturePointVerticalCoordinateValue != null)
                    hashCode = hashCode * 59 + FeaturePointVerticalCoordinateValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFaceImageFeaturePointType left, BiomFaceImageFeaturePointType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFaceImageFeaturePointType left, BiomFaceImageFeaturePointType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
