/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a geopolitical area.
    /// </summary>
    [DataContract]
    public partial class NcLocaleType : IEquatable<NcLocaleType>
    { 
        /// <summary>
        /// An identifier of the smallest subdivision of an area. NIEM reference is nc:LocaleCensusBlockID
        /// </summary>
        /// <value>An identifier of the smallest subdivision of an area. NIEM reference is nc:LocaleCensusBlockID</value>

        [DataMember(Name="censusBlockId")]
        public List<NiemXsstring> CensusBlockId { get; set; }

        /// <summary>
        /// An identifier of a designated census tract area. NIEM reference is nc:LocaleCensusTractID
        /// </summary>
        /// <value>An identifier of a designated census tract area. NIEM reference is nc:LocaleCensusTractID</value>

        [DataMember(Name="censusTractId")]
        public List<NiemXsstring> CensusTractId { get; set; }

        /// <summary>
        /// A name of a specific community. NIEM reference is nc:LocaleCommunityName
        /// </summary>
        /// <value>A name of a specific community. NIEM reference is nc:LocaleCommunityName</value>

        [DataMember(Name="communityName")]
        public List<NcTextType> CommunityName { get; set; }

        /// <summary>
        /// A description of a geopolitical area. NIEM reference is nc:LocaleDescriptionText
        /// </summary>
        /// <value>A description of a geopolitical area. NIEM reference is nc:LocaleDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A name given to an area defined for administrative or official purposes. NIEM reference is nc:LocaleDistrictName
        /// </summary>
        /// <value>A name given to an area defined for administrative or official purposes. NIEM reference is nc:LocaleDistrictName</value>

        [DataMember(Name="districtName")]
        public List<NcTextType> DistrictName { get; set; }

        /// <summary>
        /// A name of an organization providing emergency services. NIEM reference is nc:LocaleEmergencyServicesName
        /// </summary>
        /// <value>A name of an organization providing emergency services. NIEM reference is nc:LocaleEmergencyServicesName</value>

        [DataMember(Name="emergencyServicesName")]
        public List<NcTextType> EmergencyServicesName { get; set; }

        /// <summary>
        /// An identifier of a fire department jurisdiction. NIEM reference is nc:LocaleFireJurisdictionID
        /// </summary>
        /// <value>An identifier of a fire department jurisdiction. NIEM reference is nc:LocaleFireJurisdictionID</value>

        [DataMember(Name="fireJurisdictionId")]
        public List<NiemXsstring> FireJurisdictionId { get; set; }

        /// <summary>
        /// A name of the judicial district. NIEM reference is nc:LocaleJudicialDistrictName
        /// </summary>
        /// <value>A name of the judicial district. NIEM reference is nc:LocaleJudicialDistrictName</value>

        [DataMember(Name="judicialDistrictName")]
        public List<NcTextType> JudicialDistrictName { get; set; }

        /// <summary>
        /// A name of a neighborhood. NIEM reference is nc:LocaleNeighborhoodName
        /// </summary>
        /// <value>A name of a neighborhood. NIEM reference is nc:LocaleNeighborhoodName</value>

        [DataMember(Name="neighborhoodName")]
        public List<NcTextType> NeighborhoodName { get; set; }

        /// <summary>
        /// A police beat that encompasses a location. NIEM reference is nc:LocalePoliceBeatText
        /// </summary>
        /// <value>A police beat that encompasses a location. NIEM reference is nc:LocalePoliceBeatText</value>

        [DataMember(Name="policeBeat")]
        public List<NcTextType> PoliceBeat { get; set; }

        /// <summary>
        /// A police grid coordinate. NIEM reference is nc:LocalePoliceGridText
        /// </summary>
        /// <value>A police grid coordinate. NIEM reference is nc:LocalePoliceGridText</value>

        [DataMember(Name="policeGrid")]
        public List<NcTextType> PoliceGrid { get; set; }

        /// <summary>
        /// An identifier of a police jurisdiction that encompasses a location. NIEM reference is nc:LocalePoliceJurisdictionID
        /// </summary>
        /// <value>An identifier of a police jurisdiction that encompasses a location. NIEM reference is nc:LocalePoliceJurisdictionID</value>

        [DataMember(Name="policeJurisdictionId")]
        public List<NiemXsstring> PoliceJurisdictionId { get; set; }

        /// <summary>
        /// A name of a region. NIEM reference is nc:LocaleRegionName
        /// </summary>
        /// <value>A name of a region. NIEM reference is nc:LocaleRegionName</value>

        [DataMember(Name="regionName")]
        public List<NcTextType> RegionName { get; set; }

        /// <summary>
        /// A name of a subdivision. NIEM reference is nc:LocaleSubdivisionName
        /// </summary>
        /// <value>A name of a subdivision. NIEM reference is nc:LocaleSubdivisionName</value>

        [DataMember(Name="subdivisionName")]
        public List<NcTextType> SubdivisionName { get; set; }

        /// <summary>
        /// A name of a zone. NIEM reference is nc:LocaleZoneName
        /// </summary>
        /// <value>A name of a zone. NIEM reference is nc:LocaleZoneName</value>

        [DataMember(Name="zoneName")]
        public List<NcTextType> ZoneName { get; set; }

        /// <summary>
        /// An identifier of an emergency services jurisdiction that encompasses a location. NIEM reference is nc:LocaleEmergencyServicesJurisdictionID
        /// </summary>
        /// <value>An identifier of an emergency services jurisdiction that encompasses a location. NIEM reference is nc:LocaleEmergencyServicesJurisdictionID</value>

        [DataMember(Name="emergencyServicesJurisdictionId")]
        public List<NiemXsstring> EmergencyServicesJurisdictionId { get; set; }

        /// <summary>
        /// ncLocaleType JSON-LD context
        /// </summary>
        /// <value>ncLocaleType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncLocaleTypeContextJsonldEnum for ../JSON-LD_Contexts/ncLocaleTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncLocaleTypeContext.jsonld")]
            JSONLDContextsncLocaleTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncLocaleType JSON-LD context
        /// </summary>
        /// <value>ncLocaleType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcLocaleType {\n");
            sb.Append("  CensusBlockId: ").Append(CensusBlockId).Append("\n");
            sb.Append("  CensusTractId: ").Append(CensusTractId).Append("\n");
            sb.Append("  CommunityName: ").Append(CommunityName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DistrictName: ").Append(DistrictName).Append("\n");
            sb.Append("  EmergencyServicesName: ").Append(EmergencyServicesName).Append("\n");
            sb.Append("  FireJurisdictionId: ").Append(FireJurisdictionId).Append("\n");
            sb.Append("  JudicialDistrictName: ").Append(JudicialDistrictName).Append("\n");
            sb.Append("  NeighborhoodName: ").Append(NeighborhoodName).Append("\n");
            sb.Append("  PoliceBeat: ").Append(PoliceBeat).Append("\n");
            sb.Append("  PoliceGrid: ").Append(PoliceGrid).Append("\n");
            sb.Append("  PoliceJurisdictionId: ").Append(PoliceJurisdictionId).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  SubdivisionName: ").Append(SubdivisionName).Append("\n");
            sb.Append("  ZoneName: ").Append(ZoneName).Append("\n");
            sb.Append("  EmergencyServicesJurisdictionId: ").Append(EmergencyServicesJurisdictionId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcLocaleType)obj);
        }

        /// <summary>
        /// Returns true if NcLocaleType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcLocaleType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcLocaleType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CensusBlockId == other.CensusBlockId ||
                    CensusBlockId != null &&
                    CensusBlockId.SequenceEqual(other.CensusBlockId)
                ) && 
                (
                    CensusTractId == other.CensusTractId ||
                    CensusTractId != null &&
                    CensusTractId.SequenceEqual(other.CensusTractId)
                ) && 
                (
                    CommunityName == other.CommunityName ||
                    CommunityName != null &&
                    CommunityName.SequenceEqual(other.CommunityName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DistrictName == other.DistrictName ||
                    DistrictName != null &&
                    DistrictName.SequenceEqual(other.DistrictName)
                ) && 
                (
                    EmergencyServicesName == other.EmergencyServicesName ||
                    EmergencyServicesName != null &&
                    EmergencyServicesName.SequenceEqual(other.EmergencyServicesName)
                ) && 
                (
                    FireJurisdictionId == other.FireJurisdictionId ||
                    FireJurisdictionId != null &&
                    FireJurisdictionId.SequenceEqual(other.FireJurisdictionId)
                ) && 
                (
                    JudicialDistrictName == other.JudicialDistrictName ||
                    JudicialDistrictName != null &&
                    JudicialDistrictName.SequenceEqual(other.JudicialDistrictName)
                ) && 
                (
                    NeighborhoodName == other.NeighborhoodName ||
                    NeighborhoodName != null &&
                    NeighborhoodName.SequenceEqual(other.NeighborhoodName)
                ) && 
                (
                    PoliceBeat == other.PoliceBeat ||
                    PoliceBeat != null &&
                    PoliceBeat.SequenceEqual(other.PoliceBeat)
                ) && 
                (
                    PoliceGrid == other.PoliceGrid ||
                    PoliceGrid != null &&
                    PoliceGrid.SequenceEqual(other.PoliceGrid)
                ) && 
                (
                    PoliceJurisdictionId == other.PoliceJurisdictionId ||
                    PoliceJurisdictionId != null &&
                    PoliceJurisdictionId.SequenceEqual(other.PoliceJurisdictionId)
                ) && 
                (
                    RegionName == other.RegionName ||
                    RegionName != null &&
                    RegionName.SequenceEqual(other.RegionName)
                ) && 
                (
                    SubdivisionName == other.SubdivisionName ||
                    SubdivisionName != null &&
                    SubdivisionName.SequenceEqual(other.SubdivisionName)
                ) && 
                (
                    ZoneName == other.ZoneName ||
                    ZoneName != null &&
                    ZoneName.SequenceEqual(other.ZoneName)
                ) && 
                (
                    EmergencyServicesJurisdictionId == other.EmergencyServicesJurisdictionId ||
                    EmergencyServicesJurisdictionId != null &&
                    EmergencyServicesJurisdictionId.SequenceEqual(other.EmergencyServicesJurisdictionId)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CensusBlockId != null)
                    hashCode = hashCode * 59 + CensusBlockId.GetHashCode();
                    if (CensusTractId != null)
                    hashCode = hashCode * 59 + CensusTractId.GetHashCode();
                    if (CommunityName != null)
                    hashCode = hashCode * 59 + CommunityName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DistrictName != null)
                    hashCode = hashCode * 59 + DistrictName.GetHashCode();
                    if (EmergencyServicesName != null)
                    hashCode = hashCode * 59 + EmergencyServicesName.GetHashCode();
                    if (FireJurisdictionId != null)
                    hashCode = hashCode * 59 + FireJurisdictionId.GetHashCode();
                    if (JudicialDistrictName != null)
                    hashCode = hashCode * 59 + JudicialDistrictName.GetHashCode();
                    if (NeighborhoodName != null)
                    hashCode = hashCode * 59 + NeighborhoodName.GetHashCode();
                    if (PoliceBeat != null)
                    hashCode = hashCode * 59 + PoliceBeat.GetHashCode();
                    if (PoliceGrid != null)
                    hashCode = hashCode * 59 + PoliceGrid.GetHashCode();
                    if (PoliceJurisdictionId != null)
                    hashCode = hashCode * 59 + PoliceJurisdictionId.GetHashCode();
                    if (RegionName != null)
                    hashCode = hashCode * 59 + RegionName.GetHashCode();
                    if (SubdivisionName != null)
                    hashCode = hashCode * 59 + SubdivisionName.GetHashCode();
                    if (ZoneName != null)
                    hashCode = hashCode * 59 + ZoneName.GetHashCode();
                    if (EmergencyServicesJurisdictionId != null)
                    hashCode = hashCode * 59 + EmergencyServicesJurisdictionId.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcLocaleType left, NcLocaleType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcLocaleType left, NcLocaleType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
