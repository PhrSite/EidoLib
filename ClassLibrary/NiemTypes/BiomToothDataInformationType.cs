/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a description of the teeth of a subject.
    /// </summary>
    [DataContract]
    public partial class BiomToothDataInformationType : IEquatable<BiomToothDataInformationType>
    { 
        /// <summary>
        /// A date of recording of the tooth data. NIEM reference is biom:ToothDataRecordingDate
        /// </summary>
        /// <value>A date of recording of the tooth data. NIEM reference is biom:ToothDataRecordingDate</value>

        [DataMember(Name="toothDataRecordingDate")]
        public List<NcDateType> ToothDataRecordingDate { get; set; }

        /// <summary>
        /// A kind of date of recording estimated accuracy range for tooth data NIEM reference is biom:ToothDataRecordingDateEstimateRangeDuration
        /// </summary>
        /// <value>A kind of date of recording estimated accuracy range for tooth data NIEM reference is biom:ToothDataRecordingDateEstimateRangeDuration</value>

        [DataMember(Name="toothDataRecordingDateEstimateRangeDuration")]
        public List<NiemXsduration> ToothDataRecordingDateEstimateRangeDuration { get; set; }

        /// <summary>
        /// An identifier of a tooth. Teeth shall be numbered utilizing the permanent and deciduous teeth codes in ANSI/ADA Specification No. 3950. NIEM reference is biom:ToothID
        /// </summary>
        /// <value>An identifier of a tooth. Teeth shall be numbered utilizing the permanent and deciduous teeth codes in ANSI/ADA Specification No. 3950. NIEM reference is biom:ToothID</value>

        [DataMember(Name="toothId")]
        public List<NiemXspositiveInteger> ToothId { get; set; }

        /// <summary>
        /// A kind of original system data encoding text NIEM reference is biom:OriginalSystemEncodingText
        /// </summary>
        /// <value>A kind of original system data encoding text NIEM reference is biom:OriginalSystemEncodingText</value>

        [DataMember(Name="originalSystemEncoding")]
        public List<NcTextType> OriginalSystemEncoding { get; set; }

        /// <summary>
        /// A list of tooth data ADA reference valid codes from ANSI/ADA Standard No. 1058, Section 9 NIEM reference is biom:ToothDataADAReferenceCodeList
        /// </summary>
        /// <value>A list of tooth data ADA reference valid codes from ANSI/ADA Standard No. 1058, Section 9 NIEM reference is biom:ToothDataADAReferenceCodeList</value>

        [DataMember(Name="toothDataAdaReferenceCodeList")]
        public List<BiomToothDataADAReferenceCodeListType> ToothDataAdaReferenceCodeList { get; set; }

        /// <summary>
        /// A kind of transmitted system encoding text NIEM reference is biom:TransmittedToothEncodingText
        /// </summary>
        /// <value>A kind of transmitted system encoding text NIEM reference is biom:TransmittedToothEncodingText</value>

        [DataMember(Name="transmittedToothEncoding")]
        public List<NcTextType> TransmittedToothEncoding { get; set; }

        /// <summary>
        /// A code to indicate whether the assignment of tooth numbers was done on a morphological basis or positional basis. NIEM reference is biom:ToothIDCertaintyCode
        /// </summary>
        /// <value>A code to indicate whether the assignment of tooth numbers was done on a morphological basis or positional basis. NIEM reference is biom:ToothIDCertaintyCode</value>

        [DataMember(Name="toothIdCertaintyCode")]
        public List<BiomToothIDCertaintyCodeType> ToothIdCertaintyCode { get; set; }

        /// <summary>
        /// A description of additional detail of tooth data NIEM reference is biom:ToothDataAdditionalDescriptiveText
        /// </summary>
        /// <value>A description of additional detail of tooth data NIEM reference is biom:ToothDataAdditionalDescriptiveText</value>

        [DataMember(Name="toothDataAdditionalDescriptive")]
        public List<NcTextType> ToothDataAdditionalDescriptive { get; set; }

        /// <summary>
        /// biomToothDataInformationType JSON-LD context
        /// </summary>
        /// <value>biomToothDataInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomToothDataInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomToothDataInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomToothDataInformationTypeContext.jsonld")]
            JSONLDContextsbiomToothDataInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomToothDataInformationType JSON-LD context
        /// </summary>
        /// <value>biomToothDataInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomToothDataInformationType {\n");
            sb.Append("  ToothDataRecordingDate: ").Append(ToothDataRecordingDate).Append("\n");
            sb.Append("  ToothDataRecordingDateEstimateRangeDuration: ").Append(ToothDataRecordingDateEstimateRangeDuration).Append("\n");
            sb.Append("  ToothId: ").Append(ToothId).Append("\n");
            sb.Append("  OriginalSystemEncoding: ").Append(OriginalSystemEncoding).Append("\n");
            sb.Append("  ToothDataAdaReferenceCodeList: ").Append(ToothDataAdaReferenceCodeList).Append("\n");
            sb.Append("  TransmittedToothEncoding: ").Append(TransmittedToothEncoding).Append("\n");
            sb.Append("  ToothIdCertaintyCode: ").Append(ToothIdCertaintyCode).Append("\n");
            sb.Append("  ToothDataAdditionalDescriptive: ").Append(ToothDataAdditionalDescriptive).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomToothDataInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomToothDataInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomToothDataInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomToothDataInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ToothDataRecordingDate == other.ToothDataRecordingDate ||
                    ToothDataRecordingDate != null &&
                    ToothDataRecordingDate.SequenceEqual(other.ToothDataRecordingDate)
                ) && 
                (
                    ToothDataRecordingDateEstimateRangeDuration == other.ToothDataRecordingDateEstimateRangeDuration ||
                    ToothDataRecordingDateEstimateRangeDuration != null &&
                    ToothDataRecordingDateEstimateRangeDuration.SequenceEqual(other.ToothDataRecordingDateEstimateRangeDuration)
                ) && 
                (
                    ToothId == other.ToothId ||
                    ToothId != null &&
                    ToothId.SequenceEqual(other.ToothId)
                ) && 
                (
                    OriginalSystemEncoding == other.OriginalSystemEncoding ||
                    OriginalSystemEncoding != null &&
                    OriginalSystemEncoding.SequenceEqual(other.OriginalSystemEncoding)
                ) && 
                (
                    ToothDataAdaReferenceCodeList == other.ToothDataAdaReferenceCodeList ||
                    ToothDataAdaReferenceCodeList != null &&
                    ToothDataAdaReferenceCodeList.SequenceEqual(other.ToothDataAdaReferenceCodeList)
                ) && 
                (
                    TransmittedToothEncoding == other.TransmittedToothEncoding ||
                    TransmittedToothEncoding != null &&
                    TransmittedToothEncoding.SequenceEqual(other.TransmittedToothEncoding)
                ) && 
                (
                    ToothIdCertaintyCode == other.ToothIdCertaintyCode ||
                    ToothIdCertaintyCode != null &&
                    ToothIdCertaintyCode.SequenceEqual(other.ToothIdCertaintyCode)
                ) && 
                (
                    ToothDataAdditionalDescriptive == other.ToothDataAdditionalDescriptive ||
                    ToothDataAdditionalDescriptive != null &&
                    ToothDataAdditionalDescriptive.SequenceEqual(other.ToothDataAdditionalDescriptive)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ToothDataRecordingDate != null)
                    hashCode = hashCode * 59 + ToothDataRecordingDate.GetHashCode();
                    if (ToothDataRecordingDateEstimateRangeDuration != null)
                    hashCode = hashCode * 59 + ToothDataRecordingDateEstimateRangeDuration.GetHashCode();
                    if (ToothId != null)
                    hashCode = hashCode * 59 + ToothId.GetHashCode();
                    if (OriginalSystemEncoding != null)
                    hashCode = hashCode * 59 + OriginalSystemEncoding.GetHashCode();
                    if (ToothDataAdaReferenceCodeList != null)
                    hashCode = hashCode * 59 + ToothDataAdaReferenceCodeList.GetHashCode();
                    if (TransmittedToothEncoding != null)
                    hashCode = hashCode * 59 + TransmittedToothEncoding.GetHashCode();
                    if (ToothIdCertaintyCode != null)
                    hashCode = hashCode * 59 + ToothIdCertaintyCode.GetHashCode();
                    if (ToothDataAdditionalDescriptive != null)
                    hashCode = hashCode * 59 + ToothDataAdditionalDescriptive.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomToothDataInformationType left, BiomToothDataInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomToothDataInformationType left, BiomToothDataInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
