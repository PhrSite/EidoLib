/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a telephone number.
    /// </summary>
    [DataContract]
    public partial class ScrTelephoneNumberAugmentationType : IEquatable<ScrTelephoneNumberAugmentationType>
    { 
        /// <summary>
        /// An identification value that represents a PHONE NIEM reference is scr:TelephoneIdentification
        /// </summary>
        /// <value>An identification value that represents a PHONE NIEM reference is scr:TelephoneIdentification</value>

        [DataMember(Name="telephoneIdentification")]
        public List<NcIdentificationType> TelephoneIdentification { get; set; }

        /// <summary>
        /// True if the number for the PHONE is an international number; false otherwise. NIEM reference is scr:InternationalNumberIndicator
        /// </summary>
        /// <value>True if the number for the PHONE is an international number; false otherwise. NIEM reference is scr:InternationalNumberIndicator</value>

        [DataMember(Name="isInternationalNumber")]
        public List<NiemXsboolean> IsInternationalNumber { get; set; }

        /// <summary>
        /// A date on which the PHONE is no longer in service. NIEM reference is scr:TelephoneNumberEndDate
        /// </summary>
        /// <value>A date on which the PHONE is no longer in service. NIEM reference is scr:TelephoneNumberEndDate</value>

        [DataMember(Name="telephoneNumberEndDate")]
        public List<NcDateType> TelephoneNumberEndDate { get; set; }

        /// <summary>
        /// A date on which the PHONE came into service. NIEM reference is scr:TelephoneNumberEffectiveDate
        /// </summary>
        /// <value>A date on which the PHONE came into service. NIEM reference is scr:TelephoneNumberEffectiveDate</value>

        [DataMember(Name="telephoneNumberEffectiveDate")]
        public List<NcDateType> TelephoneNumberEffectiveDate { get; set; }

        /// <summary>
        /// scrTelephoneNumberAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrTelephoneNumberAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrTelephoneNumberAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrTelephoneNumberAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrTelephoneNumberAugmentationTypeContext.jsonld")]
            JSONLDContextsscrTelephoneNumberAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrTelephoneNumberAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrTelephoneNumberAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrTelephoneNumberAugmentationType {\n");
            sb.Append("  TelephoneIdentification: ").Append(TelephoneIdentification).Append("\n");
            sb.Append("  IsInternationalNumber: ").Append(IsInternationalNumber).Append("\n");
            sb.Append("  TelephoneNumberEndDate: ").Append(TelephoneNumberEndDate).Append("\n");
            sb.Append("  TelephoneNumberEffectiveDate: ").Append(TelephoneNumberEffectiveDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrTelephoneNumberAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrTelephoneNumberAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrTelephoneNumberAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrTelephoneNumberAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TelephoneIdentification == other.TelephoneIdentification ||
                    TelephoneIdentification != null &&
                    TelephoneIdentification.SequenceEqual(other.TelephoneIdentification)
                ) && 
                (
                    IsInternationalNumber == other.IsInternationalNumber ||
                    IsInternationalNumber != null &&
                    IsInternationalNumber.SequenceEqual(other.IsInternationalNumber)
                ) && 
                (
                    TelephoneNumberEndDate == other.TelephoneNumberEndDate ||
                    TelephoneNumberEndDate != null &&
                    TelephoneNumberEndDate.SequenceEqual(other.TelephoneNumberEndDate)
                ) && 
                (
                    TelephoneNumberEffectiveDate == other.TelephoneNumberEffectiveDate ||
                    TelephoneNumberEffectiveDate != null &&
                    TelephoneNumberEffectiveDate.SequenceEqual(other.TelephoneNumberEffectiveDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TelephoneIdentification != null)
                    hashCode = hashCode * 59 + TelephoneIdentification.GetHashCode();
                    if (IsInternationalNumber != null)
                    hashCode = hashCode * 59 + IsInternationalNumber.GetHashCode();
                    if (TelephoneNumberEndDate != null)
                    hashCode = hashCode * 59 + TelephoneNumberEndDate.GetHashCode();
                    if (TelephoneNumberEffectiveDate != null)
                    hashCode = hashCode * 59 + TelephoneNumberEffectiveDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrTelephoneNumberAugmentationType left, ScrTelephoneNumberAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrTelephoneNumberAugmentationType left, ScrTelephoneNumberAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
