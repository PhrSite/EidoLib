/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an appointment consists of scheduled dates and times, actual dates and times, and descriptive information.
    /// </summary>
    [DataContract]
    public partial class JAppointmentType : NcActivityType, IEquatable<JAppointmentType>
    { 
        /// <summary>
        /// A description of the outcomes of an appointment. NIEM reference is j:AppointmentResultsText
        /// </summary>
        /// <value>A description of the outcomes of an appointment. NIEM reference is j:AppointmentResultsText</value>

        [DataMember(Name="results")]
        public List<NcTextType> Results { get; set; }

        /// <summary>
        /// A description of an appointment group. NIEM reference is j:AppointmentGroupText
        /// </summary>
        /// <value>A description of an appointment group. NIEM reference is j:AppointmentGroupText</value>

        [DataMember(Name="group")]
        public List<NcTextType> Group { get; set; }

        /// <summary>
        /// An end time for a recess in the appointment. NIEM reference is j:AppointmentRecessEndDateTime
        /// </summary>
        /// <value>An end time for a recess in the appointment. NIEM reference is j:AppointmentRecessEndDateTime</value>

        [DataMember(Name="recessEndDateTime")]
        public List<NiemXsdateTime> RecessEndDateTime { get; set; }

        /// <summary>
        /// A schedule of appointments. NIEM reference is j:AppointmentSchedule
        /// </summary>
        /// <value>A schedule of appointments. NIEM reference is j:AppointmentSchedule</value>

        [DataMember(Name="schedule")]
        public List<NcScheduleType> Schedule { get; set; }

        /// <summary>
        /// A start time for a recess in the appointment. NIEM reference is j:AppointmentRecessStartDateTime
        /// </summary>
        /// <value>A start time for a recess in the appointment. NIEM reference is j:AppointmentRecessStartDateTime</value>

        [DataMember(Name="recessStartDateTime")]
        public List<NiemXsdateTime> RecessStartDateTime { get; set; }

        /// <summary>
        /// A description of the priority of an appointment. NIEM reference is j:AppointmentPriorityText
        /// </summary>
        /// <value>A description of the priority of an appointment. NIEM reference is j:AppointmentPriorityText</value>

        [DataMember(Name="priority")]
        public List<NcTextType> Priority { get; set; }

        /// <summary>
        /// A reason for postponement of this appointment. NIEM reference is j:AppointmentPostponementReasonText
        /// </summary>
        /// <value>A reason for postponement of this appointment. NIEM reference is j:AppointmentPostponementReasonText</value>

        [DataMember(Name="postponementReason")]
        public List<NcTextType> PostponementReason { get; set; }

        /// <summary>
        /// A description of the timeline for a mandated appointment group. NIEM reference is j:AppointmentMandatedTimelineText
        /// </summary>
        /// <value>A description of the timeline for a mandated appointment group. NIEM reference is j:AppointmentMandatedTimelineText</value>

        [DataMember(Name="mandatedTimeline")]
        public List<NcTextType> MandatedTimeline { get; set; }

        /// <summary>
        /// A specified period of time for recurring appointments. NIEM reference is j:AppointmentRepeatDateRange
        /// </summary>
        /// <value>A specified period of time for recurring appointments. NIEM reference is j:AppointmentRepeatDateRange</value>

        [DataMember(Name="repeatDateRange")]
        public List<NcDateRangeType> RepeatDateRange { get; set; }

        /// <summary>
        /// A status of an appointment. NIEM reference is j:AppointmentStatus
        /// </summary>
        /// <value>A status of an appointment. NIEM reference is j:AppointmentStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// jAppointmentType JSON-LD context
        /// </summary>
        /// <value>jAppointmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjAppointmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jAppointmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jAppointmentTypeContext.jsonld")]
            JSONLDContextsjAppointmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jAppointmentType JSON-LD context
        /// </summary>
        /// <value>jAppointmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JAppointmentType {\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  RecessEndDateTime: ").Append(RecessEndDateTime).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  RecessStartDateTime: ").Append(RecessStartDateTime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PostponementReason: ").Append(PostponementReason).Append("\n");
            sb.Append("  MandatedTimeline: ").Append(MandatedTimeline).Append("\n");
            sb.Append("  RepeatDateRange: ").Append(RepeatDateRange).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JAppointmentType)obj);
        }

        /// <summary>
        /// Returns true if JAppointmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JAppointmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JAppointmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Results == other.Results ||
                    Results != null &&
                    Results.SequenceEqual(other.Results)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.SequenceEqual(other.Group)
                ) && 
                (
                    RecessEndDateTime == other.RecessEndDateTime ||
                    RecessEndDateTime != null &&
                    RecessEndDateTime.SequenceEqual(other.RecessEndDateTime)
                ) && 
                (
                    Schedule == other.Schedule ||
                    Schedule != null &&
                    Schedule.SequenceEqual(other.Schedule)
                ) && 
                (
                    RecessStartDateTime == other.RecessStartDateTime ||
                    RecessStartDateTime != null &&
                    RecessStartDateTime.SequenceEqual(other.RecessStartDateTime)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.SequenceEqual(other.Priority)
                ) && 
                (
                    PostponementReason == other.PostponementReason ||
                    PostponementReason != null &&
                    PostponementReason.SequenceEqual(other.PostponementReason)
                ) && 
                (
                    MandatedTimeline == other.MandatedTimeline ||
                    MandatedTimeline != null &&
                    MandatedTimeline.SequenceEqual(other.MandatedTimeline)
                ) && 
                (
                    RepeatDateRange == other.RepeatDateRange ||
                    RepeatDateRange != null &&
                    RepeatDateRange.SequenceEqual(other.RepeatDateRange)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Results != null)
                    hashCode = hashCode * 59 + Results.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    if (RecessEndDateTime != null)
                    hashCode = hashCode * 59 + RecessEndDateTime.GetHashCode();
                    if (Schedule != null)
                    hashCode = hashCode * 59 + Schedule.GetHashCode();
                    if (RecessStartDateTime != null)
                    hashCode = hashCode * 59 + RecessStartDateTime.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (PostponementReason != null)
                    hashCode = hashCode * 59 + PostponementReason.GetHashCode();
                    if (MandatedTimeline != null)
                    hashCode = hashCode * 59 + MandatedTimeline.GetHashCode();
                    if (RepeatDateRange != null)
                    hashCode = hashCode * 59 + RepeatDateRange.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JAppointmentType left, JAppointmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JAppointmentType left, JAppointmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
