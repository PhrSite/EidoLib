/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an aggregation of information about a set of related activities and events.
    /// </summary>
    [DataContract]
    public partial class NcCaseType : NcActivityType, IEquatable<NcCaseType>
    { 
        /// <summary>
        /// An official name of a case. NIEM reference is nc:CaseTitleText
        /// </summary>
        /// <value>An official name of a case. NIEM reference is nc:CaseTitleText</value>

        [DataMember(Name="title")]
        public List<NcTextType> Title { get; set; }

        /// <summary>
        /// A kind of case. NIEM reference is nc:CaseCategoryText
        /// </summary>
        /// <value>A kind of case. NIEM reference is nc:CaseCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A broadly defined kind of case. NIEM reference is nc:CaseGeneralCategoryText
        /// </summary>
        /// <value>A broadly defined kind of case. NIEM reference is nc:CaseGeneralCategoryText</value>

        [DataMember(Name="generalCategory")]
        public List<NcTextType> GeneralCategory { get; set; }

        /// <summary>
        /// A year a case is opened. NIEM reference is nc:CaseYearDate
        /// </summary>
        /// <value>A year a case is opened. NIEM reference is nc:CaseYearDate</value>

        [DataMember(Name="yearDate")]
        public List<NiemXsgYear> YearDate { get; set; }

        /// <summary>
        /// An identifier used to track a case. NIEM reference is nc:CaseTrackingID
        /// </summary>
        /// <value>An identifier used to track a case. NIEM reference is nc:CaseTrackingID</value>

        [DataMember(Name="trackingId")]
        public List<NiemXsstring> TrackingId { get; set; }

        /// <summary>
        /// A more specific classification of a kind of case. NIEM reference is nc:CaseSubCategoryText
        /// </summary>
        /// <value>A more specific classification of a kind of case. NIEM reference is nc:CaseSubCategoryText</value>

        [DataMember(Name="subCategory")]
        public List<NiemXsstring> SubCategory { get; set; }

        /// <summary>
        /// An identifier used to reference a case docket. NIEM reference is nc:CaseDocketID
        /// </summary>
        /// <value>An identifier used to reference a case docket. NIEM reference is nc:CaseDocketID</value>

        [DataMember(Name="docketId")]
        public List<NiemXsstring> DocketId { get; set; }

        /// <summary>
        /// A result of a case. NIEM reference is nc:CaseResolutionText
        /// </summary>
        /// <value>A result of a case. NIEM reference is nc:CaseResolutionText</value>

        [DataMember(Name="resolution")]
        public List<NcTextType> Resolution { get; set; }

        /// <summary>
        /// A document or other piece of information filed by someone or something involved in a case. NIEM reference is nc:CaseFiling
        /// </summary>
        /// <value>A document or other piece of information filed by someone or something involved in a case. NIEM reference is nc:CaseFiling</value>

        [DataMember(Name="filing")]
        public List<NcDocumentType> Filing { get; set; }

        /// <summary>
        /// Additional information about a case. NIEM reference is j:CaseAugmentation
        /// </summary>
        /// <value>Additional information about a case. NIEM reference is j:CaseAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JCaseAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncCaseType JSON-LD context
        /// </summary>
        /// <value>ncCaseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncCaseTypeContextJsonldEnum for ../JSON-LD_Contexts/ncCaseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncCaseTypeContext.jsonld")]
            JSONLDContextsncCaseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncCaseType JSON-LD context
        /// </summary>
        /// <value>ncCaseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcCaseType {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  GeneralCategory: ").Append(GeneralCategory).Append("\n");
            sb.Append("  YearDate: ").Append(YearDate).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  DocketId: ").Append(DocketId).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Filing: ").Append(Filing).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcCaseType)obj);
        }

        /// <summary>
        /// Returns true if NcCaseType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcCaseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcCaseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.SequenceEqual(other.Title)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    GeneralCategory == other.GeneralCategory ||
                    GeneralCategory != null &&
                    GeneralCategory.SequenceEqual(other.GeneralCategory)
                ) && 
                (
                    YearDate == other.YearDate ||
                    YearDate != null &&
                    YearDate.SequenceEqual(other.YearDate)
                ) && 
                (
                    TrackingId == other.TrackingId ||
                    TrackingId != null &&
                    TrackingId.SequenceEqual(other.TrackingId)
                ) && 
                (
                    SubCategory == other.SubCategory ||
                    SubCategory != null &&
                    SubCategory.SequenceEqual(other.SubCategory)
                ) && 
                (
                    DocketId == other.DocketId ||
                    DocketId != null &&
                    DocketId.SequenceEqual(other.DocketId)
                ) && 
                (
                    Resolution == other.Resolution ||
                    Resolution != null &&
                    Resolution.SequenceEqual(other.Resolution)
                ) && 
                (
                    Filing == other.Filing ||
                    Filing != null &&
                    Filing.SequenceEqual(other.Filing)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (GeneralCategory != null)
                    hashCode = hashCode * 59 + GeneralCategory.GetHashCode();
                    if (YearDate != null)
                    hashCode = hashCode * 59 + YearDate.GetHashCode();
                    if (TrackingId != null)
                    hashCode = hashCode * 59 + TrackingId.GetHashCode();
                    if (SubCategory != null)
                    hashCode = hashCode * 59 + SubCategory.GetHashCode();
                    if (DocketId != null)
                    hashCode = hashCode * 59 + DocketId.GetHashCode();
                    if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                    if (Filing != null)
                    hashCode = hashCode * 59 + Filing.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcCaseType left, NcCaseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcCaseType left, NcCaseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
