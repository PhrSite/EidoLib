/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a freeing or discharging of someone or something from an activity, supervision, or obligation.
    /// </summary>
    [DataContract]
    public partial class NcReleaseType : NcActivityType, IEquatable<NcReleaseType>
    { 
        /// <summary>
        /// A person who is released from confinement or an obligation. NIEM reference is nc:ReleasePerson
        /// </summary>
        /// <value>A person who is released from confinement or an obligation. NIEM reference is nc:ReleasePerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A location from which someone or something is released. NIEM reference is nc:ReleaseFromLocation
        /// </summary>
        /// <value>A location from which someone or something is released. NIEM reference is nc:ReleaseFromLocation</value>

        [DataMember(Name="fromLocation")]
        public List<NcLocationType> FromLocation { get; set; }

        /// <summary>
        /// An entity that authorizes a release. NIEM reference is nc:ReleaseIssuer
        /// </summary>
        /// <value>An entity that authorizes a release. NIEM reference is nc:ReleaseIssuer</value>

        [DataMember(Name="issuer")]
        public List<NcEntityType> Issuer { get; set; }

        /// <summary>
        /// An item that is released from holding. NIEM reference is nc:ReleaseItem
        /// </summary>
        /// <value>An item that is released from holding. NIEM reference is nc:ReleaseItem</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// An entity which receives custody or supervisory authority over someone or something. NIEM reference is nc:ReleaseRecipient
        /// </summary>
        /// <value>An entity which receives custody or supervisory authority over someone or something. NIEM reference is nc:ReleaseRecipient</value>

        [DataMember(Name="recipient")]
        public List<NcEntityType> Recipient { get; set; }

        /// <summary>
        /// A location to which someone or something is released. NIEM reference is nc:ReleaseToLocation
        /// </summary>
        /// <value>A location to which someone or something is released. NIEM reference is nc:ReleaseToLocation</value>

        [DataMember(Name="toLocation")]
        public List<NcLocationType> ToLocation { get; set; }

        /// <summary>
        /// An entity responsible for overseeing the release of someone or something from custody. NIEM reference is nc:ReleaseSupervisor
        /// </summary>
        /// <value>An entity responsible for overseeing the release of someone or something from custody. NIEM reference is nc:ReleaseSupervisor</value>

        [DataMember(Name="supervisor")]
        public List<NcEntityType> Supervisor { get; set; }

        /// <summary>
        /// Additional information about a Release. NIEM reference is j:ReleaseAugmentation
        /// </summary>
        /// <value>Additional information about a Release. NIEM reference is j:ReleaseAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JReleaseAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncReleaseType JSON-LD context
        /// </summary>
        /// <value>ncReleaseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncReleaseTypeContextJsonldEnum for ../JSON-LD_Contexts/ncReleaseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncReleaseTypeContext.jsonld")]
            JSONLDContextsncReleaseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncReleaseType JSON-LD context
        /// </summary>
        /// <value>ncReleaseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcReleaseType {\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  FromLocation: ").Append(FromLocation).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  ToLocation: ").Append(ToLocation).Append("\n");
            sb.Append("  Supervisor: ").Append(Supervisor).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcReleaseType)obj);
        }

        /// <summary>
        /// Returns true if NcReleaseType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcReleaseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcReleaseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    FromLocation == other.FromLocation ||
                    FromLocation != null &&
                    FromLocation.SequenceEqual(other.FromLocation)
                ) && 
                (
                    Issuer == other.Issuer ||
                    Issuer != null &&
                    Issuer.SequenceEqual(other.Issuer)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.SequenceEqual(other.Recipient)
                ) && 
                (
                    ToLocation == other.ToLocation ||
                    ToLocation != null &&
                    ToLocation.SequenceEqual(other.ToLocation)
                ) && 
                (
                    Supervisor == other.Supervisor ||
                    Supervisor != null &&
                    Supervisor.SequenceEqual(other.Supervisor)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (FromLocation != null)
                    hashCode = hashCode * 59 + FromLocation.GetHashCode();
                    if (Issuer != null)
                    hashCode = hashCode * 59 + Issuer.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (ToLocation != null)
                    hashCode = hashCode * 59 + ToLocation.GetHashCode();
                    if (Supervisor != null)
                    hashCode = hashCode * 59 + Supervisor.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcReleaseType left, NcReleaseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcReleaseType left, NcReleaseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
