/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of details about a subject&#x27;s supervision violation.
    /// </summary>
    [DataContract]
    public partial class JSupervisionViolationType : JOffenseType, IEquatable<JSupervisionViolationType>
    { 
        /// <summary>
        /// A description of the circumstances surrounding the rule violation. NIEM reference is j:SupervisionViolationCircumstancesText
        /// </summary>
        /// <value>A description of the circumstances surrounding the rule violation. NIEM reference is j:SupervisionViolationCircumstancesText</value>

        [DataMember(Name="circumstances")]
        public List<NcTextType> Circumstances { get; set; }

        /// <summary>
        /// True if the District Attorney accepted the rule violation case; false otherwise. NIEM reference is j:SupervisionViolationDAAcceptedCaseIndicator
        /// </summary>
        /// <value>True if the District Attorney accepted the rule violation case; false otherwise. NIEM reference is j:SupervisionViolationDAAcceptedCaseIndicator</value>

        [DataMember(Name="isDaAcceptedCase")]
        public List<NiemXsboolean> IsDaAcceptedCase { get; set; }

        /// <summary>
        /// A date on which the case was referred to the DA. NIEM reference is j:SupervisionViolationReferredToDADate
        /// </summary>
        /// <value>A date on which the case was referred to the DA. NIEM reference is j:SupervisionViolationReferredToDADate</value>

        [DataMember(Name="referredToDaDate")]
        public List<NcDateType> ReferredToDaDate { get; set; }

        /// <summary>
        /// A documented testimony of interviewed subject, reporting employee, and any others who have significant information concerning the incident that resulted in a Rules Violation Report. NIEM reference is j:SupervisionViolationInvestigativeReportText
        /// </summary>
        /// <value>A documented testimony of interviewed subject, reporting employee, and any others who have significant information concerning the incident that resulted in a Rules Violation Report. NIEM reference is j:SupervisionViolationInvestigativeReportText</value>

        [DataMember(Name="investigativeReport")]
        public List<NcTextType> InvestigativeReport { get; set; }

        /// <summary>
        /// A date the initial supervision violation was issued. NIEM reference is j:SupervisionViolationIssuedDate
        /// </summary>
        /// <value>A date the initial supervision violation was issued. NIEM reference is j:SupervisionViolationIssuedDate</value>

        [DataMember(Name="issuedDate")]
        public List<NcDateType> IssuedDate { get; set; }

        /// <summary>
        /// A detailed description of other details about a supervision violation. NIEM reference is j:SupervisionViolationOtherDetailsText
        /// </summary>
        /// <value>A detailed description of other details about a supervision violation. NIEM reference is j:SupervisionViolationOtherDetailsText</value>

        [DataMember(Name="otherDetails")]
        public List<NcTextType> OtherDetails { get; set; }

        /// <summary>
        /// A date and time the rule violation report was signed by the staff. NIEM reference is j:SupervisionViolationReportedDateTime
        /// </summary>
        /// <value>A date and time the rule violation report was signed by the staff. NIEM reference is j:SupervisionViolationReportedDateTime</value>

        [DataMember(Name="reportedDateTime")]
        public List<NiemXsdateTime> ReportedDateTime { get; set; }

        /// <summary>
        /// A staff member who reported the violation. NIEM reference is j:SupervisionViolationReportingStaffMember
        /// </summary>
        /// <value>A staff member who reported the violation. NIEM reference is j:SupervisionViolationReportingStaffMember</value>

        [DataMember(Name="reportingStaffMember")]
        public List<JStaffMemberType> ReportingStaffMember { get; set; }

        /// <summary>
        /// A set of details about a staff member involved in a rules violation incident. NIEM reference is j:SupervisionViolationStaffMember
        /// </summary>
        /// <value>A set of details about a staff member involved in a rules violation incident. NIEM reference is j:SupervisionViolationStaffMember</value>

        [DataMember(Name="staffMember")]
        public List<JStaffMemberType> StaffMember { get; set; }

        /// <summary>
        /// A comment specifying the details of the act of the violation. NIEM reference is j:SupervisionViolationSpecificActText
        /// </summary>
        /// <value>A comment specifying the details of the act of the violation. NIEM reference is j:SupervisionViolationSpecificActText</value>

        [DataMember(Name="specificAct")]
        public List<NcTextType> SpecificAct { get; set; }

        /// <summary>
        /// True if the CDC 115-C report is a supplemental report; false otherwise. NIEM reference is j:SupervisionViolationSupplementalIndicator
        /// </summary>
        /// <value>True if the CDC 115-C report is a supplemental report; false otherwise. NIEM reference is j:SupervisionViolationSupplementalIndicator</value>

        [DataMember(Name="isSupplemental")]
        public List<NiemXsboolean> IsSupplemental { get; set; }

        /// <summary>
        /// A count of rules violations. NIEM reference is j:SupervisionViolationQuantity
        /// </summary>
        /// <value>A count of rules violations. NIEM reference is j:SupervisionViolationQuantity</value>

        [DataMember(Name="quantity")]
        public List<NcQuantityType> Quantity { get; set; }

        /// <summary>
        /// jSupervisionViolationType JSON-LD context
        /// </summary>
        /// <value>jSupervisionViolationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSupervisionViolationTypeContextJsonldEnum for ../JSON-LD_Contexts/jSupervisionViolationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSupervisionViolationTypeContext.jsonld")]
            JSONLDContextsjSupervisionViolationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSupervisionViolationType JSON-LD context
        /// </summary>
        /// <value>jSupervisionViolationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSupervisionViolationType {\n");
            sb.Append("  Circumstances: ").Append(Circumstances).Append("\n");
            sb.Append("  IsDaAcceptedCase: ").Append(IsDaAcceptedCase).Append("\n");
            sb.Append("  ReferredToDaDate: ").Append(ReferredToDaDate).Append("\n");
            sb.Append("  InvestigativeReport: ").Append(InvestigativeReport).Append("\n");
            sb.Append("  IssuedDate: ").Append(IssuedDate).Append("\n");
            sb.Append("  OtherDetails: ").Append(OtherDetails).Append("\n");
            sb.Append("  ReportedDateTime: ").Append(ReportedDateTime).Append("\n");
            sb.Append("  ReportingStaffMember: ").Append(ReportingStaffMember).Append("\n");
            sb.Append("  StaffMember: ").Append(StaffMember).Append("\n");
            sb.Append("  SpecificAct: ").Append(SpecificAct).Append("\n");
            sb.Append("  IsSupplemental: ").Append(IsSupplemental).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSupervisionViolationType)obj);
        }

        /// <summary>
        /// Returns true if JSupervisionViolationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSupervisionViolationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSupervisionViolationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Circumstances == other.Circumstances ||
                    Circumstances != null &&
                    Circumstances.SequenceEqual(other.Circumstances)
                ) && 
                (
                    IsDaAcceptedCase == other.IsDaAcceptedCase ||
                    IsDaAcceptedCase != null &&
                    IsDaAcceptedCase.SequenceEqual(other.IsDaAcceptedCase)
                ) && 
                (
                    ReferredToDaDate == other.ReferredToDaDate ||
                    ReferredToDaDate != null &&
                    ReferredToDaDate.SequenceEqual(other.ReferredToDaDate)
                ) && 
                (
                    InvestigativeReport == other.InvestigativeReport ||
                    InvestigativeReport != null &&
                    InvestigativeReport.SequenceEqual(other.InvestigativeReport)
                ) && 
                (
                    IssuedDate == other.IssuedDate ||
                    IssuedDate != null &&
                    IssuedDate.SequenceEqual(other.IssuedDate)
                ) && 
                (
                    OtherDetails == other.OtherDetails ||
                    OtherDetails != null &&
                    OtherDetails.SequenceEqual(other.OtherDetails)
                ) && 
                (
                    ReportedDateTime == other.ReportedDateTime ||
                    ReportedDateTime != null &&
                    ReportedDateTime.SequenceEqual(other.ReportedDateTime)
                ) && 
                (
                    ReportingStaffMember == other.ReportingStaffMember ||
                    ReportingStaffMember != null &&
                    ReportingStaffMember.SequenceEqual(other.ReportingStaffMember)
                ) && 
                (
                    StaffMember == other.StaffMember ||
                    StaffMember != null &&
                    StaffMember.SequenceEqual(other.StaffMember)
                ) && 
                (
                    SpecificAct == other.SpecificAct ||
                    SpecificAct != null &&
                    SpecificAct.SequenceEqual(other.SpecificAct)
                ) && 
                (
                    IsSupplemental == other.IsSupplemental ||
                    IsSupplemental != null &&
                    IsSupplemental.SequenceEqual(other.IsSupplemental)
                ) && 
                (
                    Quantity == other.Quantity ||
                    Quantity != null &&
                    Quantity.SequenceEqual(other.Quantity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Circumstances != null)
                    hashCode = hashCode * 59 + Circumstances.GetHashCode();
                    if (IsDaAcceptedCase != null)
                    hashCode = hashCode * 59 + IsDaAcceptedCase.GetHashCode();
                    if (ReferredToDaDate != null)
                    hashCode = hashCode * 59 + ReferredToDaDate.GetHashCode();
                    if (InvestigativeReport != null)
                    hashCode = hashCode * 59 + InvestigativeReport.GetHashCode();
                    if (IssuedDate != null)
                    hashCode = hashCode * 59 + IssuedDate.GetHashCode();
                    if (OtherDetails != null)
                    hashCode = hashCode * 59 + OtherDetails.GetHashCode();
                    if (ReportedDateTime != null)
                    hashCode = hashCode * 59 + ReportedDateTime.GetHashCode();
                    if (ReportingStaffMember != null)
                    hashCode = hashCode * 59 + ReportingStaffMember.GetHashCode();
                    if (StaffMember != null)
                    hashCode = hashCode * 59 + StaffMember.GetHashCode();
                    if (SpecificAct != null)
                    hashCode = hashCode * 59 + SpecificAct.GetHashCode();
                    if (IsSupplemental != null)
                    hashCode = hashCode * 59 + IsSupplemental.GetHashCode();
                    if (Quantity != null)
                    hashCode = hashCode * 59 + Quantity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSupervisionViolationType left, JSupervisionViolationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSupervisionViolationType left, JSupervisionViolationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
