/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a treatment of a person for a mental or physical condition.
    /// </summary>
    [DataContract]
    public partial class NcTreatmentType : NcActivityType, IEquatable<NcTreatmentType>
    { 
        /// <summary>
        /// A treatment that was provided or could be provisioned. NIEM reference is nc:TreatmentText
        /// </summary>
        /// <value>A treatment that was provided or could be provisioned. NIEM reference is nc:TreatmentText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// An entity that provides a treatment. NIEM reference is nc:TreatmentProvider
        /// </summary>
        /// <value>An entity that provides a treatment. NIEM reference is nc:TreatmentProvider</value>

        [DataMember(Name="provider")]
        public List<NcEntityType> Provider { get; set; }

        /// <summary>
        /// A human being. NIEM reference is nc:Person
        /// </summary>
        /// <value>A human being. NIEM reference is nc:Person</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// Additional information about a treatment. NIEM reference is hs:TreatmentAugmentation
        /// </summary>
        /// <value>Additional information about a treatment. NIEM reference is hs:TreatmentAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsTreatmentAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about a treatment. NIEM reference is j:TreatmentAugmentation
        /// </summary>
        /// <value>Additional information about a treatment. NIEM reference is j:TreatmentAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JTreatmentAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// ncTreatmentType JSON-LD context
        /// </summary>
        /// <value>ncTreatmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncTreatmentTypeContextJsonldEnum for ../JSON-LD_Contexts/ncTreatmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncTreatmentTypeContext.jsonld")]
            JSONLDContextsncTreatmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncTreatmentType JSON-LD context
        /// </summary>
        /// <value>ncTreatmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcTreatmentType {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcTreatmentType)obj);
        }

        /// <summary>
        /// Returns true if NcTreatmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcTreatmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcTreatmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    Provider == other.Provider ||
                    Provider != null &&
                    Provider.SequenceEqual(other.Provider)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Provider != null)
                    hashCode = hashCode * 59 + Provider.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcTreatmentType left, NcTreatmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcTreatmentType left, NcTreatmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
