/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a location on a vessel.
    /// </summary>
    [DataContract]
    public partial class MLocationOnVesselType : IEquatable<MLocationOnVesselType>
    { 
        /// <summary>
        /// A location on a vessel specified by deck. NIEM reference is m:LocationOnVesselDeckText
        /// </summary>
        /// <value>A location on a vessel specified by deck. NIEM reference is m:LocationOnVesselDeckText</value>

        [DataMember(Name="deck")]
        public List<NcTextType> Deck { get; set; }

        /// <summary>
        /// A description of a location on a vessel. NIEM reference is m:LocationOnVesselDescriptionText
        /// </summary>
        /// <value>A description of a location on a vessel. NIEM reference is m:LocationOnVesselDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A measure of distance from a location on a vessel to its bow. NIEM reference is m:LocationOnVesselDistanceFromBowMeasure
        /// </summary>
        /// <value>A measure of distance from a location on a vessel to its bow. NIEM reference is m:LocationOnVesselDistanceFromBowMeasure</value>

        [DataMember(Name="distanceFromBowMeasure")]
        public List<NcLengthMeasureType> DistanceFromBowMeasure { get; set; }

        /// <summary>
        /// A measure of distance from a location on a vessel to its port side. NIEM reference is m:LocationOnVesselDistanceFromPortMeasure
        /// </summary>
        /// <value>A measure of distance from a location on a vessel to its port side. NIEM reference is m:LocationOnVesselDistanceFromPortMeasure</value>

        [DataMember(Name="distanceFromPortMeasure")]
        public List<NcLengthMeasureType> DistanceFromPortMeasure { get; set; }

        /// <summary>
        /// A measure of distance from a location on a vessel to its starboard side. NIEM reference is m:LocationOnVesselDistanceFromStarboardMeasure
        /// </summary>
        /// <value>A measure of distance from a location on a vessel to its starboard side. NIEM reference is m:LocationOnVesselDistanceFromStarboardMeasure</value>

        [DataMember(Name="distanceFromStarboardMeasure")]
        public List<NcLengthMeasureType> DistanceFromStarboardMeasure { get; set; }

        /// <summary>
        /// A measure of distance from a location on a vessel to its stern. NIEM reference is m:LocationOnVesselDistanceFromSternMeasure
        /// </summary>
        /// <value>A measure of distance from a location on a vessel to its stern. NIEM reference is m:LocationOnVesselDistanceFromSternMeasure</value>

        [DataMember(Name="distanceFromSternMeasure")]
        public List<NcLengthMeasureType> DistanceFromSternMeasure { get; set; }

        /// <summary>
        /// A measure of the elevation above or below the waterline of a vessel. A positive value implies a location above the waterline and a negative value implies a location below the waterline. NIEM reference is m:LocationOnVesselElevationMeasure
        /// </summary>
        /// <value>A measure of the elevation above or below the waterline of a vessel. A positive value implies a location above the waterline and a negative value implies a location below the waterline. NIEM reference is m:LocationOnVesselElevationMeasure</value>

        [DataMember(Name="elevationMeasure")]
        public List<NcLengthMeasureType> ElevationMeasure { get; set; }

        /// <summary>
        /// mLocationOnVesselType JSON-LD context
        /// </summary>
        /// <value>mLocationOnVesselType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmLocationOnVesselTypeContextJsonldEnum for ../JSON-LD_Contexts/mLocationOnVesselTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mLocationOnVesselTypeContext.jsonld")]
            JSONLDContextsmLocationOnVesselTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mLocationOnVesselType JSON-LD context
        /// </summary>
        /// <value>mLocationOnVesselType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MLocationOnVesselType {\n");
            sb.Append("  Deck: ").Append(Deck).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DistanceFromBowMeasure: ").Append(DistanceFromBowMeasure).Append("\n");
            sb.Append("  DistanceFromPortMeasure: ").Append(DistanceFromPortMeasure).Append("\n");
            sb.Append("  DistanceFromStarboardMeasure: ").Append(DistanceFromStarboardMeasure).Append("\n");
            sb.Append("  DistanceFromSternMeasure: ").Append(DistanceFromSternMeasure).Append("\n");
            sb.Append("  ElevationMeasure: ").Append(ElevationMeasure).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MLocationOnVesselType)obj);
        }

        /// <summary>
        /// Returns true if MLocationOnVesselType instances are equal
        /// </summary>
        /// <param name="other">Instance of MLocationOnVesselType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MLocationOnVesselType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Deck == other.Deck ||
                    Deck != null &&
                    Deck.SequenceEqual(other.Deck)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DistanceFromBowMeasure == other.DistanceFromBowMeasure ||
                    DistanceFromBowMeasure != null &&
                    DistanceFromBowMeasure.SequenceEqual(other.DistanceFromBowMeasure)
                ) && 
                (
                    DistanceFromPortMeasure == other.DistanceFromPortMeasure ||
                    DistanceFromPortMeasure != null &&
                    DistanceFromPortMeasure.SequenceEqual(other.DistanceFromPortMeasure)
                ) && 
                (
                    DistanceFromStarboardMeasure == other.DistanceFromStarboardMeasure ||
                    DistanceFromStarboardMeasure != null &&
                    DistanceFromStarboardMeasure.SequenceEqual(other.DistanceFromStarboardMeasure)
                ) && 
                (
                    DistanceFromSternMeasure == other.DistanceFromSternMeasure ||
                    DistanceFromSternMeasure != null &&
                    DistanceFromSternMeasure.SequenceEqual(other.DistanceFromSternMeasure)
                ) && 
                (
                    ElevationMeasure == other.ElevationMeasure ||
                    ElevationMeasure != null &&
                    ElevationMeasure.SequenceEqual(other.ElevationMeasure)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Deck != null)
                    hashCode = hashCode * 59 + Deck.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DistanceFromBowMeasure != null)
                    hashCode = hashCode * 59 + DistanceFromBowMeasure.GetHashCode();
                    if (DistanceFromPortMeasure != null)
                    hashCode = hashCode * 59 + DistanceFromPortMeasure.GetHashCode();
                    if (DistanceFromStarboardMeasure != null)
                    hashCode = hashCode * 59 + DistanceFromStarboardMeasure.GetHashCode();
                    if (DistanceFromSternMeasure != null)
                    hashCode = hashCode * 59 + DistanceFromSternMeasure.GetHashCode();
                    if (ElevationMeasure != null)
                    hashCode = hashCode * 59 + ElevationMeasure.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MLocationOnVesselType left, MLocationOnVesselType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MLocationOnVesselType left, MLocationOnVesselType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
