/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type that supplements PersonName and specifies the additional name information used for Screening.
    /// </summary>
    [DataContract]
    public partial class ScrPersonNameAugmentationType : IEquatable<ScrPersonNameAugmentationType>
    { 
        /// <summary>
        /// A value of the Phonetic index value for the name NIEM reference is scr:SoundexIndexValueText
        /// </summary>
        /// <value>A value of the Phonetic index value for the name NIEM reference is scr:SoundexIndexValueText</value>

        [DataMember(Name="soundexIndexValue")]
        public List<NiemXsstring> SoundexIndexValue { get; set; }

        /// <summary>
        /// A text that specifies the presumed linguistic origin of the name. NIEM reference is scr:PersonNameOriginText
        /// </summary>
        /// <value>A text that specifies the presumed linguistic origin of the name. NIEM reference is scr:PersonNameOriginText</value>

        [DataMember(Name="personNameOrigin")]
        public List<NcTextType> PersonNameOrigin { get; set; }

        /// <summary>
        /// A date that information take effect. NIEM reference is nc:EffectiveDate
        /// </summary>
        /// <value>A date that information take effect. NIEM reference is nc:EffectiveDate</value>

        [DataMember(Name="effectiveDate")]
        public List<NcDateType> EffectiveDate { get; set; }

        /// <summary>
        /// A kind of designation. NIEM reference is scr:DesignationCategoryCode
        /// </summary>
        /// <value>A kind of designation. NIEM reference is scr:DesignationCategoryCode</value>

        [DataMember(Name="designationCategoryCode")]
        public List<ScrPersonNameDesignationCategoryCodeType> DesignationCategoryCode { get; set; }

        /// <summary>
        /// scrPersonNameAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrPersonNameAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrPersonNameAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrPersonNameAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrPersonNameAugmentationTypeContext.jsonld")]
            JSONLDContextsscrPersonNameAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrPersonNameAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrPersonNameAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrPersonNameAugmentationType {\n");
            sb.Append("  SoundexIndexValue: ").Append(SoundexIndexValue).Append("\n");
            sb.Append("  PersonNameOrigin: ").Append(PersonNameOrigin).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  DesignationCategoryCode: ").Append(DesignationCategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrPersonNameAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrPersonNameAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrPersonNameAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrPersonNameAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SoundexIndexValue == other.SoundexIndexValue ||
                    SoundexIndexValue != null &&
                    SoundexIndexValue.SequenceEqual(other.SoundexIndexValue)
                ) && 
                (
                    PersonNameOrigin == other.PersonNameOrigin ||
                    PersonNameOrigin != null &&
                    PersonNameOrigin.SequenceEqual(other.PersonNameOrigin)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.SequenceEqual(other.EffectiveDate)
                ) && 
                (
                    DesignationCategoryCode == other.DesignationCategoryCode ||
                    DesignationCategoryCode != null &&
                    DesignationCategoryCode.SequenceEqual(other.DesignationCategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SoundexIndexValue != null)
                    hashCode = hashCode * 59 + SoundexIndexValue.GetHashCode();
                    if (PersonNameOrigin != null)
                    hashCode = hashCode * 59 + PersonNameOrigin.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (DesignationCategoryCode != null)
                    hashCode = hashCode * 59 + DesignationCategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrPersonNameAugmentationType left, ScrPersonNameAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrPersonNameAugmentationType left, ScrPersonNameAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
