/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person, organization, or thing capable of bearing legal rights and responsibilities.
    /// </summary>
    [DataContract]
    public partial class NcEntityType : IEquatable<NcEntityType>
    { 
        /// <summary>
        /// An item capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityItem
        /// </summary>
        /// <value>An item capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityItem</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// An organization capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityOrganization
        /// </summary>
        /// <value>An organization capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityOrganization</value>

        [DataMember(Name="organization")]
        public List<NcOrganizationType> Organization { get; set; }

        /// <summary>
        /// A person capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityPerson
        /// </summary>
        /// <value>A person capable of bearing legal rights and responsibilities. NIEM reference is nc:EntityPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A basic set of information about a person or an organization. NIEM reference is nc:GenericEntity
        /// </summary>
        /// <value>A basic set of information about a person or an organization. NIEM reference is nc:GenericEntity</value>

        [DataMember(Name="generic")]
        public List<NcGenericEntityType> Generic { get; set; }

        /// <summary>
        /// An organization reporting information. NIEM reference is hs:ReportingOrganization
        /// </summary>
        /// <value>An organization reporting information. NIEM reference is hs:ReportingOrganization</value>

        [DataMember(Name="reportingOrganization")]
        public List<HsReportingOrganizationType> ReportingOrganization { get; set; }

        /// <summary>
        /// ncEntityType JSON-LD context
        /// </summary>
        /// <value>ncEntityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncEntityTypeContextJsonldEnum for ../JSON-LD_Contexts/ncEntityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncEntityTypeContext.jsonld")]
            JSONLDContextsncEntityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncEntityType JSON-LD context
        /// </summary>
        /// <value>ncEntityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcEntityType {\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Generic: ").Append(Generic).Append("\n");
            sb.Append("  ReportingOrganization: ").Append(ReportingOrganization).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcEntityType)obj);
        }

        /// <summary>
        /// Returns true if NcEntityType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcEntityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcEntityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.SequenceEqual(other.Organization)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Generic == other.Generic ||
                    Generic != null &&
                    Generic.SequenceEqual(other.Generic)
                ) && 
                (
                    ReportingOrganization == other.ReportingOrganization ||
                    ReportingOrganization != null &&
                    ReportingOrganization.SequenceEqual(other.ReportingOrganization)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Generic != null)
                    hashCode = hashCode * 59 + Generic.GetHashCode();
                    if (ReportingOrganization != null)
                    hashCode = hashCode * 59 + ReportingOrganization.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcEntityType left, NcEntityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcEntityType left, NcEntityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
