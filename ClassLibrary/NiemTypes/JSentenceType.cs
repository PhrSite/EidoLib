/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a punishment resulting from conviction of charges in a court case.
    /// </summary>
    [DataContract]
    public partial class JSentenceType : NcActivityType, IEquatable<JSentenceType>
    { 
        /// <summary>
        /// True if aggravating factors were considered during sentencing; false otherwise. NIEM reference is j:SentenceAggravatedIndicator
        /// </summary>
        /// <value>True if aggravating factors were considered during sentencing; false otherwise. NIEM reference is j:SentenceAggravatedIndicator</value>

        [DataMember(Name="isAggravated")]
        public List<NiemXsboolean> IsAggravated { get; set; }

        /// <summary>
        /// A description of the sentence imposed. NIEM reference is j:SentenceImposedText
        /// </summary>
        /// <value>A description of the sentence imposed. NIEM reference is j:SentenceImposedText</value>

        [DataMember(Name="imposed")]
        public List<NcTextType> Imposed { get; set; }

        /// <summary>
        /// A specific charge in a court case resulting in a sentence. NIEM reference is j:SentenceCharge
        /// </summary>
        /// <value>A specific charge in a court case resulting in a sentence. NIEM reference is j:SentenceCharge</value>

        [DataMember(Name="charge")]
        public List<JChargeType> Charge { get; set; }

        /// <summary>
        /// A description and duration of a sentence component. NIEM reference is j:SentenceCondition
        /// </summary>
        /// <value>A description and duration of a sentence component. NIEM reference is j:SentenceCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// A total number of presentencing days served credited towards sentence term. NIEM reference is j:SentenceConfinementCreditDayQuantity
        /// </summary>
        /// <value>A total number of presentencing days served credited towards sentence term. NIEM reference is j:SentenceConfinementCreditDayQuantity</value>

        [DataMember(Name="confinementCreditDayQuantity")]
        public List<NcQuantityType> ConfinementCreditDayQuantity { get; set; }

        /// <summary>
        /// True if any days served preceding the sentence will be applied to the sentence duration; false otherwise. NIEM reference is j:SentenceConfinementCreditIndicator
        /// </summary>
        /// <value>True if any days served preceding the sentence will be applied to the sentence duration; false otherwise. NIEM reference is j:SentenceConfinementCreditIndicator</value>

        [DataMember(Name="isConfinementCredit")]
        public List<NiemXsboolean> IsConfinementCredit { get; set; }

        /// <summary>
        /// True if the sentence has been deferred; false otherwise. NIEM reference is j:SentenceDeferredIndicator
        /// </summary>
        /// <value>True if the sentence has been deferred; false otherwise. NIEM reference is j:SentenceDeferredIndicator</value>

        [DataMember(Name="isDeferred")]
        public List<NiemXsboolean> IsDeferred { get; set; }

        /// <summary>
        /// A deferred term. NIEM reference is j:SentenceDeferredTerm
        /// </summary>
        /// <value>A deferred term. NIEM reference is j:SentenceDeferredTerm</value>

        [DataMember(Name="deferredTerm")]
        public List<JTermType> DeferredTerm { get; set; }

        /// <summary>
        /// A description of the sentence being imposed. NIEM reference is j:SentenceDescriptionText
        /// </summary>
        /// <value>A description of the sentence being imposed. NIEM reference is j:SentenceDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A date the sentence expires. NIEM reference is j:SentenceExpirationDate
        /// </summary>
        /// <value>A date the sentence expires. NIEM reference is j:SentenceExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// An order to how a sentence must be served. NIEM reference is j:SentenceGroupingText
        /// </summary>
        /// <value>An order to how a sentence must be served. NIEM reference is j:SentenceGroupingText</value>

        [DataMember(Name="grouping")]
        public List<NcTextType> Grouping { get; set; }

        /// <summary>
        /// An entity which issued a sentence. NIEM reference is j:SentenceIssuerEntity
        /// </summary>
        /// <value>An entity which issued a sentence. NIEM reference is j:SentenceIssuerEntity</value>

        [DataMember(Name="issuerEntity")]
        public List<NcEntityType> IssuerEntity { get; set; }

        /// <summary>
        /// True if sex offender registration is required; false otherwise. NIEM reference is j:SentenceRegisterSexOffenderIndicator
        /// </summary>
        /// <value>True if sex offender registration is required; false otherwise. NIEM reference is j:SentenceRegisterSexOffenderIndicator</value>

        [DataMember(Name="isRegisterSexOffender")]
        public List<NiemXsboolean> IsRegisterSexOffender { get; set; }

        /// <summary>
        /// A person who is being sentenced. NIEM reference is j:SentenceSubject
        /// </summary>
        /// <value>A person who is being sentenced. NIEM reference is j:SentenceSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// True if the sentence has been suspended; false otherwise. NIEM reference is j:SentenceSuspendedIndicator
        /// </summary>
        /// <value>True if the sentence has been suspended; false otherwise. NIEM reference is j:SentenceSuspendedIndicator</value>

        [DataMember(Name="isSuspended")]
        public List<NiemXsboolean> IsSuspended { get; set; }

        /// <summary>
        /// A suspended term. NIEM reference is j:SentenceSuspendedTerm
        /// </summary>
        /// <value>A suspended term. NIEM reference is j:SentenceSuspendedTerm</value>

        [DataMember(Name="suspendedTerm")]
        public List<JTermType> SuspendedTerm { get; set; }

        /// <summary>
        /// A duration of a sentence. Specified as either a specific term in days-months-years or as a minimum - maximum range. NIEM reference is j:SentenceTerm
        /// </summary>
        /// <value>A duration of a sentence. Specified as either a specific term in days-months-years or as a minimum - maximum range. NIEM reference is j:SentenceTerm</value>

        [DataMember(Name="term")]
        public List<JTermType> Term { get; set; }

        /// <summary>
        /// An amount of expenses of prosecuting the case that a convicted subject may be ordered to pay as reimbursement. NIEM reference is j:CourtCostAmount
        /// </summary>
        /// <value>An amount of expenses of prosecuting the case that a convicted subject may be ordered to pay as reimbursement. NIEM reference is j:CourtCostAmount</value>

        [DataMember(Name="courtCostAmount")]
        public List<NcAmountType> CourtCostAmount { get; set; }

        /// <summary>
        /// A pecuniary criminal punishment or penalty payable to the public treasury NIEM reference is j:SupervisionFineAmount
        /// </summary>
        /// <value>A pecuniary criminal punishment or penalty payable to the public treasury NIEM reference is j:SupervisionFineAmount</value>

        [DataMember(Name="supervisionFineAmount")]
        public List<NcAmountType> SupervisionFineAmount { get; set; }

        /// <summary>
        /// jSentenceType JSON-LD context
        /// </summary>
        /// <value>jSentenceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSentenceTypeContextJsonldEnum for ../JSON-LD_Contexts/jSentenceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSentenceTypeContext.jsonld")]
            JSONLDContextsjSentenceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSentenceType JSON-LD context
        /// </summary>
        /// <value>jSentenceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSentenceType {\n");
            sb.Append("  IsAggravated: ").Append(IsAggravated).Append("\n");
            sb.Append("  Imposed: ").Append(Imposed).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ConfinementCreditDayQuantity: ").Append(ConfinementCreditDayQuantity).Append("\n");
            sb.Append("  IsConfinementCredit: ").Append(IsConfinementCredit).Append("\n");
            sb.Append("  IsDeferred: ").Append(IsDeferred).Append("\n");
            sb.Append("  DeferredTerm: ").Append(DeferredTerm).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Grouping: ").Append(Grouping).Append("\n");
            sb.Append("  IssuerEntity: ").Append(IssuerEntity).Append("\n");
            sb.Append("  IsRegisterSexOffender: ").Append(IsRegisterSexOffender).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  IsSuspended: ").Append(IsSuspended).Append("\n");
            sb.Append("  SuspendedTerm: ").Append(SuspendedTerm).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  CourtCostAmount: ").Append(CourtCostAmount).Append("\n");
            sb.Append("  SupervisionFineAmount: ").Append(SupervisionFineAmount).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSentenceType)obj);
        }

        /// <summary>
        /// Returns true if JSentenceType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSentenceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSentenceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsAggravated == other.IsAggravated ||
                    IsAggravated != null &&
                    IsAggravated.SequenceEqual(other.IsAggravated)
                ) && 
                (
                    Imposed == other.Imposed ||
                    Imposed != null &&
                    Imposed.SequenceEqual(other.Imposed)
                ) && 
                (
                    Charge == other.Charge ||
                    Charge != null &&
                    Charge.SequenceEqual(other.Charge)
                ) && 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    ConfinementCreditDayQuantity == other.ConfinementCreditDayQuantity ||
                    ConfinementCreditDayQuantity != null &&
                    ConfinementCreditDayQuantity.SequenceEqual(other.ConfinementCreditDayQuantity)
                ) && 
                (
                    IsConfinementCredit == other.IsConfinementCredit ||
                    IsConfinementCredit != null &&
                    IsConfinementCredit.SequenceEqual(other.IsConfinementCredit)
                ) && 
                (
                    IsDeferred == other.IsDeferred ||
                    IsDeferred != null &&
                    IsDeferred.SequenceEqual(other.IsDeferred)
                ) && 
                (
                    DeferredTerm == other.DeferredTerm ||
                    DeferredTerm != null &&
                    DeferredTerm.SequenceEqual(other.DeferredTerm)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    Grouping == other.Grouping ||
                    Grouping != null &&
                    Grouping.SequenceEqual(other.Grouping)
                ) && 
                (
                    IssuerEntity == other.IssuerEntity ||
                    IssuerEntity != null &&
                    IssuerEntity.SequenceEqual(other.IssuerEntity)
                ) && 
                (
                    IsRegisterSexOffender == other.IsRegisterSexOffender ||
                    IsRegisterSexOffender != null &&
                    IsRegisterSexOffender.SequenceEqual(other.IsRegisterSexOffender)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    IsSuspended == other.IsSuspended ||
                    IsSuspended != null &&
                    IsSuspended.SequenceEqual(other.IsSuspended)
                ) && 
                (
                    SuspendedTerm == other.SuspendedTerm ||
                    SuspendedTerm != null &&
                    SuspendedTerm.SequenceEqual(other.SuspendedTerm)
                ) && 
                (
                    Term == other.Term ||
                    Term != null &&
                    Term.SequenceEqual(other.Term)
                ) && 
                (
                    CourtCostAmount == other.CourtCostAmount ||
                    CourtCostAmount != null &&
                    CourtCostAmount.SequenceEqual(other.CourtCostAmount)
                ) && 
                (
                    SupervisionFineAmount == other.SupervisionFineAmount ||
                    SupervisionFineAmount != null &&
                    SupervisionFineAmount.SequenceEqual(other.SupervisionFineAmount)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsAggravated != null)
                    hashCode = hashCode * 59 + IsAggravated.GetHashCode();
                    if (Imposed != null)
                    hashCode = hashCode * 59 + Imposed.GetHashCode();
                    if (Charge != null)
                    hashCode = hashCode * 59 + Charge.GetHashCode();
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (ConfinementCreditDayQuantity != null)
                    hashCode = hashCode * 59 + ConfinementCreditDayQuantity.GetHashCode();
                    if (IsConfinementCredit != null)
                    hashCode = hashCode * 59 + IsConfinementCredit.GetHashCode();
                    if (IsDeferred != null)
                    hashCode = hashCode * 59 + IsDeferred.GetHashCode();
                    if (DeferredTerm != null)
                    hashCode = hashCode * 59 + DeferredTerm.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Grouping != null)
                    hashCode = hashCode * 59 + Grouping.GetHashCode();
                    if (IssuerEntity != null)
                    hashCode = hashCode * 59 + IssuerEntity.GetHashCode();
                    if (IsRegisterSexOffender != null)
                    hashCode = hashCode * 59 + IsRegisterSexOffender.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (IsSuspended != null)
                    hashCode = hashCode * 59 + IsSuspended.GetHashCode();
                    if (SuspendedTerm != null)
                    hashCode = hashCode * 59 + SuspendedTerm.GetHashCode();
                    if (Term != null)
                    hashCode = hashCode * 59 + Term.GetHashCode();
                    if (CourtCostAmount != null)
                    hashCode = hashCode * 59 + CourtCostAmount.GetHashCode();
                    if (SupervisionFineAmount != null)
                    hashCode = hashCode * 59 + SupervisionFineAmount.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSentenceType left, JSentenceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSentenceType left, JSentenceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
