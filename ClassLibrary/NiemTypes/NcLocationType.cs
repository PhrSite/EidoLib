/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for geospatial location.
    /// </summary>
    [DataContract]
    public partial class NcLocationType : IEquatable<NcLocationType>
    { 
        /// <summary>
        /// A postal location to which paper mail can be directed. NIEM reference is nc:Address
        /// </summary>
        /// <value>A postal location to which paper mail can be directed. NIEM reference is nc:Address</value>

        [DataMember(Name="address")]
        public List<NcAddressType> Address { get; set; }

        /// <summary>
        /// A location identified by two or more streets which intersect. NIEM reference is nc:AddressCrossStreet
        /// </summary>
        /// <value>A location identified by two or more streets which intersect. NIEM reference is nc:AddressCrossStreet</value>

        [DataMember(Name="addressCrossStreet")]
        public List<NcCrossStreetType> AddressCrossStreet { get; set; }

        /// <summary>
        /// A location identified by a unit of a grid system overlaid on an area. NIEM reference is nc:AddressGrid
        /// </summary>
        /// <value>A location identified by a unit of a grid system overlaid on an area. NIEM reference is nc:AddressGrid</value>

        [DataMember(Name="addressGrid")]
        public List<NcAddressGridType> AddressGrid { get; set; }

        /// <summary>
        /// A major public road. NIEM reference is nc:AddressHighway
        /// </summary>
        /// <value>A major public road. NIEM reference is nc:AddressHighway</value>

        [DataMember(Name="addressHighway")]
        public List<NcHighwayType> AddressHighway { get; set; }

        /// <summary>
        /// A location identified by geographic boundaries. NIEM reference is nc:LocationArea
        /// </summary>
        /// <value>A location identified by geographic boundaries. NIEM reference is nc:LocationArea</value>

        [DataMember(Name="area")]
        public List<NcAreaType> Area { get; set; }

        /// <summary>
        /// A kind or functional description of a location. NIEM reference is j:LocationCategoryCode
        /// </summary>
        /// <value>A kind or functional description of a location. NIEM reference is j:LocationCategoryCode</value>

        [DataMember(Name="jCategoryCode")]
        public List<UcrLocationCategoryCodeType> JCategoryCode { get; set; }

        /// <summary>
        /// A kind of or functional description of a location. NIEM reference is scr:LocationCategoryCode
        /// </summary>
        /// <value>A kind of or functional description of a location. NIEM reference is scr:LocationCategoryCode</value>

        [DataMember(Name="scrCategoryCode")]
        public List<ScrLocationCategoryCodeType> ScrCategoryCode { get; set; }

        /// <summary>
        /// A category of operation performed at a given Location NIEM reference is it:LocationCategoryCodeText
        /// </summary>
        /// <value>A category of operation performed at a given Location NIEM reference is it:LocationCategoryCodeText</value>

        [DataMember(Name="itCategoryCode")]
        public List<NcTextType> ItCategoryCode { get; set; }

        /// <summary>
        /// A kind of location or area. NIEM reference is j:LocationCategoryNDExCode
        /// </summary>
        /// <value>A kind of location or area. NIEM reference is j:LocationCategoryNDExCode</value>

        [DataMember(Name="categoryNdExCode")]
        public List<NdexLocationCategoryNDExCodeType> CategoryNdExCode { get; set; }

        /// <summary>
        /// A kind or functional description of a location. NIEM reference is nc:LocationCategoryText
        /// </summary>
        /// <value>A kind or functional description of a location. NIEM reference is nc:LocationCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A kind of general category of a location, such as commercial. NIEM reference is j:LocationGeneralCategoryCode
        /// </summary>
        /// <value>A kind of general category of a location, such as commercial. NIEM reference is j:LocationGeneralCategoryCode</value>

        [DataMember(Name="generalCategoryCode")]
        public List<NdexLocationGeneralCategoryCodeType> GeneralCategoryCode { get; set; }

        /// <summary>
        /// A kind of location inside of another location, such as a restroom in a restaurant. NIEM reference is j:LocationSublocationCategoryCode
        /// </summary>
        /// <value>A kind of location inside of another location, such as a restroom in a restaurant. NIEM reference is j:LocationSublocationCategoryCode</value>

        [DataMember(Name="sublocationCategoryCode")]
        public List<NdexLocationSublocationCategoryCodeType> SublocationCategoryCode { get; set; }

        /// <summary>
        /// A set of contact information for a location. NIEM reference is nc:LocationContactInformation
        /// </summary>
        /// <value>A set of contact information for a location. NIEM reference is nc:LocationContactInformation</value>

        [DataMember(Name="contactInformation")]
        public List<NcContactInformationType> ContactInformation { get; set; }

        /// <summary>
        /// A description of a location. NIEM reference is nc:LocationDescriptionText
        /// </summary>
        /// <value>A description of a location. NIEM reference is nc:LocationDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A location identified by a latitude and longitude. NIEM reference is nc:Location2DGeospatialCoordinate
        /// </summary>
        /// <value>A location identified by a latitude and longitude. NIEM reference is nc:Location2DGeospatialCoordinate</value>

        [DataMember(Name="2DGeospatialCoordinate")]
        public List<NcLocation2DGeospatialCoordinateType> _2DGeospatialCoordinate { get; set; }

        /// <summary>
        /// A location identified by latitude, longitude, and height. NIEM reference is nc:Location3DGeospatialCoordinate
        /// </summary>
        /// <value>A location identified by latitude, longitude, and height. NIEM reference is nc:Location3DGeospatialCoordinate</value>

        [DataMember(Name="3DGeospatialCoordinate")]
        public List<NcLocation3DGeospatialCoordinateType> _3DGeospatialCoordinate { get; set; }

        /// <summary>
        /// A 2D or 3D geometric point.  A gml:Point is defined by a single coordinate tuple. The direct position of a point is specified by the gml:pos element which is of type gml:DirectPositionType. NIEM reference is geo:LocationGeospatialPoint
        /// </summary>
        /// <value>A 2D or 3D geometric point.  A gml:Point is defined by a single coordinate tuple. The direct position of a point is specified by the gml:pos element which is of type gml:DirectPositionType. NIEM reference is geo:LocationGeospatialPoint</value>

        [DataMember(Name="geospatialPoint")]
        public List<GeoPointType> GeospatialPoint { get; set; }

        /// <summary>
        /// A coordinate from the Universal Transverse Mercator (UTM) Coordinate System, which represents a location with a hemisphere, zone, an easting value, and a northing value. NIEM reference is nc:LocationUTMCoordinateValue
        /// </summary>
        /// <value>A coordinate from the Universal Transverse Mercator (UTM) Coordinate System, which represents a location with a hemisphere, zone, an easting value, and a northing value. NIEM reference is nc:LocationUTMCoordinateValue</value>

        [DataMember(Name="utmCoordinateValue")]
        public List<NcUTMCoordinateType> UtmCoordinateValue { get; set; }

        /// <summary>
        /// A complete coordinate string from the Military Grid Reference System (MGRS) which represents a location with a Universal Transverse Mercator (UTM) or Univeral Polar Steriographic (UPS) coordinate and a unique military grid square. NIEM reference is mo:MGRSCoordinateStringText
        /// </summary>
        /// <value>A complete coordinate string from the Military Grid Reference System (MGRS) which represents a location with a Universal Transverse Mercator (UTM) or Univeral Polar Steriographic (UPS) coordinate and a unique military grid square. NIEM reference is mo:MGRSCoordinateStringText</value>

        [DataMember(Name="mgrsCoordinateString")]
        public List<MoMGRSCoordinateStringType> MgrsCoordinateString { get; set; }

        /// <summary>
        /// A 1-meter precision level MGRS UPS coordinate. NIEM reference is mo:MGRSUPS1MeterCoordinateValue
        /// </summary>
        /// <value>A 1-meter precision level MGRS UPS coordinate. NIEM reference is mo:MGRSUPS1MeterCoordinateValue</value>

        [DataMember(Name="mgrsups1MeterCoordinateValue")]
        public List<MoMGRSUPS1MeterCoordinateType> Mgrsups1MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 100,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM100000MeterCoordinateValue
        /// </summary>
        /// <value>A 100,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM100000MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm100000MeterCoordinateValue")]
        public List<MoMGRSUTM100000MeterCoordinateType> Mgrsutm100000MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 10,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM10000MeterCoordinateValue
        /// </summary>
        /// <value>A 10,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM10000MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm10000MeterCoordinateValue")]
        public List<MoMGRSUTM10000MeterCoordinateType> Mgrsutm10000MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 1,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM1000MeterCoordinateValue
        /// </summary>
        /// <value>A 1,000-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM1000MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm1000MeterCoordinateValue")]
        public List<MoMGRSUTM1000MeterCoordinateType> Mgrsutm1000MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 100-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM100MeterCoordinateValue
        /// </summary>
        /// <value>A 100-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM100MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm100MeterCoordinateValue")]
        public List<MoMGRSUTM100MeterCoordinateType> Mgrsutm100MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 10-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM10MeterCoordinateValue
        /// </summary>
        /// <value>A 10-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM10MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm10MeterCoordinateValue")]
        public List<MoMGRSUTM10MeterCoordinateType> Mgrsutm10MeterCoordinateValue { get; set; }

        /// <summary>
        /// A 1-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM1MeterCoordinateValue
        /// </summary>
        /// <value>A 1-meter precision level MGRS UTM coordinate. NIEM reference is mo:MGRSUTM1MeterCoordinateValue</value>

        [DataMember(Name="mgrsutm1MeterCoordinateValue")]
        public List<MoMGRSUTM1MeterCoordinateType> Mgrsutm1MeterCoordinateValue { get; set; }

        /// <summary>
        /// A location identified by a cylinder oriented vertically and centered on a point described with WGS84 coordinates. If it is appropriate for the radius and half-height properties to represent an error value  (for example, because the event is a laser-designated target), then the true event location follows a normal distribution such that the cylinder defines the one-sigma (p≈0.67)(almost equal to) deviation.  (A cylinder with  twice the volume would be the two-sigma (p≈0.95)(almost equal to) deviation, etc.)  Otherwise the cylinder encloses the  full physical extent of the event. NIEM reference is mo:WGS84LocationCylinder
        /// </summary>
        /// <value>A location identified by a cylinder oriented vertically and centered on a point described with WGS84 coordinates. If it is appropriate for the radius and half-height properties to represent an error value  (for example, because the event is a laser-designated target), then the true event location follows a normal distribution such that the cylinder defines the one-sigma (p≈0.67)(almost equal to) deviation.  (A cylinder with  twice the volume would be the two-sigma (p≈0.95)(almost equal to) deviation, etc.)  Otherwise the cylinder encloses the  full physical extent of the event. NIEM reference is mo:WGS84LocationCylinder</value>

        [DataMember(Name="wgs84Cylinder")]
        public List<MoWGS84LocationCylinderType> Wgs84Cylinder { get; set; }

        /// <summary>
        /// A distinguishing physical feature at a location. NIEM reference is nc:LocationLandmarkText
        /// </summary>
        /// <value>A distinguishing physical feature at a location. NIEM reference is nc:LocationLandmarkText</value>

        [DataMember(Name="landmark")]
        public List<NcTextType> Landmark { get; set; }

        /// <summary>
        /// A geopolitical area. NIEM reference is nc:LocationLocale
        /// </summary>
        /// <value>A geopolitical area. NIEM reference is nc:LocationLocale</value>

        [DataMember(Name="locale")]
        public List<NcLocaleType> Locale { get; set; }

        /// <summary>
        /// A location identified by map or grid coordinates. NIEM reference is nc:LocationMapLocation
        /// </summary>
        /// <value>A location identified by map or grid coordinates. NIEM reference is nc:LocationMapLocation</value>

        [DataMember(Name="mapLocation")]
        public List<NcMapLocationType> MapLocation { get; set; }

        /// <summary>
        /// A name of a location. NIEM reference is nc:LocationName
        /// </summary>
        /// <value>A name of a location. NIEM reference is nc:LocationName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// A description of the boundary or range of a location. NIEM reference is nc:LocationRangeDescriptionText
        /// </summary>
        /// <value>A description of the boundary or range of a location. NIEM reference is nc:LocationRangeDescriptionText</value>

        [DataMember(Name="rangeDescription")]
        public List<NcTextType> RangeDescription { get; set; }

        /// <summary>
        /// A location identified by its proximity to another location. NIEM reference is nc:LocationRelativeLocation
        /// </summary>
        /// <value>A location identified by its proximity to another location. NIEM reference is nc:LocationRelativeLocation</value>

        [DataMember(Name="relativeLocation")]
        public List<NcRelativeLocationType> RelativeLocation { get; set; }

        /// <summary>
        /// A description of the immediate area around a location. NIEM reference is nc:LocationSurroundingAreaDescriptionText
        /// </summary>
        /// <value>A description of the immediate area around a location. NIEM reference is nc:LocationSurroundingAreaDescriptionText</value>

        [DataMember(Name="surroundingAreaDescription")]
        public List<NcTextType> SurroundingAreaDescription { get; set; }

        /// <summary>
        /// An identification of a Location. NIEM reference is nc:LocationIdentification
        /// </summary>
        /// <value>An identification of a Location. NIEM reference is nc:LocationIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A measurement of the height or position of a location above a certain reference. NIEM reference is nc:LocationAltitude
        /// </summary>
        /// <value>A measurement of the height or position of a location above a certain reference. NIEM reference is nc:LocationAltitude</value>

        [DataMember(Name="altitude")]
        public List<NcLocationHeightMeasureType> Altitude { get; set; }

        /// <summary>
        /// A measure of the depth of a location relative to a reference. NIEM reference is nc:LocationDepth
        /// </summary>
        /// <value>A measure of the depth of a location relative to a reference. NIEM reference is nc:LocationDepth</value>

        [DataMember(Name="depth")]
        public List<NcLocationHeightMeasureType> Depth { get; set; }

        /// <summary>
        /// A measure of the distance of a point on the Earth from a reference point. NIEM reference is nc:LocationElevation
        /// </summary>
        /// <value>A measure of the distance of a point on the Earth from a reference point. NIEM reference is nc:LocationElevation</value>

        [DataMember(Name="elevation")]
        public List<NcLocationHeightMeasureType> Elevation { get; set; }

        /// <summary>
        /// A floor number of a location. NIEM reference is nc:LocationFloorNumberText
        /// </summary>
        /// <value>A floor number of a location. NIEM reference is nc:LocationFloorNumberText</value>

        [DataMember(Name="floorNumber")]
        public List<NcTextType> FloorNumber { get; set; }

        /// <summary>
        /// Additional information about a nc:Location. NIEM reference is mo:GeospatialLocationAugmentation
        /// </summary>
        /// <value>Additional information about a nc:Location. NIEM reference is mo:GeospatialLocationAugmentation</value>

        [DataMember(Name="geospatialAugmentation")]
        public List<string> GeospatialAugmentation { get; set; }

        /// <summary>
        /// Additional information about the location of the alarm NIEM reference is em:LocationAugmentation
        /// </summary>
        /// <value>Additional information about the location of the alarm NIEM reference is em:LocationAugmentation</value>

        [DataMember(Name="emAugmentation")]
        public List<EmLocationAugmentationType> EmAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is im:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is im:LocationAugmentation</value>

        [DataMember(Name="imAugmentation")]
        public List<ImLocationAugmentationType> ImAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is intel:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is intel:LocationAugmentation</value>

        [DataMember(Name="intelAugmentation")]
        public List<IntelLocationAugmentationType> IntelAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is j:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is j:LocationAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JLocationAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is m:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is m:LocationAugmentation</value>

        [DataMember(Name="mAugmentation")]
        public List<MLocationAugmentationType> MAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is mo:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is mo:LocationAugmentation</value>

        [DataMember(Name="moAugmentation")]
        public List<MoLocationAugmentationType> MoAugmentation { get; set; }

        /// <summary>
        /// Additional information about a location. NIEM reference is scr:LocationAugmentation
        /// </summary>
        /// <value>Additional information about a location. NIEM reference is scr:LocationAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrLocationAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// A GML feature that describes a location. NIEM reference is geo:LocationFeature
        /// </summary>
        /// <value>A GML feature that describes a location. NIEM reference is geo:LocationFeature</value>

        [DataMember(Name="feature")]
        public List<GeoFeatureType> Feature { get; set; }

        /// <summary>
        /// A GML geometry that describes a location. NIEM reference is geo:LocationGeometry
        /// </summary>
        /// <value>A GML geometry that describes a location. NIEM reference is geo:LocationGeometry</value>

        [DataMember(Name="geometry")]
        public List<GeoGeometryType> Geometry { get; set; }

        /// <summary>
        /// Additional information about a site location. NIEM reference is cbrn:SiteLocationAugmentation
        /// </summary>
        /// <value>Additional information about a site location. NIEM reference is cbrn:SiteLocationAugmentation</value>

        [DataMember(Name="siteAugmentation")]
        public List<CbrnSiteLocationAugmentationType> SiteAugmentation { get; set; }

        /// <summary>
        /// ncLocationType JSON-LD context
        /// </summary>
        /// <value>ncLocationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncLocationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncLocationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncLocationTypeContext.jsonld")]
            JSONLDContextsncLocationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncLocationType JSON-LD context
        /// </summary>
        /// <value>ncLocationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcLocationType {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AddressCrossStreet: ").Append(AddressCrossStreet).Append("\n");
            sb.Append("  AddressGrid: ").Append(AddressGrid).Append("\n");
            sb.Append("  AddressHighway: ").Append(AddressHighway).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  JCategoryCode: ").Append(JCategoryCode).Append("\n");
            sb.Append("  ScrCategoryCode: ").Append(ScrCategoryCode).Append("\n");
            sb.Append("  ItCategoryCode: ").Append(ItCategoryCode).Append("\n");
            sb.Append("  CategoryNdExCode: ").Append(CategoryNdExCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  GeneralCategoryCode: ").Append(GeneralCategoryCode).Append("\n");
            sb.Append("  SublocationCategoryCode: ").Append(SublocationCategoryCode).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _2DGeospatialCoordinate: ").Append(_2DGeospatialCoordinate).Append("\n");
            sb.Append("  _3DGeospatialCoordinate: ").Append(_3DGeospatialCoordinate).Append("\n");
            sb.Append("  GeospatialPoint: ").Append(GeospatialPoint).Append("\n");
            sb.Append("  UtmCoordinateValue: ").Append(UtmCoordinateValue).Append("\n");
            sb.Append("  MgrsCoordinateString: ").Append(MgrsCoordinateString).Append("\n");
            sb.Append("  Mgrsups1MeterCoordinateValue: ").Append(Mgrsups1MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm100000MeterCoordinateValue: ").Append(Mgrsutm100000MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm10000MeterCoordinateValue: ").Append(Mgrsutm10000MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm1000MeterCoordinateValue: ").Append(Mgrsutm1000MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm100MeterCoordinateValue: ").Append(Mgrsutm100MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm10MeterCoordinateValue: ").Append(Mgrsutm10MeterCoordinateValue).Append("\n");
            sb.Append("  Mgrsutm1MeterCoordinateValue: ").Append(Mgrsutm1MeterCoordinateValue).Append("\n");
            sb.Append("  Wgs84Cylinder: ").Append(Wgs84Cylinder).Append("\n");
            sb.Append("  Landmark: ").Append(Landmark).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  MapLocation: ").Append(MapLocation).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RangeDescription: ").Append(RangeDescription).Append("\n");
            sb.Append("  RelativeLocation: ").Append(RelativeLocation).Append("\n");
            sb.Append("  SurroundingAreaDescription: ").Append(SurroundingAreaDescription).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Altitude: ").Append(Altitude).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Elevation: ").Append(Elevation).Append("\n");
            sb.Append("  FloorNumber: ").Append(FloorNumber).Append("\n");
            sb.Append("  GeospatialAugmentation: ").Append(GeospatialAugmentation).Append("\n");
            sb.Append("  EmAugmentation: ").Append(EmAugmentation).Append("\n");
            sb.Append("  ImAugmentation: ").Append(ImAugmentation).Append("\n");
            sb.Append("  IntelAugmentation: ").Append(IntelAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  MAugmentation: ").Append(MAugmentation).Append("\n");
            sb.Append("  MoAugmentation: ").Append(MoAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Feature: ").Append(Feature).Append("\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  SiteAugmentation: ").Append(SiteAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcLocationType)obj);
        }

        /// <summary>
        /// Returns true if NcLocationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcLocationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcLocationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.SequenceEqual(other.Address)
                ) && 
                (
                    AddressCrossStreet == other.AddressCrossStreet ||
                    AddressCrossStreet != null &&
                    AddressCrossStreet.SequenceEqual(other.AddressCrossStreet)
                ) && 
                (
                    AddressGrid == other.AddressGrid ||
                    AddressGrid != null &&
                    AddressGrid.SequenceEqual(other.AddressGrid)
                ) && 
                (
                    AddressHighway == other.AddressHighway ||
                    AddressHighway != null &&
                    AddressHighway.SequenceEqual(other.AddressHighway)
                ) && 
                (
                    Area == other.Area ||
                    Area != null &&
                    Area.SequenceEqual(other.Area)
                ) && 
                (
                    JCategoryCode == other.JCategoryCode ||
                    JCategoryCode != null &&
                    JCategoryCode.SequenceEqual(other.JCategoryCode)
                ) && 
                (
                    ScrCategoryCode == other.ScrCategoryCode ||
                    ScrCategoryCode != null &&
                    ScrCategoryCode.SequenceEqual(other.ScrCategoryCode)
                ) && 
                (
                    ItCategoryCode == other.ItCategoryCode ||
                    ItCategoryCode != null &&
                    ItCategoryCode.SequenceEqual(other.ItCategoryCode)
                ) && 
                (
                    CategoryNdExCode == other.CategoryNdExCode ||
                    CategoryNdExCode != null &&
                    CategoryNdExCode.SequenceEqual(other.CategoryNdExCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    GeneralCategoryCode == other.GeneralCategoryCode ||
                    GeneralCategoryCode != null &&
                    GeneralCategoryCode.SequenceEqual(other.GeneralCategoryCode)
                ) && 
                (
                    SublocationCategoryCode == other.SublocationCategoryCode ||
                    SublocationCategoryCode != null &&
                    SublocationCategoryCode.SequenceEqual(other.SublocationCategoryCode)
                ) && 
                (
                    ContactInformation == other.ContactInformation ||
                    ContactInformation != null &&
                    ContactInformation.SequenceEqual(other.ContactInformation)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    _2DGeospatialCoordinate == other._2DGeospatialCoordinate ||
                    _2DGeospatialCoordinate != null &&
                    _2DGeospatialCoordinate.SequenceEqual(other._2DGeospatialCoordinate)
                ) && 
                (
                    _3DGeospatialCoordinate == other._3DGeospatialCoordinate ||
                    _3DGeospatialCoordinate != null &&
                    _3DGeospatialCoordinate.SequenceEqual(other._3DGeospatialCoordinate)
                ) && 
                (
                    GeospatialPoint == other.GeospatialPoint ||
                    GeospatialPoint != null &&
                    GeospatialPoint.SequenceEqual(other.GeospatialPoint)
                ) && 
                (
                    UtmCoordinateValue == other.UtmCoordinateValue ||
                    UtmCoordinateValue != null &&
                    UtmCoordinateValue.SequenceEqual(other.UtmCoordinateValue)
                ) && 
                (
                    MgrsCoordinateString == other.MgrsCoordinateString ||
                    MgrsCoordinateString != null &&
                    MgrsCoordinateString.SequenceEqual(other.MgrsCoordinateString)
                ) && 
                (
                    Mgrsups1MeterCoordinateValue == other.Mgrsups1MeterCoordinateValue ||
                    Mgrsups1MeterCoordinateValue != null &&
                    Mgrsups1MeterCoordinateValue.SequenceEqual(other.Mgrsups1MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm100000MeterCoordinateValue == other.Mgrsutm100000MeterCoordinateValue ||
                    Mgrsutm100000MeterCoordinateValue != null &&
                    Mgrsutm100000MeterCoordinateValue.SequenceEqual(other.Mgrsutm100000MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm10000MeterCoordinateValue == other.Mgrsutm10000MeterCoordinateValue ||
                    Mgrsutm10000MeterCoordinateValue != null &&
                    Mgrsutm10000MeterCoordinateValue.SequenceEqual(other.Mgrsutm10000MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm1000MeterCoordinateValue == other.Mgrsutm1000MeterCoordinateValue ||
                    Mgrsutm1000MeterCoordinateValue != null &&
                    Mgrsutm1000MeterCoordinateValue.SequenceEqual(other.Mgrsutm1000MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm100MeterCoordinateValue == other.Mgrsutm100MeterCoordinateValue ||
                    Mgrsutm100MeterCoordinateValue != null &&
                    Mgrsutm100MeterCoordinateValue.SequenceEqual(other.Mgrsutm100MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm10MeterCoordinateValue == other.Mgrsutm10MeterCoordinateValue ||
                    Mgrsutm10MeterCoordinateValue != null &&
                    Mgrsutm10MeterCoordinateValue.SequenceEqual(other.Mgrsutm10MeterCoordinateValue)
                ) && 
                (
                    Mgrsutm1MeterCoordinateValue == other.Mgrsutm1MeterCoordinateValue ||
                    Mgrsutm1MeterCoordinateValue != null &&
                    Mgrsutm1MeterCoordinateValue.SequenceEqual(other.Mgrsutm1MeterCoordinateValue)
                ) && 
                (
                    Wgs84Cylinder == other.Wgs84Cylinder ||
                    Wgs84Cylinder != null &&
                    Wgs84Cylinder.SequenceEqual(other.Wgs84Cylinder)
                ) && 
                (
                    Landmark == other.Landmark ||
                    Landmark != null &&
                    Landmark.SequenceEqual(other.Landmark)
                ) && 
                (
                    Locale == other.Locale ||
                    Locale != null &&
                    Locale.SequenceEqual(other.Locale)
                ) && 
                (
                    MapLocation == other.MapLocation ||
                    MapLocation != null &&
                    MapLocation.SequenceEqual(other.MapLocation)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    RangeDescription == other.RangeDescription ||
                    RangeDescription != null &&
                    RangeDescription.SequenceEqual(other.RangeDescription)
                ) && 
                (
                    RelativeLocation == other.RelativeLocation ||
                    RelativeLocation != null &&
                    RelativeLocation.SequenceEqual(other.RelativeLocation)
                ) && 
                (
                    SurroundingAreaDescription == other.SurroundingAreaDescription ||
                    SurroundingAreaDescription != null &&
                    SurroundingAreaDescription.SequenceEqual(other.SurroundingAreaDescription)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Altitude == other.Altitude ||
                    Altitude != null &&
                    Altitude.SequenceEqual(other.Altitude)
                ) && 
                (
                    Depth == other.Depth ||
                    Depth != null &&
                    Depth.SequenceEqual(other.Depth)
                ) && 
                (
                    Elevation == other.Elevation ||
                    Elevation != null &&
                    Elevation.SequenceEqual(other.Elevation)
                ) && 
                (
                    FloorNumber == other.FloorNumber ||
                    FloorNumber != null &&
                    FloorNumber.SequenceEqual(other.FloorNumber)
                ) && 
                (
                    GeospatialAugmentation == other.GeospatialAugmentation ||
                    GeospatialAugmentation != null &&
                    GeospatialAugmentation.SequenceEqual(other.GeospatialAugmentation)
                ) && 
                (
                    EmAugmentation == other.EmAugmentation ||
                    EmAugmentation != null &&
                    EmAugmentation.SequenceEqual(other.EmAugmentation)
                ) && 
                (
                    ImAugmentation == other.ImAugmentation ||
                    ImAugmentation != null &&
                    ImAugmentation.SequenceEqual(other.ImAugmentation)
                ) && 
                (
                    IntelAugmentation == other.IntelAugmentation ||
                    IntelAugmentation != null &&
                    IntelAugmentation.SequenceEqual(other.IntelAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    MAugmentation == other.MAugmentation ||
                    MAugmentation != null &&
                    MAugmentation.SequenceEqual(other.MAugmentation)
                ) && 
                (
                    MoAugmentation == other.MoAugmentation ||
                    MoAugmentation != null &&
                    MoAugmentation.SequenceEqual(other.MoAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Feature == other.Feature ||
                    Feature != null &&
                    Feature.SequenceEqual(other.Feature)
                ) && 
                (
                    Geometry == other.Geometry ||
                    Geometry != null &&
                    Geometry.SequenceEqual(other.Geometry)
                ) && 
                (
                    SiteAugmentation == other.SiteAugmentation ||
                    SiteAugmentation != null &&
                    SiteAugmentation.SequenceEqual(other.SiteAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (AddressCrossStreet != null)
                    hashCode = hashCode * 59 + AddressCrossStreet.GetHashCode();
                    if (AddressGrid != null)
                    hashCode = hashCode * 59 + AddressGrid.GetHashCode();
                    if (AddressHighway != null)
                    hashCode = hashCode * 59 + AddressHighway.GetHashCode();
                    if (Area != null)
                    hashCode = hashCode * 59 + Area.GetHashCode();
                    if (JCategoryCode != null)
                    hashCode = hashCode * 59 + JCategoryCode.GetHashCode();
                    if (ScrCategoryCode != null)
                    hashCode = hashCode * 59 + ScrCategoryCode.GetHashCode();
                    if (ItCategoryCode != null)
                    hashCode = hashCode * 59 + ItCategoryCode.GetHashCode();
                    if (CategoryNdExCode != null)
                    hashCode = hashCode * 59 + CategoryNdExCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (GeneralCategoryCode != null)
                    hashCode = hashCode * 59 + GeneralCategoryCode.GetHashCode();
                    if (SublocationCategoryCode != null)
                    hashCode = hashCode * 59 + SublocationCategoryCode.GetHashCode();
                    if (ContactInformation != null)
                    hashCode = hashCode * 59 + ContactInformation.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (_2DGeospatialCoordinate != null)
                    hashCode = hashCode * 59 + _2DGeospatialCoordinate.GetHashCode();
                    if (_3DGeospatialCoordinate != null)
                    hashCode = hashCode * 59 + _3DGeospatialCoordinate.GetHashCode();
                    if (GeospatialPoint != null)
                    hashCode = hashCode * 59 + GeospatialPoint.GetHashCode();
                    if (UtmCoordinateValue != null)
                    hashCode = hashCode * 59 + UtmCoordinateValue.GetHashCode();
                    if (MgrsCoordinateString != null)
                    hashCode = hashCode * 59 + MgrsCoordinateString.GetHashCode();
                    if (Mgrsups1MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsups1MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm100000MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm100000MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm10000MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm10000MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm1000MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm1000MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm100MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm100MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm10MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm10MeterCoordinateValue.GetHashCode();
                    if (Mgrsutm1MeterCoordinateValue != null)
                    hashCode = hashCode * 59 + Mgrsutm1MeterCoordinateValue.GetHashCode();
                    if (Wgs84Cylinder != null)
                    hashCode = hashCode * 59 + Wgs84Cylinder.GetHashCode();
                    if (Landmark != null)
                    hashCode = hashCode * 59 + Landmark.GetHashCode();
                    if (Locale != null)
                    hashCode = hashCode * 59 + Locale.GetHashCode();
                    if (MapLocation != null)
                    hashCode = hashCode * 59 + MapLocation.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (RangeDescription != null)
                    hashCode = hashCode * 59 + RangeDescription.GetHashCode();
                    if (RelativeLocation != null)
                    hashCode = hashCode * 59 + RelativeLocation.GetHashCode();
                    if (SurroundingAreaDescription != null)
                    hashCode = hashCode * 59 + SurroundingAreaDescription.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Altitude != null)
                    hashCode = hashCode * 59 + Altitude.GetHashCode();
                    if (Depth != null)
                    hashCode = hashCode * 59 + Depth.GetHashCode();
                    if (Elevation != null)
                    hashCode = hashCode * 59 + Elevation.GetHashCode();
                    if (FloorNumber != null)
                    hashCode = hashCode * 59 + FloorNumber.GetHashCode();
                    if (GeospatialAugmentation != null)
                    hashCode = hashCode * 59 + GeospatialAugmentation.GetHashCode();
                    if (EmAugmentation != null)
                    hashCode = hashCode * 59 + EmAugmentation.GetHashCode();
                    if (ImAugmentation != null)
                    hashCode = hashCode * 59 + ImAugmentation.GetHashCode();
                    if (IntelAugmentation != null)
                    hashCode = hashCode * 59 + IntelAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (MAugmentation != null)
                    hashCode = hashCode * 59 + MAugmentation.GetHashCode();
                    if (MoAugmentation != null)
                    hashCode = hashCode * 59 + MoAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Feature != null)
                    hashCode = hashCode * 59 + Feature.GetHashCode();
                    if (Geometry != null)
                    hashCode = hashCode * 59 + Geometry.GetHashCode();
                    if (SiteAugmentation != null)
                    hashCode = hashCode * 59 + SiteAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcLocationType left, NcLocationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcLocationType left, NcLocationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
