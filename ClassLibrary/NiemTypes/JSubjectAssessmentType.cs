/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an event or activity involving the assessment of a corrections subject.
    /// </summary>
    [DataContract]
    public partial class JSubjectAssessmentType : NcAssessmentType, IEquatable<JSubjectAssessmentType>
    { 
        /// <summary>
        /// True if Subject Assessments were completed and are documented ; false otherwise. NIEM reference is j:SubjectAssessmentCompletedIndicator
        /// </summary>
        /// <value>True if Subject Assessments were completed and are documented ; false otherwise. NIEM reference is j:SubjectAssessmentCompletedIndicator</value>

        [DataMember(Name="isCompleted")]
        public List<NiemXsboolean> IsCompleted { get; set; }

        /// <summary>
        /// An evaluation conducted by a caseworker which is a part of a subject assessment. NIEM reference is j:SubjectAssessmentCaseworkerEvaluation
        /// </summary>
        /// <value>An evaluation conducted by a caseworker which is a part of a subject assessment. NIEM reference is j:SubjectAssessmentCaseworkerEvaluation</value>

        [DataMember(Name="caseworkerEvaluation")]
        public List<NcAssessmentType> CaseworkerEvaluation { get; set; }

        /// <summary>
        /// True if the subject has granted permission to contact an employer; false otherwise. NIEM reference is j:SubjectAssessmentCanContactEmployerIndicator
        /// </summary>
        /// <value>True if the subject has granted permission to contact an employer; false otherwise. NIEM reference is j:SubjectAssessmentCanContactEmployerIndicator</value>

        [DataMember(Name="isCanContactEmployer")]
        public List<NiemXsboolean> IsCanContactEmployer { get; set; }

        /// <summary>
        /// A review process or event specific to determining a subject&#x27;s fit to a specific correctional assignment (housing, program, service, etc.) NIEM reference is j:SubjectAssessmentAssignmentAssessment
        /// </summary>
        /// <value>A review process or event specific to determining a subject&#x27;s fit to a specific correctional assignment (housing, program, service, etc.) NIEM reference is j:SubjectAssessmentAssignmentAssessment</value>

        [DataMember(Name="assignmentAssessment")]
        public List<JAssignmentAssessmentType> AssignmentAssessment { get; set; }

        /// <summary>
        /// A review of a subject&#x27;s use of alcohol. NIEM reference is j:SubjectAssessmentAlcoholUseAssessment
        /// </summary>
        /// <value>A review of a subject&#x27;s use of alcohol. NIEM reference is j:SubjectAssessmentAlcoholUseAssessment</value>

        [DataMember(Name="alcoholUseAssessment")]
        public List<JAlcoholUseAssessmentType> AlcoholUseAssessment { get; set; }

        /// <summary>
        /// True if the offender has a history of abusing alcohol; false otherwise. NIEM reference is j:SubjectAssessmentAlcoholAbuseHistoryIndicator
        /// </summary>
        /// <value>True if the offender has a history of abusing alcohol; false otherwise. NIEM reference is j:SubjectAssessmentAlcoholAbuseHistoryIndicator</value>

        [DataMember(Name="isAlcoholAbuseHistory")]
        public List<NiemXsboolean> IsAlcoholAbuseHistory { get; set; }

        /// <summary>
        /// A kind of development disability of a subject determined during assessment. NIEM reference is j:SubjectAssessmentDevelopmentDisability
        /// </summary>
        /// <value>A kind of development disability of a subject determined during assessment. NIEM reference is j:SubjectAssessmentDevelopmentDisability</value>

        [DataMember(Name="developmentDisability")]
        public List<JDevelopmentalDisabilityType> DevelopmentDisability { get; set; }

        /// <summary>
        /// An assessment of if the subject meets the criteria for mandatory treatment by the Department of Mental Health (DMH) as a condition of parole. NIEM reference is j:SubjectAssessmentMentalHealthAssessment
        /// </summary>
        /// <value>An assessment of if the subject meets the criteria for mandatory treatment by the Department of Mental Health (DMH) as a condition of parole. NIEM reference is j:SubjectAssessmentMentalHealthAssessment</value>

        [DataMember(Name="mentalHealthAssessment")]
        public List<JMentalHealthAssessmentType> MentalHealthAssessment { get; set; }

        /// <summary>
        /// A measure of the subject&#x27;s age at the time of their first criminal arrest. NIEM reference is j:SubjectAssessmentFirstArrestAgeMeasure
        /// </summary>
        /// <value>A measure of the subject&#x27;s age at the time of their first criminal arrest. NIEM reference is j:SubjectAssessmentFirstArrestAgeMeasure</value>

        [DataMember(Name="firstArrestAgeMeasure")]
        public List<NcTimeMeasureType> FirstArrestAgeMeasure { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s medical assessment. NIEM reference is j:SubjectMedicalAssessment
        /// </summary>
        /// <value>A set of details about a subject&#x27;s medical assessment. NIEM reference is j:SubjectMedicalAssessment</value>

        [DataMember(Name="subjectMedicalAssessment")]
        public List<JMedicalAssessmentType> SubjectMedicalAssessment { get; set; }

        /// <summary>
        /// An assessment of an individual education and training experiences. NIEM reference is j:SubjectAssessmentAcademicAssessment
        /// </summary>
        /// <value>An assessment of an individual education and training experiences. NIEM reference is j:SubjectAssessmentAcademicAssessment</value>

        [DataMember(Name="academicAssessment")]
        public List<JAcademicAssessmentType> AcademicAssessment { get; set; }

        /// <summary>
        /// A kind of factor which is destabilizing for the subject. NIEM reference is j:SubjectAssessmentDestabilizingFactor
        /// </summary>
        /// <value>A kind of factor which is destabilizing for the subject. NIEM reference is j:SubjectAssessmentDestabilizingFactor</value>

        [DataMember(Name="destabilizingFactor")]
        public List<JDestabilizingFactorType> DestabilizingFactor { get; set; }

        /// <summary>
        /// True if the subject has a history of arson related incidents or crimes; false otherwise. NIEM reference is j:SubjectAssessmentArsonHistoryIndicator
        /// </summary>
        /// <value>True if the subject has a history of arson related incidents or crimes; false otherwise. NIEM reference is j:SubjectAssessmentArsonHistoryIndicator</value>

        [DataMember(Name="isArsonHistory")]
        public List<NiemXsboolean> IsArsonHistory { get; set; }

        /// <summary>
        /// A type of disability recorded as part of a subject assessment. NIEM reference is j:SubjectAssessmentDisability
        /// </summary>
        /// <value>A type of disability recorded as part of a subject assessment. NIEM reference is j:SubjectAssessmentDisability</value>

        [DataMember(Name="disability")]
        public List<JPersonDisabilityType> Disability { get; set; }

        /// <summary>
        /// A date of the first arrest for a subject. NIEM reference is j:SubjectAssessmentFirstArrestDate
        /// </summary>
        /// <value>A date of the first arrest for a subject. NIEM reference is j:SubjectAssessmentFirstArrestDate</value>

        [DataMember(Name="firstArrestDate")]
        public List<NcDateType> FirstArrestDate { get; set; }

        /// <summary>
        /// A medical assessment for the purpose of a correction subject assessment. NIEM reference is j:SubjectAssessmentMedicalAssessment
        /// </summary>
        /// <value>A medical assessment for the purpose of a correction subject assessment. NIEM reference is j:SubjectAssessmentMedicalAssessment</value>

        [DataMember(Name="medicalAssessment")]
        public List<JMedicalAssessmentType> MedicalAssessment { get; set; }

        /// <summary>
        /// True if the subject is a high risk sex offender (HRSO); false otherwise. NIEM reference is j:SubjectAssessmentHighRiskSexOffenderIndicator
        /// </summary>
        /// <value>True if the subject is a high risk sex offender (HRSO); false otherwise. NIEM reference is j:SubjectAssessmentHighRiskSexOffenderIndicator</value>

        [DataMember(Name="isHighRiskSexOffender")]
        public List<NiemXsboolean> IsHighRiskSexOffender { get; set; }

        /// <summary>
        /// A kind of values indicating what life events are affecting the subject during aftercare. NIEM reference is j:SubjectAssessmentLifeEventText
        /// </summary>
        /// <value>A kind of values indicating what life events are affecting the subject during aftercare. NIEM reference is j:SubjectAssessmentLifeEventText</value>

        [DataMember(Name="lifeEvent")]
        public List<NcTextType> LifeEvent { get; set; }

        /// <summary>
        /// True if a hold order is to be placed for the parolee; false otherwise. NIEM reference is j:SubjectAssessmentHoldOrderIndicator
        /// </summary>
        /// <value>True if a hold order is to be placed for the parolee; false otherwise. NIEM reference is j:SubjectAssessmentHoldOrderIndicator</value>

        [DataMember(Name="isHoldOrder")]
        public List<NiemXsboolean> IsHoldOrder { get; set; }

        /// <summary>
        /// True if an interpreter is required to communicate with subject; false otherwise. NIEM reference is j:SubjectAssessmentInterpreterRequiredIndicator
        /// </summary>
        /// <value>True if an interpreter is required to communicate with subject; false otherwise. NIEM reference is j:SubjectAssessmentInterpreterRequiredIndicator</value>

        [DataMember(Name="isInterpreterRequired")]
        public List<NiemXsboolean> IsInterpreterRequired { get; set; }

        /// <summary>
        /// A description of any subject special needs. NIEM reference is j:SubjectAssessmentSpecialNeedsStatementText
        /// </summary>
        /// <value>A description of any subject special needs. NIEM reference is j:SubjectAssessmentSpecialNeedsStatementText</value>

        [DataMember(Name="specialNeedsStatement")]
        public List<NcTextType> SpecialNeedsStatement { get; set; }

        /// <summary>
        /// True if the subject is eligible for release to county supervision; false otherwise. NIEM reference is j:SubjectAssessmentEligibleForCountySupervisionIndicator
        /// </summary>
        /// <value>True if the subject is eligible for release to county supervision; false otherwise. NIEM reference is j:SubjectAssessmentEligibleForCountySupervisionIndicator</value>

        [DataMember(Name="isEligibleForCountySupervision")]
        public List<NiemXsboolean> IsEligibleForCountySupervision { get; set; }

        /// <summary>
        /// A kind of review period. NIEM reference is j:SubjectAssessmentReviewPeriodText
        /// </summary>
        /// <value>A kind of review period. NIEM reference is j:SubjectAssessmentReviewPeriodText</value>

        [DataMember(Name="reviewPeriod")]
        public List<NcTextType> ReviewPeriod { get; set; }

        /// <summary>
        /// True if the subject&#x27;s stability level is satisfactory; false otherwise. NIEM reference is j:SubjectAssessmentStabilityLevelIndicator
        /// </summary>
        /// <value>True if the subject&#x27;s stability level is satisfactory; false otherwise. NIEM reference is j:SubjectAssessmentStabilityLevelIndicator</value>

        [DataMember(Name="isStabilityLevel")]
        public List<NiemXsboolean> IsStabilityLevel { get; set; }

        /// <summary>
        /// True if the subject is assessed as being aggressive; false otherwise. NIEM reference is j:SubjectAssessmentSubjectAggressiveIndicator
        /// </summary>
        /// <value>True if the subject is assessed as being aggressive; false otherwise. NIEM reference is j:SubjectAssessmentSubjectAggressiveIndicator</value>

        [DataMember(Name="isSubjectAggressive")]
        public List<NiemXsboolean> IsSubjectAggressive { get; set; }

        /// <summary>
        /// True if a subject has special need; false otherwise. NIEM reference is j:SubjectAssessmentSpecialNeedsIndicator
        /// </summary>
        /// <value>True if a subject has special need; false otherwise. NIEM reference is j:SubjectAssessmentSpecialNeedsIndicator</value>

        [DataMember(Name="isSpecialNeeds")]
        public List<NiemXsboolean> IsSpecialNeeds { get; set; }

        /// <summary>
        /// True if the subject file was available for review; false otherwise. NIEM reference is j:SubjectAssessmentSubjectFilesAvailableIndicator
        /// </summary>
        /// <value>True if the subject file was available for review; false otherwise. NIEM reference is j:SubjectAssessmentSubjectFilesAvailableIndicator</value>

        [DataMember(Name="isSubjectFilesAvailable")]
        public List<NiemXsboolean> IsSubjectFilesAvailable { get; set; }

        /// <summary>
        /// A portion of a subject assessment which focuses on their ability and/or readiness for parole. NIEM reference is j:SubjectAssessmentParoleAssessment
        /// </summary>
        /// <value>A portion of a subject assessment which focuses on their ability and/or readiness for parole. NIEM reference is j:SubjectAssessmentParoleAssessment</value>

        [DataMember(Name="paroleAssessment")]
        public List<JParoleAssessmentType> ParoleAssessment { get; set; }

        /// <summary>
        /// A number score indicating a subject&#x27;s attitude during assessment. NIEM reference is j:SubjectAssessmentPositiveAttitudeLevelNumeric
        /// </summary>
        /// <value>A number score indicating a subject&#x27;s attitude during assessment. NIEM reference is j:SubjectAssessmentPositiveAttitudeLevelNumeric</value>

        [DataMember(Name="positiveAttitudeLevelNumeric")]
        public List<NcNumericType> PositiveAttitudeLevelNumeric { get; set; }

        /// <summary>
        /// A number indicating the total counts of a subject&#x27;s prior arrests. NIEM reference is j:SubjectAssessmentPriorArrestNumeric
        /// </summary>
        /// <value>A number indicating the total counts of a subject&#x27;s prior arrests. NIEM reference is j:SubjectAssessmentPriorArrestNumeric</value>

        [DataMember(Name="priorArrestNumeric")]
        public List<NcNumericType> PriorArrestNumeric { get; set; }

        /// <summary>
        /// A kind of recommendation made based on the subject assessment. NIEM reference is j:SubjectAssessmentRecommendationCategoryText
        /// </summary>
        /// <value>A kind of recommendation made based on the subject assessment. NIEM reference is j:SubjectAssessmentRecommendationCategoryText</value>

        [DataMember(Name="recommendationCategory")]
        public List<NcTextType> RecommendationCategory { get; set; }

        /// <summary>
        /// A description of subject&#x27;s job skills. NIEM reference is j:SubjectAssessmentSkillsDescriptionText
        /// </summary>
        /// <value>A description of subject&#x27;s job skills. NIEM reference is j:SubjectAssessmentSkillsDescriptionText</value>

        [DataMember(Name="skillsDescription")]
        public List<NcTextType> SkillsDescription { get; set; }

        /// <summary>
        /// A kind of values to indicate military considerations. NIEM reference is j:SubjectAssessmentMilitaryServiceConsiderationText
        /// </summary>
        /// <value>A kind of values to indicate military considerations. NIEM reference is j:SubjectAssessmentMilitaryServiceConsiderationText</value>

        [DataMember(Name="militaryServiceConsideration")]
        public List<NcTextType> MilitaryServiceConsideration { get; set; }

        /// <summary>
        /// True if the subject is an unfit parent; false otherwise. NIEM reference is j:SubjectAssessmentUnfitParentIndicator
        /// </summary>
        /// <value>True if the subject is an unfit parent; false otherwise. NIEM reference is j:SubjectAssessmentUnfitParentIndicator</value>

        [DataMember(Name="isUnfitParent")]
        public List<NiemXsboolean> IsUnfitParent { get; set; }

        /// <summary>
        /// A risk identified by aa subject assessment. NIEM reference is j:SubjectAssessmentRisk
        /// </summary>
        /// <value>A risk identified by aa subject assessment. NIEM reference is j:SubjectAssessmentRisk</value>

        [DataMember(Name="risk")]
        public List<JRiskType> Risk { get; set; }

        /// <summary>
        /// True if ever jailed for a probation violation; false otherwise. NIEM reference is j:SubjectAssessmentProbationViolationIncarcerationIndicator
        /// </summary>
        /// <value>True if ever jailed for a probation violation; false otherwise. NIEM reference is j:SubjectAssessmentProbationViolationIncarcerationIndicator</value>

        [DataMember(Name="isProbationViolationIncarceration")]
        public List<NiemXsboolean> IsProbationViolationIncarceration { get; set; }

        /// <summary>
        /// A kind of weakness needed to be overcome by a subject. NIEM reference is j:SubjectAssessmentWeaknessText
        /// </summary>
        /// <value>A kind of weakness needed to be overcome by a subject. NIEM reference is j:SubjectAssessmentWeaknessText</value>

        [DataMember(Name="weakness")]
        public List<NcTextType> Weakness { get; set; }

        /// <summary>
        /// A kind of placement or assignment specific to a disability. NIEM reference is j:SubjectAssignedAssignmentDisabilityPlacement
        /// </summary>
        /// <value>A kind of placement or assignment specific to a disability. NIEM reference is j:SubjectAssignedAssignmentDisabilityPlacement</value>

        [DataMember(Name="subjectAssignedAssignmentDisabilityPlacement")]
        public List<JSubjectAssignedAssignmentDisabilityPlacementType> SubjectAssignedAssignmentDisabilityPlacement { get; set; }

        /// <summary>
        /// A kind of level of trustworthiness of a subject. NIEM reference is j:SubjectAssessmentTrustworthyLevelText
        /// </summary>
        /// <value>A kind of level of trustworthiness of a subject. NIEM reference is j:SubjectAssessmentTrustworthyLevelText</value>

        [DataMember(Name="trustworthyLevel")]
        public List<NcTextType> TrustworthyLevel { get; set; }

        /// <summary>
        /// A kind of support means for a subject. NIEM reference is j:SubjectAssessmentSupportMeansText
        /// </summary>
        /// <value>A kind of support means for a subject. NIEM reference is j:SubjectAssessmentSupportMeansText</value>

        [DataMember(Name="supportMeans")]
        public List<NcTextType> SupportMeans { get; set; }

        /// <summary>
        /// A portion of a subject&#x27;s assessment specific to issues during their supervision. NIEM reference is j:SubjectAssessmentSupervisionAssessment
        /// </summary>
        /// <value>A portion of a subject&#x27;s assessment specific to issues during their supervision. NIEM reference is j:SubjectAssessmentSupervisionAssessment</value>

        [DataMember(Name="supervisionAssessment")]
        public List<JSupervisionAssessmentType> SupervisionAssessment { get; set; }

        /// <summary>
        /// A kind of strength a subject can build upon. NIEM reference is j:SubjectAssessmentSubjectStrengthText
        /// </summary>
        /// <value>A kind of strength a subject can build upon. NIEM reference is j:SubjectAssessmentSubjectStrengthText</value>

        [DataMember(Name="subjectStrength")]
        public List<NcTextType> SubjectStrength { get; set; }

        /// <summary>
        /// An event or process evaluating a subject&#x27;s drug use. NIEM reference is j:SubjectDrugUseAssessment
        /// </summary>
        /// <value>An event or process evaluating a subject&#x27;s drug use. NIEM reference is j:SubjectDrugUseAssessment</value>

        [DataMember(Name="subjectDrugUseAssessment")]
        public List<JDrugUseAssessmentType> SubjectDrugUseAssessment { get; set; }

        /// <summary>
        /// jSubjectAssessmentType JSON-LD context
        /// </summary>
        /// <value>jSubjectAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectAssessmentTypeContext.jsonld")]
            JSONLDContextsjSubjectAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectAssessmentType JSON-LD context
        /// </summary>
        /// <value>jSubjectAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectAssessmentType {\n");
            sb.Append("  IsCompleted: ").Append(IsCompleted).Append("\n");
            sb.Append("  CaseworkerEvaluation: ").Append(CaseworkerEvaluation).Append("\n");
            sb.Append("  IsCanContactEmployer: ").Append(IsCanContactEmployer).Append("\n");
            sb.Append("  AssignmentAssessment: ").Append(AssignmentAssessment).Append("\n");
            sb.Append("  AlcoholUseAssessment: ").Append(AlcoholUseAssessment).Append("\n");
            sb.Append("  IsAlcoholAbuseHistory: ").Append(IsAlcoholAbuseHistory).Append("\n");
            sb.Append("  DevelopmentDisability: ").Append(DevelopmentDisability).Append("\n");
            sb.Append("  MentalHealthAssessment: ").Append(MentalHealthAssessment).Append("\n");
            sb.Append("  FirstArrestAgeMeasure: ").Append(FirstArrestAgeMeasure).Append("\n");
            sb.Append("  SubjectMedicalAssessment: ").Append(SubjectMedicalAssessment).Append("\n");
            sb.Append("  AcademicAssessment: ").Append(AcademicAssessment).Append("\n");
            sb.Append("  DestabilizingFactor: ").Append(DestabilizingFactor).Append("\n");
            sb.Append("  IsArsonHistory: ").Append(IsArsonHistory).Append("\n");
            sb.Append("  Disability: ").Append(Disability).Append("\n");
            sb.Append("  FirstArrestDate: ").Append(FirstArrestDate).Append("\n");
            sb.Append("  MedicalAssessment: ").Append(MedicalAssessment).Append("\n");
            sb.Append("  IsHighRiskSexOffender: ").Append(IsHighRiskSexOffender).Append("\n");
            sb.Append("  LifeEvent: ").Append(LifeEvent).Append("\n");
            sb.Append("  IsHoldOrder: ").Append(IsHoldOrder).Append("\n");
            sb.Append("  IsInterpreterRequired: ").Append(IsInterpreterRequired).Append("\n");
            sb.Append("  SpecialNeedsStatement: ").Append(SpecialNeedsStatement).Append("\n");
            sb.Append("  IsEligibleForCountySupervision: ").Append(IsEligibleForCountySupervision).Append("\n");
            sb.Append("  ReviewPeriod: ").Append(ReviewPeriod).Append("\n");
            sb.Append("  IsStabilityLevel: ").Append(IsStabilityLevel).Append("\n");
            sb.Append("  IsSubjectAggressive: ").Append(IsSubjectAggressive).Append("\n");
            sb.Append("  IsSpecialNeeds: ").Append(IsSpecialNeeds).Append("\n");
            sb.Append("  IsSubjectFilesAvailable: ").Append(IsSubjectFilesAvailable).Append("\n");
            sb.Append("  ParoleAssessment: ").Append(ParoleAssessment).Append("\n");
            sb.Append("  PositiveAttitudeLevelNumeric: ").Append(PositiveAttitudeLevelNumeric).Append("\n");
            sb.Append("  PriorArrestNumeric: ").Append(PriorArrestNumeric).Append("\n");
            sb.Append("  RecommendationCategory: ").Append(RecommendationCategory).Append("\n");
            sb.Append("  SkillsDescription: ").Append(SkillsDescription).Append("\n");
            sb.Append("  MilitaryServiceConsideration: ").Append(MilitaryServiceConsideration).Append("\n");
            sb.Append("  IsUnfitParent: ").Append(IsUnfitParent).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  IsProbationViolationIncarceration: ").Append(IsProbationViolationIncarceration).Append("\n");
            sb.Append("  Weakness: ").Append(Weakness).Append("\n");
            sb.Append("  SubjectAssignedAssignmentDisabilityPlacement: ").Append(SubjectAssignedAssignmentDisabilityPlacement).Append("\n");
            sb.Append("  TrustworthyLevel: ").Append(TrustworthyLevel).Append("\n");
            sb.Append("  SupportMeans: ").Append(SupportMeans).Append("\n");
            sb.Append("  SupervisionAssessment: ").Append(SupervisionAssessment).Append("\n");
            sb.Append("  SubjectStrength: ").Append(SubjectStrength).Append("\n");
            sb.Append("  SubjectDrugUseAssessment: ").Append(SubjectDrugUseAssessment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsCompleted == other.IsCompleted ||
                    IsCompleted != null &&
                    IsCompleted.SequenceEqual(other.IsCompleted)
                ) && 
                (
                    CaseworkerEvaluation == other.CaseworkerEvaluation ||
                    CaseworkerEvaluation != null &&
                    CaseworkerEvaluation.SequenceEqual(other.CaseworkerEvaluation)
                ) && 
                (
                    IsCanContactEmployer == other.IsCanContactEmployer ||
                    IsCanContactEmployer != null &&
                    IsCanContactEmployer.SequenceEqual(other.IsCanContactEmployer)
                ) && 
                (
                    AssignmentAssessment == other.AssignmentAssessment ||
                    AssignmentAssessment != null &&
                    AssignmentAssessment.SequenceEqual(other.AssignmentAssessment)
                ) && 
                (
                    AlcoholUseAssessment == other.AlcoholUseAssessment ||
                    AlcoholUseAssessment != null &&
                    AlcoholUseAssessment.SequenceEqual(other.AlcoholUseAssessment)
                ) && 
                (
                    IsAlcoholAbuseHistory == other.IsAlcoholAbuseHistory ||
                    IsAlcoholAbuseHistory != null &&
                    IsAlcoholAbuseHistory.SequenceEqual(other.IsAlcoholAbuseHistory)
                ) && 
                (
                    DevelopmentDisability == other.DevelopmentDisability ||
                    DevelopmentDisability != null &&
                    DevelopmentDisability.SequenceEqual(other.DevelopmentDisability)
                ) && 
                (
                    MentalHealthAssessment == other.MentalHealthAssessment ||
                    MentalHealthAssessment != null &&
                    MentalHealthAssessment.SequenceEqual(other.MentalHealthAssessment)
                ) && 
                (
                    FirstArrestAgeMeasure == other.FirstArrestAgeMeasure ||
                    FirstArrestAgeMeasure != null &&
                    FirstArrestAgeMeasure.SequenceEqual(other.FirstArrestAgeMeasure)
                ) && 
                (
                    SubjectMedicalAssessment == other.SubjectMedicalAssessment ||
                    SubjectMedicalAssessment != null &&
                    SubjectMedicalAssessment.SequenceEqual(other.SubjectMedicalAssessment)
                ) && 
                (
                    AcademicAssessment == other.AcademicAssessment ||
                    AcademicAssessment != null &&
                    AcademicAssessment.SequenceEqual(other.AcademicAssessment)
                ) && 
                (
                    DestabilizingFactor == other.DestabilizingFactor ||
                    DestabilizingFactor != null &&
                    DestabilizingFactor.SequenceEqual(other.DestabilizingFactor)
                ) && 
                (
                    IsArsonHistory == other.IsArsonHistory ||
                    IsArsonHistory != null &&
                    IsArsonHistory.SequenceEqual(other.IsArsonHistory)
                ) && 
                (
                    Disability == other.Disability ||
                    Disability != null &&
                    Disability.SequenceEqual(other.Disability)
                ) && 
                (
                    FirstArrestDate == other.FirstArrestDate ||
                    FirstArrestDate != null &&
                    FirstArrestDate.SequenceEqual(other.FirstArrestDate)
                ) && 
                (
                    MedicalAssessment == other.MedicalAssessment ||
                    MedicalAssessment != null &&
                    MedicalAssessment.SequenceEqual(other.MedicalAssessment)
                ) && 
                (
                    IsHighRiskSexOffender == other.IsHighRiskSexOffender ||
                    IsHighRiskSexOffender != null &&
                    IsHighRiskSexOffender.SequenceEqual(other.IsHighRiskSexOffender)
                ) && 
                (
                    LifeEvent == other.LifeEvent ||
                    LifeEvent != null &&
                    LifeEvent.SequenceEqual(other.LifeEvent)
                ) && 
                (
                    IsHoldOrder == other.IsHoldOrder ||
                    IsHoldOrder != null &&
                    IsHoldOrder.SequenceEqual(other.IsHoldOrder)
                ) && 
                (
                    IsInterpreterRequired == other.IsInterpreterRequired ||
                    IsInterpreterRequired != null &&
                    IsInterpreterRequired.SequenceEqual(other.IsInterpreterRequired)
                ) && 
                (
                    SpecialNeedsStatement == other.SpecialNeedsStatement ||
                    SpecialNeedsStatement != null &&
                    SpecialNeedsStatement.SequenceEqual(other.SpecialNeedsStatement)
                ) && 
                (
                    IsEligibleForCountySupervision == other.IsEligibleForCountySupervision ||
                    IsEligibleForCountySupervision != null &&
                    IsEligibleForCountySupervision.SequenceEqual(other.IsEligibleForCountySupervision)
                ) && 
                (
                    ReviewPeriod == other.ReviewPeriod ||
                    ReviewPeriod != null &&
                    ReviewPeriod.SequenceEqual(other.ReviewPeriod)
                ) && 
                (
                    IsStabilityLevel == other.IsStabilityLevel ||
                    IsStabilityLevel != null &&
                    IsStabilityLevel.SequenceEqual(other.IsStabilityLevel)
                ) && 
                (
                    IsSubjectAggressive == other.IsSubjectAggressive ||
                    IsSubjectAggressive != null &&
                    IsSubjectAggressive.SequenceEqual(other.IsSubjectAggressive)
                ) && 
                (
                    IsSpecialNeeds == other.IsSpecialNeeds ||
                    IsSpecialNeeds != null &&
                    IsSpecialNeeds.SequenceEqual(other.IsSpecialNeeds)
                ) && 
                (
                    IsSubjectFilesAvailable == other.IsSubjectFilesAvailable ||
                    IsSubjectFilesAvailable != null &&
                    IsSubjectFilesAvailable.SequenceEqual(other.IsSubjectFilesAvailable)
                ) && 
                (
                    ParoleAssessment == other.ParoleAssessment ||
                    ParoleAssessment != null &&
                    ParoleAssessment.SequenceEqual(other.ParoleAssessment)
                ) && 
                (
                    PositiveAttitudeLevelNumeric == other.PositiveAttitudeLevelNumeric ||
                    PositiveAttitudeLevelNumeric != null &&
                    PositiveAttitudeLevelNumeric.SequenceEqual(other.PositiveAttitudeLevelNumeric)
                ) && 
                (
                    PriorArrestNumeric == other.PriorArrestNumeric ||
                    PriorArrestNumeric != null &&
                    PriorArrestNumeric.SequenceEqual(other.PriorArrestNumeric)
                ) && 
                (
                    RecommendationCategory == other.RecommendationCategory ||
                    RecommendationCategory != null &&
                    RecommendationCategory.SequenceEqual(other.RecommendationCategory)
                ) && 
                (
                    SkillsDescription == other.SkillsDescription ||
                    SkillsDescription != null &&
                    SkillsDescription.SequenceEqual(other.SkillsDescription)
                ) && 
                (
                    MilitaryServiceConsideration == other.MilitaryServiceConsideration ||
                    MilitaryServiceConsideration != null &&
                    MilitaryServiceConsideration.SequenceEqual(other.MilitaryServiceConsideration)
                ) && 
                (
                    IsUnfitParent == other.IsUnfitParent ||
                    IsUnfitParent != null &&
                    IsUnfitParent.SequenceEqual(other.IsUnfitParent)
                ) && 
                (
                    Risk == other.Risk ||
                    Risk != null &&
                    Risk.SequenceEqual(other.Risk)
                ) && 
                (
                    IsProbationViolationIncarceration == other.IsProbationViolationIncarceration ||
                    IsProbationViolationIncarceration != null &&
                    IsProbationViolationIncarceration.SequenceEqual(other.IsProbationViolationIncarceration)
                ) && 
                (
                    Weakness == other.Weakness ||
                    Weakness != null &&
                    Weakness.SequenceEqual(other.Weakness)
                ) && 
                (
                    SubjectAssignedAssignmentDisabilityPlacement == other.SubjectAssignedAssignmentDisabilityPlacement ||
                    SubjectAssignedAssignmentDisabilityPlacement != null &&
                    SubjectAssignedAssignmentDisabilityPlacement.SequenceEqual(other.SubjectAssignedAssignmentDisabilityPlacement)
                ) && 
                (
                    TrustworthyLevel == other.TrustworthyLevel ||
                    TrustworthyLevel != null &&
                    TrustworthyLevel.SequenceEqual(other.TrustworthyLevel)
                ) && 
                (
                    SupportMeans == other.SupportMeans ||
                    SupportMeans != null &&
                    SupportMeans.SequenceEqual(other.SupportMeans)
                ) && 
                (
                    SupervisionAssessment == other.SupervisionAssessment ||
                    SupervisionAssessment != null &&
                    SupervisionAssessment.SequenceEqual(other.SupervisionAssessment)
                ) && 
                (
                    SubjectStrength == other.SubjectStrength ||
                    SubjectStrength != null &&
                    SubjectStrength.SequenceEqual(other.SubjectStrength)
                ) && 
                (
                    SubjectDrugUseAssessment == other.SubjectDrugUseAssessment ||
                    SubjectDrugUseAssessment != null &&
                    SubjectDrugUseAssessment.SequenceEqual(other.SubjectDrugUseAssessment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsCompleted != null)
                    hashCode = hashCode * 59 + IsCompleted.GetHashCode();
                    if (CaseworkerEvaluation != null)
                    hashCode = hashCode * 59 + CaseworkerEvaluation.GetHashCode();
                    if (IsCanContactEmployer != null)
                    hashCode = hashCode * 59 + IsCanContactEmployer.GetHashCode();
                    if (AssignmentAssessment != null)
                    hashCode = hashCode * 59 + AssignmentAssessment.GetHashCode();
                    if (AlcoholUseAssessment != null)
                    hashCode = hashCode * 59 + AlcoholUseAssessment.GetHashCode();
                    if (IsAlcoholAbuseHistory != null)
                    hashCode = hashCode * 59 + IsAlcoholAbuseHistory.GetHashCode();
                    if (DevelopmentDisability != null)
                    hashCode = hashCode * 59 + DevelopmentDisability.GetHashCode();
                    if (MentalHealthAssessment != null)
                    hashCode = hashCode * 59 + MentalHealthAssessment.GetHashCode();
                    if (FirstArrestAgeMeasure != null)
                    hashCode = hashCode * 59 + FirstArrestAgeMeasure.GetHashCode();
                    if (SubjectMedicalAssessment != null)
                    hashCode = hashCode * 59 + SubjectMedicalAssessment.GetHashCode();
                    if (AcademicAssessment != null)
                    hashCode = hashCode * 59 + AcademicAssessment.GetHashCode();
                    if (DestabilizingFactor != null)
                    hashCode = hashCode * 59 + DestabilizingFactor.GetHashCode();
                    if (IsArsonHistory != null)
                    hashCode = hashCode * 59 + IsArsonHistory.GetHashCode();
                    if (Disability != null)
                    hashCode = hashCode * 59 + Disability.GetHashCode();
                    if (FirstArrestDate != null)
                    hashCode = hashCode * 59 + FirstArrestDate.GetHashCode();
                    if (MedicalAssessment != null)
                    hashCode = hashCode * 59 + MedicalAssessment.GetHashCode();
                    if (IsHighRiskSexOffender != null)
                    hashCode = hashCode * 59 + IsHighRiskSexOffender.GetHashCode();
                    if (LifeEvent != null)
                    hashCode = hashCode * 59 + LifeEvent.GetHashCode();
                    if (IsHoldOrder != null)
                    hashCode = hashCode * 59 + IsHoldOrder.GetHashCode();
                    if (IsInterpreterRequired != null)
                    hashCode = hashCode * 59 + IsInterpreterRequired.GetHashCode();
                    if (SpecialNeedsStatement != null)
                    hashCode = hashCode * 59 + SpecialNeedsStatement.GetHashCode();
                    if (IsEligibleForCountySupervision != null)
                    hashCode = hashCode * 59 + IsEligibleForCountySupervision.GetHashCode();
                    if (ReviewPeriod != null)
                    hashCode = hashCode * 59 + ReviewPeriod.GetHashCode();
                    if (IsStabilityLevel != null)
                    hashCode = hashCode * 59 + IsStabilityLevel.GetHashCode();
                    if (IsSubjectAggressive != null)
                    hashCode = hashCode * 59 + IsSubjectAggressive.GetHashCode();
                    if (IsSpecialNeeds != null)
                    hashCode = hashCode * 59 + IsSpecialNeeds.GetHashCode();
                    if (IsSubjectFilesAvailable != null)
                    hashCode = hashCode * 59 + IsSubjectFilesAvailable.GetHashCode();
                    if (ParoleAssessment != null)
                    hashCode = hashCode * 59 + ParoleAssessment.GetHashCode();
                    if (PositiveAttitudeLevelNumeric != null)
                    hashCode = hashCode * 59 + PositiveAttitudeLevelNumeric.GetHashCode();
                    if (PriorArrestNumeric != null)
                    hashCode = hashCode * 59 + PriorArrestNumeric.GetHashCode();
                    if (RecommendationCategory != null)
                    hashCode = hashCode * 59 + RecommendationCategory.GetHashCode();
                    if (SkillsDescription != null)
                    hashCode = hashCode * 59 + SkillsDescription.GetHashCode();
                    if (MilitaryServiceConsideration != null)
                    hashCode = hashCode * 59 + MilitaryServiceConsideration.GetHashCode();
                    if (IsUnfitParent != null)
                    hashCode = hashCode * 59 + IsUnfitParent.GetHashCode();
                    if (Risk != null)
                    hashCode = hashCode * 59 + Risk.GetHashCode();
                    if (IsProbationViolationIncarceration != null)
                    hashCode = hashCode * 59 + IsProbationViolationIncarceration.GetHashCode();
                    if (Weakness != null)
                    hashCode = hashCode * 59 + Weakness.GetHashCode();
                    if (SubjectAssignedAssignmentDisabilityPlacement != null)
                    hashCode = hashCode * 59 + SubjectAssignedAssignmentDisabilityPlacement.GetHashCode();
                    if (TrustworthyLevel != null)
                    hashCode = hashCode * 59 + TrustworthyLevel.GetHashCode();
                    if (SupportMeans != null)
                    hashCode = hashCode * 59 + SupportMeans.GetHashCode();
                    if (SupervisionAssessment != null)
                    hashCode = hashCode * 59 + SupervisionAssessment.GetHashCode();
                    if (SubjectStrength != null)
                    hashCode = hashCode * 59 + SubjectStrength.GetHashCode();
                    if (SubjectDrugUseAssessment != null)
                    hashCode = hashCode * 59 + SubjectDrugUseAssessment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectAssessmentType left, JSubjectAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectAssessmentType left, JSubjectAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
