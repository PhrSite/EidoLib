/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a calculation or score of a test.
    /// </summary>
    [DataContract]
    public partial class JTestResultType : IEquatable<JTestResultType>
    { 
        /// <summary>
        /// A measurement for a calculation or score of a test. NIEM reference is j:TestResultMeasure
        /// </summary>
        /// <value>A measurement for a calculation or score of a test. NIEM reference is j:TestResultMeasure</value>

        [DataMember(Name="measure")]
        public List<NcMeasureType> Measure { get; set; }

        /// <summary>
        /// An individual who monitored the test. NIEM reference is j:TestMonitorEntity
        /// </summary>
        /// <value>An individual who monitored the test. NIEM reference is j:TestMonitorEntity</value>

        [DataMember(Name="testMonitorEntity")]
        public List<NcEntityType> TestMonitorEntity { get; set; }

        /// <summary>
        /// A kind of test outcome. NIEM reference is j:TestResultCategoryText
        /// </summary>
        /// <value>A kind of test outcome. NIEM reference is j:TestResultCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A test results. NIEM reference is j:TestResultText
        /// </summary>
        /// <value>A test results. NIEM reference is j:TestResultText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A unique identifier of a test specimen. NIEM reference is j:TestSpecimenID
        /// </summary>
        /// <value>A unique identifier of a test specimen. NIEM reference is j:TestSpecimenID</value>

        [DataMember(Name="testSpecimenId")]
        public List<NiemXsstring> TestSpecimenId { get; set; }

        /// <summary>
        /// jTestResultType JSON-LD context
        /// </summary>
        /// <value>jTestResultType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjTestResultTypeContextJsonldEnum for ../JSON-LD_Contexts/jTestResultTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jTestResultTypeContext.jsonld")]
            JSONLDContextsjTestResultTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jTestResultType JSON-LD context
        /// </summary>
        /// <value>jTestResultType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JTestResultType {\n");
            sb.Append("  Measure: ").Append(Measure).Append("\n");
            sb.Append("  TestMonitorEntity: ").Append(TestMonitorEntity).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TestSpecimenId: ").Append(TestSpecimenId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JTestResultType)obj);
        }

        /// <summary>
        /// Returns true if JTestResultType instances are equal
        /// </summary>
        /// <param name="other">Instance of JTestResultType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JTestResultType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Measure == other.Measure ||
                    Measure != null &&
                    Measure.SequenceEqual(other.Measure)
                ) && 
                (
                    TestMonitorEntity == other.TestMonitorEntity ||
                    TestMonitorEntity != null &&
                    TestMonitorEntity.SequenceEqual(other.TestMonitorEntity)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    TestSpecimenId == other.TestSpecimenId ||
                    TestSpecimenId != null &&
                    TestSpecimenId.SequenceEqual(other.TestSpecimenId)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Measure != null)
                    hashCode = hashCode * 59 + Measure.GetHashCode();
                    if (TestMonitorEntity != null)
                    hashCode = hashCode * 59 + TestMonitorEntity.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (TestSpecimenId != null)
                    hashCode = hashCode * 59 + TestSpecimenId.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JTestResultType left, JTestResultType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JTestResultType left, JTestResultType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
