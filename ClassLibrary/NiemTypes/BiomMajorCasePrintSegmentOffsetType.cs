/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a major case print segment offset
    /// </summary>
    [DataContract]
    public partial class BiomMajorCasePrintSegmentOffsetType : IEquatable<BiomMajorCasePrintSegmentOffsetType>
    { 
        /// <summary>
        /// A coordinate of the bounding box for an individual finger. NIEM reference is biom:FingerprintCoordinate
        /// </summary>
        /// <value>A coordinate of the bounding box for an individual finger. NIEM reference is biom:FingerprintCoordinate</value>

        [DataMember(Name="fingerprintCoordinate")]
        public List<BiomFingerprintCoordinateType> FingerprintCoordinate { get; set; }

        /// <summary>
        /// A location of a segment of a finger, e.g. distal, medial, or proximal NIEM reference is biom:SegmentLocationCode
        /// </summary>
        /// <value>A location of a segment of a finger, e.g. distal, medial, or proximal NIEM reference is biom:SegmentLocationCode</value>

        [DataMember(Name="segmentLocationCode")]
        public List<BiomSegmentLocationCodeType> SegmentLocationCode { get; set; }

        /// <summary>
        /// A kind of full finger view NIEM reference is biom:SegmentFingerViewCode
        /// </summary>
        /// <value>A kind of full finger view NIEM reference is biom:SegmentFingerViewCode</value>

        [DataMember(Name="segmentFingerViewCode")]
        public List<BiomFingerViewCodeType> SegmentFingerViewCode { get; set; }

        /// <summary>
        /// biomMajorCasePrintSegmentOffsetType JSON-LD context
        /// </summary>
        /// <value>biomMajorCasePrintSegmentOffsetType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMajorCasePrintSegmentOffsetTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMajorCasePrintSegmentOffsetTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMajorCasePrintSegmentOffsetTypeContext.jsonld")]
            JSONLDContextsbiomMajorCasePrintSegmentOffsetTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMajorCasePrintSegmentOffsetType JSON-LD context
        /// </summary>
        /// <value>biomMajorCasePrintSegmentOffsetType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMajorCasePrintSegmentOffsetType {\n");
            sb.Append("  FingerprintCoordinate: ").Append(FingerprintCoordinate).Append("\n");
            sb.Append("  SegmentLocationCode: ").Append(SegmentLocationCode).Append("\n");
            sb.Append("  SegmentFingerViewCode: ").Append(SegmentFingerViewCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMajorCasePrintSegmentOffsetType)obj);
        }

        /// <summary>
        /// Returns true if BiomMajorCasePrintSegmentOffsetType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMajorCasePrintSegmentOffsetType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMajorCasePrintSegmentOffsetType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FingerprintCoordinate == other.FingerprintCoordinate ||
                    FingerprintCoordinate != null &&
                    FingerprintCoordinate.SequenceEqual(other.FingerprintCoordinate)
                ) && 
                (
                    SegmentLocationCode == other.SegmentLocationCode ||
                    SegmentLocationCode != null &&
                    SegmentLocationCode.SequenceEqual(other.SegmentLocationCode)
                ) && 
                (
                    SegmentFingerViewCode == other.SegmentFingerViewCode ||
                    SegmentFingerViewCode != null &&
                    SegmentFingerViewCode.SequenceEqual(other.SegmentFingerViewCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FingerprintCoordinate != null)
                    hashCode = hashCode * 59 + FingerprintCoordinate.GetHashCode();
                    if (SegmentLocationCode != null)
                    hashCode = hashCode * 59 + SegmentLocationCode.GetHashCode();
                    if (SegmentFingerViewCode != null)
                    hashCode = hashCode * 59 + SegmentFingerViewCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMajorCasePrintSegmentOffsetType left, BiomMajorCasePrintSegmentOffsetType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMajorCasePrintSegmentOffsetType left, BiomMajorCasePrintSegmentOffsetType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
