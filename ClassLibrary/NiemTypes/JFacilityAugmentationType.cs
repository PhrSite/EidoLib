/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Facility.
    /// </summary>
    [DataContract]
    public partial class JFacilityAugmentationType : IEquatable<JFacilityAugmentationType>
    { 
        /// <summary>
        /// A description of the equipment capacity of a facility. NIEM reference is j:FacilityEquipmentCapacityText
        /// </summary>
        /// <value>A description of the equipment capacity of a facility. NIEM reference is j:FacilityEquipmentCapacityText</value>

        [DataMember(Name="facilityEquipmentCapacity")]
        public List<NcTextType> FacilityEquipmentCapacity { get; set; }

        /// <summary>
        /// A range of ages served by a facility from minimum to maximum. NIEM reference is j:FacilityAgeLimitationRange
        /// </summary>
        /// <value>A range of ages served by a facility from minimum to maximum. NIEM reference is j:FacilityAgeLimitationRange</value>

        [DataMember(Name="facilityAgeLimitationRange")]
        public List<NcDecimalRangeType> FacilityAgeLimitationRange { get; set; }

        /// <summary>
        /// A description of a specific area of a facility. NIEM reference is j:FacilityAreaDescriptionText
        /// </summary>
        /// <value>A description of a specific area of a facility. NIEM reference is j:FacilityAreaDescriptionText</value>

        [DataMember(Name="facilityAreaDescription")]
        public List<NcTextType> FacilityAreaDescription { get; set; }

        /// <summary>
        /// A status for a facility. NIEM reference is j:FacilityAreaStatusText
        /// </summary>
        /// <value>A status for a facility. NIEM reference is j:FacilityAreaStatusText</value>

        [DataMember(Name="facilityAreaStatus")]
        public List<NcTextType> FacilityAreaStatus { get; set; }

        /// <summary>
        /// A high range number of staff for a facility. NIEM reference is j:FacilityStaffingCapacityQuantity
        /// </summary>
        /// <value>A high range number of staff for a facility. NIEM reference is j:FacilityStaffingCapacityQuantity</value>

        [DataMember(Name="facilityStaffingCapacityQuantity")]
        public List<NcQuantityType> FacilityStaffingCapacityQuantity { get; set; }

        /// <summary>
        /// An numerical identifier of a facility building. NIEM reference is j:FacilityBuildingID
        /// </summary>
        /// <value>An numerical identifier of a facility building. NIEM reference is j:FacilityBuildingID</value>

        [DataMember(Name="facilityBuildingId")]
        public List<NiemXsstring> FacilityBuildingId { get; set; }

        /// <summary>
        /// A number of vacant beds available at a facility. NIEM reference is j:FacilityBedVacantCountQuantity
        /// </summary>
        /// <value>A number of vacant beds available at a facility. NIEM reference is j:FacilityBedVacantCountQuantity</value>

        [DataMember(Name="facilityBedVacantCountQuantity")]
        public List<NcQuantityType> FacilityBedVacantCountQuantity { get; set; }

        /// <summary>
        /// A status of a facility. NIEM reference is j:FacilityStatus
        /// </summary>
        /// <value>A status of a facility. NIEM reference is j:FacilityStatus</value>

        [DataMember(Name="facilityStatus")]
        public List<NcStatusType> FacilityStatus { get; set; }

        /// <summary>
        /// jFacilityAugmentationType JSON-LD context
        /// </summary>
        /// <value>jFacilityAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjFacilityAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jFacilityAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jFacilityAugmentationTypeContext.jsonld")]
            JSONLDContextsjFacilityAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jFacilityAugmentationType JSON-LD context
        /// </summary>
        /// <value>jFacilityAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JFacilityAugmentationType {\n");
            sb.Append("  FacilityEquipmentCapacity: ").Append(FacilityEquipmentCapacity).Append("\n");
            sb.Append("  FacilityAgeLimitationRange: ").Append(FacilityAgeLimitationRange).Append("\n");
            sb.Append("  FacilityAreaDescription: ").Append(FacilityAreaDescription).Append("\n");
            sb.Append("  FacilityAreaStatus: ").Append(FacilityAreaStatus).Append("\n");
            sb.Append("  FacilityStaffingCapacityQuantity: ").Append(FacilityStaffingCapacityQuantity).Append("\n");
            sb.Append("  FacilityBuildingId: ").Append(FacilityBuildingId).Append("\n");
            sb.Append("  FacilityBedVacantCountQuantity: ").Append(FacilityBedVacantCountQuantity).Append("\n");
            sb.Append("  FacilityStatus: ").Append(FacilityStatus).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JFacilityAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JFacilityAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JFacilityAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JFacilityAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FacilityEquipmentCapacity == other.FacilityEquipmentCapacity ||
                    FacilityEquipmentCapacity != null &&
                    FacilityEquipmentCapacity.SequenceEqual(other.FacilityEquipmentCapacity)
                ) && 
                (
                    FacilityAgeLimitationRange == other.FacilityAgeLimitationRange ||
                    FacilityAgeLimitationRange != null &&
                    FacilityAgeLimitationRange.SequenceEqual(other.FacilityAgeLimitationRange)
                ) && 
                (
                    FacilityAreaDescription == other.FacilityAreaDescription ||
                    FacilityAreaDescription != null &&
                    FacilityAreaDescription.SequenceEqual(other.FacilityAreaDescription)
                ) && 
                (
                    FacilityAreaStatus == other.FacilityAreaStatus ||
                    FacilityAreaStatus != null &&
                    FacilityAreaStatus.SequenceEqual(other.FacilityAreaStatus)
                ) && 
                (
                    FacilityStaffingCapacityQuantity == other.FacilityStaffingCapacityQuantity ||
                    FacilityStaffingCapacityQuantity != null &&
                    FacilityStaffingCapacityQuantity.SequenceEqual(other.FacilityStaffingCapacityQuantity)
                ) && 
                (
                    FacilityBuildingId == other.FacilityBuildingId ||
                    FacilityBuildingId != null &&
                    FacilityBuildingId.SequenceEqual(other.FacilityBuildingId)
                ) && 
                (
                    FacilityBedVacantCountQuantity == other.FacilityBedVacantCountQuantity ||
                    FacilityBedVacantCountQuantity != null &&
                    FacilityBedVacantCountQuantity.SequenceEqual(other.FacilityBedVacantCountQuantity)
                ) && 
                (
                    FacilityStatus == other.FacilityStatus ||
                    FacilityStatus != null &&
                    FacilityStatus.SequenceEqual(other.FacilityStatus)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FacilityEquipmentCapacity != null)
                    hashCode = hashCode * 59 + FacilityEquipmentCapacity.GetHashCode();
                    if (FacilityAgeLimitationRange != null)
                    hashCode = hashCode * 59 + FacilityAgeLimitationRange.GetHashCode();
                    if (FacilityAreaDescription != null)
                    hashCode = hashCode * 59 + FacilityAreaDescription.GetHashCode();
                    if (FacilityAreaStatus != null)
                    hashCode = hashCode * 59 + FacilityAreaStatus.GetHashCode();
                    if (FacilityStaffingCapacityQuantity != null)
                    hashCode = hashCode * 59 + FacilityStaffingCapacityQuantity.GetHashCode();
                    if (FacilityBuildingId != null)
                    hashCode = hashCode * 59 + FacilityBuildingId.GetHashCode();
                    if (FacilityBedVacantCountQuantity != null)
                    hashCode = hashCode * 59 + FacilityBedVacantCountQuantity.GetHashCode();
                    if (FacilityStatus != null)
                    hashCode = hashCode * 59 + FacilityStatus.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JFacilityAugmentationType left, JFacilityAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JFacilityAugmentationType left, JFacilityAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
