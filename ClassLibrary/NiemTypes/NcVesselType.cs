/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a mode of transportation capable of transport by water.
    /// </summary>
    [DataContract]
    public partial class NcVesselType : NcConveyanceType, IEquatable<NcVesselType>
    { 
        /// <summary>
        /// A manufacturer of a vessel. NIEM reference is j:VesselMakeCode
        /// </summary>
        /// <value>A manufacturer of a vessel. NIEM reference is j:VesselMakeCode</value>

        [DataMember(Name="makeCode")]
        public List<NcicBMACodeType> MakeCode { get; set; }

        /// <summary>
        /// A kind of vessel. NIEM reference is j:VesselCategoryCode
        /// </summary>
        /// <value>A kind of vessel. NIEM reference is j:VesselCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NcicBTYCodeType> CategoryCode { get; set; }

        /// <summary>
        /// An identification found on the main body or frame of a vessel. NIEM reference is nc:VesselHullIdentification
        /// </summary>
        /// <value>An identification found on the main body or frame of a vessel. NIEM reference is nc:VesselHullIdentification</value>

        [DataMember(Name="hullIdentification")]
        public List<NcIdentificationType> HullIdentification { get; set; }

        /// <summary>
        /// A substance used as the primary construction material of the main body or frame of a vessel. NIEM reference is j:VesselHullMaterialCode
        /// </summary>
        /// <value>A substance used as the primary construction material of the main body or frame of a vessel. NIEM reference is j:VesselHullMaterialCode</value>

        [DataMember(Name="hullMaterialCode")]
        public List<NcicHULCodeType> HullMaterialCode { get; set; }

        /// <summary>
        /// A substance used as the primary construction material of the main body or frame of a vessel. NIEM reference is nc:VesselHullMaterialText
        /// </summary>
        /// <value>A substance used as the primary construction material of the main body or frame of a vessel. NIEM reference is nc:VesselHullMaterialText</value>

        [DataMember(Name="hullMaterial")]
        public List<NcTextType> HullMaterial { get; set; }

        /// <summary>
        /// A shape of the main body or frame of a vessel. NIEM reference is j:VesselHullShapeCode
        /// </summary>
        /// <value>A shape of the main body or frame of a vessel. NIEM reference is j:VesselHullShapeCode</value>

        [DataMember(Name="hullShapeCode")]
        public List<NcicHSPCodeType> HullShapeCode { get; set; }

        /// <summary>
        /// A shape of the main body or frame of a vessel. NIEM reference is nc:VesselHullShapeText
        /// </summary>
        /// <value>A shape of the main body or frame of a vessel. NIEM reference is nc:VesselHullShapeText</value>

        [DataMember(Name="hullShape")]
        public List<NcTextType> HullShape { get; set; }

        /// <summary>
        /// A mode by which a vessel is designed to move through the water. NIEM reference is j:VesselPropulsionCode
        /// </summary>
        /// <value>A mode by which a vessel is designed to move through the water. NIEM reference is j:VesselPropulsionCode</value>

        [DataMember(Name="propulsionCode")]
        public List<NcicPR0CodeType> PropulsionCode { get; set; }

        /// <summary>
        /// A mode by which a vessel is designed to move through the water. NIEM reference is nc:VesselPropulsionText
        /// </summary>
        /// <value>A mode by which a vessel is designed to move through the water. NIEM reference is nc:VesselPropulsionText</value>

        [DataMember(Name="propulsion")]
        public List<NcTextType> Propulsion { get; set; }

        /// <summary>
        /// A device pulled by a vehicle for the purpose of transporting a vessel over land. NIEM reference is nc:VesselTrailer
        /// </summary>
        /// <value>A device pulled by a vehicle for the purpose of transporting a vessel over land. NIEM reference is nc:VesselTrailer</value>

        [DataMember(Name="trailer")]
        public List<NcVehicleType> Trailer { get; set; }

        /// <summary>
        /// Additional information about a vessel. NIEM reference is j:VesselAugmentation
        /// </summary>
        /// <value>Additional information about a vessel. NIEM reference is j:VesselAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JVesselAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a vessel. NIEM reference is m:VesselAugmentation
        /// </summary>
        /// <value>Additional information about a vessel. NIEM reference is m:VesselAugmentation</value>

        [DataMember(Name="mAugmentation")]
        public List<MVesselAugmentationType> MAugmentation { get; set; }

        /// <summary>
        /// ncVesselType JSON-LD context
        /// </summary>
        /// <value>ncVesselType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncVesselTypeContextJsonldEnum for ../JSON-LD_Contexts/ncVesselTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncVesselTypeContext.jsonld")]
            JSONLDContextsncVesselTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncVesselType JSON-LD context
        /// </summary>
        /// <value>ncVesselType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcVesselType {\n");
            sb.Append("  MakeCode: ").Append(MakeCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  HullIdentification: ").Append(HullIdentification).Append("\n");
            sb.Append("  HullMaterialCode: ").Append(HullMaterialCode).Append("\n");
            sb.Append("  HullMaterial: ").Append(HullMaterial).Append("\n");
            sb.Append("  HullShapeCode: ").Append(HullShapeCode).Append("\n");
            sb.Append("  HullShape: ").Append(HullShape).Append("\n");
            sb.Append("  PropulsionCode: ").Append(PropulsionCode).Append("\n");
            sb.Append("  Propulsion: ").Append(Propulsion).Append("\n");
            sb.Append("  Trailer: ").Append(Trailer).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  MAugmentation: ").Append(MAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcVesselType)obj);
        }

        /// <summary>
        /// Returns true if NcVesselType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcVesselType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcVesselType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MakeCode == other.MakeCode ||
                    MakeCode != null &&
                    MakeCode.SequenceEqual(other.MakeCode)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    HullIdentification == other.HullIdentification ||
                    HullIdentification != null &&
                    HullIdentification.SequenceEqual(other.HullIdentification)
                ) && 
                (
                    HullMaterialCode == other.HullMaterialCode ||
                    HullMaterialCode != null &&
                    HullMaterialCode.SequenceEqual(other.HullMaterialCode)
                ) && 
                (
                    HullMaterial == other.HullMaterial ||
                    HullMaterial != null &&
                    HullMaterial.SequenceEqual(other.HullMaterial)
                ) && 
                (
                    HullShapeCode == other.HullShapeCode ||
                    HullShapeCode != null &&
                    HullShapeCode.SequenceEqual(other.HullShapeCode)
                ) && 
                (
                    HullShape == other.HullShape ||
                    HullShape != null &&
                    HullShape.SequenceEqual(other.HullShape)
                ) && 
                (
                    PropulsionCode == other.PropulsionCode ||
                    PropulsionCode != null &&
                    PropulsionCode.SequenceEqual(other.PropulsionCode)
                ) && 
                (
                    Propulsion == other.Propulsion ||
                    Propulsion != null &&
                    Propulsion.SequenceEqual(other.Propulsion)
                ) && 
                (
                    Trailer == other.Trailer ||
                    Trailer != null &&
                    Trailer.SequenceEqual(other.Trailer)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    MAugmentation == other.MAugmentation ||
                    MAugmentation != null &&
                    MAugmentation.SequenceEqual(other.MAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MakeCode != null)
                    hashCode = hashCode * 59 + MakeCode.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (HullIdentification != null)
                    hashCode = hashCode * 59 + HullIdentification.GetHashCode();
                    if (HullMaterialCode != null)
                    hashCode = hashCode * 59 + HullMaterialCode.GetHashCode();
                    if (HullMaterial != null)
                    hashCode = hashCode * 59 + HullMaterial.GetHashCode();
                    if (HullShapeCode != null)
                    hashCode = hashCode * 59 + HullShapeCode.GetHashCode();
                    if (HullShape != null)
                    hashCode = hashCode * 59 + HullShape.GetHashCode();
                    if (PropulsionCode != null)
                    hashCode = hashCode * 59 + PropulsionCode.GetHashCode();
                    if (Propulsion != null)
                    hashCode = hashCode * 59 + Propulsion.GetHashCode();
                    if (Trailer != null)
                    hashCode = hashCode * 59 + Trailer.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (MAugmentation != null)
                    hashCode = hashCode * 59 + MAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcVesselType left, NcVesselType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcVesselType left, NcVesselType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
