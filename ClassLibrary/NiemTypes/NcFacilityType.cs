/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a building, place, or structure that provides a particular service.
    /// </summary>
    [DataContract]
    public partial class NcFacilityType : IEquatable<NcFacilityType>
    { 
        /// <summary>
        /// An identification assigned to a facility. NIEM reference is nc:FacilityIdentification
        /// </summary>
        /// <value>An identification assigned to a facility. NIEM reference is nc:FacilityIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A name of a facility. NIEM reference is nc:FacilityName
        /// </summary>
        /// <value>A name of a facility. NIEM reference is nc:FacilityName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// A kind of facility. NIEM reference is nc:FacilityCategoryCode
        /// </summary>
        /// <value>A kind of facility. NIEM reference is nc:FacilityCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<OccsFacilityUsageCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of facility. NIEM reference is nc:FacilityCategoryText
        /// </summary>
        /// <value>A kind of facility. NIEM reference is nc:FacilityCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A location of a facility. NIEM reference is nc:FacilityLocation
        /// </summary>
        /// <value>A location of a facility. NIEM reference is nc:FacilityLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A method of contact for a facility. NIEM reference is nc:FacilityContactInformation
        /// </summary>
        /// <value>A method of contact for a facility. NIEM reference is nc:FacilityContactInformation</value>

        [DataMember(Name="contactInformation")]
        public List<NcContactInformationType> ContactInformation { get; set; }

        /// <summary>
        /// An item contained by a facility. NIEM reference is nc:FacilityContainsItem
        /// </summary>
        /// <value>An item contained by a facility. NIEM reference is nc:FacilityContainsItem</value>

        [DataMember(Name="containsItem")]
        public List<NcItemType> ContainsItem { get; set; }

        /// <summary>
        /// A level of security at which a facility operates. NIEM reference is nc:FacilitySecurityLevelText
        /// </summary>
        /// <value>A level of security at which a facility operates. NIEM reference is nc:FacilitySecurityLevelText</value>

        [DataMember(Name="securityLevel")]
        public List<NcTextType> SecurityLevel { get; set; }

        /// <summary>
        /// A description of the functional usage of a facility. NIEM reference is nc:FacilityUsageCode
        /// </summary>
        /// <value>A description of the functional usage of a facility. NIEM reference is nc:FacilityUsageCode</value>

        [DataMember(Name="usageCode")]
        public List<OccsFacilityUsageCodeType> UsageCode { get; set; }

        /// <summary>
        /// A high-level usage category for a facility. NIEM reference is nc:FacilityUsageLevel1Code
        /// </summary>
        /// <value>A high-level usage category for a facility. NIEM reference is nc:FacilityUsageLevel1Code</value>

        [DataMember(Name="usageLevel1Code")]
        public List<OccsFacilityUsageLevel1CodeType> UsageLevel1Code { get; set; }

        /// <summary>
        /// A mid-level usage category for a facility. NIEM reference is nc:FacilityUsageLevel2Code
        /// </summary>
        /// <value>A mid-level usage category for a facility. NIEM reference is nc:FacilityUsageLevel2Code</value>

        [DataMember(Name="usageLevel2Code")]
        public List<OccsFacilityUsageLevel2CodeType> UsageLevel2Code { get; set; }

        /// <summary>
        /// A description of the functional usage of a facility. NIEM reference is nc:FacilityUsageText
        /// </summary>
        /// <value>A description of the functional usage of a facility. NIEM reference is nc:FacilityUsageText</value>

        [DataMember(Name="usage")]
        public List<NcTextType> Usage { get; set; }

        /// <summary>
        /// A number of people a facility can manage at a time. NIEM reference is nc:FacilityCapacityQuantity
        /// </summary>
        /// <value>A number of people a facility can manage at a time. NIEM reference is nc:FacilityCapacityQuantity</value>

        [DataMember(Name="capacityQuantity")]
        public List<NiemXsnonNegativeInteger> CapacityQuantity { get; set; }

        /// <summary>
        /// An identification of a computing system that supports a facility&#x27;s activities. NIEM reference is nc:FacilitySystemIdentification
        /// </summary>
        /// <value>An identification of a computing system that supports a facility&#x27;s activities. NIEM reference is nc:FacilitySystemIdentification</value>

        [DataMember(Name="systemIdentification")]
        public List<NcSystemIdentificationType> SystemIdentification { get; set; }

        /// <summary>
        /// An IP address of a computing system that supports a facility&#x27;s activities. NIEM reference is nc:FacilitySystemIPAddressID
        /// </summary>
        /// <value>An IP address of a computing system that supports a facility&#x27;s activities. NIEM reference is nc:FacilitySystemIPAddressID</value>

        [DataMember(Name="systemIpAddressId")]
        public List<NiemXsstring> SystemIpAddressId { get; set; }

        /// <summary>
        /// A maximum number of people that are authorized by permit to be contained in a facility at the same time. NIEM reference is nc:FacilityMaxOccupancyQuantity
        /// </summary>
        /// <value>A maximum number of people that are authorized by permit to be contained in a facility at the same time. NIEM reference is nc:FacilityMaxOccupancyQuantity</value>

        [DataMember(Name="maxOccupancyQuantity")]
        public List<NiemXsnonNegativeInteger> MaxOccupancyQuantity { get; set; }

        /// <summary>
        /// An operational status of a facility. NIEM reference is nc:FacilityOperationalStatus
        /// </summary>
        /// <value>An operational status of a facility. NIEM reference is nc:FacilityOperationalStatus</value>

        [DataMember(Name="operationalStatus")]
        public List<NcStatusType> OperationalStatus { get; set; }

        /// <summary>
        /// A description of a facility. NIEM reference is nc:FacilityDescriptionText
        /// </summary>
        /// <value>A description of a facility. NIEM reference is nc:FacilityDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A description of the number of people a facility can manage at a time. NIEM reference is nc:FacilityCapacityDescriptionText
        /// </summary>
        /// <value>A description of the number of people a facility can manage at a time. NIEM reference is nc:FacilityCapacityDescriptionText</value>

        [DataMember(Name="capacityDescription")]
        public List<NcTextType> CapacityDescription { get; set; }

        /// <summary>
        /// A schedule providing the beginning and ending hours of operation by weekday, for a designated time period. NIEM reference is nc:FacilityOperatingSchedule
        /// </summary>
        /// <value>A schedule providing the beginning and ending hours of operation by weekday, for a designated time period. NIEM reference is nc:FacilityOperatingSchedule</value>

        [DataMember(Name="operatingSchedule")]
        public List<NcScheduleType> OperatingSchedule { get; set; }

        /// <summary>
        /// A diagram of the layout of a facility. NIEM reference is nc:FacilitySiteDiagram
        /// </summary>
        /// <value>A diagram of the layout of a facility. NIEM reference is nc:FacilitySiteDiagram</value>

        [DataMember(Name="siteDiagram")]
        public List<NcImageType> SiteDiagram { get; set; }

        /// <summary>
        /// A kind of occupant a facility manages. NIEM reference is nc:FacilityMemberCategoryText
        /// </summary>
        /// <value>A kind of occupant a facility manages. NIEM reference is nc:FacilityMemberCategoryText</value>

        [DataMember(Name="memberCategory")]
        public List<NcTextType> MemberCategory { get; set; }

        /// <summary>
        /// Additional information about a Facility. NIEM reference is j:FacilityAugmentation
        /// </summary>
        /// <value>Additional information about a Facility. NIEM reference is j:FacilityAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JFacilityAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a nc:Facility. NIEM reference is mo:FacilityAugmentation
        /// </summary>
        /// <value>Additional information about a nc:Facility. NIEM reference is mo:FacilityAugmentation</value>

        [DataMember(Name="moAugmentation")]
        public List<MoFacilityAugmentationType> MoAugmentation { get; set; }

        /// <summary>
        /// ncFacilityType JSON-LD context
        /// </summary>
        /// <value>ncFacilityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncFacilityTypeContextJsonldEnum for ../JSON-LD_Contexts/ncFacilityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncFacilityTypeContext.jsonld")]
            JSONLDContextsncFacilityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncFacilityType JSON-LD context
        /// </summary>
        /// <value>ncFacilityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcFacilityType {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  ContactInformation: ").Append(ContactInformation).Append("\n");
            sb.Append("  ContainsItem: ").Append(ContainsItem).Append("\n");
            sb.Append("  SecurityLevel: ").Append(SecurityLevel).Append("\n");
            sb.Append("  UsageCode: ").Append(UsageCode).Append("\n");
            sb.Append("  UsageLevel1Code: ").Append(UsageLevel1Code).Append("\n");
            sb.Append("  UsageLevel2Code: ").Append(UsageLevel2Code).Append("\n");
            sb.Append("  Usage: ").Append(Usage).Append("\n");
            sb.Append("  CapacityQuantity: ").Append(CapacityQuantity).Append("\n");
            sb.Append("  SystemIdentification: ").Append(SystemIdentification).Append("\n");
            sb.Append("  SystemIpAddressId: ").Append(SystemIpAddressId).Append("\n");
            sb.Append("  MaxOccupancyQuantity: ").Append(MaxOccupancyQuantity).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CapacityDescription: ").Append(CapacityDescription).Append("\n");
            sb.Append("  OperatingSchedule: ").Append(OperatingSchedule).Append("\n");
            sb.Append("  SiteDiagram: ").Append(SiteDiagram).Append("\n");
            sb.Append("  MemberCategory: ").Append(MemberCategory).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  MoAugmentation: ").Append(MoAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcFacilityType)obj);
        }

        /// <summary>
        /// Returns true if NcFacilityType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcFacilityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcFacilityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    ContactInformation == other.ContactInformation ||
                    ContactInformation != null &&
                    ContactInformation.SequenceEqual(other.ContactInformation)
                ) && 
                (
                    ContainsItem == other.ContainsItem ||
                    ContainsItem != null &&
                    ContainsItem.SequenceEqual(other.ContainsItem)
                ) && 
                (
                    SecurityLevel == other.SecurityLevel ||
                    SecurityLevel != null &&
                    SecurityLevel.SequenceEqual(other.SecurityLevel)
                ) && 
                (
                    UsageCode == other.UsageCode ||
                    UsageCode != null &&
                    UsageCode.SequenceEqual(other.UsageCode)
                ) && 
                (
                    UsageLevel1Code == other.UsageLevel1Code ||
                    UsageLevel1Code != null &&
                    UsageLevel1Code.SequenceEqual(other.UsageLevel1Code)
                ) && 
                (
                    UsageLevel2Code == other.UsageLevel2Code ||
                    UsageLevel2Code != null &&
                    UsageLevel2Code.SequenceEqual(other.UsageLevel2Code)
                ) && 
                (
                    Usage == other.Usage ||
                    Usage != null &&
                    Usage.SequenceEqual(other.Usage)
                ) && 
                (
                    CapacityQuantity == other.CapacityQuantity ||
                    CapacityQuantity != null &&
                    CapacityQuantity.SequenceEqual(other.CapacityQuantity)
                ) && 
                (
                    SystemIdentification == other.SystemIdentification ||
                    SystemIdentification != null &&
                    SystemIdentification.SequenceEqual(other.SystemIdentification)
                ) && 
                (
                    SystemIpAddressId == other.SystemIpAddressId ||
                    SystemIpAddressId != null &&
                    SystemIpAddressId.SequenceEqual(other.SystemIpAddressId)
                ) && 
                (
                    MaxOccupancyQuantity == other.MaxOccupancyQuantity ||
                    MaxOccupancyQuantity != null &&
                    MaxOccupancyQuantity.SequenceEqual(other.MaxOccupancyQuantity)
                ) && 
                (
                    OperationalStatus == other.OperationalStatus ||
                    OperationalStatus != null &&
                    OperationalStatus.SequenceEqual(other.OperationalStatus)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    CapacityDescription == other.CapacityDescription ||
                    CapacityDescription != null &&
                    CapacityDescription.SequenceEqual(other.CapacityDescription)
                ) && 
                (
                    OperatingSchedule == other.OperatingSchedule ||
                    OperatingSchedule != null &&
                    OperatingSchedule.SequenceEqual(other.OperatingSchedule)
                ) && 
                (
                    SiteDiagram == other.SiteDiagram ||
                    SiteDiagram != null &&
                    SiteDiagram.SequenceEqual(other.SiteDiagram)
                ) && 
                (
                    MemberCategory == other.MemberCategory ||
                    MemberCategory != null &&
                    MemberCategory.SequenceEqual(other.MemberCategory)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    MoAugmentation == other.MoAugmentation ||
                    MoAugmentation != null &&
                    MoAugmentation.SequenceEqual(other.MoAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (ContactInformation != null)
                    hashCode = hashCode * 59 + ContactInformation.GetHashCode();
                    if (ContainsItem != null)
                    hashCode = hashCode * 59 + ContainsItem.GetHashCode();
                    if (SecurityLevel != null)
                    hashCode = hashCode * 59 + SecurityLevel.GetHashCode();
                    if (UsageCode != null)
                    hashCode = hashCode * 59 + UsageCode.GetHashCode();
                    if (UsageLevel1Code != null)
                    hashCode = hashCode * 59 + UsageLevel1Code.GetHashCode();
                    if (UsageLevel2Code != null)
                    hashCode = hashCode * 59 + UsageLevel2Code.GetHashCode();
                    if (Usage != null)
                    hashCode = hashCode * 59 + Usage.GetHashCode();
                    if (CapacityQuantity != null)
                    hashCode = hashCode * 59 + CapacityQuantity.GetHashCode();
                    if (SystemIdentification != null)
                    hashCode = hashCode * 59 + SystemIdentification.GetHashCode();
                    if (SystemIpAddressId != null)
                    hashCode = hashCode * 59 + SystemIpAddressId.GetHashCode();
                    if (MaxOccupancyQuantity != null)
                    hashCode = hashCode * 59 + MaxOccupancyQuantity.GetHashCode();
                    if (OperationalStatus != null)
                    hashCode = hashCode * 59 + OperationalStatus.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CapacityDescription != null)
                    hashCode = hashCode * 59 + CapacityDescription.GetHashCode();
                    if (OperatingSchedule != null)
                    hashCode = hashCode * 59 + OperatingSchedule.GetHashCode();
                    if (SiteDiagram != null)
                    hashCode = hashCode * 59 + SiteDiagram.GetHashCode();
                    if (MemberCategory != null)
                    hashCode = hashCode * 59 + MemberCategory.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (MoAugmentation != null)
                    hashCode = hashCode * 59 + MoAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcFacilityType left, NcFacilityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcFacilityType left, NcFacilityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
