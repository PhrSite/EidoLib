/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person who suffers injury, loss, or death as a result of an incident.
    /// </summary>
    [DataContract]
    public partial class JVictimType : IEquatable<JVictimType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization
        /// </summary>
        /// <value>An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization</value>

        [DataMember(Name="roleOfOrganization")]
        public List<NcOrganizationType> RoleOfOrganization { get; set; }

        /// <summary>
        /// An entity of whom the role object is a function. NIEM reference is nc:RoleOfItem
        /// </summary>
        /// <value>An entity of whom the role object is a function. NIEM reference is nc:RoleOfItem</value>

        [DataMember(Name="roleOfItem")]
        public List<NcItemType> RoleOfItem { get; set; }

        /// <summary>
        /// A statement made by a victim. NIEM reference is j:VictimStatementText
        /// </summary>
        /// <value>A statement made by a victim. NIEM reference is j:VictimStatementText</value>

        [DataMember(Name="statement")]
        public List<NcTextType> Statement { get; set; }

        /// <summary>
        /// A sequential number assigned to the victim within incident. NIEM reference is j:VictimSequenceNumberText
        /// </summary>
        /// <value>A sequential number assigned to the victim within incident. NIEM reference is j:VictimSequenceNumberText</value>

        [DataMember(Name="sequenceNumber")]
        public List<NcTextType> SequenceNumber { get; set; }

        /// <summary>
        /// A case number assigned to a victim case report by the Violent Criminal Apprehension Program. NIEM reference is j:VictimVICAPCaseNumberText
        /// </summary>
        /// <value>A case number assigned to a victim case report by the Violent Criminal Apprehension Program. NIEM reference is j:VictimVICAPCaseNumberText</value>

        [DataMember(Name="vicapCaseNumber")]
        public List<NcTextType> VicapCaseNumber { get; set; }

        /// <summary>
        /// True if victim was contacted; false otherwise. NIEM reference is j:VictimContactedIndicator
        /// </summary>
        /// <value>True if victim was contacted; false otherwise. NIEM reference is j:VictimContactedIndicator</value>

        [DataMember(Name="isContacted")]
        public List<NiemXsboolean> IsContacted { get; set; }

        /// <summary>
        /// A set of details pertaining to facts attained from an actual crime scene, giving investigators insights into behaviors of a victim or concerning the treatment of a victim as related to subject MO. NIEM reference is j:VictimMO
        /// </summary>
        /// <value>A set of details pertaining to facts attained from an actual crime scene, giving investigators insights into behaviors of a victim or concerning the treatment of a victim as related to subject MO. NIEM reference is j:VictimMO</value>

        [DataMember(Name="victimMo")]
        public List<JVictimMOType> VictimMo { get; set; }

        /// <summary>
        /// True if a victim seeks restitution from a subject; false otherwise. NIEM reference is j:VictimSeeksRestitutionDescriptionIndicator
        /// </summary>
        /// <value>True if a victim seeks restitution from a subject; false otherwise. NIEM reference is j:VictimSeeksRestitutionDescriptionIndicator</value>

        [DataMember(Name="isSeeksRestitutionDescription")]
        public List<NiemXsboolean> IsSeeksRestitutionDescription { get; set; }

        /// <summary>
        /// True if a case report for this victim was submitted to the Violent Criminal Apprehension Program; false otherwise. NIEM reference is j:VictimVICAPIndicator
        /// </summary>
        /// <value>True if a case report for this victim was submitted to the Violent Criminal Apprehension Program; false otherwise. NIEM reference is j:VictimVICAPIndicator</value>

        [DataMember(Name="isVicap")]
        public List<NiemXsboolean> IsVicap { get; set; }

        /// <summary>
        /// A description of the restitution sought by a victim from a subject. NIEM reference is j:VictimSeeksRestitutionDescriptionText
        /// </summary>
        /// <value>A description of the restitution sought by a victim from a subject. NIEM reference is j:VictimSeeksRestitutionDescriptionText</value>

        [DataMember(Name="seeksRestitutionDescription")]
        public List<NcTextType> SeeksRestitutionDescription { get; set; }

        /// <summary>
        /// A victim&#x27;s property that was stolen or damaged. NIEM reference is j:VictimAffectedItem
        /// </summary>
        /// <value>A victim&#x27;s property that was stolen or damaged. NIEM reference is j:VictimAffectedItem</value>

        [DataMember(Name="affectedItem")]
        public List<NcItemType> AffectedItem { get; set; }

        /// <summary>
        /// An entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:VictimOrganization
        /// </summary>
        /// <value>An entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:VictimOrganization</value>

        [DataMember(Name="organization")]
        public List<NcOrganizationType> Organization { get; set; }

        /// <summary>
        /// An entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:VictimPerson
        /// </summary>
        /// <value>An entity who suffers injury, loss, or death as a result of an incident. NIEM reference is j:VictimPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A description of what happens to the victim after the incident. NIEM reference is j:VictimDispositionText
        /// </summary>
        /// <value>A description of what happens to the victim after the incident. NIEM reference is j:VictimDispositionText</value>

        [DataMember(Name="disposition")]
        public List<NcTextType> Disposition { get; set; }

        /// <summary>
        /// An identification number or string identifying a victim. NIEM reference is j:VictimIdentification
        /// </summary>
        /// <value>An identification number or string identifying a victim. NIEM reference is j:VictimIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// An injury received by a victim due to an incident. NIEM reference is j:VictimInjury
        /// </summary>
        /// <value>An injury received by a victim due to an incident. NIEM reference is j:VictimInjury</value>

        [DataMember(Name="injury")]
        public List<NcInjuryType> Injury { get; set; }

        /// <summary>
        /// True if a victim needed medical treatment after an incident; false otherwise. NIEM reference is j:VictimMedicalTreatmentRequiredIndicator
        /// </summary>
        /// <value>True if a victim needed medical treatment after an incident; false otherwise. NIEM reference is j:VictimMedicalTreatmentRequiredIndicator</value>

        [DataMember(Name="isMedicalTreatmentRequired")]
        public List<NiemXsboolean> IsMedicalTreatmentRequired { get; set; }

        /// <summary>
        /// A charge representing an offense committed against a person, organization, and/or society. NIEM reference is j:VictimOffenseChargeCode
        /// </summary>
        /// <value>A charge representing an offense committed against a person, organization, and/or society. NIEM reference is j:VictimOffenseChargeCode</value>

        [DataMember(Name="offenseChargeCode")]
        public List<UcrOffenseCodeType> OffenseChargeCode { get; set; }

        /// <summary>
        /// A charge representing an offense committed against a person. NIEM reference is j:VictimOffenseChargeText
        /// </summary>
        /// <value>A charge representing an offense committed against a person. NIEM reference is j:VictimOffenseChargeText</value>

        [DataMember(Name="offenseCharge")]
        public List<NcTextType> OffenseCharge { get; set; }

        /// <summary>
        /// True if a victim wants the alleged suspect prosecuted in a court of law; false otherwise. NIEM reference is j:VictimSeeksProsecutionIndicator
        /// </summary>
        /// <value>True if a victim wants the alleged suspect prosecuted in a court of law; false otherwise. NIEM reference is j:VictimSeeksProsecutionIndicator</value>

        [DataMember(Name="isSeeksProsecution")]
        public List<NiemXsboolean> IsSeeksProsecution { get; set; }

        /// <summary>
        /// A kind of victim an offense was committed against. NIEM reference is j:VictimCategoryCode
        /// </summary>
        /// <value>A kind of victim an offense was committed against. NIEM reference is j:VictimCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<UcrVictimCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of victim an offense was committed against. NIEM reference is j:VictimCategoryText
        /// </summary>
        /// <value>A kind of victim an offense was committed against. NIEM reference is j:VictimCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorText
        /// </summary>
        /// <value>A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorText</value>

        [DataMember(Name="aggravatedAssaultHomicideFactor")]
        public List<NcTextType> AggravatedAssaultHomicideFactor { get; set; }

        /// <summary>
        /// A circumstance of a justifiable homicide. NIEM reference is j:VictimJustifiableHomicideFactorText
        /// </summary>
        /// <value>A circumstance of a justifiable homicide. NIEM reference is j:VictimJustifiableHomicideFactorText</value>

        [DataMember(Name="justifiableHomicideFactor")]
        public List<NcTextType> JustifiableHomicideFactor { get; set; }

        /// <summary>
        /// A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorCode
        /// </summary>
        /// <value>A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorCode</value>

        [DataMember(Name="aggravatedAssaultHomicideFactorCode")]
        public List<UcrAggravatedAssaultHomicideFactorsCodeType> AggravatedAssaultHomicideFactorCode { get; set; }

        /// <summary>
        /// A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorNDExCode
        /// </summary>
        /// <value>A circumstance of either an aggravated assault or homicide. NIEM reference is j:VictimAggravatedAssaultHomicideFactorNDExCode</value>

        [DataMember(Name="aggravatedAssaultHomicideFactorNdExCode")]
        public List<NdexAggravatedAssaultCircumstanceNDExCodeType> AggravatedAssaultHomicideFactorNdExCode { get; set; }

        /// <summary>
        /// A circumstance of a justifiable homicide. NIEM reference is j:VictimJustifiableHomicideFactorCode
        /// </summary>
        /// <value>A circumstance of a justifiable homicide. NIEM reference is j:VictimJustifiableHomicideFactorCode</value>

        [DataMember(Name="justifiableHomicideFactorCode")]
        public List<UcrJustifiableHomicideFactorsCodeType> JustifiableHomicideFactorCode { get; set; }

        /// <summary>
        /// jVictimType JSON-LD context
        /// </summary>
        /// <value>jVictimType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjVictimTypeContextJsonldEnum for ../JSON-LD_Contexts/jVictimTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jVictimTypeContext.jsonld")]
            JSONLDContextsjVictimTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jVictimType JSON-LD context
        /// </summary>
        /// <value>jVictimType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JVictimType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  RoleOfOrganization: ").Append(RoleOfOrganization).Append("\n");
            sb.Append("  RoleOfItem: ").Append(RoleOfItem).Append("\n");
            sb.Append("  Statement: ").Append(Statement).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  VicapCaseNumber: ").Append(VicapCaseNumber).Append("\n");
            sb.Append("  IsContacted: ").Append(IsContacted).Append("\n");
            sb.Append("  VictimMo: ").Append(VictimMo).Append("\n");
            sb.Append("  IsSeeksRestitutionDescription: ").Append(IsSeeksRestitutionDescription).Append("\n");
            sb.Append("  IsVicap: ").Append(IsVicap).Append("\n");
            sb.Append("  SeeksRestitutionDescription: ").Append(SeeksRestitutionDescription).Append("\n");
            sb.Append("  AffectedItem: ").Append(AffectedItem).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Injury: ").Append(Injury).Append("\n");
            sb.Append("  IsMedicalTreatmentRequired: ").Append(IsMedicalTreatmentRequired).Append("\n");
            sb.Append("  OffenseChargeCode: ").Append(OffenseChargeCode).Append("\n");
            sb.Append("  OffenseCharge: ").Append(OffenseCharge).Append("\n");
            sb.Append("  IsSeeksProsecution: ").Append(IsSeeksProsecution).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AggravatedAssaultHomicideFactor: ").Append(AggravatedAssaultHomicideFactor).Append("\n");
            sb.Append("  JustifiableHomicideFactor: ").Append(JustifiableHomicideFactor).Append("\n");
            sb.Append("  AggravatedAssaultHomicideFactorCode: ").Append(AggravatedAssaultHomicideFactorCode).Append("\n");
            sb.Append("  AggravatedAssaultHomicideFactorNdExCode: ").Append(AggravatedAssaultHomicideFactorNdExCode).Append("\n");
            sb.Append("  JustifiableHomicideFactorCode: ").Append(JustifiableHomicideFactorCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JVictimType)obj);
        }

        /// <summary>
        /// Returns true if JVictimType instances are equal
        /// </summary>
        /// <param name="other">Instance of JVictimType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JVictimType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    RoleOfOrganization == other.RoleOfOrganization ||
                    RoleOfOrganization != null &&
                    RoleOfOrganization.SequenceEqual(other.RoleOfOrganization)
                ) && 
                (
                    RoleOfItem == other.RoleOfItem ||
                    RoleOfItem != null &&
                    RoleOfItem.SequenceEqual(other.RoleOfItem)
                ) && 
                (
                    Statement == other.Statement ||
                    Statement != null &&
                    Statement.SequenceEqual(other.Statement)
                ) && 
                (
                    SequenceNumber == other.SequenceNumber ||
                    SequenceNumber != null &&
                    SequenceNumber.SequenceEqual(other.SequenceNumber)
                ) && 
                (
                    VicapCaseNumber == other.VicapCaseNumber ||
                    VicapCaseNumber != null &&
                    VicapCaseNumber.SequenceEqual(other.VicapCaseNumber)
                ) && 
                (
                    IsContacted == other.IsContacted ||
                    IsContacted != null &&
                    IsContacted.SequenceEqual(other.IsContacted)
                ) && 
                (
                    VictimMo == other.VictimMo ||
                    VictimMo != null &&
                    VictimMo.SequenceEqual(other.VictimMo)
                ) && 
                (
                    IsSeeksRestitutionDescription == other.IsSeeksRestitutionDescription ||
                    IsSeeksRestitutionDescription != null &&
                    IsSeeksRestitutionDescription.SequenceEqual(other.IsSeeksRestitutionDescription)
                ) && 
                (
                    IsVicap == other.IsVicap ||
                    IsVicap != null &&
                    IsVicap.SequenceEqual(other.IsVicap)
                ) && 
                (
                    SeeksRestitutionDescription == other.SeeksRestitutionDescription ||
                    SeeksRestitutionDescription != null &&
                    SeeksRestitutionDescription.SequenceEqual(other.SeeksRestitutionDescription)
                ) && 
                (
                    AffectedItem == other.AffectedItem ||
                    AffectedItem != null &&
                    AffectedItem.SequenceEqual(other.AffectedItem)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.SequenceEqual(other.Organization)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Disposition == other.Disposition ||
                    Disposition != null &&
                    Disposition.SequenceEqual(other.Disposition)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Injury == other.Injury ||
                    Injury != null &&
                    Injury.SequenceEqual(other.Injury)
                ) && 
                (
                    IsMedicalTreatmentRequired == other.IsMedicalTreatmentRequired ||
                    IsMedicalTreatmentRequired != null &&
                    IsMedicalTreatmentRequired.SequenceEqual(other.IsMedicalTreatmentRequired)
                ) && 
                (
                    OffenseChargeCode == other.OffenseChargeCode ||
                    OffenseChargeCode != null &&
                    OffenseChargeCode.SequenceEqual(other.OffenseChargeCode)
                ) && 
                (
                    OffenseCharge == other.OffenseCharge ||
                    OffenseCharge != null &&
                    OffenseCharge.SequenceEqual(other.OffenseCharge)
                ) && 
                (
                    IsSeeksProsecution == other.IsSeeksProsecution ||
                    IsSeeksProsecution != null &&
                    IsSeeksProsecution.SequenceEqual(other.IsSeeksProsecution)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    AggravatedAssaultHomicideFactor == other.AggravatedAssaultHomicideFactor ||
                    AggravatedAssaultHomicideFactor != null &&
                    AggravatedAssaultHomicideFactor.SequenceEqual(other.AggravatedAssaultHomicideFactor)
                ) && 
                (
                    JustifiableHomicideFactor == other.JustifiableHomicideFactor ||
                    JustifiableHomicideFactor != null &&
                    JustifiableHomicideFactor.SequenceEqual(other.JustifiableHomicideFactor)
                ) && 
                (
                    AggravatedAssaultHomicideFactorCode == other.AggravatedAssaultHomicideFactorCode ||
                    AggravatedAssaultHomicideFactorCode != null &&
                    AggravatedAssaultHomicideFactorCode.SequenceEqual(other.AggravatedAssaultHomicideFactorCode)
                ) && 
                (
                    AggravatedAssaultHomicideFactorNdExCode == other.AggravatedAssaultHomicideFactorNdExCode ||
                    AggravatedAssaultHomicideFactorNdExCode != null &&
                    AggravatedAssaultHomicideFactorNdExCode.SequenceEqual(other.AggravatedAssaultHomicideFactorNdExCode)
                ) && 
                (
                    JustifiableHomicideFactorCode == other.JustifiableHomicideFactorCode ||
                    JustifiableHomicideFactorCode != null &&
                    JustifiableHomicideFactorCode.SequenceEqual(other.JustifiableHomicideFactorCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (RoleOfOrganization != null)
                    hashCode = hashCode * 59 + RoleOfOrganization.GetHashCode();
                    if (RoleOfItem != null)
                    hashCode = hashCode * 59 + RoleOfItem.GetHashCode();
                    if (Statement != null)
                    hashCode = hashCode * 59 + Statement.GetHashCode();
                    if (SequenceNumber != null)
                    hashCode = hashCode * 59 + SequenceNumber.GetHashCode();
                    if (VicapCaseNumber != null)
                    hashCode = hashCode * 59 + VicapCaseNumber.GetHashCode();
                    if (IsContacted != null)
                    hashCode = hashCode * 59 + IsContacted.GetHashCode();
                    if (VictimMo != null)
                    hashCode = hashCode * 59 + VictimMo.GetHashCode();
                    if (IsSeeksRestitutionDescription != null)
                    hashCode = hashCode * 59 + IsSeeksRestitutionDescription.GetHashCode();
                    if (IsVicap != null)
                    hashCode = hashCode * 59 + IsVicap.GetHashCode();
                    if (SeeksRestitutionDescription != null)
                    hashCode = hashCode * 59 + SeeksRestitutionDescription.GetHashCode();
                    if (AffectedItem != null)
                    hashCode = hashCode * 59 + AffectedItem.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Disposition != null)
                    hashCode = hashCode * 59 + Disposition.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Injury != null)
                    hashCode = hashCode * 59 + Injury.GetHashCode();
                    if (IsMedicalTreatmentRequired != null)
                    hashCode = hashCode * 59 + IsMedicalTreatmentRequired.GetHashCode();
                    if (OffenseChargeCode != null)
                    hashCode = hashCode * 59 + OffenseChargeCode.GetHashCode();
                    if (OffenseCharge != null)
                    hashCode = hashCode * 59 + OffenseCharge.GetHashCode();
                    if (IsSeeksProsecution != null)
                    hashCode = hashCode * 59 + IsSeeksProsecution.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (AggravatedAssaultHomicideFactor != null)
                    hashCode = hashCode * 59 + AggravatedAssaultHomicideFactor.GetHashCode();
                    if (JustifiableHomicideFactor != null)
                    hashCode = hashCode * 59 + JustifiableHomicideFactor.GetHashCode();
                    if (AggravatedAssaultHomicideFactorCode != null)
                    hashCode = hashCode * 59 + AggravatedAssaultHomicideFactorCode.GetHashCode();
                    if (AggravatedAssaultHomicideFactorNdExCode != null)
                    hashCode = hashCode * 59 + AggravatedAssaultHomicideFactorNdExCode.GetHashCode();
                    if (JustifiableHomicideFactorCode != null)
                    hashCode = hashCode * 59 + JustifiableHomicideFactorCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JVictimType left, JVictimType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JVictimType left, JVictimType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
