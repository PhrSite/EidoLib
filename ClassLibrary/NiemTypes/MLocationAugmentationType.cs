/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a location.
    /// </summary>
    [DataContract]
    public partial class MLocationAugmentationType : IEquatable<MLocationAugmentationType>
    { 
        /// <summary>
        /// A Captain of the Port (COTP) zone code. NIEM reference is m:COTPZoneRegionCode
        /// </summary>
        /// <value>A Captain of the Port (COTP) zone code. NIEM reference is m:COTPZoneRegionCode</value>

        [DataMember(Name="cotpZoneRegionCode")]
        public List<MCOTPRegionCodeType> CotpZoneRegionCode { get; set; }

        /// <summary>
        /// A region of a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneRegionText
        /// </summary>
        /// <value>A region of a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneRegionText</value>

        [DataMember(Name="cotpZoneRegion")]
        public List<NcTextType> CotpZoneRegion { get; set; }

        /// <summary>
        /// A geospatial curve. NIEM reference is m:LocationCurve
        /// </summary>
        /// <value>A geospatial curve. NIEM reference is m:LocationCurve</value>

        [DataMember(Name="locationCurve")]
        public List<GeoCurveType> LocationCurve { get; set; }

        /// <summary>
        /// A location specified by an ellipse centered at a 2D or 3D geometric point. NIEM reference is m:LocationEllipse
        /// </summary>
        /// <value>A location specified by an ellipse centered at a 2D or 3D geometric point. NIEM reference is m:LocationEllipse</value>

        [DataMember(Name="locationEllipse")]
        public List<GeoEllipseType> LocationEllipse { get; set; }

        /// <summary>
        /// A rectangular geospatial area. NIEM reference is m:LocationEnvelope
        /// </summary>
        /// <value>A rectangular geospatial area. NIEM reference is m:LocationEnvelope</value>

        [DataMember(Name="locationEnvelope")]
        public List<GeoEnvelopeType> LocationEnvelope { get; set; }

        /// <summary>
        /// A location specified by a 2D or 3D geometric point. NIEM reference is m:LocationPoint
        /// </summary>
        /// <value>A location specified by a 2D or 3D geometric point. NIEM reference is m:LocationPoint</value>

        [DataMember(Name="locationPoint")]
        public List<GeoPointType> LocationPoint { get; set; }

        /// <summary>
        /// A geospatial polygon. NIEM reference is m:LocationPolygon
        /// </summary>
        /// <value>A geospatial polygon. NIEM reference is m:LocationPolygon</value>

        [DataMember(Name="locationPolygon")]
        public List<GeoPolygonType> LocationPolygon { get; set; }

        /// <summary>
        /// A location identified by a port. NIEM reference is m:LocationPort
        /// </summary>
        /// <value>A location identified by a port. NIEM reference is m:LocationPort</value>

        [DataMember(Name="locationPort")]
        public List<MPortType> LocationPort { get; set; }

        /// <summary>
        /// A location identified by a United Nations Location Code, also known as a UN/LOCODE (United Nations Code for Trade and Transport Locations). NIEM reference is m:LocationUNLOCODEText
        /// </summary>
        /// <value>A location identified by a United Nations Location Code, also known as a UN/LOCODE (United Nations Code for Trade and Transport Locations). NIEM reference is m:LocationUNLOCODEText</value>

        [DataMember(Name="locationUnlocode")]
        public List<NcTextType> LocationUnlocode { get; set; }

        /// <summary>
        /// mLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>mLocationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmLocationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/mLocationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mLocationAugmentationTypeContext.jsonld")]
            JSONLDContextsmLocationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>mLocationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MLocationAugmentationType {\n");
            sb.Append("  CotpZoneRegionCode: ").Append(CotpZoneRegionCode).Append("\n");
            sb.Append("  CotpZoneRegion: ").Append(CotpZoneRegion).Append("\n");
            sb.Append("  LocationCurve: ").Append(LocationCurve).Append("\n");
            sb.Append("  LocationEllipse: ").Append(LocationEllipse).Append("\n");
            sb.Append("  LocationEnvelope: ").Append(LocationEnvelope).Append("\n");
            sb.Append("  LocationPoint: ").Append(LocationPoint).Append("\n");
            sb.Append("  LocationPolygon: ").Append(LocationPolygon).Append("\n");
            sb.Append("  LocationPort: ").Append(LocationPort).Append("\n");
            sb.Append("  LocationUnlocode: ").Append(LocationUnlocode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MLocationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if MLocationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of MLocationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MLocationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CotpZoneRegionCode == other.CotpZoneRegionCode ||
                    CotpZoneRegionCode != null &&
                    CotpZoneRegionCode.SequenceEqual(other.CotpZoneRegionCode)
                ) && 
                (
                    CotpZoneRegion == other.CotpZoneRegion ||
                    CotpZoneRegion != null &&
                    CotpZoneRegion.SequenceEqual(other.CotpZoneRegion)
                ) && 
                (
                    LocationCurve == other.LocationCurve ||
                    LocationCurve != null &&
                    LocationCurve.SequenceEqual(other.LocationCurve)
                ) && 
                (
                    LocationEllipse == other.LocationEllipse ||
                    LocationEllipse != null &&
                    LocationEllipse.SequenceEqual(other.LocationEllipse)
                ) && 
                (
                    LocationEnvelope == other.LocationEnvelope ||
                    LocationEnvelope != null &&
                    LocationEnvelope.SequenceEqual(other.LocationEnvelope)
                ) && 
                (
                    LocationPoint == other.LocationPoint ||
                    LocationPoint != null &&
                    LocationPoint.SequenceEqual(other.LocationPoint)
                ) && 
                (
                    LocationPolygon == other.LocationPolygon ||
                    LocationPolygon != null &&
                    LocationPolygon.SequenceEqual(other.LocationPolygon)
                ) && 
                (
                    LocationPort == other.LocationPort ||
                    LocationPort != null &&
                    LocationPort.SequenceEqual(other.LocationPort)
                ) && 
                (
                    LocationUnlocode == other.LocationUnlocode ||
                    LocationUnlocode != null &&
                    LocationUnlocode.SequenceEqual(other.LocationUnlocode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CotpZoneRegionCode != null)
                    hashCode = hashCode * 59 + CotpZoneRegionCode.GetHashCode();
                    if (CotpZoneRegion != null)
                    hashCode = hashCode * 59 + CotpZoneRegion.GetHashCode();
                    if (LocationCurve != null)
                    hashCode = hashCode * 59 + LocationCurve.GetHashCode();
                    if (LocationEllipse != null)
                    hashCode = hashCode * 59 + LocationEllipse.GetHashCode();
                    if (LocationEnvelope != null)
                    hashCode = hashCode * 59 + LocationEnvelope.GetHashCode();
                    if (LocationPoint != null)
                    hashCode = hashCode * 59 + LocationPoint.GetHashCode();
                    if (LocationPolygon != null)
                    hashCode = hashCode * 59 + LocationPolygon.GetHashCode();
                    if (LocationPort != null)
                    hashCode = hashCode * 59 + LocationPort.GetHashCode();
                    if (LocationUnlocode != null)
                    hashCode = hashCode * 59 + LocationUnlocode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MLocationAugmentationType left, MLocationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MLocationAugmentationType left, MLocationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
