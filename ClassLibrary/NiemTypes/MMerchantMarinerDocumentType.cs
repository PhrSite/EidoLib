/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a Merchant Mariner Document (MMD).
    /// </summary>
    [DataContract]
    public partial class MMerchantMarinerDocumentType : IEquatable<MMerchantMarinerDocumentType>
    { 
        /// <summary>
        /// An identification of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIdentification
        /// </summary>
        /// <value>An identification of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A date a merchant mariner document was issued. NIEM reference is m:MerchantMarinerDocumentIssueDate
        /// </summary>
        /// <value>A date a merchant mariner document was issued. NIEM reference is m:MerchantMarinerDocumentIssueDate</value>

        [DataMember(Name="issueDate")]
        public List<NcDateType> IssueDate { get; set; }

        /// <summary>
        /// A location of the issuer of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIssuerLocation
        /// </summary>
        /// <value>A location of the issuer of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIssuerLocation</value>

        [DataMember(Name="issuerLocation")]
        public List<NcLocationType> IssuerLocation { get; set; }

        /// <summary>
        /// An issuer of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIssuingOrganization
        /// </summary>
        /// <value>An issuer of a merchant mariner document. NIEM reference is m:MerchantMarinerDocumentIssuingOrganization</value>

        [DataMember(Name="issuingOrganization")]
        public List<NcOrganizationType> IssuingOrganization { get; set; }

        /// <summary>
        /// A rating on a merchant mariner document which authorizes the performance of certain shipboard duties or actions. NIEM reference is m:MerchantMarinerDocumentRatingText
        /// </summary>
        /// <value>A rating on a merchant mariner document which authorizes the performance of certain shipboard duties or actions. NIEM reference is m:MerchantMarinerDocumentRatingText</value>

        [DataMember(Name="rating")]
        public List<NcTextType> Rating { get; set; }

        /// <summary>
        /// An address for a person. NIEM reference is m:PersonAddress
        /// </summary>
        /// <value>An address for a person. NIEM reference is m:PersonAddress</value>

        [DataMember(Name="personAddress")]
        public List<NcAddressType> PersonAddress { get; set; }

        /// <summary>
        /// A date a person was born. NIEM reference is nc:PersonBirthDate
        /// </summary>
        /// <value>A date a person was born. NIEM reference is nc:PersonBirthDate</value>

        [DataMember(Name="personBirthDate")]
        public List<NcDateType> PersonBirthDate { get; set; }

        /// <summary>
        /// A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipISO3166Alpha2Code
        /// </summary>
        /// <value>A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipISO3166Alpha2Code</value>

        [DataMember(Name="personCitizenshipIso3166Alpha2Code")]
        public List<Iso3166CountryAlpha2CodeType> PersonCitizenshipIso3166Alpha2Code { get; set; }

        /// <summary>
        /// A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipText
        /// </summary>
        /// <value>A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipText</value>

        [DataMember(Name="personCitizenship")]
        public List<NcTextType> PersonCitizenship { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode</value>

        [DataMember(Name="personEyeColorCode")]
        public List<NcicEYECodeType> PersonEyeColorCode { get; set; }

        /// <summary>
        /// A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode</value>

        [DataMember(Name="personEyeColorRapSheetCode")]
        public List<JPersonEyeColorCodeType> PersonEyeColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText</value>

        [DataMember(Name="personEyeColor")]
        public List<NcTextType> PersonEyeColor { get; set; }

        /// <summary>
        /// A color of the hair of a person. NIEM reference is j:PersonHairColorCode
        /// </summary>
        /// <value>A color of the hair of a person. NIEM reference is j:PersonHairColorCode</value>

        [DataMember(Name="personHairColorCode")]
        public List<NcicHAIRCodeType> PersonHairColorCode { get; set; }

        /// <summary>
        /// A code set identifying a hair color of a person. NIEM reference is j:PersonHairColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying a hair color of a person. NIEM reference is j:PersonHairColorRapSheetCode</value>

        [DataMember(Name="personHairColorRapSheetCode")]
        public List<JPersonHairColorCodeType> PersonHairColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the hair of a person. NIEM reference is nc:PersonHairColorText
        /// </summary>
        /// <value>A color of the hair of a person. NIEM reference is nc:PersonHairColorText</value>

        [DataMember(Name="personHairColor")]
        public List<NcTextType> PersonHairColor { get; set; }

        /// <summary>
        /// A description of the height of a person. NIEM reference is nc:PersonHeightDescriptionText
        /// </summary>
        /// <value>A description of the height of a person. NIEM reference is nc:PersonHeightDescriptionText</value>

        [DataMember(Name="personHeightDescription")]
        public List<NcTextType> PersonHeightDescription { get; set; }

        /// <summary>
        /// A measurement of the height of a person. NIEM reference is nc:PersonHeightMeasure
        /// </summary>
        /// <value>A measurement of the height of a person. NIEM reference is nc:PersonHeightMeasure</value>

        [DataMember(Name="personHeightMeasure")]
        public List<NcLengthMeasureType> PersonHeightMeasure { get; set; }

        /// <summary>
        /// A combination of names and/or titles by which a person is known. NIEM reference is nc:PersonName
        /// </summary>
        /// <value>A combination of names and/or titles by which a person is known. NIEM reference is nc:PersonName</value>

        [DataMember(Name="personName")]
        public List<NcPersonNameType> PersonName { get; set; }

        /// <summary>
        /// A gender or sex of a person. NIEM reference is j:PersonSexCode
        /// </summary>
        /// <value>A gender or sex of a person. NIEM reference is j:PersonSexCode</value>

        [DataMember(Name="personSexCode")]
        public List<NcicSEXCodeType> PersonSexCode { get; set; }

        /// <summary>
        /// A code that identifies the gender or sex of the person. NIEM reference is j:PersonSexNDExCode
        /// </summary>
        /// <value>A code that identifies the gender or sex of the person. NIEM reference is j:PersonSexNDExCode</value>

        [DataMember(Name="personSexNdExCode")]
        public List<NdexSEXCodeType> PersonSexNdExCode { get; set; }

        /// <summary>
        /// A code set identifying a gender or sex of a person. NIEM reference is j:PersonSexRapSheetCode
        /// </summary>
        /// <value>A code set identifying a gender or sex of a person. NIEM reference is j:PersonSexRapSheetCode</value>

        [DataMember(Name="personSexRapSheetCode")]
        public List<JPersonSexCodeType> PersonSexRapSheetCode { get; set; }

        /// <summary>
        /// A gender or sex of a person. NIEM reference is nc:PersonSexText
        /// </summary>
        /// <value>A gender or sex of a person. NIEM reference is nc:PersonSexText</value>

        [DataMember(Name="personSex")]
        public List<NcTextType> PersonSex { get; set; }

        /// <summary>
        /// A unique identification reference to a living person; assigned by the United States Social Security Administration. NIEM reference is nc:PersonSSNIdentification
        /// </summary>
        /// <value>A unique identification reference to a living person; assigned by the United States Social Security Administration. NIEM reference is nc:PersonSSNIdentification</value>

        [DataMember(Name="personSsnIdentification")]
        public List<NcIdentificationType> PersonSsnIdentification { get; set; }

        /// <summary>
        /// A description of the weight of a person. NIEM reference is nc:PersonWeightDescriptionText
        /// </summary>
        /// <value>A description of the weight of a person. NIEM reference is nc:PersonWeightDescriptionText</value>

        [DataMember(Name="personWeightDescription")]
        public List<NcTextType> PersonWeightDescription { get; set; }

        /// <summary>
        /// A measurement of the weight of a person. NIEM reference is nc:PersonWeightMeasure
        /// </summary>
        /// <value>A measurement of the weight of a person. NIEM reference is nc:PersonWeightMeasure</value>

        [DataMember(Name="personWeightMeasure")]
        public List<NcWeightMeasureType> PersonWeightMeasure { get; set; }

        /// <summary>
        /// mMerchantMarinerDocumentType JSON-LD context
        /// </summary>
        /// <value>mMerchantMarinerDocumentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmMerchantMarinerDocumentTypeContextJsonldEnum for ../JSON-LD_Contexts/mMerchantMarinerDocumentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mMerchantMarinerDocumentTypeContext.jsonld")]
            JSONLDContextsmMerchantMarinerDocumentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mMerchantMarinerDocumentType JSON-LD context
        /// </summary>
        /// <value>mMerchantMarinerDocumentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MMerchantMarinerDocumentType {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  IssueDate: ").Append(IssueDate).Append("\n");
            sb.Append("  IssuerLocation: ").Append(IssuerLocation).Append("\n");
            sb.Append("  IssuingOrganization: ").Append(IssuingOrganization).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  PersonAddress: ").Append(PersonAddress).Append("\n");
            sb.Append("  PersonBirthDate: ").Append(PersonBirthDate).Append("\n");
            sb.Append("  PersonCitizenshipIso3166Alpha2Code: ").Append(PersonCitizenshipIso3166Alpha2Code).Append("\n");
            sb.Append("  PersonCitizenship: ").Append(PersonCitizenship).Append("\n");
            sb.Append("  PersonEyeColorCode: ").Append(PersonEyeColorCode).Append("\n");
            sb.Append("  PersonEyeColorRapSheetCode: ").Append(PersonEyeColorRapSheetCode).Append("\n");
            sb.Append("  PersonEyeColor: ").Append(PersonEyeColor).Append("\n");
            sb.Append("  PersonHairColorCode: ").Append(PersonHairColorCode).Append("\n");
            sb.Append("  PersonHairColorRapSheetCode: ").Append(PersonHairColorRapSheetCode).Append("\n");
            sb.Append("  PersonHairColor: ").Append(PersonHairColor).Append("\n");
            sb.Append("  PersonHeightDescription: ").Append(PersonHeightDescription).Append("\n");
            sb.Append("  PersonHeightMeasure: ").Append(PersonHeightMeasure).Append("\n");
            sb.Append("  PersonName: ").Append(PersonName).Append("\n");
            sb.Append("  PersonSexCode: ").Append(PersonSexCode).Append("\n");
            sb.Append("  PersonSexNdExCode: ").Append(PersonSexNdExCode).Append("\n");
            sb.Append("  PersonSexRapSheetCode: ").Append(PersonSexRapSheetCode).Append("\n");
            sb.Append("  PersonSex: ").Append(PersonSex).Append("\n");
            sb.Append("  PersonSsnIdentification: ").Append(PersonSsnIdentification).Append("\n");
            sb.Append("  PersonWeightDescription: ").Append(PersonWeightDescription).Append("\n");
            sb.Append("  PersonWeightMeasure: ").Append(PersonWeightMeasure).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MMerchantMarinerDocumentType)obj);
        }

        /// <summary>
        /// Returns true if MMerchantMarinerDocumentType instances are equal
        /// </summary>
        /// <param name="other">Instance of MMerchantMarinerDocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MMerchantMarinerDocumentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    IssueDate == other.IssueDate ||
                    IssueDate != null &&
                    IssueDate.SequenceEqual(other.IssueDate)
                ) && 
                (
                    IssuerLocation == other.IssuerLocation ||
                    IssuerLocation != null &&
                    IssuerLocation.SequenceEqual(other.IssuerLocation)
                ) && 
                (
                    IssuingOrganization == other.IssuingOrganization ||
                    IssuingOrganization != null &&
                    IssuingOrganization.SequenceEqual(other.IssuingOrganization)
                ) && 
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.SequenceEqual(other.Rating)
                ) && 
                (
                    PersonAddress == other.PersonAddress ||
                    PersonAddress != null &&
                    PersonAddress.SequenceEqual(other.PersonAddress)
                ) && 
                (
                    PersonBirthDate == other.PersonBirthDate ||
                    PersonBirthDate != null &&
                    PersonBirthDate.SequenceEqual(other.PersonBirthDate)
                ) && 
                (
                    PersonCitizenshipIso3166Alpha2Code == other.PersonCitizenshipIso3166Alpha2Code ||
                    PersonCitizenshipIso3166Alpha2Code != null &&
                    PersonCitizenshipIso3166Alpha2Code.SequenceEqual(other.PersonCitizenshipIso3166Alpha2Code)
                ) && 
                (
                    PersonCitizenship == other.PersonCitizenship ||
                    PersonCitizenship != null &&
                    PersonCitizenship.SequenceEqual(other.PersonCitizenship)
                ) && 
                (
                    PersonEyeColorCode == other.PersonEyeColorCode ||
                    PersonEyeColorCode != null &&
                    PersonEyeColorCode.SequenceEqual(other.PersonEyeColorCode)
                ) && 
                (
                    PersonEyeColorRapSheetCode == other.PersonEyeColorRapSheetCode ||
                    PersonEyeColorRapSheetCode != null &&
                    PersonEyeColorRapSheetCode.SequenceEqual(other.PersonEyeColorRapSheetCode)
                ) && 
                (
                    PersonEyeColor == other.PersonEyeColor ||
                    PersonEyeColor != null &&
                    PersonEyeColor.SequenceEqual(other.PersonEyeColor)
                ) && 
                (
                    PersonHairColorCode == other.PersonHairColorCode ||
                    PersonHairColorCode != null &&
                    PersonHairColorCode.SequenceEqual(other.PersonHairColorCode)
                ) && 
                (
                    PersonHairColorRapSheetCode == other.PersonHairColorRapSheetCode ||
                    PersonHairColorRapSheetCode != null &&
                    PersonHairColorRapSheetCode.SequenceEqual(other.PersonHairColorRapSheetCode)
                ) && 
                (
                    PersonHairColor == other.PersonHairColor ||
                    PersonHairColor != null &&
                    PersonHairColor.SequenceEqual(other.PersonHairColor)
                ) && 
                (
                    PersonHeightDescription == other.PersonHeightDescription ||
                    PersonHeightDescription != null &&
                    PersonHeightDescription.SequenceEqual(other.PersonHeightDescription)
                ) && 
                (
                    PersonHeightMeasure == other.PersonHeightMeasure ||
                    PersonHeightMeasure != null &&
                    PersonHeightMeasure.SequenceEqual(other.PersonHeightMeasure)
                ) && 
                (
                    PersonName == other.PersonName ||
                    PersonName != null &&
                    PersonName.SequenceEqual(other.PersonName)
                ) && 
                (
                    PersonSexCode == other.PersonSexCode ||
                    PersonSexCode != null &&
                    PersonSexCode.SequenceEqual(other.PersonSexCode)
                ) && 
                (
                    PersonSexNdExCode == other.PersonSexNdExCode ||
                    PersonSexNdExCode != null &&
                    PersonSexNdExCode.SequenceEqual(other.PersonSexNdExCode)
                ) && 
                (
                    PersonSexRapSheetCode == other.PersonSexRapSheetCode ||
                    PersonSexRapSheetCode != null &&
                    PersonSexRapSheetCode.SequenceEqual(other.PersonSexRapSheetCode)
                ) && 
                (
                    PersonSex == other.PersonSex ||
                    PersonSex != null &&
                    PersonSex.SequenceEqual(other.PersonSex)
                ) && 
                (
                    PersonSsnIdentification == other.PersonSsnIdentification ||
                    PersonSsnIdentification != null &&
                    PersonSsnIdentification.SequenceEqual(other.PersonSsnIdentification)
                ) && 
                (
                    PersonWeightDescription == other.PersonWeightDescription ||
                    PersonWeightDescription != null &&
                    PersonWeightDescription.SequenceEqual(other.PersonWeightDescription)
                ) && 
                (
                    PersonWeightMeasure == other.PersonWeightMeasure ||
                    PersonWeightMeasure != null &&
                    PersonWeightMeasure.SequenceEqual(other.PersonWeightMeasure)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (IssueDate != null)
                    hashCode = hashCode * 59 + IssueDate.GetHashCode();
                    if (IssuerLocation != null)
                    hashCode = hashCode * 59 + IssuerLocation.GetHashCode();
                    if (IssuingOrganization != null)
                    hashCode = hashCode * 59 + IssuingOrganization.GetHashCode();
                    if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (PersonAddress != null)
                    hashCode = hashCode * 59 + PersonAddress.GetHashCode();
                    if (PersonBirthDate != null)
                    hashCode = hashCode * 59 + PersonBirthDate.GetHashCode();
                    if (PersonCitizenshipIso3166Alpha2Code != null)
                    hashCode = hashCode * 59 + PersonCitizenshipIso3166Alpha2Code.GetHashCode();
                    if (PersonCitizenship != null)
                    hashCode = hashCode * 59 + PersonCitizenship.GetHashCode();
                    if (PersonEyeColorCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorCode.GetHashCode();
                    if (PersonEyeColorRapSheetCode != null)
                    hashCode = hashCode * 59 + PersonEyeColorRapSheetCode.GetHashCode();
                    if (PersonEyeColor != null)
                    hashCode = hashCode * 59 + PersonEyeColor.GetHashCode();
                    if (PersonHairColorCode != null)
                    hashCode = hashCode * 59 + PersonHairColorCode.GetHashCode();
                    if (PersonHairColorRapSheetCode != null)
                    hashCode = hashCode * 59 + PersonHairColorRapSheetCode.GetHashCode();
                    if (PersonHairColor != null)
                    hashCode = hashCode * 59 + PersonHairColor.GetHashCode();
                    if (PersonHeightDescription != null)
                    hashCode = hashCode * 59 + PersonHeightDescription.GetHashCode();
                    if (PersonHeightMeasure != null)
                    hashCode = hashCode * 59 + PersonHeightMeasure.GetHashCode();
                    if (PersonName != null)
                    hashCode = hashCode * 59 + PersonName.GetHashCode();
                    if (PersonSexCode != null)
                    hashCode = hashCode * 59 + PersonSexCode.GetHashCode();
                    if (PersonSexNdExCode != null)
                    hashCode = hashCode * 59 + PersonSexNdExCode.GetHashCode();
                    if (PersonSexRapSheetCode != null)
                    hashCode = hashCode * 59 + PersonSexRapSheetCode.GetHashCode();
                    if (PersonSex != null)
                    hashCode = hashCode * 59 + PersonSex.GetHashCode();
                    if (PersonSsnIdentification != null)
                    hashCode = hashCode * 59 + PersonSsnIdentification.GetHashCode();
                    if (PersonWeightDescription != null)
                    hashCode = hashCode * 59 + PersonWeightDescription.GetHashCode();
                    if (PersonWeightMeasure != null)
                    hashCode = hashCode * 59 + PersonWeightMeasure.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MMerchantMarinerDocumentType left, MMerchantMarinerDocumentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MMerchantMarinerDocumentType left, MMerchantMarinerDocumentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
