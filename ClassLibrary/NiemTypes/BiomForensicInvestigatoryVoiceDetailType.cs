/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a Forensic and Investigatory Voice Detail
    /// </summary>
    [DataContract]
    public partial class BiomForensicInvestigatoryVoiceDetailType : IEquatable<BiomForensicInvestigatoryVoiceDetailType>
    { 
        /// <summary>
        /// A collection of a biometric sample. NIEM reference is biom:BiometricCapture
        /// </summary>
        /// <value>A collection of a biometric sample. NIEM reference is biom:BiometricCapture</value>

        [DataMember(Name="biometricCapture")]
        public List<BiomBiometricCaptureType> BiometricCapture { get; set; }

        /// <summary>
        /// A geographical location of the primary subject of a recording at the beginning of a recording segment. NIEM reference is biom:SegmentGeographicalLocation
        /// </summary>
        /// <value>A geographical location of the primary subject of a recording at the beginning of a recording segment. NIEM reference is biom:SegmentGeographicalLocation</value>

        [DataMember(Name="segmentGeographicalLocation")]
        public List<BiomSegmentGeographicalLocationType> SegmentGeographicalLocation { get; set; }

        /// <summary>
        /// A description of an object or file used to store an Audio Recording NIEM reference is biom:AudioObjectDescriptorCode
        /// </summary>
        /// <value>A description of an object or file used to store an Audio Recording NIEM reference is biom:AudioObjectDescriptorCode</value>

        [DataMember(Name="audioObjectDescriptorCode")]
        public List<BiomAudioObjectDescriptorCodeType> AudioObjectDescriptorCode { get; set; }

        /// <summary>
        /// A description of the details surrounding the creation of a recording NIEM reference is biom:RecordingSettingDetail
        /// </summary>
        /// <value>A description of the details surrounding the creation of a recording NIEM reference is biom:RecordingSettingDetail</value>

        [DataMember(Name="recordingSettingDetail")]
        public List<BiomRecordingSettingDetailType> RecordingSettingDetail { get; set; }

        /// <summary>
        /// A kind of content of the voice recording. NIEM reference is biom:RecordingContentDescriptor
        /// </summary>
        /// <value>A kind of content of the voice recording. NIEM reference is biom:RecordingContentDescriptor</value>

        [DataMember(Name="recordingContentDescriptor")]
        public List<BiomRecordingContentDescriptorType> RecordingContentDescriptor { get; set; }

        /// <summary>
        /// A set of information regarding the captured voice NIEM reference is biom:AudioSourceRecorder
        /// </summary>
        /// <value>A set of information regarding the captured voice NIEM reference is biom:AudioSourceRecorder</value>

        [DataMember(Name="audioSourceRecorder")]
        public List<BiomAudioSourceRecorderType> AudioSourceRecorder { get; set; }

        /// <summary>
        /// An acquisition method for the source representation NIEM reference is biom:SourceAcquisition
        /// </summary>
        /// <value>An acquisition method for the source representation NIEM reference is biom:SourceAcquisition</value>

        [DataMember(Name="sourceAcquisition")]
        public List<BiomSourceAcquisitionType> SourceAcquisition { get; set; }

        /// <summary>
        /// A kind of date that a specific biometric data record was created. NIEM reference is biom:RecordCreationDate
        /// </summary>
        /// <value>A kind of date that a specific biometric data record was created. NIEM reference is biom:RecordCreationDate</value>

        [DataMember(Name="recordCreationDate")]
        public List<NcDateType> RecordCreationDate { get; set; }

        /// <summary>
        /// A description of the duration of a recording, as expressed in time, size, and samplings. NIEM reference is biom:RecordingDurationDetail
        /// </summary>
        /// <value>A description of the duration of a recording, as expressed in time, size, and samplings. NIEM reference is biom:RecordingDurationDetail</value>

        [DataMember(Name="recordingDurationDetail")]
        public List<BiomRecordingDurationDetailType> RecordingDurationDetail { get; set; }

        /// <summary>
        /// A physical media containing a recording. NIEM reference is biom:PhysicalMediaObject
        /// </summary>
        /// <value>A physical media containing a recording. NIEM reference is biom:PhysicalMediaObject</value>

        [DataMember(Name="physicalMediaObject")]
        public List<BiomPhysicalMediaObjectType> PhysicalMediaObject { get; set; }

        /// <summary>
        /// A kind of container which contains information about the container format that encapsulates the audio data of the electronic file used to carry the voice data in the digital recording. NIEM reference is biom:DigitalMediaContainer
        /// </summary>
        /// <value>A kind of container which contains information about the container format that encapsulates the audio data of the electronic file used to carry the voice data in the digital recording. NIEM reference is biom:DigitalMediaContainer</value>

        [DataMember(Name="digitalMediaContainer")]
        public List<BiomDigitalMediaContainerType> DigitalMediaContainer { get; set; }

        /// <summary>
        /// A container for descriptive information about the encoding of a digital media data file. NIEM reference is biom:CodecDetails
        /// </summary>
        /// <value>A container for descriptive information about the encoding of a digital media data file. NIEM reference is biom:CodecDetails</value>

        [DataMember(Name="codecDetails")]
        public List<BiomCodecDetailsType> CodecDetails { get; set; }

        /// <summary>
        /// A data type for an indication of whether and by whom a voice recording has been redacted. NIEM reference is biom:RedactionInformation
        /// </summary>
        /// <value>A data type for an indication of whether and by whom a voice recording has been redacted. NIEM reference is biom:RedactionInformation</value>

        [DataMember(Name="redactionInformation")]
        public List<BiomAudioInformationType> RedactionInformation { get; set; }

        /// <summary>
        /// A data type indicates that redaction has occurred and lists the timings within the voice recording of redacted (overwritten) audio segments. NIEM reference is biom:RedactionDiaryInformation
        /// </summary>
        /// <value>A data type indicates that redaction has occurred and lists the timings within the voice recording of redacted (overwritten) audio segments. NIEM reference is biom:RedactionDiaryInformation</value>

        [DataMember(Name="redactionDiaryInformation")]
        public List<BiomDiaryInformationType> RedactionDiaryInformation { get; set; }

        /// <summary>
        /// A description of whether there has been post-recording removal (cutting) of a signal or non-presence of a useful signal from the original recording of the acoustic vocalizations in a way that disrupts time references NIEM reference is biom:DiscontinuityInformation
        /// </summary>
        /// <value>A description of whether there has been post-recording removal (cutting) of a signal or non-presence of a useful signal from the original recording of the acoustic vocalizations in a way that disrupts time references NIEM reference is biom:DiscontinuityInformation</value>

        [DataMember(Name="discontinuityInformation")]
        public List<BiomAudioInformationType> DiscontinuityInformation { get; set; }

        /// <summary>
        /// A data type indicates that discontinuity has occurred and lists the timings within the voice recording of discontinuity audio segments. NIEM reference is biom:DiscontinuityDiaryInformation
        /// </summary>
        /// <value>A data type indicates that discontinuity has occurred and lists the timings within the voice recording of discontinuity audio segments. NIEM reference is biom:DiscontinuityDiaryInformation</value>

        [DataMember(Name="discontinuityDiaryInformation")]
        public List<BiomDiaryInformationType> DiscontinuityDiaryInformation { get; set; }

        /// <summary>
        /// A kind of field that indicates whether the voice recording content has been diarized to indicate the speech segments of interest pertaining to the subject of this voice record. NIEM reference is biom:VocalContentInformation
        /// </summary>
        /// <value>A kind of field that indicates whether the voice recording content has been diarized to indicate the speech segments of interest pertaining to the subject of this voice record. NIEM reference is biom:VocalContentInformation</value>

        [DataMember(Name="vocalContentInformation")]
        public List<BiomContentInformationType> VocalContentInformation { get; set; }

        /// <summary>
        /// A kind of field contains subfields that locate the segments within the voice recording of this Type-11 record that are associated with a single speaker _ the subject of the record (not necessarily the subject of the transaction). NIEM reference is biom:VocalContentDiaryInformation
        /// </summary>
        /// <value>A kind of field contains subfields that locate the segments within the voice recording of this Type-11 record that are associated with a single speaker _ the subject of the record (not necessarily the subject of the transaction). NIEM reference is biom:VocalContentDiaryInformation</value>

        [DataMember(Name="vocalContentDiaryInformation")]
        public List<BiomContentDiaryInformationType> VocalContentDiaryInformation { get; set; }

        /// <summary>
        /// A kind of field that indicates whether the voice recording content has been diarized to indicate the segments of the recording that may contain sounds other than the voice of the subject of the record that could assist in the investigation (such as NIEM reference is biom:OtherContentInformation
        /// </summary>
        /// <value>A kind of field that indicates whether the voice recording content has been diarized to indicate the segments of the recording that may contain sounds other than the voice of the subject of the record that could assist in the investigation (such as NIEM reference is biom:OtherContentInformation</value>

        [DataMember(Name="otherContentInformation")]
        public List<BiomContentInformationType> OtherContentInformation { get; set; }

        /// <summary>
        /// A kind of field contains subfields that locate the segments within the recording of this Type-11 record that may be of interest for investigatory purposes but are not focused upon speech. NIEM reference is biom:OtherContentDiaryInformation
        /// </summary>
        /// <value>A kind of field contains subfields that locate the segments within the recording of this Type-11 record that may be of interest for investigatory purposes but are not focused upon speech. NIEM reference is biom:OtherContentDiaryInformation</value>

        [DataMember(Name="otherContentDiaryInformation")]
        public List<BiomContentDiaryInformationType> OtherContentDiaryInformation { get; set; }

        /// <summary>
        /// A kind of field if Vocal content / VOC is present, then this field shall only be present if DII &#x3D; 1. This field shall only be present if Vocal content diary / VCD is present. If segments have multiple quality values based on different types of quali NIEM reference is biom:VocalSegmentQualityValue
        /// </summary>
        /// <value>A kind of field if Vocal content / VOC is present, then this field shall only be present if DII &#x3D; 1. This field shall only be present if Vocal content diary / VCD is present. If segments have multiple quality values based on different types of quali NIEM reference is biom:VocalSegmentQualityValue</value>

        [DataMember(Name="vocalSegmentQualityValue")]
        public List<BiomVocalSegmentQualityValueType> VocalSegmentQualityValue { get; set; }

        /// <summary>
        /// A list of time segments, each identified as containing a vocal collision (two or more persons talking at once) within the segment. NIEM reference is biom:VocalCollisionIDList
        /// </summary>
        /// <value>A list of time segments, each identified as containing a vocal collision (two or more persons talking at once) within the segment. NIEM reference is biom:VocalCollisionIDList</value>

        [DataMember(Name="vocalCollisionIdList")]
        public List<BiomSegmentIDListType> VocalCollisionIdList { get; set; }

        /// <summary>
        /// A list of identified segments, indicating the priority with which the segments should be processed. NIEM reference is biom:SegmentProcessingPriorityInformation
        /// </summary>
        /// <value>A list of identified segments, indicating the priority with which the segments should be processed. NIEM reference is biom:SegmentProcessingPriorityInformation</value>

        [DataMember(Name="segmentProcessingPriorityInformation")]
        public List<BiomSegmentProcessingPriorityType> SegmentProcessingPriorityInformation { get; set; }

        /// <summary>
        /// A field for an assessment of the content of the voice data within a list of identified time segments, including provision for semantic transcripts, phonetic transcriptions and translations of the segments. NIEM reference is biom:SegmentContentInformation
        /// </summary>
        /// <value>A field for an assessment of the content of the voice data within a list of identified time segments, including provision for semantic transcripts, phonetic transcriptions and translations of the segments. NIEM reference is biom:SegmentContentInformation</value>

        [DataMember(Name="segmentContentInformation")]
        public List<BiomSegmentContentInformationType> SegmentContentInformation { get; set; }

        /// <summary>
        /// A list of speaker speech characteristics assessments. NIEM reference is biom:SegmentSpeakerCharacteristicsInformation
        /// </summary>
        /// <value>A list of speaker speech characteristics assessments. NIEM reference is biom:SegmentSpeakerCharacteristicsInformation</value>

        [DataMember(Name="segmentSpeakerCharacteristicsInformation")]
        public List<BiomSegmentSpeakerCharacteristicsInformationType> SegmentSpeakerCharacteristicsInformation { get; set; }

        /// <summary>
        /// A list of details about transducers used across a recording. NIEM reference is biom:SegmentChannelInformation
        /// </summary>
        /// <value>A list of details about transducers used across a recording. NIEM reference is biom:SegmentChannelInformation</value>

        [DataMember(Name="segmentChannelInformation")]
        public List<BiomSegmentChannelInformationType> SegmentChannelInformation { get; set; }

        /// <summary>
        /// A comment used to note any additional information about the audio information in a record. NIEM reference is biom:AudioCommentText
        /// </summary>
        /// <value>A comment used to note any additional information about the audio information in a record. NIEM reference is biom:AudioCommentText</value>

        [DataMember(Name="audioComment")]
        public List<NcTextType> AudioComment { get; set; }

        /// <summary>
        /// An imagery data block for the image NIEM reference is biom:MedicalImageryDataBlockBinaryObject
        /// </summary>
        /// <value>An imagery data block for the image NIEM reference is biom:MedicalImageryDataBlockBinaryObject</value>

        [DataMember(Name="medicalImageryDataBlockBinaryObject")]
        public List<NiemXsbase64Binary> MedicalImageryDataBlockBinaryObject { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for an analog source representation. NIEM reference is biom:SourceExternalAnalogFileReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for an analog source representation. NIEM reference is biom:SourceExternalAnalogFileReferenceText</value>

        [DataMember(Name="sourceExternalAnalogFileReference")]
        public List<NcTextType> SourceExternalAnalogFileReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital audio source representation. NIEM reference is biom:SourceExternalDigitalAudioReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital audio source representation. NIEM reference is biom:SourceExternalDigitalAudioReferenceText</value>

        [DataMember(Name="sourceExternalDigitalAudioReference")]
        public List<NcTextType> SourceExternalDigitalAudioReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital image source representation. NIEM reference is biom:SourceExternalDigitalImageReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital image source representation. NIEM reference is biom:SourceExternalDigitalImageReferenceText</value>

        [DataMember(Name="sourceExternalDigitalImageReference")]
        public List<NcTextType> SourceExternalDigitalImageReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital video source representation. NIEM reference is biom:SourceExternalDigitalVideoReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital video source representation. NIEM reference is biom:SourceExternalDigitalVideoReferenceText</value>

        [DataMember(Name="sourceExternalDigitalVideoReference")]
        public List<NcTextType> SourceExternalDigitalVideoReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a source representation. NIEM reference is biom:SourceExternalFileReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a source representation. NIEM reference is biom:SourceExternalFileReferenceText</value>

        [DataMember(Name="sourceExternalFileReference")]
        public List<NcTextType> SourceExternalFileReference { get; set; }

        /// <summary>
        /// biomForensicInvestigatoryVoiceDetailType JSON-LD context
        /// </summary>
        /// <value>biomForensicInvestigatoryVoiceDetailType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomForensicInvestigatoryVoiceDetailTypeContextJsonldEnum for ../JSON-LD_Contexts/biomForensicInvestigatoryVoiceDetailTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomForensicInvestigatoryVoiceDetailTypeContext.jsonld")]
            JSONLDContextsbiomForensicInvestigatoryVoiceDetailTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomForensicInvestigatoryVoiceDetailType JSON-LD context
        /// </summary>
        /// <value>biomForensicInvestigatoryVoiceDetailType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomForensicInvestigatoryVoiceDetailType {\n");
            sb.Append("  BiometricCapture: ").Append(BiometricCapture).Append("\n");
            sb.Append("  SegmentGeographicalLocation: ").Append(SegmentGeographicalLocation).Append("\n");
            sb.Append("  AudioObjectDescriptorCode: ").Append(AudioObjectDescriptorCode).Append("\n");
            sb.Append("  RecordingSettingDetail: ").Append(RecordingSettingDetail).Append("\n");
            sb.Append("  RecordingContentDescriptor: ").Append(RecordingContentDescriptor).Append("\n");
            sb.Append("  AudioSourceRecorder: ").Append(AudioSourceRecorder).Append("\n");
            sb.Append("  SourceAcquisition: ").Append(SourceAcquisition).Append("\n");
            sb.Append("  RecordCreationDate: ").Append(RecordCreationDate).Append("\n");
            sb.Append("  RecordingDurationDetail: ").Append(RecordingDurationDetail).Append("\n");
            sb.Append("  PhysicalMediaObject: ").Append(PhysicalMediaObject).Append("\n");
            sb.Append("  DigitalMediaContainer: ").Append(DigitalMediaContainer).Append("\n");
            sb.Append("  CodecDetails: ").Append(CodecDetails).Append("\n");
            sb.Append("  RedactionInformation: ").Append(RedactionInformation).Append("\n");
            sb.Append("  RedactionDiaryInformation: ").Append(RedactionDiaryInformation).Append("\n");
            sb.Append("  DiscontinuityInformation: ").Append(DiscontinuityInformation).Append("\n");
            sb.Append("  DiscontinuityDiaryInformation: ").Append(DiscontinuityDiaryInformation).Append("\n");
            sb.Append("  VocalContentInformation: ").Append(VocalContentInformation).Append("\n");
            sb.Append("  VocalContentDiaryInformation: ").Append(VocalContentDiaryInformation).Append("\n");
            sb.Append("  OtherContentInformation: ").Append(OtherContentInformation).Append("\n");
            sb.Append("  OtherContentDiaryInformation: ").Append(OtherContentDiaryInformation).Append("\n");
            sb.Append("  VocalSegmentQualityValue: ").Append(VocalSegmentQualityValue).Append("\n");
            sb.Append("  VocalCollisionIdList: ").Append(VocalCollisionIdList).Append("\n");
            sb.Append("  SegmentProcessingPriorityInformation: ").Append(SegmentProcessingPriorityInformation).Append("\n");
            sb.Append("  SegmentContentInformation: ").Append(SegmentContentInformation).Append("\n");
            sb.Append("  SegmentSpeakerCharacteristicsInformation: ").Append(SegmentSpeakerCharacteristicsInformation).Append("\n");
            sb.Append("  SegmentChannelInformation: ").Append(SegmentChannelInformation).Append("\n");
            sb.Append("  AudioComment: ").Append(AudioComment).Append("\n");
            sb.Append("  MedicalImageryDataBlockBinaryObject: ").Append(MedicalImageryDataBlockBinaryObject).Append("\n");
            sb.Append("  SourceExternalAnalogFileReference: ").Append(SourceExternalAnalogFileReference).Append("\n");
            sb.Append("  SourceExternalDigitalAudioReference: ").Append(SourceExternalDigitalAudioReference).Append("\n");
            sb.Append("  SourceExternalDigitalImageReference: ").Append(SourceExternalDigitalImageReference).Append("\n");
            sb.Append("  SourceExternalDigitalVideoReference: ").Append(SourceExternalDigitalVideoReference).Append("\n");
            sb.Append("  SourceExternalFileReference: ").Append(SourceExternalFileReference).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomForensicInvestigatoryVoiceDetailType)obj);
        }

        /// <summary>
        /// Returns true if BiomForensicInvestigatoryVoiceDetailType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomForensicInvestigatoryVoiceDetailType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomForensicInvestigatoryVoiceDetailType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BiometricCapture == other.BiometricCapture ||
                    BiometricCapture != null &&
                    BiometricCapture.SequenceEqual(other.BiometricCapture)
                ) && 
                (
                    SegmentGeographicalLocation == other.SegmentGeographicalLocation ||
                    SegmentGeographicalLocation != null &&
                    SegmentGeographicalLocation.SequenceEqual(other.SegmentGeographicalLocation)
                ) && 
                (
                    AudioObjectDescriptorCode == other.AudioObjectDescriptorCode ||
                    AudioObjectDescriptorCode != null &&
                    AudioObjectDescriptorCode.SequenceEqual(other.AudioObjectDescriptorCode)
                ) && 
                (
                    RecordingSettingDetail == other.RecordingSettingDetail ||
                    RecordingSettingDetail != null &&
                    RecordingSettingDetail.SequenceEqual(other.RecordingSettingDetail)
                ) && 
                (
                    RecordingContentDescriptor == other.RecordingContentDescriptor ||
                    RecordingContentDescriptor != null &&
                    RecordingContentDescriptor.SequenceEqual(other.RecordingContentDescriptor)
                ) && 
                (
                    AudioSourceRecorder == other.AudioSourceRecorder ||
                    AudioSourceRecorder != null &&
                    AudioSourceRecorder.SequenceEqual(other.AudioSourceRecorder)
                ) && 
                (
                    SourceAcquisition == other.SourceAcquisition ||
                    SourceAcquisition != null &&
                    SourceAcquisition.SequenceEqual(other.SourceAcquisition)
                ) && 
                (
                    RecordCreationDate == other.RecordCreationDate ||
                    RecordCreationDate != null &&
                    RecordCreationDate.SequenceEqual(other.RecordCreationDate)
                ) && 
                (
                    RecordingDurationDetail == other.RecordingDurationDetail ||
                    RecordingDurationDetail != null &&
                    RecordingDurationDetail.SequenceEqual(other.RecordingDurationDetail)
                ) && 
                (
                    PhysicalMediaObject == other.PhysicalMediaObject ||
                    PhysicalMediaObject != null &&
                    PhysicalMediaObject.SequenceEqual(other.PhysicalMediaObject)
                ) && 
                (
                    DigitalMediaContainer == other.DigitalMediaContainer ||
                    DigitalMediaContainer != null &&
                    DigitalMediaContainer.SequenceEqual(other.DigitalMediaContainer)
                ) && 
                (
                    CodecDetails == other.CodecDetails ||
                    CodecDetails != null &&
                    CodecDetails.SequenceEqual(other.CodecDetails)
                ) && 
                (
                    RedactionInformation == other.RedactionInformation ||
                    RedactionInformation != null &&
                    RedactionInformation.SequenceEqual(other.RedactionInformation)
                ) && 
                (
                    RedactionDiaryInformation == other.RedactionDiaryInformation ||
                    RedactionDiaryInformation != null &&
                    RedactionDiaryInformation.SequenceEqual(other.RedactionDiaryInformation)
                ) && 
                (
                    DiscontinuityInformation == other.DiscontinuityInformation ||
                    DiscontinuityInformation != null &&
                    DiscontinuityInformation.SequenceEqual(other.DiscontinuityInformation)
                ) && 
                (
                    DiscontinuityDiaryInformation == other.DiscontinuityDiaryInformation ||
                    DiscontinuityDiaryInformation != null &&
                    DiscontinuityDiaryInformation.SequenceEqual(other.DiscontinuityDiaryInformation)
                ) && 
                (
                    VocalContentInformation == other.VocalContentInformation ||
                    VocalContentInformation != null &&
                    VocalContentInformation.SequenceEqual(other.VocalContentInformation)
                ) && 
                (
                    VocalContentDiaryInformation == other.VocalContentDiaryInformation ||
                    VocalContentDiaryInformation != null &&
                    VocalContentDiaryInformation.SequenceEqual(other.VocalContentDiaryInformation)
                ) && 
                (
                    OtherContentInformation == other.OtherContentInformation ||
                    OtherContentInformation != null &&
                    OtherContentInformation.SequenceEqual(other.OtherContentInformation)
                ) && 
                (
                    OtherContentDiaryInformation == other.OtherContentDiaryInformation ||
                    OtherContentDiaryInformation != null &&
                    OtherContentDiaryInformation.SequenceEqual(other.OtherContentDiaryInformation)
                ) && 
                (
                    VocalSegmentQualityValue == other.VocalSegmentQualityValue ||
                    VocalSegmentQualityValue != null &&
                    VocalSegmentQualityValue.SequenceEqual(other.VocalSegmentQualityValue)
                ) && 
                (
                    VocalCollisionIdList == other.VocalCollisionIdList ||
                    VocalCollisionIdList != null &&
                    VocalCollisionIdList.SequenceEqual(other.VocalCollisionIdList)
                ) && 
                (
                    SegmentProcessingPriorityInformation == other.SegmentProcessingPriorityInformation ||
                    SegmentProcessingPriorityInformation != null &&
                    SegmentProcessingPriorityInformation.SequenceEqual(other.SegmentProcessingPriorityInformation)
                ) && 
                (
                    SegmentContentInformation == other.SegmentContentInformation ||
                    SegmentContentInformation != null &&
                    SegmentContentInformation.SequenceEqual(other.SegmentContentInformation)
                ) && 
                (
                    SegmentSpeakerCharacteristicsInformation == other.SegmentSpeakerCharacteristicsInformation ||
                    SegmentSpeakerCharacteristicsInformation != null &&
                    SegmentSpeakerCharacteristicsInformation.SequenceEqual(other.SegmentSpeakerCharacteristicsInformation)
                ) && 
                (
                    SegmentChannelInformation == other.SegmentChannelInformation ||
                    SegmentChannelInformation != null &&
                    SegmentChannelInformation.SequenceEqual(other.SegmentChannelInformation)
                ) && 
                (
                    AudioComment == other.AudioComment ||
                    AudioComment != null &&
                    AudioComment.SequenceEqual(other.AudioComment)
                ) && 
                (
                    MedicalImageryDataBlockBinaryObject == other.MedicalImageryDataBlockBinaryObject ||
                    MedicalImageryDataBlockBinaryObject != null &&
                    MedicalImageryDataBlockBinaryObject.SequenceEqual(other.MedicalImageryDataBlockBinaryObject)
                ) && 
                (
                    SourceExternalAnalogFileReference == other.SourceExternalAnalogFileReference ||
                    SourceExternalAnalogFileReference != null &&
                    SourceExternalAnalogFileReference.SequenceEqual(other.SourceExternalAnalogFileReference)
                ) && 
                (
                    SourceExternalDigitalAudioReference == other.SourceExternalDigitalAudioReference ||
                    SourceExternalDigitalAudioReference != null &&
                    SourceExternalDigitalAudioReference.SequenceEqual(other.SourceExternalDigitalAudioReference)
                ) && 
                (
                    SourceExternalDigitalImageReference == other.SourceExternalDigitalImageReference ||
                    SourceExternalDigitalImageReference != null &&
                    SourceExternalDigitalImageReference.SequenceEqual(other.SourceExternalDigitalImageReference)
                ) && 
                (
                    SourceExternalDigitalVideoReference == other.SourceExternalDigitalVideoReference ||
                    SourceExternalDigitalVideoReference != null &&
                    SourceExternalDigitalVideoReference.SequenceEqual(other.SourceExternalDigitalVideoReference)
                ) && 
                (
                    SourceExternalFileReference == other.SourceExternalFileReference ||
                    SourceExternalFileReference != null &&
                    SourceExternalFileReference.SequenceEqual(other.SourceExternalFileReference)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BiometricCapture != null)
                    hashCode = hashCode * 59 + BiometricCapture.GetHashCode();
                    if (SegmentGeographicalLocation != null)
                    hashCode = hashCode * 59 + SegmentGeographicalLocation.GetHashCode();
                    if (AudioObjectDescriptorCode != null)
                    hashCode = hashCode * 59 + AudioObjectDescriptorCode.GetHashCode();
                    if (RecordingSettingDetail != null)
                    hashCode = hashCode * 59 + RecordingSettingDetail.GetHashCode();
                    if (RecordingContentDescriptor != null)
                    hashCode = hashCode * 59 + RecordingContentDescriptor.GetHashCode();
                    if (AudioSourceRecorder != null)
                    hashCode = hashCode * 59 + AudioSourceRecorder.GetHashCode();
                    if (SourceAcquisition != null)
                    hashCode = hashCode * 59 + SourceAcquisition.GetHashCode();
                    if (RecordCreationDate != null)
                    hashCode = hashCode * 59 + RecordCreationDate.GetHashCode();
                    if (RecordingDurationDetail != null)
                    hashCode = hashCode * 59 + RecordingDurationDetail.GetHashCode();
                    if (PhysicalMediaObject != null)
                    hashCode = hashCode * 59 + PhysicalMediaObject.GetHashCode();
                    if (DigitalMediaContainer != null)
                    hashCode = hashCode * 59 + DigitalMediaContainer.GetHashCode();
                    if (CodecDetails != null)
                    hashCode = hashCode * 59 + CodecDetails.GetHashCode();
                    if (RedactionInformation != null)
                    hashCode = hashCode * 59 + RedactionInformation.GetHashCode();
                    if (RedactionDiaryInformation != null)
                    hashCode = hashCode * 59 + RedactionDiaryInformation.GetHashCode();
                    if (DiscontinuityInformation != null)
                    hashCode = hashCode * 59 + DiscontinuityInformation.GetHashCode();
                    if (DiscontinuityDiaryInformation != null)
                    hashCode = hashCode * 59 + DiscontinuityDiaryInformation.GetHashCode();
                    if (VocalContentInformation != null)
                    hashCode = hashCode * 59 + VocalContentInformation.GetHashCode();
                    if (VocalContentDiaryInformation != null)
                    hashCode = hashCode * 59 + VocalContentDiaryInformation.GetHashCode();
                    if (OtherContentInformation != null)
                    hashCode = hashCode * 59 + OtherContentInformation.GetHashCode();
                    if (OtherContentDiaryInformation != null)
                    hashCode = hashCode * 59 + OtherContentDiaryInformation.GetHashCode();
                    if (VocalSegmentQualityValue != null)
                    hashCode = hashCode * 59 + VocalSegmentQualityValue.GetHashCode();
                    if (VocalCollisionIdList != null)
                    hashCode = hashCode * 59 + VocalCollisionIdList.GetHashCode();
                    if (SegmentProcessingPriorityInformation != null)
                    hashCode = hashCode * 59 + SegmentProcessingPriorityInformation.GetHashCode();
                    if (SegmentContentInformation != null)
                    hashCode = hashCode * 59 + SegmentContentInformation.GetHashCode();
                    if (SegmentSpeakerCharacteristicsInformation != null)
                    hashCode = hashCode * 59 + SegmentSpeakerCharacteristicsInformation.GetHashCode();
                    if (SegmentChannelInformation != null)
                    hashCode = hashCode * 59 + SegmentChannelInformation.GetHashCode();
                    if (AudioComment != null)
                    hashCode = hashCode * 59 + AudioComment.GetHashCode();
                    if (MedicalImageryDataBlockBinaryObject != null)
                    hashCode = hashCode * 59 + MedicalImageryDataBlockBinaryObject.GetHashCode();
                    if (SourceExternalAnalogFileReference != null)
                    hashCode = hashCode * 59 + SourceExternalAnalogFileReference.GetHashCode();
                    if (SourceExternalDigitalAudioReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalAudioReference.GetHashCode();
                    if (SourceExternalDigitalImageReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalImageReference.GetHashCode();
                    if (SourceExternalDigitalVideoReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalVideoReference.GetHashCode();
                    if (SourceExternalFileReference != null)
                    hashCode = hashCode * 59 + SourceExternalFileReference.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomForensicInvestigatoryVoiceDetailType left, BiomForensicInvestigatoryVoiceDetailType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomForensicInvestigatoryVoiceDetailType left, BiomForensicInvestigatoryVoiceDetailType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
