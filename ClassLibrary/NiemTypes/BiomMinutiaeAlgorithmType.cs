/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an algorithm used to capture minutiae
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaeAlgorithmType : IEquatable<BiomMinutiaeAlgorithmType>
    { 
        /// <summary>
        /// A name of an algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithmName
        /// </summary>
        /// <value>A name of an algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithmName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// A kind of version of an algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithmVersionText
        /// </summary>
        /// <value>A kind of version of an algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithmVersionText</value>

        [DataMember(Name="version")]
        public List<NcTextType> Version { get; set; }

        /// <summary>
        /// biomMinutiaeAlgorithmType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeAlgorithmType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaeAlgorithmTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaeAlgorithmTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaeAlgorithmTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaeAlgorithmTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaeAlgorithmType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeAlgorithmType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaeAlgorithmType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaeAlgorithmType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaeAlgorithmType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaeAlgorithmType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaeAlgorithmType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.SequenceEqual(other.Version)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaeAlgorithmType left, BiomMinutiaeAlgorithmType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaeAlgorithmType left, BiomMinutiaeAlgorithmType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
