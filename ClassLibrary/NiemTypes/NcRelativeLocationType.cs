/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a location identified by its proximity to another location.
    /// </summary>
    [DataContract]
    public partial class NcRelativeLocationType : IEquatable<NcRelativeLocationType>
    { 
        /// <summary>
        /// A description of how to reach a location from a certain starting point. NIEM reference is nc:RelativeLocationDescriptionText
        /// </summary>
        /// <value>A description of how to reach a location from a certain starting point. NIEM reference is nc:RelativeLocationDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A relative compass direction of a location or movement from a starting point. NIEM reference is nc:RelativeLocationDirectionCode
        /// </summary>
        /// <value>A relative compass direction of a location or movement from a starting point. NIEM reference is nc:RelativeLocationDirectionCode</value>

        [DataMember(Name="directionCode")]
        public List<NcDirectionCodeType> DirectionCode { get; set; }

        /// <summary>
        /// A relative direction of a location or movement from a starting point. NIEM reference is nc:RelativeLocationDirectionText
        /// </summary>
        /// <value>A relative direction of a location or movement from a starting point. NIEM reference is nc:RelativeLocationDirectionText</value>

        [DataMember(Name="direction")]
        public List<NcTextType> Direction { get; set; }

        /// <summary>
        /// A measurement of the distance of a location from a starting point. NIEM reference is nc:RelativeLocationDistanceMeasure
        /// </summary>
        /// <value>A measurement of the distance of a location from a starting point. NIEM reference is nc:RelativeLocationDistanceMeasure</value>

        [DataMember(Name="distanceMeasure")]
        public List<NcLengthMeasureType> DistanceMeasure { get; set; }

        /// <summary>
        /// A heading of a direction from a starting point. NIEM reference is nc:RelativeLocationHeadingValue
        /// </summary>
        /// <value>A heading of a direction from a starting point. NIEM reference is nc:RelativeLocationHeadingValue</value>

        [DataMember(Name="headingValue")]
        public List<NcRelativeLocationHeadingType> HeadingValue { get; set; }

        /// <summary>
        /// A starting point used as a basis to determine the location of another point. NIEM reference is nc:RelativeLocationReferencePoint
        /// </summary>
        /// <value>A starting point used as a basis to determine the location of another point. NIEM reference is nc:RelativeLocationReferencePoint</value>

        [DataMember(Name="referencePoint")]
        public List<NcLocationType> ReferencePoint { get; set; }

        /// <summary>
        /// Additional information about a relative location. NIEM reference is im:RelativeLocationAugmentation
        /// </summary>
        /// <value>Additional information about a relative location. NIEM reference is im:RelativeLocationAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ImRelativeLocationAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncRelativeLocationType JSON-LD context
        /// </summary>
        /// <value>ncRelativeLocationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncRelativeLocationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncRelativeLocationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncRelativeLocationTypeContext.jsonld")]
            JSONLDContextsncRelativeLocationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncRelativeLocationType JSON-LD context
        /// </summary>
        /// <value>ncRelativeLocationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcRelativeLocationType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DirectionCode: ").Append(DirectionCode).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  DistanceMeasure: ").Append(DistanceMeasure).Append("\n");
            sb.Append("  HeadingValue: ").Append(HeadingValue).Append("\n");
            sb.Append("  ReferencePoint: ").Append(ReferencePoint).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcRelativeLocationType)obj);
        }

        /// <summary>
        /// Returns true if NcRelativeLocationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcRelativeLocationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcRelativeLocationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DirectionCode == other.DirectionCode ||
                    DirectionCode != null &&
                    DirectionCode.SequenceEqual(other.DirectionCode)
                ) && 
                (
                    Direction == other.Direction ||
                    Direction != null &&
                    Direction.SequenceEqual(other.Direction)
                ) && 
                (
                    DistanceMeasure == other.DistanceMeasure ||
                    DistanceMeasure != null &&
                    DistanceMeasure.SequenceEqual(other.DistanceMeasure)
                ) && 
                (
                    HeadingValue == other.HeadingValue ||
                    HeadingValue != null &&
                    HeadingValue.SequenceEqual(other.HeadingValue)
                ) && 
                (
                    ReferencePoint == other.ReferencePoint ||
                    ReferencePoint != null &&
                    ReferencePoint.SequenceEqual(other.ReferencePoint)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DirectionCode != null)
                    hashCode = hashCode * 59 + DirectionCode.GetHashCode();
                    if (Direction != null)
                    hashCode = hashCode * 59 + Direction.GetHashCode();
                    if (DistanceMeasure != null)
                    hashCode = hashCode * 59 + DistanceMeasure.GetHashCode();
                    if (HeadingValue != null)
                    hashCode = hashCode * 59 + HeadingValue.GetHashCode();
                    if (ReferencePoint != null)
                    hashCode = hashCode * 59 + ReferencePoint.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcRelativeLocationType left, NcRelativeLocationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcRelativeLocationType left, NcRelativeLocationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
