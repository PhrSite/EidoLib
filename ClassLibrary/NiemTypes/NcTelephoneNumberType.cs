/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a telephone number for a telecommunication device.
    /// </summary>
    [DataContract]
    public partial class NcTelephoneNumberType : IEquatable<NcTelephoneNumberType>
    { 
        /// <summary>
        /// A telephone number consisting of a shortened sequence of numbers that can be used within a local telephone system, such as a particular network or a corporate phone system. NIEM reference is nc:DirectDialTelephoneNumber
        /// </summary>
        /// <value>A telephone number consisting of a shortened sequence of numbers that can be used within a local telephone system, such as a particular network or a corporate phone system. NIEM reference is nc:DirectDialTelephoneNumber</value>

        [DataMember(Name="directDial")]
        public List<NcDirectDialTelephoneNumberType> DirectDial { get; set; }

        /// <summary>
        /// A full telephone number. NIEM reference is nc:FullTelephoneNumber
        /// </summary>
        /// <value>A full telephone number. NIEM reference is nc:FullTelephoneNumber</value>

        [DataMember(Name="full")]
        public List<NcFullTelephoneNumberType> Full { get; set; }

        /// <summary>
        /// An international telephone number. NIEM reference is nc:InternationalTelephoneNumber
        /// </summary>
        /// <value>An international telephone number. NIEM reference is nc:InternationalTelephoneNumber</value>

        [DataMember(Name="international")]
        public List<NcInternationalTelephoneNumberType> International { get; set; }

        /// <summary>
        /// A North American Numbering Plan telephone number. NIEM reference is nc:NANPTelephoneNumber
        /// </summary>
        /// <value>A North American Numbering Plan telephone number. NIEM reference is nc:NANPTelephoneNumber</value>

        [DataMember(Name="nanp")]
        public List<NcNANPTelephoneNumberType> Nanp { get; set; }

        /// <summary>
        /// A kind of telephone number. NIEM reference is j:TelephoneNumberCategoryCode
        /// </summary>
        /// <value>A kind of telephone number. NIEM reference is j:TelephoneNumberCategoryCode</value>

        [DataMember(Name="jCategoryCode")]
        public List<NdexTelephoneNumberCategoryCodeType> JCategoryCode { get; set; }

        /// <summary>
        /// A kind of telephone number. NIEM reference is mo:TelephoneNumberCategoryCode
        /// </summary>
        /// <value>A kind of telephone number. NIEM reference is mo:TelephoneNumberCategoryCode</value>

        [DataMember(Name="moCategoryCode")]
        public List<string> MoCategoryCode { get; set; }

        /// <summary>
        /// A kind of telephone number. NIEM reference is nc:TelephoneNumberCategoryCode
        /// </summary>
        /// <value>A kind of telephone number. NIEM reference is nc:TelephoneNumberCategoryCode</value>

        [DataMember(Name="ncCategoryCode")]
        public List<XCardTelephoneCategoryCodeType> NcCategoryCode { get; set; }

        /// <summary>
        /// A kind of telephone number. NIEM reference is nc:TelephoneNumberCategoryText
        /// </summary>
        /// <value>A kind of telephone number. NIEM reference is nc:TelephoneNumberCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A description of a telephone number. NIEM reference is nc:TelephoneNumberDescriptionText
        /// </summary>
        /// <value>A description of a telephone number. NIEM reference is nc:TelephoneNumberDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// Additional information about a telephone number. NIEM reference is scr:TelephoneNumberAugmentation
        /// </summary>
        /// <value>Additional information about a telephone number. NIEM reference is scr:TelephoneNumberAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ScrTelephoneNumberAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncTelephoneNumberType JSON-LD context
        /// </summary>
        /// <value>ncTelephoneNumberType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncTelephoneNumberTypeContextJsonldEnum for ../JSON-LD_Contexts/ncTelephoneNumberTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncTelephoneNumberTypeContext.jsonld")]
            JSONLDContextsncTelephoneNumberTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncTelephoneNumberType JSON-LD context
        /// </summary>
        /// <value>ncTelephoneNumberType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcTelephoneNumberType {\n");
            sb.Append("  DirectDial: ").Append(DirectDial).Append("\n");
            sb.Append("  Full: ").Append(Full).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("  Nanp: ").Append(Nanp).Append("\n");
            sb.Append("  JCategoryCode: ").Append(JCategoryCode).Append("\n");
            sb.Append("  MoCategoryCode: ").Append(MoCategoryCode).Append("\n");
            sb.Append("  NcCategoryCode: ").Append(NcCategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcTelephoneNumberType)obj);
        }

        /// <summary>
        /// Returns true if NcTelephoneNumberType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcTelephoneNumberType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcTelephoneNumberType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DirectDial == other.DirectDial ||
                    DirectDial != null &&
                    DirectDial.SequenceEqual(other.DirectDial)
                ) && 
                (
                    Full == other.Full ||
                    Full != null &&
                    Full.SequenceEqual(other.Full)
                ) && 
                (
                    International == other.International ||
                    International != null &&
                    International.SequenceEqual(other.International)
                ) && 
                (
                    Nanp == other.Nanp ||
                    Nanp != null &&
                    Nanp.SequenceEqual(other.Nanp)
                ) && 
                (
                    JCategoryCode == other.JCategoryCode ||
                    JCategoryCode != null &&
                    JCategoryCode.SequenceEqual(other.JCategoryCode)
                ) && 
                (
                    MoCategoryCode == other.MoCategoryCode ||
                    MoCategoryCode != null &&
                    MoCategoryCode.SequenceEqual(other.MoCategoryCode)
                ) && 
                (
                    NcCategoryCode == other.NcCategoryCode ||
                    NcCategoryCode != null &&
                    NcCategoryCode.SequenceEqual(other.NcCategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DirectDial != null)
                    hashCode = hashCode * 59 + DirectDial.GetHashCode();
                    if (Full != null)
                    hashCode = hashCode * 59 + Full.GetHashCode();
                    if (International != null)
                    hashCode = hashCode * 59 + International.GetHashCode();
                    if (Nanp != null)
                    hashCode = hashCode * 59 + Nanp.GetHashCode();
                    if (JCategoryCode != null)
                    hashCode = hashCode * 59 + JCategoryCode.GetHashCode();
                    if (MoCategoryCode != null)
                    hashCode = hashCode * 59 + MoCategoryCode.GetHashCode();
                    if (NcCategoryCode != null)
                    hashCode = hashCode * 59 + NcCategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcTelephoneNumberType left, NcTelephoneNumberType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcTelephoneNumberType left, NcTelephoneNumberType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
