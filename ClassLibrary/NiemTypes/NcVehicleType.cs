/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a conveyance designed to carry an operator, passengers and/or cargo, over land.
    /// </summary>
    [DataContract]
    public partial class NcVehicleType : NcConveyanceType, IEquatable<NcVehicleType>
    { 
        /// <summary>
        /// True if a vehicle is a commercial motor vehicle; false otherwise. NIEM reference is nc:VehicleCMVIndicator
        /// </summary>
        /// <value>True if a vehicle is a commercial motor vehicle; false otherwise. NIEM reference is nc:VehicleCMVIndicator</value>

        [DataMember(Name="isCmv")]
        public List<NiemXsboolean> IsCmv { get; set; }

        /// <summary>
        /// A color of the interior of a vehicle. NIEM reference is nc:VehicleColorInteriorText
        /// </summary>
        /// <value>A color of the interior of a vehicle. NIEM reference is nc:VehicleColorInteriorText</value>

        [DataMember(Name="colorInterior")]
        public List<NcTextType> ColorInterior { get; set; }

        /// <summary>
        /// A number of doors on a vehicle. NIEM reference is nc:VehicleDoorQuantity
        /// </summary>
        /// <value>A number of doors on a vehicle. NIEM reference is nc:VehicleDoorQuantity</value>

        [DataMember(Name="doorQuantity")]
        public List<NiemXsnonNegativeInteger> DoorQuantity { get; set; }

        /// <summary>
        /// A unique identification for a specific vehicle. NIEM reference is nc:VehicleIdentification
        /// </summary>
        /// <value>A unique identification for a specific vehicle. NIEM reference is nc:VehicleIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A manufacturer of a vehicle. NIEM reference is j:VehicleMakeCode
        /// </summary>
        /// <value>A manufacturer of a vehicle. NIEM reference is j:VehicleMakeCode</value>

        [DataMember(Name="makeCode")]
        public List<NcicVMACodeType> MakeCode { get; set; }

        /// <summary>
        /// A manufacturer of a device pulled by a vehicle for the purpose of transporting a vessel over land. NIEM reference is j:VesselTrailerMakeCode
        /// </summary>
        /// <value>A manufacturer of a device pulled by a vehicle for the purpose of transporting a vessel over land. NIEM reference is j:VesselTrailerMakeCode</value>

        [DataMember(Name="vesselTrailerMakeCode")]
        public List<NcicTrailersCodeType> VesselTrailerMakeCode { get; set; }

        /// <summary>
        /// A specific design or class of vehicle made by a manufacturer. NIEM reference is j:VehicleModelCode
        /// </summary>
        /// <value>A specific design or class of vehicle made by a manufacturer. NIEM reference is j:VehicleModelCode</value>

        [DataMember(Name="modelCode")]
        public List<NcicVMOCodeType> ModelCode { get; set; }

        /// <summary>
        /// A manufacturer&#x27;s suggested retail price of a vehicle; a price at which a manufacturer recommends a vehicle be sold. NIEM reference is nc:VehicleMSRPAmount
        /// </summary>
        /// <value>A manufacturer&#x27;s suggested retail price of a vehicle; a price at which a manufacturer recommends a vehicle be sold. NIEM reference is nc:VehicleMSRPAmount</value>

        [DataMember(Name="msrpAmount")]
        public List<NcAmountType> MsrpAmount { get; set; }

        /// <summary>
        /// A reading of a vehicle odometer to the nearest mile or kilometer. NIEM reference is nc:VehicleOdometerReadingMeasure
        /// </summary>
        /// <value>A reading of a vehicle odometer to the nearest mile or kilometer. NIEM reference is nc:VehicleOdometerReadingMeasure</value>

        [DataMember(Name="odometerReadingMeasure")]
        public List<NcLengthMeasureType> OdometerReadingMeasure { get; set; }

        /// <summary>
        /// A total number of people a vehicle is designed to safely transport. NIEM reference is nc:VehiclePassengerSafeQuantity
        /// </summary>
        /// <value>A total number of people a vehicle is designed to safely transport. NIEM reference is nc:VehiclePassengerSafeQuantity</value>

        [DataMember(Name="passengerSafeQuantity")]
        public List<NiemXsnonNegativeInteger> PassengerSafeQuantity { get; set; }

        /// <summary>
        /// A total number of seats available in a vehicle. NIEM reference is nc:VehicleSeatingQuantity
        /// </summary>
        /// <value>A total number of seats available in a vehicle. NIEM reference is nc:VehicleSeatingQuantity</value>

        [DataMember(Name="seatingQuantity")]
        public List<NiemXsnonNegativeInteger> SeatingQuantity { get; set; }

        /// <summary>
        /// A kind of transmission unit in a vehicle. NIEM reference is j:VehicleTransmissionCategoryCode
        /// </summary>
        /// <value>A kind of transmission unit in a vehicle. NIEM reference is j:VehicleTransmissionCategoryCode</value>

        [DataMember(Name="transmissionCategoryCode")]
        public List<AamvaD20VehicleTransmissionCategoryCodeType> TransmissionCategoryCode { get; set; }

        /// <summary>
        /// A kind of transmission unit in a vehicle. NIEM reference is nc:VehicleTransmissionCategoryText
        /// </summary>
        /// <value>A kind of transmission unit in a vehicle. NIEM reference is nc:VehicleTransmissionCategoryText</value>

        [DataMember(Name="transmissionCategory")]
        public List<NcTextType> TransmissionCategory { get; set; }

        /// <summary>
        /// A count of common axles of rotation of one or more wheels of a vehicle, whether power driven or freely rotating. NIEM reference is nc:VehicleAxleQuantity
        /// </summary>
        /// <value>A count of common axles of rotation of one or more wheels of a vehicle, whether power driven or freely rotating. NIEM reference is nc:VehicleAxleQuantity</value>

        [DataMember(Name="axleQuantity")]
        public List<NiemXsnonNegativeInteger> AxleQuantity { get; set; }

        /// <summary>
        /// An observed, estimated, or measured weight of the conveyance. NIEM reference is nc:VehicleCurrentWeightMeasure
        /// </summary>
        /// <value>An observed, estimated, or measured weight of the conveyance. NIEM reference is nc:VehicleCurrentWeightMeasure</value>

        [DataMember(Name="currentWeightMeasure")]
        public List<NcWeightMeasureType> CurrentWeightMeasure { get; set; }

        /// <summary>
        /// A sum of values specified by the manufacturer(s) for a truck tractor or trailer for the units that make up a combination. NIEM reference is nc:VehicleGrossLadenSumWeightMeasure
        /// </summary>
        /// <value>A sum of values specified by the manufacturer(s) for a truck tractor or trailer for the units that make up a combination. NIEM reference is nc:VehicleGrossLadenSumWeightMeasure</value>

        [DataMember(Name="grossLadenSumWeightMeasure")]
        public List<NcWeightMeasureType> GrossLadenSumWeightMeasure { get; set; }

        /// <summary>
        /// A value specified by the manufacturer for a single unit truck, truck tractor, or trailer. NIEM reference is nc:VehicleGrossLadenUnitWeightMeasure
        /// </summary>
        /// <value>A value specified by the manufacturer for a single unit truck, truck tractor, or trailer. NIEM reference is nc:VehicleGrossLadenUnitWeightMeasure</value>

        [DataMember(Name="grossLadenUnitWeightMeasure")]
        public List<NcWeightMeasureType> GrossLadenUnitWeightMeasure { get; set; }

        /// <summary>
        /// A weight of a vehicle fully equipped for service, not including the weight of the payload. NIEM reference is nc:VehicleUnladenWeightMeasure
        /// </summary>
        /// <value>A weight of a vehicle fully equipped for service, not including the weight of the payload. NIEM reference is nc:VehicleUnladenWeightMeasure</value>

        [DataMember(Name="unladenWeightMeasure")]
        public List<NcWeightMeasureType> UnladenWeightMeasure { get; set; }

        /// <summary>
        /// A maximum load weight intended for the vehicle to transport, assigned at the point of manufacture. NIEM reference is nc:VehicleMaximumLoadWeightMeasure
        /// </summary>
        /// <value>A maximum load weight intended for the vehicle to transport, assigned at the point of manufacture. NIEM reference is nc:VehicleMaximumLoadWeightMeasure</value>

        [DataMember(Name="maximumLoadWeightMeasure")]
        public List<NcWeightMeasureType> MaximumLoadWeightMeasure { get; set; }

        /// <summary>
        /// Additional information about a vehicle. NIEM reference is j:VehicleAugmentation
        /// </summary>
        /// <value>Additional information about a vehicle. NIEM reference is j:VehicleAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JVehicleAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a conveyance. NIEM reference is scr:VehicleAugmentation
        /// </summary>
        /// <value>Additional information about a conveyance. NIEM reference is scr:VehicleAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrVehicleAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// ncVehicleType JSON-LD context
        /// </summary>
        /// <value>ncVehicleType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncVehicleTypeContextJsonldEnum for ../JSON-LD_Contexts/ncVehicleTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncVehicleTypeContext.jsonld")]
            JSONLDContextsncVehicleTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncVehicleType JSON-LD context
        /// </summary>
        /// <value>ncVehicleType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcVehicleType {\n");
            sb.Append("  IsCmv: ").Append(IsCmv).Append("\n");
            sb.Append("  ColorInterior: ").Append(ColorInterior).Append("\n");
            sb.Append("  DoorQuantity: ").Append(DoorQuantity).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  MakeCode: ").Append(MakeCode).Append("\n");
            sb.Append("  VesselTrailerMakeCode: ").Append(VesselTrailerMakeCode).Append("\n");
            sb.Append("  ModelCode: ").Append(ModelCode).Append("\n");
            sb.Append("  MsrpAmount: ").Append(MsrpAmount).Append("\n");
            sb.Append("  OdometerReadingMeasure: ").Append(OdometerReadingMeasure).Append("\n");
            sb.Append("  PassengerSafeQuantity: ").Append(PassengerSafeQuantity).Append("\n");
            sb.Append("  SeatingQuantity: ").Append(SeatingQuantity).Append("\n");
            sb.Append("  TransmissionCategoryCode: ").Append(TransmissionCategoryCode).Append("\n");
            sb.Append("  TransmissionCategory: ").Append(TransmissionCategory).Append("\n");
            sb.Append("  AxleQuantity: ").Append(AxleQuantity).Append("\n");
            sb.Append("  CurrentWeightMeasure: ").Append(CurrentWeightMeasure).Append("\n");
            sb.Append("  GrossLadenSumWeightMeasure: ").Append(GrossLadenSumWeightMeasure).Append("\n");
            sb.Append("  GrossLadenUnitWeightMeasure: ").Append(GrossLadenUnitWeightMeasure).Append("\n");
            sb.Append("  UnladenWeightMeasure: ").Append(UnladenWeightMeasure).Append("\n");
            sb.Append("  MaximumLoadWeightMeasure: ").Append(MaximumLoadWeightMeasure).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcVehicleType)obj);
        }

        /// <summary>
        /// Returns true if NcVehicleType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcVehicleType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcVehicleType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsCmv == other.IsCmv ||
                    IsCmv != null &&
                    IsCmv.SequenceEqual(other.IsCmv)
                ) && 
                (
                    ColorInterior == other.ColorInterior ||
                    ColorInterior != null &&
                    ColorInterior.SequenceEqual(other.ColorInterior)
                ) && 
                (
                    DoorQuantity == other.DoorQuantity ||
                    DoorQuantity != null &&
                    DoorQuantity.SequenceEqual(other.DoorQuantity)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    MakeCode == other.MakeCode ||
                    MakeCode != null &&
                    MakeCode.SequenceEqual(other.MakeCode)
                ) && 
                (
                    VesselTrailerMakeCode == other.VesselTrailerMakeCode ||
                    VesselTrailerMakeCode != null &&
                    VesselTrailerMakeCode.SequenceEqual(other.VesselTrailerMakeCode)
                ) && 
                (
                    ModelCode == other.ModelCode ||
                    ModelCode != null &&
                    ModelCode.SequenceEqual(other.ModelCode)
                ) && 
                (
                    MsrpAmount == other.MsrpAmount ||
                    MsrpAmount != null &&
                    MsrpAmount.SequenceEqual(other.MsrpAmount)
                ) && 
                (
                    OdometerReadingMeasure == other.OdometerReadingMeasure ||
                    OdometerReadingMeasure != null &&
                    OdometerReadingMeasure.SequenceEqual(other.OdometerReadingMeasure)
                ) && 
                (
                    PassengerSafeQuantity == other.PassengerSafeQuantity ||
                    PassengerSafeQuantity != null &&
                    PassengerSafeQuantity.SequenceEqual(other.PassengerSafeQuantity)
                ) && 
                (
                    SeatingQuantity == other.SeatingQuantity ||
                    SeatingQuantity != null &&
                    SeatingQuantity.SequenceEqual(other.SeatingQuantity)
                ) && 
                (
                    TransmissionCategoryCode == other.TransmissionCategoryCode ||
                    TransmissionCategoryCode != null &&
                    TransmissionCategoryCode.SequenceEqual(other.TransmissionCategoryCode)
                ) && 
                (
                    TransmissionCategory == other.TransmissionCategory ||
                    TransmissionCategory != null &&
                    TransmissionCategory.SequenceEqual(other.TransmissionCategory)
                ) && 
                (
                    AxleQuantity == other.AxleQuantity ||
                    AxleQuantity != null &&
                    AxleQuantity.SequenceEqual(other.AxleQuantity)
                ) && 
                (
                    CurrentWeightMeasure == other.CurrentWeightMeasure ||
                    CurrentWeightMeasure != null &&
                    CurrentWeightMeasure.SequenceEqual(other.CurrentWeightMeasure)
                ) && 
                (
                    GrossLadenSumWeightMeasure == other.GrossLadenSumWeightMeasure ||
                    GrossLadenSumWeightMeasure != null &&
                    GrossLadenSumWeightMeasure.SequenceEqual(other.GrossLadenSumWeightMeasure)
                ) && 
                (
                    GrossLadenUnitWeightMeasure == other.GrossLadenUnitWeightMeasure ||
                    GrossLadenUnitWeightMeasure != null &&
                    GrossLadenUnitWeightMeasure.SequenceEqual(other.GrossLadenUnitWeightMeasure)
                ) && 
                (
                    UnladenWeightMeasure == other.UnladenWeightMeasure ||
                    UnladenWeightMeasure != null &&
                    UnladenWeightMeasure.SequenceEqual(other.UnladenWeightMeasure)
                ) && 
                (
                    MaximumLoadWeightMeasure == other.MaximumLoadWeightMeasure ||
                    MaximumLoadWeightMeasure != null &&
                    MaximumLoadWeightMeasure.SequenceEqual(other.MaximumLoadWeightMeasure)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsCmv != null)
                    hashCode = hashCode * 59 + IsCmv.GetHashCode();
                    if (ColorInterior != null)
                    hashCode = hashCode * 59 + ColorInterior.GetHashCode();
                    if (DoorQuantity != null)
                    hashCode = hashCode * 59 + DoorQuantity.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (MakeCode != null)
                    hashCode = hashCode * 59 + MakeCode.GetHashCode();
                    if (VesselTrailerMakeCode != null)
                    hashCode = hashCode * 59 + VesselTrailerMakeCode.GetHashCode();
                    if (ModelCode != null)
                    hashCode = hashCode * 59 + ModelCode.GetHashCode();
                    if (MsrpAmount != null)
                    hashCode = hashCode * 59 + MsrpAmount.GetHashCode();
                    if (OdometerReadingMeasure != null)
                    hashCode = hashCode * 59 + OdometerReadingMeasure.GetHashCode();
                    if (PassengerSafeQuantity != null)
                    hashCode = hashCode * 59 + PassengerSafeQuantity.GetHashCode();
                    if (SeatingQuantity != null)
                    hashCode = hashCode * 59 + SeatingQuantity.GetHashCode();
                    if (TransmissionCategoryCode != null)
                    hashCode = hashCode * 59 + TransmissionCategoryCode.GetHashCode();
                    if (TransmissionCategory != null)
                    hashCode = hashCode * 59 + TransmissionCategory.GetHashCode();
                    if (AxleQuantity != null)
                    hashCode = hashCode * 59 + AxleQuantity.GetHashCode();
                    if (CurrentWeightMeasure != null)
                    hashCode = hashCode * 59 + CurrentWeightMeasure.GetHashCode();
                    if (GrossLadenSumWeightMeasure != null)
                    hashCode = hashCode * 59 + GrossLadenSumWeightMeasure.GetHashCode();
                    if (GrossLadenUnitWeightMeasure != null)
                    hashCode = hashCode * 59 + GrossLadenUnitWeightMeasure.GetHashCode();
                    if (UnladenWeightMeasure != null)
                    hashCode = hashCode * 59 + UnladenWeightMeasure.GetHashCode();
                    if (MaximumLoadWeightMeasure != null)
                    hashCode = hashCode * 59 + MaximumLoadWeightMeasure.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcVehicleType left, NcVehicleType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcVehicleType left, NcVehicleType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
