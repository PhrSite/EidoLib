/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a juvenile.
    /// </summary>
    [DataContract]
    public partial class HsJuvenileType : IEquatable<HsJuvenileType>
    { 
        /// <summary>
        /// True if the juvenile&#x27;s friends who have been arrested; false otherwise. NIEM reference is hs:JuvenileArrestedFriendsIndicator
        /// </summary>
        /// <value>True if the juvenile&#x27;s friends who have been arrested; false otherwise. NIEM reference is hs:JuvenileArrestedFriendsIndicator</value>

        [DataMember(Name="isArrestedFriends")]
        public List<NiemXsboolean> IsArrestedFriends { get; set; }

        /// <summary>
        /// True if diagnosed with Attention Deficit Disorder (ADD) or as Hyperactive; false otherwise. NIEM reference is hs:JuvenileAttentionDisorderDiagnosisIndicator
        /// </summary>
        /// <value>True if diagnosed with Attention Deficit Disorder (ADD) or as Hyperactive; false otherwise. NIEM reference is hs:JuvenileAttentionDisorderDiagnosisIndicator</value>

        [DataMember(Name="isAttentionDisorderDiagnosis")]
        public List<NiemXsboolean> IsAttentionDisorderDiagnosis { get; set; }

        /// <summary>
        /// True if the juvenile was ever adopted; false otherwise. NIEM reference is hs:JuvenileChildEverAdoptedIndicator
        /// </summary>
        /// <value>True if the juvenile was ever adopted; false otherwise. NIEM reference is hs:JuvenileChildEverAdoptedIndicator</value>

        [DataMember(Name="isChildEverAdopted")]
        public List<NiemXsboolean> IsChildEverAdopted { get; set; }

        /// <summary>
        /// A description of the specific cultural needs of a juvenile and family. NIEM reference is hs:JuvenileCulturalFactorsDescriptionText
        /// </summary>
        /// <value>A description of the specific cultural needs of a juvenile and family. NIEM reference is hs:JuvenileCulturalFactorsDescriptionText</value>

        [DataMember(Name="culturalFactorsDescription")]
        public List<NcTextType> CulturalFactorsDescription { get; set; }

        /// <summary>
        /// True if either of the child&#x27;s parents are deceased; false otherwise. NIEM reference is hs:JuvenileDeceasedParentIndicator
        /// </summary>
        /// <value>True if either of the child&#x27;s parents are deceased; false otherwise. NIEM reference is hs:JuvenileDeceasedParentIndicator</value>

        [DataMember(Name="isDeceasedParent")]
        public List<NiemXsboolean> IsDeceasedParent { get; set; }

        /// <summary>
        /// True if the juvenile has an emotional disturbance; false otherwise. NIEM reference is hs:JuvenileEmotionalDisturbanceIndicator
        /// </summary>
        /// <value>True if the juvenile has an emotional disturbance; false otherwise. NIEM reference is hs:JuvenileEmotionalDisturbanceIndicator</value>

        [DataMember(Name="isEmotionalDisturbance")]
        public List<NiemXsboolean> IsEmotionalDisturbance { get; set; }

        /// <summary>
        /// A description of whether juvenile&#x27;s family is experiencing financial problems. NIEM reference is hs:JuvenileFamilyFinancialProblemCode
        /// </summary>
        /// <value>A description of whether juvenile&#x27;s family is experiencing financial problems. NIEM reference is hs:JuvenileFamilyFinancialProblemCode</value>

        [DataMember(Name="familyFinancialProblemCode")]
        public List<HsJuvenileFamilyFinancialProblemCodeType> FamilyFinancialProblemCode { get; set; }

        /// <summary>
        /// A description of whether juvenile&#x27;s family is experiencing financial problems. NIEM reference is hs:JuvenileFamilyFinancialProblemText
        /// </summary>
        /// <value>A description of whether juvenile&#x27;s family is experiencing financial problems. NIEM reference is hs:JuvenileFamilyFinancialProblemText</value>

        [DataMember(Name="familyFinancialProblem")]
        public List<NcTextType> FamilyFinancialProblem { get; set; }

        /// <summary>
        /// True if juvenile was ever placed in foster care home or group home; false otherwise. NIEM reference is hs:JuvenileFosterCarePlacementIndicator
        /// </summary>
        /// <value>True if juvenile was ever placed in foster care home or group home; false otherwise. NIEM reference is hs:JuvenileFosterCarePlacementIndicator</value>

        [DataMember(Name="isFosterCarePlacement")]
        public List<NiemXsboolean> IsFosterCarePlacement { get; set; }

        /// <summary>
        /// A description of a future aspiration or goal. NIEM reference is hs:JuvenileFutureGoalDescriptionText
        /// </summary>
        /// <value>A description of a future aspiration or goal. NIEM reference is hs:JuvenileFutureGoalDescriptionText</value>

        [DataMember(Name="futureGoalDescription")]
        public List<NcTextType> FutureGoalDescription { get; set; }

        /// <summary>
        /// True if the juvenile is or has ever been homeless; false otherwise. NIEM reference is hs:JuvenileHomelessnessIndicator
        /// </summary>
        /// <value>True if the juvenile is or has ever been homeless; false otherwise. NIEM reference is hs:JuvenileHomelessnessIndicator</value>

        [DataMember(Name="isHomelessness")]
        public List<NiemXsboolean> IsHomelessness { get; set; }

        /// <summary>
        /// True if juvenile has their own space or private area at home; false otherwise. NIEM reference is hs:JuvenileHomePrivacyIndicator
        /// </summary>
        /// <value>True if juvenile has their own space or private area at home; false otherwise. NIEM reference is hs:JuvenileHomePrivacyIndicator</value>

        [DataMember(Name="isHomePrivacy")]
        public List<NiemXsboolean> IsHomePrivacy { get; set; }

        /// <summary>
        /// True if juvenile&#x27;s home is a safe place; false otherwise. NIEM reference is hs:JuvenileHomeSafeIndicator
        /// </summary>
        /// <value>True if juvenile&#x27;s home is a safe place; false otherwise. NIEM reference is hs:JuvenileHomeSafeIndicator</value>

        [DataMember(Name="isHomeSafe")]
        public List<NiemXsboolean> IsHomeSafe { get; set; }

        /// <summary>
        /// A description of behaviors exhibited by a juvenile. NIEM reference is hs:JuvenileBehaviorDescriptionText
        /// </summary>
        /// <value>A description of behaviors exhibited by a juvenile. NIEM reference is hs:JuvenileBehaviorDescriptionText</value>

        [DataMember(Name="behaviorDescription")]
        public List<NcTextType> BehaviorDescription { get; set; }

        /// <summary>
        /// True if the juvenile was ever placed in kinship care; false otherwise. NIEM reference is hs:JuvenileKinshipCarePlacementIndicator
        /// </summary>
        /// <value>True if the juvenile was ever placed in kinship care; false otherwise. NIEM reference is hs:JuvenileKinshipCarePlacementIndicator</value>

        [DataMember(Name="isKinshipCarePlacement")]
        public List<NiemXsboolean> IsKinshipCarePlacement { get; set; }

        /// <summary>
        /// True if the juvenile has ever lived without lights, power, water and/or food; false otherwise. NIEM reference is hs:JuvenileLackOfNecessityIndicator
        /// </summary>
        /// <value>True if the juvenile has ever lived without lights, power, water and/or food; false otherwise. NIEM reference is hs:JuvenileLackOfNecessityIndicator</value>

        [DataMember(Name="isLackOfNecessity")]
        public List<NiemXsboolean> IsLackOfNecessity { get; set; }

        /// <summary>
        /// A description of any legal concerns (for example, custodial information, restraining orders). NIEM reference is hs:JuvenileLegalConcernsDescriptionText
        /// </summary>
        /// <value>A description of any legal concerns (for example, custodial information, restraining orders). NIEM reference is hs:JuvenileLegalConcernsDescriptionText</value>

        [DataMember(Name="legalConcernsDescription")]
        public List<NcTextType> LegalConcernsDescription { get; set; }

        /// <summary>
        /// A description of other people living in the home with the juvenile and family. NIEM reference is hs:JuvenileLivingSituationDescriptionText
        /// </summary>
        /// <value>A description of other people living in the home with the juvenile and family. NIEM reference is hs:JuvenileLivingSituationDescriptionText</value>

        [DataMember(Name="livingSituationDescription")]
        public List<NcTextType> LivingSituationDescription { get; set; }

        /// <summary>
        /// A description of the evaluation of whether a juvenile&#x27;s maturation is within normal limits. NIEM reference is hs:JuvenileOverallGrowthAssessmentDescriptionText
        /// </summary>
        /// <value>A description of the evaluation of whether a juvenile&#x27;s maturation is within normal limits. NIEM reference is hs:JuvenileOverallGrowthAssessmentDescriptionText</value>

        [DataMember(Name="overallGrowthAssessmentDescription")]
        public List<NcTextType> OverallGrowthAssessmentDescription { get; set; }

        /// <summary>
        /// True if juvenile is able to talk to parent or guardian about important issues; false otherwise. NIEM reference is hs:JuvenileParentConversationIndicator
        /// </summary>
        /// <value>True if juvenile is able to talk to parent or guardian about important issues; false otherwise. NIEM reference is hs:JuvenileParentConversationIndicator</value>

        [DataMember(Name="isParentConversation")]
        public List<NiemXsboolean> IsParentConversation { get; set; }

        /// <summary>
        /// True if parent or legal guardian uses drugs or alcohol; false otherwise. NIEM reference is hs:JuvenileParentSubstanceUseIndicator
        /// </summary>
        /// <value>True if parent or legal guardian uses drugs or alcohol; false otherwise. NIEM reference is hs:JuvenileParentSubstanceUseIndicator</value>

        [DataMember(Name="isParentSubstanceUse")]
        public List<NiemXsboolean> IsParentSubstanceUse { get; set; }

        /// <summary>
        /// A description of positive activities in which a juvenile engages. NIEM reference is hs:JuvenilePositiveActivitiesDescriptionText
        /// </summary>
        /// <value>A description of positive activities in which a juvenile engages. NIEM reference is hs:JuvenilePositiveActivitiesDescriptionText</value>

        [DataMember(Name="positiveActivitiesDescription")]
        public List<NcTextType> PositiveActivitiesDescription { get; set; }

        /// <summary>
        /// True if a person engages in positive activities; false otherwise. NIEM reference is hs:JuvenilePositiveActivitiesIndicator
        /// </summary>
        /// <value>True if a person engages in positive activities; false otherwise. NIEM reference is hs:JuvenilePositiveActivitiesIndicator</value>

        [DataMember(Name="isPositiveActivities")]
        public List<NiemXsboolean> IsPositiveActivities { get; set; }

        /// <summary>
        /// True if a person has positive relationships with peers; false otherwise. NIEM reference is hs:JuvenilePositivePeerRelationshipIndicator
        /// </summary>
        /// <value>True if a person has positive relationships with peers; false otherwise. NIEM reference is hs:JuvenilePositivePeerRelationshipIndicator</value>

        [DataMember(Name="isPositivePeerRelationship")]
        public List<NiemXsboolean> IsPositivePeerRelationship { get; set; }

        /// <summary>
        /// A description of the impact of problems on family and social system. NIEM reference is hs:JuvenileProblemImpactDescriptionText
        /// </summary>
        /// <value>A description of the impact of problems on family and social system. NIEM reference is hs:JuvenileProblemImpactDescriptionText</value>

        [DataMember(Name="problemImpactDescription")]
        public List<NcTextType> ProblemImpactDescription { get; set; }

        /// <summary>
        /// True if the person is a repeat offender; false otherwise. NIEM reference is hs:JuvenileRepeatOffenderIndicator
        /// </summary>
        /// <value>True if the person is a repeat offender; false otherwise. NIEM reference is hs:JuvenileRepeatOffenderIndicator</value>

        [DataMember(Name="isRepeatOffender")]
        public List<NiemXsboolean> IsRepeatOffender { get; set; }

        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// True if the juvenile has any special need that qualifies his or her adoption for a subsidy under Title IV-E of the Social Security Act; false otherwise. NIEM reference is hs:JuvenileSpecialNeedsIndicator
        /// </summary>
        /// <value>True if the juvenile has any special need that qualifies his or her adoption for a subsidy under Title IV-E of the Social Security Act; false otherwise. NIEM reference is hs:JuvenileSpecialNeedsIndicator</value>

        [DataMember(Name="isSpecialNeeds")]
        public List<NiemXsboolean> IsSpecialNeeds { get; set; }

        /// <summary>
        /// An enumerated list from the Adoption and Foster Care Annual Reporting System, 45 CFR 1355, appendix B (Adoption Data Elements), section III (Special Needs Status). NIEM reference is hs:JuvenileSpecialNeedCode
        /// </summary>
        /// <value>An enumerated list from the Adoption and Foster Care Annual Reporting System, 45 CFR 1355, appendix B (Adoption Data Elements), section III (Special Needs Status). NIEM reference is hs:JuvenileSpecialNeedCode</value>

        [DataMember(Name="specialNeedCode")]
        public List<HsJuvenileSpecialNeedCodeType> SpecialNeedCode { get; set; }

        /// <summary>
        /// A textual description of a state-defined characteristic that qualifies a child&#x27;s adoption for a subsidy under Title IV-E of the Social Security Act. NIEM reference is hs:JuvenileSpecialNeedText
        /// </summary>
        /// <value>A textual description of a state-defined characteristic that qualifies a child&#x27;s adoption for a subsidy under Title IV-E of the Social Security Act. NIEM reference is hs:JuvenileSpecialNeedText</value>

        [DataMember(Name="specialNeed")]
        public List<NcTextType> SpecialNeed { get; set; }

        /// <summary>
        /// A description of the strengths and Interests of juvenile. NIEM reference is hs:JuvenileStrengthsInterestsDescriptionText
        /// </summary>
        /// <value>A description of the strengths and Interests of juvenile. NIEM reference is hs:JuvenileStrengthsInterestsDescriptionText</value>

        [DataMember(Name="strengthsInterestsDescription")]
        public List<NcTextType> StrengthsInterestsDescription { get; set; }

        /// <summary>
        /// True if friends get into trouble; false otherwise. NIEM reference is hs:JuvenileTroubledFriendsIndicator
        /// </summary>
        /// <value>True if friends get into trouble; false otherwise. NIEM reference is hs:JuvenileTroubledFriendsIndicator</value>

        [DataMember(Name="isTroubledFriends")]
        public List<NiemXsboolean> IsTroubledFriends { get; set; }

        /// <summary>
        /// hsJuvenileType JSON-LD context
        /// </summary>
        /// <value>hsJuvenileType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsJuvenileTypeContextJsonldEnum for ../JSON-LD_Contexts/hsJuvenileTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsJuvenileTypeContext.jsonld")]
            JSONLDContextshsJuvenileTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsJuvenileType JSON-LD context
        /// </summary>
        /// <value>hsJuvenileType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsJuvenileType {\n");
            sb.Append("  IsArrestedFriends: ").Append(IsArrestedFriends).Append("\n");
            sb.Append("  IsAttentionDisorderDiagnosis: ").Append(IsAttentionDisorderDiagnosis).Append("\n");
            sb.Append("  IsChildEverAdopted: ").Append(IsChildEverAdopted).Append("\n");
            sb.Append("  CulturalFactorsDescription: ").Append(CulturalFactorsDescription).Append("\n");
            sb.Append("  IsDeceasedParent: ").Append(IsDeceasedParent).Append("\n");
            sb.Append("  IsEmotionalDisturbance: ").Append(IsEmotionalDisturbance).Append("\n");
            sb.Append("  FamilyFinancialProblemCode: ").Append(FamilyFinancialProblemCode).Append("\n");
            sb.Append("  FamilyFinancialProblem: ").Append(FamilyFinancialProblem).Append("\n");
            sb.Append("  IsFosterCarePlacement: ").Append(IsFosterCarePlacement).Append("\n");
            sb.Append("  FutureGoalDescription: ").Append(FutureGoalDescription).Append("\n");
            sb.Append("  IsHomelessness: ").Append(IsHomelessness).Append("\n");
            sb.Append("  IsHomePrivacy: ").Append(IsHomePrivacy).Append("\n");
            sb.Append("  IsHomeSafe: ").Append(IsHomeSafe).Append("\n");
            sb.Append("  BehaviorDescription: ").Append(BehaviorDescription).Append("\n");
            sb.Append("  IsKinshipCarePlacement: ").Append(IsKinshipCarePlacement).Append("\n");
            sb.Append("  IsLackOfNecessity: ").Append(IsLackOfNecessity).Append("\n");
            sb.Append("  LegalConcernsDescription: ").Append(LegalConcernsDescription).Append("\n");
            sb.Append("  LivingSituationDescription: ").Append(LivingSituationDescription).Append("\n");
            sb.Append("  OverallGrowthAssessmentDescription: ").Append(OverallGrowthAssessmentDescription).Append("\n");
            sb.Append("  IsParentConversation: ").Append(IsParentConversation).Append("\n");
            sb.Append("  IsParentSubstanceUse: ").Append(IsParentSubstanceUse).Append("\n");
            sb.Append("  PositiveActivitiesDescription: ").Append(PositiveActivitiesDescription).Append("\n");
            sb.Append("  IsPositiveActivities: ").Append(IsPositiveActivities).Append("\n");
            sb.Append("  IsPositivePeerRelationship: ").Append(IsPositivePeerRelationship).Append("\n");
            sb.Append("  ProblemImpactDescription: ").Append(ProblemImpactDescription).Append("\n");
            sb.Append("  IsRepeatOffender: ").Append(IsRepeatOffender).Append("\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  IsSpecialNeeds: ").Append(IsSpecialNeeds).Append("\n");
            sb.Append("  SpecialNeedCode: ").Append(SpecialNeedCode).Append("\n");
            sb.Append("  SpecialNeed: ").Append(SpecialNeed).Append("\n");
            sb.Append("  StrengthsInterestsDescription: ").Append(StrengthsInterestsDescription).Append("\n");
            sb.Append("  IsTroubledFriends: ").Append(IsTroubledFriends).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsJuvenileType)obj);
        }

        /// <summary>
        /// Returns true if HsJuvenileType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsJuvenileType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsJuvenileType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsArrestedFriends == other.IsArrestedFriends ||
                    IsArrestedFriends != null &&
                    IsArrestedFriends.SequenceEqual(other.IsArrestedFriends)
                ) && 
                (
                    IsAttentionDisorderDiagnosis == other.IsAttentionDisorderDiagnosis ||
                    IsAttentionDisorderDiagnosis != null &&
                    IsAttentionDisorderDiagnosis.SequenceEqual(other.IsAttentionDisorderDiagnosis)
                ) && 
                (
                    IsChildEverAdopted == other.IsChildEverAdopted ||
                    IsChildEverAdopted != null &&
                    IsChildEverAdopted.SequenceEqual(other.IsChildEverAdopted)
                ) && 
                (
                    CulturalFactorsDescription == other.CulturalFactorsDescription ||
                    CulturalFactorsDescription != null &&
                    CulturalFactorsDescription.SequenceEqual(other.CulturalFactorsDescription)
                ) && 
                (
                    IsDeceasedParent == other.IsDeceasedParent ||
                    IsDeceasedParent != null &&
                    IsDeceasedParent.SequenceEqual(other.IsDeceasedParent)
                ) && 
                (
                    IsEmotionalDisturbance == other.IsEmotionalDisturbance ||
                    IsEmotionalDisturbance != null &&
                    IsEmotionalDisturbance.SequenceEqual(other.IsEmotionalDisturbance)
                ) && 
                (
                    FamilyFinancialProblemCode == other.FamilyFinancialProblemCode ||
                    FamilyFinancialProblemCode != null &&
                    FamilyFinancialProblemCode.SequenceEqual(other.FamilyFinancialProblemCode)
                ) && 
                (
                    FamilyFinancialProblem == other.FamilyFinancialProblem ||
                    FamilyFinancialProblem != null &&
                    FamilyFinancialProblem.SequenceEqual(other.FamilyFinancialProblem)
                ) && 
                (
                    IsFosterCarePlacement == other.IsFosterCarePlacement ||
                    IsFosterCarePlacement != null &&
                    IsFosterCarePlacement.SequenceEqual(other.IsFosterCarePlacement)
                ) && 
                (
                    FutureGoalDescription == other.FutureGoalDescription ||
                    FutureGoalDescription != null &&
                    FutureGoalDescription.SequenceEqual(other.FutureGoalDescription)
                ) && 
                (
                    IsHomelessness == other.IsHomelessness ||
                    IsHomelessness != null &&
                    IsHomelessness.SequenceEqual(other.IsHomelessness)
                ) && 
                (
                    IsHomePrivacy == other.IsHomePrivacy ||
                    IsHomePrivacy != null &&
                    IsHomePrivacy.SequenceEqual(other.IsHomePrivacy)
                ) && 
                (
                    IsHomeSafe == other.IsHomeSafe ||
                    IsHomeSafe != null &&
                    IsHomeSafe.SequenceEqual(other.IsHomeSafe)
                ) && 
                (
                    BehaviorDescription == other.BehaviorDescription ||
                    BehaviorDescription != null &&
                    BehaviorDescription.SequenceEqual(other.BehaviorDescription)
                ) && 
                (
                    IsKinshipCarePlacement == other.IsKinshipCarePlacement ||
                    IsKinshipCarePlacement != null &&
                    IsKinshipCarePlacement.SequenceEqual(other.IsKinshipCarePlacement)
                ) && 
                (
                    IsLackOfNecessity == other.IsLackOfNecessity ||
                    IsLackOfNecessity != null &&
                    IsLackOfNecessity.SequenceEqual(other.IsLackOfNecessity)
                ) && 
                (
                    LegalConcernsDescription == other.LegalConcernsDescription ||
                    LegalConcernsDescription != null &&
                    LegalConcernsDescription.SequenceEqual(other.LegalConcernsDescription)
                ) && 
                (
                    LivingSituationDescription == other.LivingSituationDescription ||
                    LivingSituationDescription != null &&
                    LivingSituationDescription.SequenceEqual(other.LivingSituationDescription)
                ) && 
                (
                    OverallGrowthAssessmentDescription == other.OverallGrowthAssessmentDescription ||
                    OverallGrowthAssessmentDescription != null &&
                    OverallGrowthAssessmentDescription.SequenceEqual(other.OverallGrowthAssessmentDescription)
                ) && 
                (
                    IsParentConversation == other.IsParentConversation ||
                    IsParentConversation != null &&
                    IsParentConversation.SequenceEqual(other.IsParentConversation)
                ) && 
                (
                    IsParentSubstanceUse == other.IsParentSubstanceUse ||
                    IsParentSubstanceUse != null &&
                    IsParentSubstanceUse.SequenceEqual(other.IsParentSubstanceUse)
                ) && 
                (
                    PositiveActivitiesDescription == other.PositiveActivitiesDescription ||
                    PositiveActivitiesDescription != null &&
                    PositiveActivitiesDescription.SequenceEqual(other.PositiveActivitiesDescription)
                ) && 
                (
                    IsPositiveActivities == other.IsPositiveActivities ||
                    IsPositiveActivities != null &&
                    IsPositiveActivities.SequenceEqual(other.IsPositiveActivities)
                ) && 
                (
                    IsPositivePeerRelationship == other.IsPositivePeerRelationship ||
                    IsPositivePeerRelationship != null &&
                    IsPositivePeerRelationship.SequenceEqual(other.IsPositivePeerRelationship)
                ) && 
                (
                    ProblemImpactDescription == other.ProblemImpactDescription ||
                    ProblemImpactDescription != null &&
                    ProblemImpactDescription.SequenceEqual(other.ProblemImpactDescription)
                ) && 
                (
                    IsRepeatOffender == other.IsRepeatOffender ||
                    IsRepeatOffender != null &&
                    IsRepeatOffender.SequenceEqual(other.IsRepeatOffender)
                ) && 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    IsSpecialNeeds == other.IsSpecialNeeds ||
                    IsSpecialNeeds != null &&
                    IsSpecialNeeds.SequenceEqual(other.IsSpecialNeeds)
                ) && 
                (
                    SpecialNeedCode == other.SpecialNeedCode ||
                    SpecialNeedCode != null &&
                    SpecialNeedCode.SequenceEqual(other.SpecialNeedCode)
                ) && 
                (
                    SpecialNeed == other.SpecialNeed ||
                    SpecialNeed != null &&
                    SpecialNeed.SequenceEqual(other.SpecialNeed)
                ) && 
                (
                    StrengthsInterestsDescription == other.StrengthsInterestsDescription ||
                    StrengthsInterestsDescription != null &&
                    StrengthsInterestsDescription.SequenceEqual(other.StrengthsInterestsDescription)
                ) && 
                (
                    IsTroubledFriends == other.IsTroubledFriends ||
                    IsTroubledFriends != null &&
                    IsTroubledFriends.SequenceEqual(other.IsTroubledFriends)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsArrestedFriends != null)
                    hashCode = hashCode * 59 + IsArrestedFriends.GetHashCode();
                    if (IsAttentionDisorderDiagnosis != null)
                    hashCode = hashCode * 59 + IsAttentionDisorderDiagnosis.GetHashCode();
                    if (IsChildEverAdopted != null)
                    hashCode = hashCode * 59 + IsChildEverAdopted.GetHashCode();
                    if (CulturalFactorsDescription != null)
                    hashCode = hashCode * 59 + CulturalFactorsDescription.GetHashCode();
                    if (IsDeceasedParent != null)
                    hashCode = hashCode * 59 + IsDeceasedParent.GetHashCode();
                    if (IsEmotionalDisturbance != null)
                    hashCode = hashCode * 59 + IsEmotionalDisturbance.GetHashCode();
                    if (FamilyFinancialProblemCode != null)
                    hashCode = hashCode * 59 + FamilyFinancialProblemCode.GetHashCode();
                    if (FamilyFinancialProblem != null)
                    hashCode = hashCode * 59 + FamilyFinancialProblem.GetHashCode();
                    if (IsFosterCarePlacement != null)
                    hashCode = hashCode * 59 + IsFosterCarePlacement.GetHashCode();
                    if (FutureGoalDescription != null)
                    hashCode = hashCode * 59 + FutureGoalDescription.GetHashCode();
                    if (IsHomelessness != null)
                    hashCode = hashCode * 59 + IsHomelessness.GetHashCode();
                    if (IsHomePrivacy != null)
                    hashCode = hashCode * 59 + IsHomePrivacy.GetHashCode();
                    if (IsHomeSafe != null)
                    hashCode = hashCode * 59 + IsHomeSafe.GetHashCode();
                    if (BehaviorDescription != null)
                    hashCode = hashCode * 59 + BehaviorDescription.GetHashCode();
                    if (IsKinshipCarePlacement != null)
                    hashCode = hashCode * 59 + IsKinshipCarePlacement.GetHashCode();
                    if (IsLackOfNecessity != null)
                    hashCode = hashCode * 59 + IsLackOfNecessity.GetHashCode();
                    if (LegalConcernsDescription != null)
                    hashCode = hashCode * 59 + LegalConcernsDescription.GetHashCode();
                    if (LivingSituationDescription != null)
                    hashCode = hashCode * 59 + LivingSituationDescription.GetHashCode();
                    if (OverallGrowthAssessmentDescription != null)
                    hashCode = hashCode * 59 + OverallGrowthAssessmentDescription.GetHashCode();
                    if (IsParentConversation != null)
                    hashCode = hashCode * 59 + IsParentConversation.GetHashCode();
                    if (IsParentSubstanceUse != null)
                    hashCode = hashCode * 59 + IsParentSubstanceUse.GetHashCode();
                    if (PositiveActivitiesDescription != null)
                    hashCode = hashCode * 59 + PositiveActivitiesDescription.GetHashCode();
                    if (IsPositiveActivities != null)
                    hashCode = hashCode * 59 + IsPositiveActivities.GetHashCode();
                    if (IsPositivePeerRelationship != null)
                    hashCode = hashCode * 59 + IsPositivePeerRelationship.GetHashCode();
                    if (ProblemImpactDescription != null)
                    hashCode = hashCode * 59 + ProblemImpactDescription.GetHashCode();
                    if (IsRepeatOffender != null)
                    hashCode = hashCode * 59 + IsRepeatOffender.GetHashCode();
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (IsSpecialNeeds != null)
                    hashCode = hashCode * 59 + IsSpecialNeeds.GetHashCode();
                    if (SpecialNeedCode != null)
                    hashCode = hashCode * 59 + SpecialNeedCode.GetHashCode();
                    if (SpecialNeed != null)
                    hashCode = hashCode * 59 + SpecialNeed.GetHashCode();
                    if (StrengthsInterestsDescription != null)
                    hashCode = hashCode * 59 + StrengthsInterestsDescription.GetHashCode();
                    if (IsTroubledFriends != null)
                    hashCode = hashCode * 59 + IsTroubledFriends.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsJuvenileType left, HsJuvenileType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsJuvenileType left, HsJuvenileType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
