/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a location identified by geographic boundaries.
    /// </summary>
    [DataContract]
    public partial class NcAreaType : IEquatable<NcAreaType>
    { 
        /// <summary>
        /// A description of an area. NIEM reference is nc:AreaDescriptionText
        /// </summary>
        /// <value>A description of an area. NIEM reference is nc:AreaDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A circular area identified by a center coordinate and a radius. NIEM reference is nc:AreaCircularRegion
        /// </summary>
        /// <value>A circular area identified by a center coordinate and a radius. NIEM reference is nc:AreaCircularRegion</value>

        [DataMember(Name="circularRegion")]
        public List<NcCircularRegionType> CircularRegion { get; set; }

        /// <summary>
        /// A polygon area identified by a set of coordinates. NIEM reference is nc:AreaPolygonRegion
        /// </summary>
        /// <value>A polygon area identified by a set of coordinates. NIEM reference is nc:AreaPolygonRegion</value>

        [DataMember(Name="polygonRegion")]
        public List<NcPolygonRegionType> PolygonRegion { get; set; }

        /// <summary>
        /// A GML geometry that describes a region. NIEM reference is geo:AreaRegionGeometry
        /// </summary>
        /// <value>A GML geometry that describes a region. NIEM reference is geo:AreaRegionGeometry</value>

        [DataMember(Name="regionGeometry")]
        public List<GeoGeometryType> RegionGeometry { get; set; }

        /// <summary>
        /// An ellipse specified by a point, major axis, minor axis and rotation. NIEM reference is geo:Ellipse
        /// </summary>
        /// <value>An ellipse specified by a point, major axis, minor axis and rotation. NIEM reference is geo:Ellipse</value>

        [DataMember(Name="geoEllipse")]
        public List<GeoEllipseType> GeoEllipse { get; set; }

        /// <summary>
        /// An ellipse, expressed as an XY plane (projected onto earth&#x27;s surface) ellipse. The major axis is oriented along reported azimuth, with zero being due North. NIEM reference is mo:Ellipse
        /// </summary>
        /// <value>An ellipse, expressed as an XY plane (projected onto earth&#x27;s surface) ellipse. The major axis is oriented along reported azimuth, with zero being due North. NIEM reference is mo:Ellipse</value>

        [DataMember(Name="moEllipse")]
        public List<MoEllipseType> MoEllipse { get; set; }

        /// <summary>
        /// A  area region described by an ellipse specified by a point, major axis, minor axis and rotation, using WGS84, meters, and decimal degrees. NIEM reference is mo:WGS84LocationEllipse
        /// </summary>
        /// <value>A  area region described by an ellipse specified by a point, major axis, minor axis and rotation, using WGS84, meters, and decimal degrees. NIEM reference is mo:WGS84LocationEllipse</value>

        [DataMember(Name="wgs84LocationEllipse")]
        public List<MoWGS84EllipseType> Wgs84LocationEllipse { get; set; }

        /// <summary>
        /// An area region described by a polygon with no interior region, using WGS84 coordinates. NIEM reference is mo:WGS84LocationExternalPolygon
        /// </summary>
        /// <value>An area region described by a polygon with no interior region, using WGS84 coordinates. NIEM reference is mo:WGS84LocationExternalPolygon</value>

        [DataMember(Name="wgs84LocationExternalPolygon")]
        public List<MoWGS84ExternalPolygonType> Wgs84LocationExternalPolygon { get; set; }

        /// <summary>
        /// ncAreaType JSON-LD context
        /// </summary>
        /// <value>ncAreaType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncAreaTypeContextJsonldEnum for ../JSON-LD_Contexts/ncAreaTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncAreaTypeContext.jsonld")]
            JSONLDContextsncAreaTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncAreaType JSON-LD context
        /// </summary>
        /// <value>ncAreaType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcAreaType {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CircularRegion: ").Append(CircularRegion).Append("\n");
            sb.Append("  PolygonRegion: ").Append(PolygonRegion).Append("\n");
            sb.Append("  RegionGeometry: ").Append(RegionGeometry).Append("\n");
            sb.Append("  GeoEllipse: ").Append(GeoEllipse).Append("\n");
            sb.Append("  MoEllipse: ").Append(MoEllipse).Append("\n");
            sb.Append("  Wgs84LocationEllipse: ").Append(Wgs84LocationEllipse).Append("\n");
            sb.Append("  Wgs84LocationExternalPolygon: ").Append(Wgs84LocationExternalPolygon).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcAreaType)obj);
        }

        /// <summary>
        /// Returns true if NcAreaType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcAreaType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcAreaType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    CircularRegion == other.CircularRegion ||
                    CircularRegion != null &&
                    CircularRegion.SequenceEqual(other.CircularRegion)
                ) && 
                (
                    PolygonRegion == other.PolygonRegion ||
                    PolygonRegion != null &&
                    PolygonRegion.SequenceEqual(other.PolygonRegion)
                ) && 
                (
                    RegionGeometry == other.RegionGeometry ||
                    RegionGeometry != null &&
                    RegionGeometry.SequenceEqual(other.RegionGeometry)
                ) && 
                (
                    GeoEllipse == other.GeoEllipse ||
                    GeoEllipse != null &&
                    GeoEllipse.SequenceEqual(other.GeoEllipse)
                ) && 
                (
                    MoEllipse == other.MoEllipse ||
                    MoEllipse != null &&
                    MoEllipse.SequenceEqual(other.MoEllipse)
                ) && 
                (
                    Wgs84LocationEllipse == other.Wgs84LocationEllipse ||
                    Wgs84LocationEllipse != null &&
                    Wgs84LocationEllipse.SequenceEqual(other.Wgs84LocationEllipse)
                ) && 
                (
                    Wgs84LocationExternalPolygon == other.Wgs84LocationExternalPolygon ||
                    Wgs84LocationExternalPolygon != null &&
                    Wgs84LocationExternalPolygon.SequenceEqual(other.Wgs84LocationExternalPolygon)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CircularRegion != null)
                    hashCode = hashCode * 59 + CircularRegion.GetHashCode();
                    if (PolygonRegion != null)
                    hashCode = hashCode * 59 + PolygonRegion.GetHashCode();
                    if (RegionGeometry != null)
                    hashCode = hashCode * 59 + RegionGeometry.GetHashCode();
                    if (GeoEllipse != null)
                    hashCode = hashCode * 59 + GeoEllipse.GetHashCode();
                    if (MoEllipse != null)
                    hashCode = hashCode * 59 + MoEllipse.GetHashCode();
                    if (Wgs84LocationEllipse != null)
                    hashCode = hashCode * 59 + Wgs84LocationEllipse.GetHashCode();
                    if (Wgs84LocationExternalPolygon != null)
                    hashCode = hashCode * 59 + Wgs84LocationExternalPolygon.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcAreaType left, NcAreaType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcAreaType left, NcAreaType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
