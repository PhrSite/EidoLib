/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a comment, note, or remark providing additional information.
    /// </summary>
    [DataContract]
    public partial class NcCommentType : IEquatable<NcCommentType>
    { 
        /// <summary>
        /// A name or role of the author of a comment. NIEM reference is nc:CommentAuthorText
        /// </summary>
        /// <value>A name or role of the author of a comment. NIEM reference is nc:CommentAuthorText</value>

        [DataMember(Name="author")]
        public List<NcTextType> Author { get; set; }

        /// <summary>
        /// A date a comment was created. NIEM reference is nc:CommentCreationDate
        /// </summary>
        /// <value>A date a comment was created. NIEM reference is nc:CommentCreationDate</value>

        [DataMember(Name="creationDate")]
        public List<NcDateType> CreationDate { get; set; }

        /// <summary>
        /// A comment, note, or remark providing additional information. NIEM reference is nc:CommentText
        /// </summary>
        /// <value>A comment, note, or remark providing additional information. NIEM reference is nc:CommentText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A name of a comment. NIEM reference is nc:CommentTitleText
        /// </summary>
        /// <value>A name of a comment. NIEM reference is nc:CommentTitleText</value>

        [DataMember(Name="title")]
        public List<NcTextType> Title { get; set; }

        /// <summary>
        /// An intended recipient of the comment. NIEM reference is mo:CommentDestinationText
        /// </summary>
        /// <value>An intended recipient of the comment. NIEM reference is mo:CommentDestinationText</value>

        [DataMember(Name="destination")]
        public List<NiemXsstring> Destination { get; set; }

        /// <summary>
        /// A comma-separated list of keywords about the comment. NIEM reference is mo:CommentKeywordText
        /// </summary>
        /// <value>A comma-separated list of keywords about the comment. NIEM reference is mo:CommentKeywordText</value>

        [DataMember(Name="keyword")]
        public List<NiemXsstring> Keyword { get; set; }

        /// <summary>
        /// ncCommentType JSON-LD context
        /// </summary>
        /// <value>ncCommentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncCommentTypeContextJsonldEnum for ../JSON-LD_Contexts/ncCommentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncCommentTypeContext.jsonld")]
            JSONLDContextsncCommentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncCommentType JSON-LD context
        /// </summary>
        /// <value>ncCommentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcCommentType {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcCommentType)obj);
        }

        /// <summary>
        /// Returns true if NcCommentType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcCommentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcCommentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.SequenceEqual(other.Author)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != null &&
                    CreationDate.SequenceEqual(other.CreationDate)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.SequenceEqual(other.Title)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.SequenceEqual(other.Destination)
                ) && 
                (
                    Keyword == other.Keyword ||
                    Keyword != null &&
                    Keyword.SequenceEqual(other.Keyword)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (CreationDate != null)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcCommentType left, NcCommentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcCommentType left, NcCommentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
