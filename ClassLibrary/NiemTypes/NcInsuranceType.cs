/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for coverage by a contract whereby one party agrees to indemnify or guarantee another against loss by a specified contingent event or peril.
    /// </summary>
    [DataContract]
    public partial class NcInsuranceType : IEquatable<NcInsuranceType>
    { 
        /// <summary>
        /// An identification assigned to an insurance policy by an insurance carrier. NIEM reference is nc:InsurancePolicyIdentification
        /// </summary>
        /// <value>An identification assigned to an insurance policy by an insurance carrier. NIEM reference is nc:InsurancePolicyIdentification</value>

        [DataMember(Name="policyIdentification")]
        public List<NcIdentificationType> PolicyIdentification { get; set; }

        /// <summary>
        /// An identification of a company which underwrites an insurance policy. NIEM reference is nc:InsuranceCarrierIdentification
        /// </summary>
        /// <value>An identification of a company which underwrites an insurance policy. NIEM reference is nc:InsuranceCarrierIdentification</value>

        [DataMember(Name="carrierIdentification")]
        public List<NcIdentificationType> CarrierIdentification { get; set; }

        /// <summary>
        /// A name of a company which underwrites an insurance policy. NIEM reference is nc:InsuranceCarrierName
        /// </summary>
        /// <value>A name of a company which underwrites an insurance policy. NIEM reference is nc:InsuranceCarrierName</value>

        [DataMember(Name="carrierName")]
        public List<NcTextType> CarrierName { get; set; }

        /// <summary>
        /// True if an insurance policy is active; false otherwise. NIEM reference is nc:InsuranceActiveIndicator
        /// </summary>
        /// <value>True if an insurance policy is active; false otherwise. NIEM reference is nc:InsuranceActiveIndicator</value>

        [DataMember(Name="isActive")]
        public List<NiemXsboolean> IsActive { get; set; }

        /// <summary>
        /// A date an insurance policy is voided or revoked. NIEM reference is nc:InsuranceCancellationDate
        /// </summary>
        /// <value>A date an insurance policy is voided or revoked. NIEM reference is nc:InsuranceCancellationDate</value>

        [DataMember(Name="cancellationDate")]
        public List<NcDateType> CancellationDate { get; set; }

        /// <summary>
        /// A date a person is certified as having the necessary insurance coverage. NIEM reference is nc:InsuranceCertifiedDate
        /// </summary>
        /// <value>A date a person is certified as having the necessary insurance coverage. NIEM reference is nc:InsuranceCertifiedDate</value>

        [DataMember(Name="certifiedDate")]
        public List<NcDateType> CertifiedDate { get; set; }

        /// <summary>
        /// A kind of insurance coverage. NIEM reference is j:InsuranceCoverageCategoryCode
        /// </summary>
        /// <value>A kind of insurance coverage. NIEM reference is j:InsuranceCoverageCategoryCode</value>

        [DataMember(Name="coverageCategoryCode")]
        public List<AamvaD20InsuranceCoverageCategoryCodeType> CoverageCategoryCode { get; set; }

        /// <summary>
        /// A kind of insurance coverage. NIEM reference is nc:InsuranceCoverageCategoryText
        /// </summary>
        /// <value>A kind of insurance coverage. NIEM reference is nc:InsuranceCoverageCategoryText</value>

        [DataMember(Name="coverageCategory")]
        public List<NcTextType> CoverageCategory { get; set; }

        /// <summary>
        /// A property item that is covered by an insurance policy. NIEM reference is nc:InsuranceCoveredItem
        /// </summary>
        /// <value>A property item that is covered by an insurance policy. NIEM reference is nc:InsuranceCoveredItem</value>

        [DataMember(Name="coveredItem")]
        public List<NcItemType> CoveredItem { get; set; }

        /// <summary>
        /// A date range during which an insurance policy coverage is in effect. NIEM reference is nc:InsuranceEffectiveDateRange
        /// </summary>
        /// <value>A date range during which an insurance policy coverage is in effect. NIEM reference is nc:InsuranceEffectiveDateRange</value>

        [DataMember(Name="effectiveDateRange")]
        public List<NcDateRangeType> EffectiveDateRange { get; set; }

        /// <summary>
        /// True if an insurance coverage is for a personal use; false if it is for commercial or corporate use. NIEM reference is nc:InsurancePersonalIndicator
        /// </summary>
        /// <value>True if an insurance coverage is for a personal use; false if it is for commercial or corporate use. NIEM reference is nc:InsurancePersonalIndicator</value>

        [DataMember(Name="isPersonal")]
        public List<NiemXsboolean> IsPersonal { get; set; }

        /// <summary>
        /// Additional information about insurance NIEM reference is em:InsuranceAugmentation
        /// </summary>
        /// <value>Additional information about insurance NIEM reference is em:InsuranceAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<EmInsuranceAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncInsuranceType JSON-LD context
        /// </summary>
        /// <value>ncInsuranceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncInsuranceTypeContextJsonldEnum for ../JSON-LD_Contexts/ncInsuranceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncInsuranceTypeContext.jsonld")]
            JSONLDContextsncInsuranceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncInsuranceType JSON-LD context
        /// </summary>
        /// <value>ncInsuranceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcInsuranceType {\n");
            sb.Append("  PolicyIdentification: ").Append(PolicyIdentification).Append("\n");
            sb.Append("  CarrierIdentification: ").Append(CarrierIdentification).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  CancellationDate: ").Append(CancellationDate).Append("\n");
            sb.Append("  CertifiedDate: ").Append(CertifiedDate).Append("\n");
            sb.Append("  CoverageCategoryCode: ").Append(CoverageCategoryCode).Append("\n");
            sb.Append("  CoverageCategory: ").Append(CoverageCategory).Append("\n");
            sb.Append("  CoveredItem: ").Append(CoveredItem).Append("\n");
            sb.Append("  EffectiveDateRange: ").Append(EffectiveDateRange).Append("\n");
            sb.Append("  IsPersonal: ").Append(IsPersonal).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcInsuranceType)obj);
        }

        /// <summary>
        /// Returns true if NcInsuranceType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcInsuranceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcInsuranceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PolicyIdentification == other.PolicyIdentification ||
                    PolicyIdentification != null &&
                    PolicyIdentification.SequenceEqual(other.PolicyIdentification)
                ) && 
                (
                    CarrierIdentification == other.CarrierIdentification ||
                    CarrierIdentification != null &&
                    CarrierIdentification.SequenceEqual(other.CarrierIdentification)
                ) && 
                (
                    CarrierName == other.CarrierName ||
                    CarrierName != null &&
                    CarrierName.SequenceEqual(other.CarrierName)
                ) && 
                (
                    IsActive == other.IsActive ||
                    IsActive != null &&
                    IsActive.SequenceEqual(other.IsActive)
                ) && 
                (
                    CancellationDate == other.CancellationDate ||
                    CancellationDate != null &&
                    CancellationDate.SequenceEqual(other.CancellationDate)
                ) && 
                (
                    CertifiedDate == other.CertifiedDate ||
                    CertifiedDate != null &&
                    CertifiedDate.SequenceEqual(other.CertifiedDate)
                ) && 
                (
                    CoverageCategoryCode == other.CoverageCategoryCode ||
                    CoverageCategoryCode != null &&
                    CoverageCategoryCode.SequenceEqual(other.CoverageCategoryCode)
                ) && 
                (
                    CoverageCategory == other.CoverageCategory ||
                    CoverageCategory != null &&
                    CoverageCategory.SequenceEqual(other.CoverageCategory)
                ) && 
                (
                    CoveredItem == other.CoveredItem ||
                    CoveredItem != null &&
                    CoveredItem.SequenceEqual(other.CoveredItem)
                ) && 
                (
                    EffectiveDateRange == other.EffectiveDateRange ||
                    EffectiveDateRange != null &&
                    EffectiveDateRange.SequenceEqual(other.EffectiveDateRange)
                ) && 
                (
                    IsPersonal == other.IsPersonal ||
                    IsPersonal != null &&
                    IsPersonal.SequenceEqual(other.IsPersonal)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PolicyIdentification != null)
                    hashCode = hashCode * 59 + PolicyIdentification.GetHashCode();
                    if (CarrierIdentification != null)
                    hashCode = hashCode * 59 + CarrierIdentification.GetHashCode();
                    if (CarrierName != null)
                    hashCode = hashCode * 59 + CarrierName.GetHashCode();
                    if (IsActive != null)
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    if (CancellationDate != null)
                    hashCode = hashCode * 59 + CancellationDate.GetHashCode();
                    if (CertifiedDate != null)
                    hashCode = hashCode * 59 + CertifiedDate.GetHashCode();
                    if (CoverageCategoryCode != null)
                    hashCode = hashCode * 59 + CoverageCategoryCode.GetHashCode();
                    if (CoverageCategory != null)
                    hashCode = hashCode * 59 + CoverageCategory.GetHashCode();
                    if (CoveredItem != null)
                    hashCode = hashCode * 59 + CoveredItem.GetHashCode();
                    if (EffectiveDateRange != null)
                    hashCode = hashCode * 59 + EffectiveDateRange.GetHashCode();
                    if (IsPersonal != null)
                    hashCode = hashCode * 59 + IsPersonal.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcInsuranceType left, NcInsuranceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcInsuranceType left, NcInsuranceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
