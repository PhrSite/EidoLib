/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an activity.
    /// </summary>
    [DataContract]
    public partial class JActivityAugmentationType : IEquatable<JActivityAugmentationType>
    { 
        /// <summary>
        /// An expected amount of time an activity should last. NIEM reference is j:ActivityEstimatedDuration
        /// </summary>
        /// <value>An expected amount of time an activity should last. NIEM reference is j:ActivityEstimatedDuration</value>

        [DataMember(Name="activityEstimatedDuration")]
        public List<NiemXsduration> ActivityEstimatedDuration { get; set; }

        /// <summary>
        /// A date when an activity is ready for service or action. NIEM reference is j:ActivityEffectiveDate
        /// </summary>
        /// <value>A date when an activity is ready for service or action. NIEM reference is j:ActivityEffectiveDate</value>

        [DataMember(Name="activityEffectiveDate")]
        public List<NcDateType> ActivityEffectiveDate { get; set; }

        /// <summary>
        /// A date when an activity is expected to be completed. NIEM reference is j:ActivityDueDate
        /// </summary>
        /// <value>A date when an activity is expected to be completed. NIEM reference is j:ActivityDueDate</value>

        [DataMember(Name="activityDueDate")]
        public List<NcDateType> ActivityDueDate { get; set; }

        /// <summary>
        /// True if an activity event has ended; false otherwise. NIEM reference is j:ActivityCompletedIndicator
        /// </summary>
        /// <value>True if an activity event has ended; false otherwise. NIEM reference is j:ActivityCompletedIndicator</value>

        [DataMember(Name="isActivityCompleted")]
        public List<NiemXsboolean> IsActivityCompleted { get; set; }

        /// <summary>
        /// A comment about the activity. NIEM reference is j:ActivityComment
        /// </summary>
        /// <value>A comment about the activity. NIEM reference is j:ActivityComment</value>

        [DataMember(Name="activityComment")]
        public List<NcCommentType> ActivityComment { get; set; }

        /// <summary>
        /// A number for the specified maximum enrollment capacity of an activity. NIEM reference is j:ActivityCapacityQuantity
        /// </summary>
        /// <value>A number for the specified maximum enrollment capacity of an activity. NIEM reference is j:ActivityCapacityQuantity</value>

        [DataMember(Name="activityCapacityQuantity")]
        public List<NcQuantityType> ActivityCapacityQuantity { get; set; }

        /// <summary>
        /// True if the activity request was approved; false otherwise. NIEM reference is j:ActivityApprovedIndicator
        /// </summary>
        /// <value>True if the activity request was approved; false otherwise. NIEM reference is j:ActivityApprovedIndicator</value>

        [DataMember(Name="isActivityApproved")]
        public List<NiemXsboolean> IsActivityApproved { get; set; }

        /// <summary>
        /// A date an activity was requested by an entity. NIEM reference is j:ActivityRequestedDate
        /// </summary>
        /// <value>A date an activity was requested by an entity. NIEM reference is j:ActivityRequestedDate</value>

        [DataMember(Name="activityRequestedDate")]
        public List<NcDateType> ActivityRequestedDate { get; set; }

        /// <summary>
        /// A date an activity was reported to some entity. NIEM reference is j:ActivityReportedDate
        /// </summary>
        /// <value>A date an activity was reported to some entity. NIEM reference is j:ActivityReportedDate</value>

        [DataMember(Name="activityReportedDate")]
        public List<NcDateType> ActivityReportedDate { get; set; }

        /// <summary>
        /// An entity responsible for service of a legal document. NIEM reference is j:ActivityDocumentServer
        /// </summary>
        /// <value>An entity responsible for service of a legal document. NIEM reference is j:ActivityDocumentServer</value>

        [DataMember(Name="activityDocumentServer")]
        public List<NcEntityType> ActivityDocumentServer { get; set; }

        /// <summary>
        /// A date on which an activity was assigned. NIEM reference is j:ActivityAssignedDate
        /// </summary>
        /// <value>A date on which an activity was assigned. NIEM reference is j:ActivityAssignedDate</value>

        [DataMember(Name="activityAssignedDate")]
        public List<NcDateType> ActivityAssignedDate { get; set; }

        /// <summary>
        /// An account as reported by an observer. NIEM reference is j:Narrative
        /// </summary>
        /// <value>An account as reported by an observer. NIEM reference is j:Narrative</value>

        [DataMember(Name="narrative")]
        public List<NcCommentType> Narrative { get; set; }

        /// <summary>
        /// A description of the number of occurrences of an activity over a period of time. NIEM reference is j:ActivityFrequencyText
        /// </summary>
        /// <value>A description of the number of occurrences of an activity over a period of time. NIEM reference is j:ActivityFrequencyText</value>

        [DataMember(Name="activityFrequency")]
        public List<NcTextType> ActivityFrequency { get; set; }

        /// <summary>
        /// An identifying number for a case that this activity is a part of, where the case number belongs to the agency that owns the activity information. NIEM reference is j:CaseNumberText
        /// </summary>
        /// <value>An identifying number for a case that this activity is a part of, where the case number belongs to the agency that owns the activity information. NIEM reference is j:CaseNumberText</value>

        [DataMember(Name="caseNumber")]
        public List<NcTextType> CaseNumber { get; set; }

        /// <summary>
        /// An actual duration of an activity. NIEM reference is j:ActivityActualDuration
        /// </summary>
        /// <value>An actual duration of an activity. NIEM reference is j:ActivityActualDuration</value>

        [DataMember(Name="activityActualDuration")]
        public List<NiemXsduration> ActivityActualDuration { get; set; }

        /// <summary>
        /// An identifying number for a case submitted by an agency which is known or believed to be related to the case of this activity. NIEM reference is j:CaseLinkage
        /// </summary>
        /// <value>An identifying number for a case submitted by an agency which is known or believed to be related to the case of this activity. NIEM reference is j:CaseLinkage</value>

        [DataMember(Name="caseLinkage")]
        public List<JCaseLinkageType> CaseLinkage { get; set; }

        /// <summary>
        /// A prescribed period of time allowed or required for an activity. NIEM reference is j:ActivityPrescribedDuration
        /// </summary>
        /// <value>A prescribed period of time allowed or required for an activity. NIEM reference is j:ActivityPrescribedDuration</value>

        [DataMember(Name="activityPrescribedDuration")]
        public List<NiemXsduration> ActivityPrescribedDuration { get; set; }

        /// <summary>
        /// A date when an activity is verified. NIEM reference is j:ActivityVerifiedDate
        /// </summary>
        /// <value>A date when an activity is verified. NIEM reference is j:ActivityVerifiedDate</value>

        [DataMember(Name="activityVerifiedDate")]
        public List<NcDateType> ActivityVerifiedDate { get; set; }

        /// <summary>
        /// A signature associated with an activity event. NIEM reference is j:ActivitySignature
        /// </summary>
        /// <value>A signature associated with an activity event. NIEM reference is j:ActivitySignature</value>

        [DataMember(Name="activitySignature")]
        public List<JSignatureType> ActivitySignature { get; set; }

        /// <summary>
        /// A numerical identifier across multiple activities to define the order that they should be scheduled and undertaken. NIEM reference is j:ActivitySequenceNumeric
        /// </summary>
        /// <value>A numerical identifier across multiple activities to define the order that they should be scheduled and undertaken. NIEM reference is j:ActivitySequenceNumeric</value>

        [DataMember(Name="activitySequenceNumeric")]
        public List<NcNumericType> ActivitySequenceNumeric { get; set; }

        /// <summary>
        /// A date when an activity is scheduled. NIEM reference is j:ActivityScheduledDate
        /// </summary>
        /// <value>A date when an activity is scheduled. NIEM reference is j:ActivityScheduledDate</value>

        [DataMember(Name="activityScheduledDate")]
        public List<NcDateType> ActivityScheduledDate { get; set; }

        /// <summary>
        /// An entity to contact to validate a document. NIEM reference is j:ActivityDocumentValidator
        /// </summary>
        /// <value>An entity to contact to validate a document. NIEM reference is j:ActivityDocumentValidator</value>

        [DataMember(Name="activityDocumentValidator")]
        public List<NcEntityType> ActivityDocumentValidator { get; set; }

        /// <summary>
        /// An official associated with an activity NIEM reference is j:ActivityOfficial
        /// </summary>
        /// <value>An official associated with an activity NIEM reference is j:ActivityOfficial</value>

        [DataMember(Name="activityOfficial")]
        public List<NcPersonType> ActivityOfficial { get; set; }

        /// <summary>
        /// jActivityAugmentationType JSON-LD context
        /// </summary>
        /// <value>jActivityAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjActivityAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jActivityAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jActivityAugmentationTypeContext.jsonld")]
            JSONLDContextsjActivityAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jActivityAugmentationType JSON-LD context
        /// </summary>
        /// <value>jActivityAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JActivityAugmentationType {\n");
            sb.Append("  ActivityEstimatedDuration: ").Append(ActivityEstimatedDuration).Append("\n");
            sb.Append("  ActivityEffectiveDate: ").Append(ActivityEffectiveDate).Append("\n");
            sb.Append("  ActivityDueDate: ").Append(ActivityDueDate).Append("\n");
            sb.Append("  IsActivityCompleted: ").Append(IsActivityCompleted).Append("\n");
            sb.Append("  ActivityComment: ").Append(ActivityComment).Append("\n");
            sb.Append("  ActivityCapacityQuantity: ").Append(ActivityCapacityQuantity).Append("\n");
            sb.Append("  IsActivityApproved: ").Append(IsActivityApproved).Append("\n");
            sb.Append("  ActivityRequestedDate: ").Append(ActivityRequestedDate).Append("\n");
            sb.Append("  ActivityReportedDate: ").Append(ActivityReportedDate).Append("\n");
            sb.Append("  ActivityDocumentServer: ").Append(ActivityDocumentServer).Append("\n");
            sb.Append("  ActivityAssignedDate: ").Append(ActivityAssignedDate).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  ActivityFrequency: ").Append(ActivityFrequency).Append("\n");
            sb.Append("  CaseNumber: ").Append(CaseNumber).Append("\n");
            sb.Append("  ActivityActualDuration: ").Append(ActivityActualDuration).Append("\n");
            sb.Append("  CaseLinkage: ").Append(CaseLinkage).Append("\n");
            sb.Append("  ActivityPrescribedDuration: ").Append(ActivityPrescribedDuration).Append("\n");
            sb.Append("  ActivityVerifiedDate: ").Append(ActivityVerifiedDate).Append("\n");
            sb.Append("  ActivitySignature: ").Append(ActivitySignature).Append("\n");
            sb.Append("  ActivitySequenceNumeric: ").Append(ActivitySequenceNumeric).Append("\n");
            sb.Append("  ActivityScheduledDate: ").Append(ActivityScheduledDate).Append("\n");
            sb.Append("  ActivityDocumentValidator: ").Append(ActivityDocumentValidator).Append("\n");
            sb.Append("  ActivityOfficial: ").Append(ActivityOfficial).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JActivityAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JActivityAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JActivityAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JActivityAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActivityEstimatedDuration == other.ActivityEstimatedDuration ||
                    ActivityEstimatedDuration != null &&
                    ActivityEstimatedDuration.SequenceEqual(other.ActivityEstimatedDuration)
                ) && 
                (
                    ActivityEffectiveDate == other.ActivityEffectiveDate ||
                    ActivityEffectiveDate != null &&
                    ActivityEffectiveDate.SequenceEqual(other.ActivityEffectiveDate)
                ) && 
                (
                    ActivityDueDate == other.ActivityDueDate ||
                    ActivityDueDate != null &&
                    ActivityDueDate.SequenceEqual(other.ActivityDueDate)
                ) && 
                (
                    IsActivityCompleted == other.IsActivityCompleted ||
                    IsActivityCompleted != null &&
                    IsActivityCompleted.SequenceEqual(other.IsActivityCompleted)
                ) && 
                (
                    ActivityComment == other.ActivityComment ||
                    ActivityComment != null &&
                    ActivityComment.SequenceEqual(other.ActivityComment)
                ) && 
                (
                    ActivityCapacityQuantity == other.ActivityCapacityQuantity ||
                    ActivityCapacityQuantity != null &&
                    ActivityCapacityQuantity.SequenceEqual(other.ActivityCapacityQuantity)
                ) && 
                (
                    IsActivityApproved == other.IsActivityApproved ||
                    IsActivityApproved != null &&
                    IsActivityApproved.SequenceEqual(other.IsActivityApproved)
                ) && 
                (
                    ActivityRequestedDate == other.ActivityRequestedDate ||
                    ActivityRequestedDate != null &&
                    ActivityRequestedDate.SequenceEqual(other.ActivityRequestedDate)
                ) && 
                (
                    ActivityReportedDate == other.ActivityReportedDate ||
                    ActivityReportedDate != null &&
                    ActivityReportedDate.SequenceEqual(other.ActivityReportedDate)
                ) && 
                (
                    ActivityDocumentServer == other.ActivityDocumentServer ||
                    ActivityDocumentServer != null &&
                    ActivityDocumentServer.SequenceEqual(other.ActivityDocumentServer)
                ) && 
                (
                    ActivityAssignedDate == other.ActivityAssignedDate ||
                    ActivityAssignedDate != null &&
                    ActivityAssignedDate.SequenceEqual(other.ActivityAssignedDate)
                ) && 
                (
                    Narrative == other.Narrative ||
                    Narrative != null &&
                    Narrative.SequenceEqual(other.Narrative)
                ) && 
                (
                    ActivityFrequency == other.ActivityFrequency ||
                    ActivityFrequency != null &&
                    ActivityFrequency.SequenceEqual(other.ActivityFrequency)
                ) && 
                (
                    CaseNumber == other.CaseNumber ||
                    CaseNumber != null &&
                    CaseNumber.SequenceEqual(other.CaseNumber)
                ) && 
                (
                    ActivityActualDuration == other.ActivityActualDuration ||
                    ActivityActualDuration != null &&
                    ActivityActualDuration.SequenceEqual(other.ActivityActualDuration)
                ) && 
                (
                    CaseLinkage == other.CaseLinkage ||
                    CaseLinkage != null &&
                    CaseLinkage.SequenceEqual(other.CaseLinkage)
                ) && 
                (
                    ActivityPrescribedDuration == other.ActivityPrescribedDuration ||
                    ActivityPrescribedDuration != null &&
                    ActivityPrescribedDuration.SequenceEqual(other.ActivityPrescribedDuration)
                ) && 
                (
                    ActivityVerifiedDate == other.ActivityVerifiedDate ||
                    ActivityVerifiedDate != null &&
                    ActivityVerifiedDate.SequenceEqual(other.ActivityVerifiedDate)
                ) && 
                (
                    ActivitySignature == other.ActivitySignature ||
                    ActivitySignature != null &&
                    ActivitySignature.SequenceEqual(other.ActivitySignature)
                ) && 
                (
                    ActivitySequenceNumeric == other.ActivitySequenceNumeric ||
                    ActivitySequenceNumeric != null &&
                    ActivitySequenceNumeric.SequenceEqual(other.ActivitySequenceNumeric)
                ) && 
                (
                    ActivityScheduledDate == other.ActivityScheduledDate ||
                    ActivityScheduledDate != null &&
                    ActivityScheduledDate.SequenceEqual(other.ActivityScheduledDate)
                ) && 
                (
                    ActivityDocumentValidator == other.ActivityDocumentValidator ||
                    ActivityDocumentValidator != null &&
                    ActivityDocumentValidator.SequenceEqual(other.ActivityDocumentValidator)
                ) && 
                (
                    ActivityOfficial == other.ActivityOfficial ||
                    ActivityOfficial != null &&
                    ActivityOfficial.SequenceEqual(other.ActivityOfficial)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActivityEstimatedDuration != null)
                    hashCode = hashCode * 59 + ActivityEstimatedDuration.GetHashCode();
                    if (ActivityEffectiveDate != null)
                    hashCode = hashCode * 59 + ActivityEffectiveDate.GetHashCode();
                    if (ActivityDueDate != null)
                    hashCode = hashCode * 59 + ActivityDueDate.GetHashCode();
                    if (IsActivityCompleted != null)
                    hashCode = hashCode * 59 + IsActivityCompleted.GetHashCode();
                    if (ActivityComment != null)
                    hashCode = hashCode * 59 + ActivityComment.GetHashCode();
                    if (ActivityCapacityQuantity != null)
                    hashCode = hashCode * 59 + ActivityCapacityQuantity.GetHashCode();
                    if (IsActivityApproved != null)
                    hashCode = hashCode * 59 + IsActivityApproved.GetHashCode();
                    if (ActivityRequestedDate != null)
                    hashCode = hashCode * 59 + ActivityRequestedDate.GetHashCode();
                    if (ActivityReportedDate != null)
                    hashCode = hashCode * 59 + ActivityReportedDate.GetHashCode();
                    if (ActivityDocumentServer != null)
                    hashCode = hashCode * 59 + ActivityDocumentServer.GetHashCode();
                    if (ActivityAssignedDate != null)
                    hashCode = hashCode * 59 + ActivityAssignedDate.GetHashCode();
                    if (Narrative != null)
                    hashCode = hashCode * 59 + Narrative.GetHashCode();
                    if (ActivityFrequency != null)
                    hashCode = hashCode * 59 + ActivityFrequency.GetHashCode();
                    if (CaseNumber != null)
                    hashCode = hashCode * 59 + CaseNumber.GetHashCode();
                    if (ActivityActualDuration != null)
                    hashCode = hashCode * 59 + ActivityActualDuration.GetHashCode();
                    if (CaseLinkage != null)
                    hashCode = hashCode * 59 + CaseLinkage.GetHashCode();
                    if (ActivityPrescribedDuration != null)
                    hashCode = hashCode * 59 + ActivityPrescribedDuration.GetHashCode();
                    if (ActivityVerifiedDate != null)
                    hashCode = hashCode * 59 + ActivityVerifiedDate.GetHashCode();
                    if (ActivitySignature != null)
                    hashCode = hashCode * 59 + ActivitySignature.GetHashCode();
                    if (ActivitySequenceNumeric != null)
                    hashCode = hashCode * 59 + ActivitySequenceNumeric.GetHashCode();
                    if (ActivityScheduledDate != null)
                    hashCode = hashCode * 59 + ActivityScheduledDate.GetHashCode();
                    if (ActivityDocumentValidator != null)
                    hashCode = hashCode * 59 + ActivityDocumentValidator.GetHashCode();
                    if (ActivityOfficial != null)
                    hashCode = hashCode * 59 + ActivityOfficial.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JActivityAugmentationType left, JActivityAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JActivityAugmentationType left, JActivityAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
