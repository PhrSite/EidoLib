/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an alert message
    /// </summary>
    [DataContract]
    public partial class EmAlertNotificationType : IEquatable<EmAlertNotificationType>
    { 
        /// <summary>
        /// A time of the information of the alert message NIEM reference is em:AlertEffectiveDateTime
        /// </summary>
        /// <value>A time of the information of the alert message NIEM reference is em:AlertEffectiveDateTime</value>

        [DataMember(Name="alertEffectiveDateTime")]
        public List<NiemXsdateTime> AlertEffectiveDateTime { get; set; }

        /// <summary>
        /// A time of the information of the alert message expiring. If this item is not provided, each recipient is free to set its own policy as to when the message is no longer in effect NIEM reference is em:AlertExpirationDateTime
        /// </summary>
        /// <value>A time of the information of the alert message expiring. If this item is not provided, each recipient is free to set its own policy as to when the message is no longer in effect NIEM reference is em:AlertExpirationDateTime</value>

        [DataMember(Name="alertExpirationDateTime")]
        public List<NiemXsdateTime> AlertExpirationDateTime { get; set; }

        /// <summary>
        /// A text headline of the alert message. A brief human-readable headline. Note that some displays (for example, short messaging service devices) may only present this headline; it SHOULD be made as direct and actionable as possible while remaining short. 1 NIEM reference is em:AlertHeadlineText
        /// </summary>
        /// <value>A text headline of the alert message. A brief human-readable headline. Note that some displays (for example, short messaging service devices) may only present this headline; it SHOULD be made as direct and actionable as possible while remaining short. 1 NIEM reference is em:AlertHeadlineText</value>

        [DataMember(Name="alertHeadline")]
        public List<NcTextType> AlertHeadline { get; set; }

        /// <summary>
        /// A description of the recommended action to be taken by recipients of the alert message. An extended human readable instruction to targeted recipients. If different instructions are intended for different recipients, they should be represented by use of multiple info blocks NIEM reference is em:AlertInstructionsDescriptionText
        /// </summary>
        /// <value>A description of the recommended action to be taken by recipients of the alert message. An extended human readable instruction to targeted recipients. If different instructions are intended for different recipients, they should be represented by use of multiple info blocks NIEM reference is em:AlertInstructionsDescriptionText</value>

        [DataMember(Name="alertInstructionsDescription")]
        public List<NcTextType> AlertInstructionsDescription { get; set; }

        /// <summary>
        /// An identifier denoting the special handling of the alert message NIEM reference is em:AlertHandlingID
        /// </summary>
        /// <value>An identifier denoting the special handling of the alert message NIEM reference is em:AlertHandlingID</value>

        [DataMember(Name="alertHandlingId")]
        public List<NcIdentificationType> AlertHandlingId { get; set; }

        /// <summary>
        /// A code denoting the special handling of the alert message NIEM reference is em:AlertHandlingText
        /// </summary>
        /// <value>A code denoting the special handling of the alert message NIEM reference is em:AlertHandlingText</value>

        [DataMember(Name="alertHandling")]
        public List<NcTextType> AlertHandling { get; set; }

        /// <summary>
        /// A text describing the reason the alert message was distributed NIEM reference is em:AlertReasonText
        /// </summary>
        /// <value>A text describing the reason the alert message was distributed NIEM reference is em:AlertReasonText</value>

        [DataMember(Name="alertReason")]
        public List<NcTextType> AlertReason { get; set; }

        /// <summary>
        /// A code  value denoting the type of alert message NIEM reference is em:AlertCategoryCode
        /// </summary>
        /// <value>A code  value denoting the type of alert message NIEM reference is em:AlertCategoryCode</value>

        [DataMember(Name="alertCategoryCode")]
        public List<EmAlertCategoryCodeType> AlertCategoryCode { get; set; }

        /// <summary>
        /// A container for all component parts of the info sub-element of the alert message. Multiple occurrences are permitted within a single alert NIEM reference is em:AlertEventDetails
        /// </summary>
        /// <value>A container for all component parts of the info sub-element of the alert message. Multiple occurrences are permitted within a single alert NIEM reference is em:AlertEventDetails</value>

        [DataMember(Name="alertEventDetails")]
        public List<EmAlertEventDetailsType> AlertEventDetails { get; set; }

        /// <summary>
        /// A location affected by an alert NIEM reference is em:AlertAffectedLocation
        /// </summary>
        /// <value>A location affected by an alert NIEM reference is em:AlertAffectedLocation</value>

        [DataMember(Name="alertAffectedLocation")]
        public List<EmAlertAffectedLocationType> AlertAffectedLocation { get; set; }

        /// <summary>
        /// A digital representation of an object NIEM reference is em:AlertSupplementaryDigitalResource
        /// </summary>
        /// <value>A digital representation of an object NIEM reference is em:AlertSupplementaryDigitalResource</value>

        [DataMember(Name="alertSupplementaryDigitalResource")]
        public List<EmAlertSupplementaryDigitalResourceType> AlertSupplementaryDigitalResource { get; set; }

        /// <summary>
        /// Additional information about an alert. NIEM reference is scr:AlertAugmentation
        /// </summary>
        /// <value>Additional information about an alert. NIEM reference is scr:AlertAugmentation</value>

        [DataMember(Name="alertAugmentation")]
        public List<ScrAlertAugmentationType> AlertAugmentation { get; set; }

        /// <summary>
        /// Additional information about a Alert. NIEM reference is j:AlertNotificationAugmentation
        /// </summary>
        /// <value>Additional information about a Alert. NIEM reference is j:AlertNotificationAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JAlertNotificationAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// emAlertNotificationType JSON-LD context
        /// </summary>
        /// <value>emAlertNotificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemAlertNotificationTypeContextJsonldEnum for ../JSON-LD_Contexts/emAlertNotificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emAlertNotificationTypeContext.jsonld")]
            JSONLDContextsemAlertNotificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emAlertNotificationType JSON-LD context
        /// </summary>
        /// <value>emAlertNotificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmAlertNotificationType {\n");
            sb.Append("  AlertEffectiveDateTime: ").Append(AlertEffectiveDateTime).Append("\n");
            sb.Append("  AlertExpirationDateTime: ").Append(AlertExpirationDateTime).Append("\n");
            sb.Append("  AlertHeadline: ").Append(AlertHeadline).Append("\n");
            sb.Append("  AlertInstructionsDescription: ").Append(AlertInstructionsDescription).Append("\n");
            sb.Append("  AlertHandlingId: ").Append(AlertHandlingId).Append("\n");
            sb.Append("  AlertHandling: ").Append(AlertHandling).Append("\n");
            sb.Append("  AlertReason: ").Append(AlertReason).Append("\n");
            sb.Append("  AlertCategoryCode: ").Append(AlertCategoryCode).Append("\n");
            sb.Append("  AlertEventDetails: ").Append(AlertEventDetails).Append("\n");
            sb.Append("  AlertAffectedLocation: ").Append(AlertAffectedLocation).Append("\n");
            sb.Append("  AlertSupplementaryDigitalResource: ").Append(AlertSupplementaryDigitalResource).Append("\n");
            sb.Append("  AlertAugmentation: ").Append(AlertAugmentation).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmAlertNotificationType)obj);
        }

        /// <summary>
        /// Returns true if EmAlertNotificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmAlertNotificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmAlertNotificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AlertEffectiveDateTime == other.AlertEffectiveDateTime ||
                    AlertEffectiveDateTime != null &&
                    AlertEffectiveDateTime.SequenceEqual(other.AlertEffectiveDateTime)
                ) && 
                (
                    AlertExpirationDateTime == other.AlertExpirationDateTime ||
                    AlertExpirationDateTime != null &&
                    AlertExpirationDateTime.SequenceEqual(other.AlertExpirationDateTime)
                ) && 
                (
                    AlertHeadline == other.AlertHeadline ||
                    AlertHeadline != null &&
                    AlertHeadline.SequenceEqual(other.AlertHeadline)
                ) && 
                (
                    AlertInstructionsDescription == other.AlertInstructionsDescription ||
                    AlertInstructionsDescription != null &&
                    AlertInstructionsDescription.SequenceEqual(other.AlertInstructionsDescription)
                ) && 
                (
                    AlertHandlingId == other.AlertHandlingId ||
                    AlertHandlingId != null &&
                    AlertHandlingId.SequenceEqual(other.AlertHandlingId)
                ) && 
                (
                    AlertHandling == other.AlertHandling ||
                    AlertHandling != null &&
                    AlertHandling.SequenceEqual(other.AlertHandling)
                ) && 
                (
                    AlertReason == other.AlertReason ||
                    AlertReason != null &&
                    AlertReason.SequenceEqual(other.AlertReason)
                ) && 
                (
                    AlertCategoryCode == other.AlertCategoryCode ||
                    AlertCategoryCode != null &&
                    AlertCategoryCode.SequenceEqual(other.AlertCategoryCode)
                ) && 
                (
                    AlertEventDetails == other.AlertEventDetails ||
                    AlertEventDetails != null &&
                    AlertEventDetails.SequenceEqual(other.AlertEventDetails)
                ) && 
                (
                    AlertAffectedLocation == other.AlertAffectedLocation ||
                    AlertAffectedLocation != null &&
                    AlertAffectedLocation.SequenceEqual(other.AlertAffectedLocation)
                ) && 
                (
                    AlertSupplementaryDigitalResource == other.AlertSupplementaryDigitalResource ||
                    AlertSupplementaryDigitalResource != null &&
                    AlertSupplementaryDigitalResource.SequenceEqual(other.AlertSupplementaryDigitalResource)
                ) && 
                (
                    AlertAugmentation == other.AlertAugmentation ||
                    AlertAugmentation != null &&
                    AlertAugmentation.SequenceEqual(other.AlertAugmentation)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AlertEffectiveDateTime != null)
                    hashCode = hashCode * 59 + AlertEffectiveDateTime.GetHashCode();
                    if (AlertExpirationDateTime != null)
                    hashCode = hashCode * 59 + AlertExpirationDateTime.GetHashCode();
                    if (AlertHeadline != null)
                    hashCode = hashCode * 59 + AlertHeadline.GetHashCode();
                    if (AlertInstructionsDescription != null)
                    hashCode = hashCode * 59 + AlertInstructionsDescription.GetHashCode();
                    if (AlertHandlingId != null)
                    hashCode = hashCode * 59 + AlertHandlingId.GetHashCode();
                    if (AlertHandling != null)
                    hashCode = hashCode * 59 + AlertHandling.GetHashCode();
                    if (AlertReason != null)
                    hashCode = hashCode * 59 + AlertReason.GetHashCode();
                    if (AlertCategoryCode != null)
                    hashCode = hashCode * 59 + AlertCategoryCode.GetHashCode();
                    if (AlertEventDetails != null)
                    hashCode = hashCode * 59 + AlertEventDetails.GetHashCode();
                    if (AlertAffectedLocation != null)
                    hashCode = hashCode * 59 + AlertAffectedLocation.GetHashCode();
                    if (AlertSupplementaryDigitalResource != null)
                    hashCode = hashCode * 59 + AlertSupplementaryDigitalResource.GetHashCode();
                    if (AlertAugmentation != null)
                    hashCode = hashCode * 59 + AlertAugmentation.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmAlertNotificationType left, EmAlertNotificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmAlertNotificationType left, EmAlertNotificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
