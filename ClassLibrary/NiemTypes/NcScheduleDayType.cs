/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a plan or agenda for the activities of a day.
    /// </summary>
    [DataContract]
    public partial class NcScheduleDayType : IEquatable<NcScheduleDayType>
    { 
        /// <summary>
        /// A schedule status for a particular day. NIEM reference is nc:ScheduleDayStatus
        /// </summary>
        /// <value>A schedule status for a particular day. NIEM reference is nc:ScheduleDayStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A date for which an activity is scheduled. NIEM reference is nc:ScheduleDate
        /// </summary>
        /// <value>A date for which an activity is scheduled. NIEM reference is nc:ScheduleDate</value>

        [DataMember(Name="scheduleDate")]
        public List<NcDateType> ScheduleDate { get; set; }

        /// <summary>
        /// A day of the week with the given schedule information. NIEM reference is nc:ScheduleDayOfWeekCode
        /// </summary>
        /// <value>A day of the week with the given schedule information. NIEM reference is nc:ScheduleDayOfWeekCode</value>

        [DataMember(Name="ofWeekCode")]
        public List<NcDayOfWeekCodeType> OfWeekCode { get; set; }

        /// <summary>
        /// An activity planned to occur on a certain date and time. NIEM reference is nc:ScheduleActivityText
        /// </summary>
        /// <value>An activity planned to occur on a certain date and time. NIEM reference is nc:ScheduleActivityText</value>

        [DataMember(Name="scheduleActivity")]
        public List<NcTextType> ScheduleActivity { get; set; }

        /// <summary>
        /// A time range for the schedule. NIEM reference is nc:ScheduleTimeRange
        /// </summary>
        /// <value>A time range for the schedule. NIEM reference is nc:ScheduleTimeRange</value>

        [DataMember(Name="scheduleTimeRange")]
        public List<NcTimeRangeType> ScheduleTimeRange { get; set; }

        /// <summary>
        /// A person for whom an activity is scheduled. NIEM reference is nc:SchedulePerson
        /// </summary>
        /// <value>A person for whom an activity is scheduled. NIEM reference is nc:SchedulePerson</value>

        [DataMember(Name="schedulePerson")]
        public List<NcPersonType> SchedulePerson { get; set; }

        /// <summary>
        /// A time at which an activity is scheduled to begin. NIEM reference is nc:ScheduleDayStartTime
        /// </summary>
        /// <value>A time at which an activity is scheduled to begin. NIEM reference is nc:ScheduleDayStartTime</value>

        [DataMember(Name="startTime")]
        public List<NiemXstime> StartTime { get; set; }

        /// <summary>
        /// A time at which an activity is scheduled to end. NIEM reference is nc:ScheduleDayEndTime
        /// </summary>
        /// <value>A time at which an activity is scheduled to end. NIEM reference is nc:ScheduleDayEndTime</value>

        [DataMember(Name="endTime")]
        public List<NiemXstime> EndTime { get; set; }

        /// <summary>
        /// A schedule where the hours are the same for weekdays. NIEM reference is cbrn:ScheduleByWeek
        /// </summary>
        /// <value>A schedule where the hours are the same for weekdays. NIEM reference is cbrn:ScheduleByWeek</value>

        [DataMember(Name="scheduleByWeek")]
        public List<CbrnScheduleByWeekType> ScheduleByWeek { get; set; }

        /// <summary>
        /// A schedule where the hours are not the same for weekdays. NIEM reference is cbrn:ScheduleByWeekDay
        /// </summary>
        /// <value>A schedule where the hours are not the same for weekdays. NIEM reference is cbrn:ScheduleByWeekDay</value>

        [DataMember(Name="scheduleByWeekDay")]
        public List<CbrnScheduleByWeekDayType> ScheduleByWeekDay { get; set; }

        /// <summary>
        /// ncScheduleDayType JSON-LD context
        /// </summary>
        /// <value>ncScheduleDayType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncScheduleDayTypeContextJsonldEnum for ../JSON-LD_Contexts/ncScheduleDayTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncScheduleDayTypeContext.jsonld")]
            JSONLDContextsncScheduleDayTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncScheduleDayType JSON-LD context
        /// </summary>
        /// <value>ncScheduleDayType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcScheduleDayType {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ScheduleDate: ").Append(ScheduleDate).Append("\n");
            sb.Append("  OfWeekCode: ").Append(OfWeekCode).Append("\n");
            sb.Append("  ScheduleActivity: ").Append(ScheduleActivity).Append("\n");
            sb.Append("  ScheduleTimeRange: ").Append(ScheduleTimeRange).Append("\n");
            sb.Append("  SchedulePerson: ").Append(SchedulePerson).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ScheduleByWeek: ").Append(ScheduleByWeek).Append("\n");
            sb.Append("  ScheduleByWeekDay: ").Append(ScheduleByWeekDay).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcScheduleDayType)obj);
        }

        /// <summary>
        /// Returns true if NcScheduleDayType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcScheduleDayType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcScheduleDayType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    ScheduleDate == other.ScheduleDate ||
                    ScheduleDate != null &&
                    ScheduleDate.SequenceEqual(other.ScheduleDate)
                ) && 
                (
                    OfWeekCode == other.OfWeekCode ||
                    OfWeekCode != null &&
                    OfWeekCode.SequenceEqual(other.OfWeekCode)
                ) && 
                (
                    ScheduleActivity == other.ScheduleActivity ||
                    ScheduleActivity != null &&
                    ScheduleActivity.SequenceEqual(other.ScheduleActivity)
                ) && 
                (
                    ScheduleTimeRange == other.ScheduleTimeRange ||
                    ScheduleTimeRange != null &&
                    ScheduleTimeRange.SequenceEqual(other.ScheduleTimeRange)
                ) && 
                (
                    SchedulePerson == other.SchedulePerson ||
                    SchedulePerson != null &&
                    SchedulePerson.SequenceEqual(other.SchedulePerson)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.SequenceEqual(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.SequenceEqual(other.EndTime)
                ) && 
                (
                    ScheduleByWeek == other.ScheduleByWeek ||
                    ScheduleByWeek != null &&
                    ScheduleByWeek.SequenceEqual(other.ScheduleByWeek)
                ) && 
                (
                    ScheduleByWeekDay == other.ScheduleByWeekDay ||
                    ScheduleByWeekDay != null &&
                    ScheduleByWeekDay.SequenceEqual(other.ScheduleByWeekDay)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ScheduleDate != null)
                    hashCode = hashCode * 59 + ScheduleDate.GetHashCode();
                    if (OfWeekCode != null)
                    hashCode = hashCode * 59 + OfWeekCode.GetHashCode();
                    if (ScheduleActivity != null)
                    hashCode = hashCode * 59 + ScheduleActivity.GetHashCode();
                    if (ScheduleTimeRange != null)
                    hashCode = hashCode * 59 + ScheduleTimeRange.GetHashCode();
                    if (SchedulePerson != null)
                    hashCode = hashCode * 59 + SchedulePerson.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (ScheduleByWeek != null)
                    hashCode = hashCode * 59 + ScheduleByWeek.GetHashCode();
                    if (ScheduleByWeekDay != null)
                    hashCode = hashCode * 59 + ScheduleByWeekDay.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcScheduleDayType left, NcScheduleDayType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcScheduleDayType left, NcScheduleDayType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
