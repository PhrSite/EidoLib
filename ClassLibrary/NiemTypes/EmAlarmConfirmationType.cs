/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the container for information related to the confirmation of an alarm
    /// </summary>
    [DataContract]
    public partial class EmAlarmConfirmationType : IEquatable<EmAlarmConfirmationType>
    { 
        /// <summary>
        /// A description of  mechanism used to confirm the validity of the alarm. e.g., observed video, live audio, guard verified, call to premises etc. If the alarm is confirmed through a call to the premise, then the details of this call are indicated in the Call to Premise text field NIEM reference is em:AlarmConfirmationMethodDescriptionText
        /// </summary>
        /// <value>A description of  mechanism used to confirm the validity of the alarm. e.g., observed video, live audio, guard verified, call to premises etc. If the alarm is confirmed through a call to the premise, then the details of this call are indicated in the Call to Premise text field NIEM reference is em:AlarmConfirmationMethodDescriptionText</value>

        [DataMember(Name="methodDescription")]
        public List<NcTextType> MethodDescription { get; set; }

        /// <summary>
        /// A code that allows the Public Safety Answering Point or monitoring station to bypass any call screening and directly reach the alarm subscriber NIEM reference is em:AlarmConfirmationCallPrivacyBypassPasscodeText
        /// </summary>
        /// <value>A code that allows the Public Safety Answering Point or monitoring station to bypass any call screening and directly reach the alarm subscriber NIEM reference is em:AlarmConfirmationCallPrivacyBypassPasscodeText</value>

        [DataMember(Name="callPrivacyBypassPasscode")]
        public List<NcTextType> CallPrivacyBypassPasscode { get; set; }

        /// <summary>
        /// True if an agency is to call the premise before arrival; false otherwise NIEM reference is em:AlarmConfirmationCallToPremisesIndicator
        /// </summary>
        /// <value>True if an agency is to call the premise before arrival; false otherwise NIEM reference is em:AlarmConfirmationCallToPremisesIndicator</value>

        [DataMember(Name="isCallToPremises")]
        public List<NiemXsboolean> IsCallToPremises { get; set; }

        /// <summary>
        /// A description of the results of the actions taken by the alarm company to attempt to reach someone at the premise before notifying the Public Safety Answering Point NIEM reference is em:AlarmConfirmationCallToPremisesResultsDescriptionText
        /// </summary>
        /// <value>A description of the results of the actions taken by the alarm company to attempt to reach someone at the premise before notifying the Public Safety Answering Point NIEM reference is em:AlarmConfirmationCallToPremisesResultsDescriptionText</value>

        [DataMember(Name="callToPremisesResultsDescription")]
        public List<NcTextType> CallToPremisesResultsDescription { get; set; }

        /// <summary>
        /// emAlarmConfirmationType JSON-LD context
        /// </summary>
        /// <value>emAlarmConfirmationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemAlarmConfirmationTypeContextJsonldEnum for ../JSON-LD_Contexts/emAlarmConfirmationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emAlarmConfirmationTypeContext.jsonld")]
            JSONLDContextsemAlarmConfirmationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emAlarmConfirmationType JSON-LD context
        /// </summary>
        /// <value>emAlarmConfirmationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmAlarmConfirmationType {\n");
            sb.Append("  MethodDescription: ").Append(MethodDescription).Append("\n");
            sb.Append("  CallPrivacyBypassPasscode: ").Append(CallPrivacyBypassPasscode).Append("\n");
            sb.Append("  IsCallToPremises: ").Append(IsCallToPremises).Append("\n");
            sb.Append("  CallToPremisesResultsDescription: ").Append(CallToPremisesResultsDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmAlarmConfirmationType)obj);
        }

        /// <summary>
        /// Returns true if EmAlarmConfirmationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmAlarmConfirmationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmAlarmConfirmationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MethodDescription == other.MethodDescription ||
                    MethodDescription != null &&
                    MethodDescription.SequenceEqual(other.MethodDescription)
                ) && 
                (
                    CallPrivacyBypassPasscode == other.CallPrivacyBypassPasscode ||
                    CallPrivacyBypassPasscode != null &&
                    CallPrivacyBypassPasscode.SequenceEqual(other.CallPrivacyBypassPasscode)
                ) && 
                (
                    IsCallToPremises == other.IsCallToPremises ||
                    IsCallToPremises != null &&
                    IsCallToPremises.SequenceEqual(other.IsCallToPremises)
                ) && 
                (
                    CallToPremisesResultsDescription == other.CallToPremisesResultsDescription ||
                    CallToPremisesResultsDescription != null &&
                    CallToPremisesResultsDescription.SequenceEqual(other.CallToPremisesResultsDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MethodDescription != null)
                    hashCode = hashCode * 59 + MethodDescription.GetHashCode();
                    if (CallPrivacyBypassPasscode != null)
                    hashCode = hashCode * 59 + CallPrivacyBypassPasscode.GetHashCode();
                    if (IsCallToPremises != null)
                    hashCode = hashCode * 59 + IsCallToPremises.GetHashCode();
                    if (CallToPremisesResultsDescription != null)
                    hashCode = hashCode * 59 + CallToPremisesResultsDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmAlarmConfirmationType left, EmAlarmConfirmationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmAlarmConfirmationType left, EmAlarmConfirmationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
