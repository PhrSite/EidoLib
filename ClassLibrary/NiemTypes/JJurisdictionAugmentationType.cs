/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a jurisdiction.
    /// </summary>
    [DataContract]
    public partial class JJurisdictionAugmentationType : IEquatable<JJurisdictionAugmentationType>
    { 
        /// <summary>
        /// A description of an area an organization or person has some kind of authoritative capacity or responsibility over. NIEM reference is j:JurisdictionDescriptionText
        /// </summary>
        /// <value>A description of an area an organization or person has some kind of authoritative capacity or responsibility over. NIEM reference is j:JurisdictionDescriptionText</value>

        [DataMember(Name="jurisdictionDescription")]
        public List<NcTextType> JurisdictionDescription { get; set; }

        /// <summary>
        /// A district in a jurisdiction. NIEM reference is j:JurisdictionDistrictText
        /// </summary>
        /// <value>A district in a jurisdiction. NIEM reference is j:JurisdictionDistrictText</value>

        [DataMember(Name="jurisdictionDistrict")]
        public List<NcTextType> JurisdictionDistrict { get; set; }

        /// <summary>
        /// A restriction or limitation of a jurisdiction. NIEM reference is j:JurisdictionRestrictionText
        /// </summary>
        /// <value>A restriction or limitation of a jurisdiction. NIEM reference is j:JurisdictionRestrictionText</value>

        [DataMember(Name="jurisdictionRestriction")]
        public List<NcTextType> JurisdictionRestriction { get; set; }

        /// <summary>
        /// A name or identification of a district in a jurisdiction. NIEM reference is j:JurisdictionDistrictIdentification
        /// </summary>
        /// <value>A name or identification of a district in a jurisdiction. NIEM reference is j:JurisdictionDistrictIdentification</value>

        [DataMember(Name="jurisdictionDistrictIdentification")]
        public List<NcIdentificationType> JurisdictionDistrictIdentification { get; set; }

        /// <summary>
        /// A title issued by a jurisdiction. NIEM reference is j:JurisdictionTitle
        /// </summary>
        /// <value>A title issued by a jurisdiction. NIEM reference is j:JurisdictionTitle</value>

        [DataMember(Name="jurisdictionTitle")]
        public List<JItemTitleType> JurisdictionTitle { get; set; }

        /// <summary>
        /// jJurisdictionAugmentationType JSON-LD context
        /// </summary>
        /// <value>jJurisdictionAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjJurisdictionAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jJurisdictionAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jJurisdictionAugmentationTypeContext.jsonld")]
            JSONLDContextsjJurisdictionAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jJurisdictionAugmentationType JSON-LD context
        /// </summary>
        /// <value>jJurisdictionAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JJurisdictionAugmentationType {\n");
            sb.Append("  JurisdictionDescription: ").Append(JurisdictionDescription).Append("\n");
            sb.Append("  JurisdictionDistrict: ").Append(JurisdictionDistrict).Append("\n");
            sb.Append("  JurisdictionRestriction: ").Append(JurisdictionRestriction).Append("\n");
            sb.Append("  JurisdictionDistrictIdentification: ").Append(JurisdictionDistrictIdentification).Append("\n");
            sb.Append("  JurisdictionTitle: ").Append(JurisdictionTitle).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JJurisdictionAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JJurisdictionAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JJurisdictionAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JJurisdictionAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JurisdictionDescription == other.JurisdictionDescription ||
                    JurisdictionDescription != null &&
                    JurisdictionDescription.SequenceEqual(other.JurisdictionDescription)
                ) && 
                (
                    JurisdictionDistrict == other.JurisdictionDistrict ||
                    JurisdictionDistrict != null &&
                    JurisdictionDistrict.SequenceEqual(other.JurisdictionDistrict)
                ) && 
                (
                    JurisdictionRestriction == other.JurisdictionRestriction ||
                    JurisdictionRestriction != null &&
                    JurisdictionRestriction.SequenceEqual(other.JurisdictionRestriction)
                ) && 
                (
                    JurisdictionDistrictIdentification == other.JurisdictionDistrictIdentification ||
                    JurisdictionDistrictIdentification != null &&
                    JurisdictionDistrictIdentification.SequenceEqual(other.JurisdictionDistrictIdentification)
                ) && 
                (
                    JurisdictionTitle == other.JurisdictionTitle ||
                    JurisdictionTitle != null &&
                    JurisdictionTitle.SequenceEqual(other.JurisdictionTitle)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (JurisdictionDescription != null)
                    hashCode = hashCode * 59 + JurisdictionDescription.GetHashCode();
                    if (JurisdictionDistrict != null)
                    hashCode = hashCode * 59 + JurisdictionDistrict.GetHashCode();
                    if (JurisdictionRestriction != null)
                    hashCode = hashCode * 59 + JurisdictionRestriction.GetHashCode();
                    if (JurisdictionDistrictIdentification != null)
                    hashCode = hashCode * 59 + JurisdictionDistrictIdentification.GetHashCode();
                    if (JurisdictionTitle != null)
                    hashCode = hashCode * 59 + JurisdictionTitle.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JJurisdictionAugmentationType left, JJurisdictionAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JJurisdictionAugmentationType left, JJurisdictionAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
