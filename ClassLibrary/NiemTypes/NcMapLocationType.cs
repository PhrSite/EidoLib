/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a location identified by map or grid coordinates.
    /// </summary>
    [DataContract]
    public partial class NcMapLocationType : IEquatable<NcMapLocationType>
    { 
        /// <summary>
        /// A coordinate of a point on a map. NIEM reference is nc:MapCoordinateFullText
        /// </summary>
        /// <value>A coordinate of a point on a map. NIEM reference is nc:MapCoordinateFullText</value>

        [DataMember(Name="mapCoordinateFull")]
        public List<NcTextType> MapCoordinateFull { get; set; }

        /// <summary>
        /// A date a map was published, copyrighted or became effective for use. NIEM reference is nc:MapDate
        /// </summary>
        /// <value>A date a map was published, copyrighted or became effective for use. NIEM reference is nc:MapDate</value>

        [DataMember(Name="mapDate")]
        public List<NcDateType> MapDate { get; set; }

        /// <summary>
        /// A height or elevation of a point on a map. NIEM reference is nc:MapElevationCoordinateText
        /// </summary>
        /// <value>A height or elevation of a point on a map. NIEM reference is nc:MapElevationCoordinateText</value>

        [DataMember(Name="mapElevationCoordinate")]
        public List<NcTextType> MapElevationCoordinate { get; set; }

        /// <summary>
        /// A horizontal location of a point on a map. NIEM reference is nc:MapHorizontalCoordinateText
        /// </summary>
        /// <value>A horizontal location of a point on a map. NIEM reference is nc:MapHorizontalCoordinateText</value>

        [DataMember(Name="mapHorizontalCoordinate")]
        public List<NcTextType> MapHorizontalCoordinate { get; set; }

        /// <summary>
        /// A description of a map location. NIEM reference is nc:MapLocationDescriptionText
        /// </summary>
        /// <value>A description of a map location. NIEM reference is nc:MapLocationDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A name of a map. NIEM reference is nc:MapName
        /// </summary>
        /// <value>A name of a map. NIEM reference is nc:MapName</value>

        [DataMember(Name="mapName")]
        public List<NcTextType> MapName { get; set; }

        /// <summary>
        /// An identifier of a page number in a map. NIEM reference is nc:MapPageID
        /// </summary>
        /// <value>An identifier of a page number in a map. NIEM reference is nc:MapPageID</value>

        [DataMember(Name="mapPageId")]
        public List<NiemXsstring> MapPageId { get; set; }

        /// <summary>
        /// A quadrant or square in a map. NIEM reference is nc:MapQuadrantText
        /// </summary>
        /// <value>A quadrant or square in a map. NIEM reference is nc:MapQuadrantText</value>

        [DataMember(Name="mapQuadrant")]
        public List<NcTextType> MapQuadrant { get; set; }

        /// <summary>
        /// An identifier of a version of a map. NIEM reference is nc:MapVersionID
        /// </summary>
        /// <value>An identifier of a version of a map. NIEM reference is nc:MapVersionID</value>

        [DataMember(Name="mapVersionId")]
        public List<NiemXsstring> MapVersionId { get; set; }

        /// <summary>
        /// A vertical location of a point on a map. NIEM reference is nc:MapVerticalCoordinateText
        /// </summary>
        /// <value>A vertical location of a point on a map. NIEM reference is nc:MapVerticalCoordinateText</value>

        [DataMember(Name="mapVerticalCoordinate")]
        public List<NcTextType> MapVerticalCoordinate { get; set; }

        /// <summary>
        /// ncMapLocationType JSON-LD context
        /// </summary>
        /// <value>ncMapLocationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncMapLocationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncMapLocationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncMapLocationTypeContext.jsonld")]
            JSONLDContextsncMapLocationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncMapLocationType JSON-LD context
        /// </summary>
        /// <value>ncMapLocationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcMapLocationType {\n");
            sb.Append("  MapCoordinateFull: ").Append(MapCoordinateFull).Append("\n");
            sb.Append("  MapDate: ").Append(MapDate).Append("\n");
            sb.Append("  MapElevationCoordinate: ").Append(MapElevationCoordinate).Append("\n");
            sb.Append("  MapHorizontalCoordinate: ").Append(MapHorizontalCoordinate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  MapName: ").Append(MapName).Append("\n");
            sb.Append("  MapPageId: ").Append(MapPageId).Append("\n");
            sb.Append("  MapQuadrant: ").Append(MapQuadrant).Append("\n");
            sb.Append("  MapVersionId: ").Append(MapVersionId).Append("\n");
            sb.Append("  MapVerticalCoordinate: ").Append(MapVerticalCoordinate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcMapLocationType)obj);
        }

        /// <summary>
        /// Returns true if NcMapLocationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcMapLocationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcMapLocationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MapCoordinateFull == other.MapCoordinateFull ||
                    MapCoordinateFull != null &&
                    MapCoordinateFull.SequenceEqual(other.MapCoordinateFull)
                ) && 
                (
                    MapDate == other.MapDate ||
                    MapDate != null &&
                    MapDate.SequenceEqual(other.MapDate)
                ) && 
                (
                    MapElevationCoordinate == other.MapElevationCoordinate ||
                    MapElevationCoordinate != null &&
                    MapElevationCoordinate.SequenceEqual(other.MapElevationCoordinate)
                ) && 
                (
                    MapHorizontalCoordinate == other.MapHorizontalCoordinate ||
                    MapHorizontalCoordinate != null &&
                    MapHorizontalCoordinate.SequenceEqual(other.MapHorizontalCoordinate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    MapName == other.MapName ||
                    MapName != null &&
                    MapName.SequenceEqual(other.MapName)
                ) && 
                (
                    MapPageId == other.MapPageId ||
                    MapPageId != null &&
                    MapPageId.SequenceEqual(other.MapPageId)
                ) && 
                (
                    MapQuadrant == other.MapQuadrant ||
                    MapQuadrant != null &&
                    MapQuadrant.SequenceEqual(other.MapQuadrant)
                ) && 
                (
                    MapVersionId == other.MapVersionId ||
                    MapVersionId != null &&
                    MapVersionId.SequenceEqual(other.MapVersionId)
                ) && 
                (
                    MapVerticalCoordinate == other.MapVerticalCoordinate ||
                    MapVerticalCoordinate != null &&
                    MapVerticalCoordinate.SequenceEqual(other.MapVerticalCoordinate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MapCoordinateFull != null)
                    hashCode = hashCode * 59 + MapCoordinateFull.GetHashCode();
                    if (MapDate != null)
                    hashCode = hashCode * 59 + MapDate.GetHashCode();
                    if (MapElevationCoordinate != null)
                    hashCode = hashCode * 59 + MapElevationCoordinate.GetHashCode();
                    if (MapHorizontalCoordinate != null)
                    hashCode = hashCode * 59 + MapHorizontalCoordinate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (MapName != null)
                    hashCode = hashCode * 59 + MapName.GetHashCode();
                    if (MapPageId != null)
                    hashCode = hashCode * 59 + MapPageId.GetHashCode();
                    if (MapQuadrant != null)
                    hashCode = hashCode * 59 + MapQuadrant.GetHashCode();
                    if (MapVersionId != null)
                    hashCode = hashCode * 59 + MapVersionId.GetHashCode();
                    if (MapVerticalCoordinate != null)
                    hashCode = hashCode * 59 + MapVerticalCoordinate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcMapLocationType left, NcMapLocationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcMapLocationType left, NcMapLocationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
