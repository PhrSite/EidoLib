/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of programs for which a person may be considered for eligibility.
    /// </summary>
    [DataContract]
    public partial class HsEligibilityType : IEquatable<HsEligibilityType>
    { 
        /// <summary>
        /// A service for which a person is eligible. NIEM reference is hs:ServicesEligibilityIndicatorCode
        /// </summary>
        /// <value>A service for which a person is eligible. NIEM reference is hs:ServicesEligibilityIndicatorCode</value>

        [DataMember(Name="servicesIndicatorCode")]
        public List<HsServicesEligibilityIndicatorCodeType> ServicesIndicatorCode { get; set; }

        /// <summary>
        /// True if a client receives TANF Assistance or if their assets count; false otherwise. NIEM reference is hs:TANFIndicator
        /// </summary>
        /// <value>True if a client receives TANF Assistance or if their assets count; false otherwise. NIEM reference is hs:TANFIndicator</value>

        [DataMember(Name="isTanf")]
        public List<NiemXsboolean> IsTanf { get; set; }

        /// <summary>
        /// A former assistance. NIEM reference is hs:ChildSupportAssistanceStatusIndicatorCode
        /// </summary>
        /// <value>A former assistance. NIEM reference is hs:ChildSupportAssistanceStatusIndicatorCode</value>

        [DataMember(Name="childSupportAssistanceStatusIndicatorCode")]
        public List<NiemXsstring> ChildSupportAssistanceStatusIndicatorCode { get; set; }

        /// <summary>
        /// A number of countable months that a client has received TANF Benefits as an adult. NIEM reference is hs:TANFMonthsEligibilityQuantity
        /// </summary>
        /// <value>A number of countable months that a client has received TANF Benefits as an adult. NIEM reference is hs:TANFMonthsEligibilityQuantity</value>

        [DataMember(Name="tanfMonthsQuantity")]
        public List<NcQuantityType> TanfMonthsQuantity { get; set; }

        /// <summary>
        /// hsEligibilityType JSON-LD context
        /// </summary>
        /// <value>hsEligibilityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsEligibilityTypeContextJsonldEnum for ../JSON-LD_Contexts/hsEligibilityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsEligibilityTypeContext.jsonld")]
            JSONLDContextshsEligibilityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsEligibilityType JSON-LD context
        /// </summary>
        /// <value>hsEligibilityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsEligibilityType {\n");
            sb.Append("  ServicesIndicatorCode: ").Append(ServicesIndicatorCode).Append("\n");
            sb.Append("  IsTanf: ").Append(IsTanf).Append("\n");
            sb.Append("  ChildSupportAssistanceStatusIndicatorCode: ").Append(ChildSupportAssistanceStatusIndicatorCode).Append("\n");
            sb.Append("  TanfMonthsQuantity: ").Append(TanfMonthsQuantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsEligibilityType)obj);
        }

        /// <summary>
        /// Returns true if HsEligibilityType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsEligibilityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsEligibilityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServicesIndicatorCode == other.ServicesIndicatorCode ||
                    ServicesIndicatorCode != null &&
                    ServicesIndicatorCode.SequenceEqual(other.ServicesIndicatorCode)
                ) && 
                (
                    IsTanf == other.IsTanf ||
                    IsTanf != null &&
                    IsTanf.SequenceEqual(other.IsTanf)
                ) && 
                (
                    ChildSupportAssistanceStatusIndicatorCode == other.ChildSupportAssistanceStatusIndicatorCode ||
                    ChildSupportAssistanceStatusIndicatorCode != null &&
                    ChildSupportAssistanceStatusIndicatorCode.SequenceEqual(other.ChildSupportAssistanceStatusIndicatorCode)
                ) && 
                (
                    TanfMonthsQuantity == other.TanfMonthsQuantity ||
                    TanfMonthsQuantity != null &&
                    TanfMonthsQuantity.SequenceEqual(other.TanfMonthsQuantity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServicesIndicatorCode != null)
                    hashCode = hashCode * 59 + ServicesIndicatorCode.GetHashCode();
                    if (IsTanf != null)
                    hashCode = hashCode * 59 + IsTanf.GetHashCode();
                    if (ChildSupportAssistanceStatusIndicatorCode != null)
                    hashCode = hashCode * 59 + ChildSupportAssistanceStatusIndicatorCode.GetHashCode();
                    if (TanfMonthsQuantity != null)
                    hashCode = hashCode * 59 + TanfMonthsQuantity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsEligibilityType left, HsEligibilityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsEligibilityType left, HsEligibilityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
