/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an official examination of a vehicle.
    /// </summary>
    [DataContract]
    public partial class JVehicleInspectionType : NcActivityType, IEquatable<JVehicleInspectionType>
    { 
        /// <summary>
        /// An address for a facility at which an inspection is performed on a vehicle. NIEM reference is j:VehicleInspectionAddress
        /// </summary>
        /// <value>An address for a facility at which an inspection is performed on a vehicle. NIEM reference is j:VehicleInspectionAddress</value>

        [DataMember(Name="address")]
        public List<NcAddressType> Address { get; set; }

        /// <summary>
        /// An jurisdiction-assigned identification of a person or station that performed an inspection of a vehicle. NIEM reference is j:VehicleInspectionInspectorIdentification
        /// </summary>
        /// <value>An jurisdiction-assigned identification of a person or station that performed an inspection of a vehicle. NIEM reference is j:VehicleInspectionInspectorIdentification</value>

        [DataMember(Name="inspectorIdentification")]
        public List<NcIdentificationType> InspectorIdentification { get; set; }

        /// <summary>
        /// An authority which has jurisdiction over the location where an inspection is performed. NIEM reference is j:VehicleInspectionJurisdictionAuthorityCode
        /// </summary>
        /// <value>An authority which has jurisdiction over the location where an inspection is performed. NIEM reference is j:VehicleInspectionJurisdictionAuthorityCode</value>

        [DataMember(Name="jurisdictionAuthorityCode")]
        public List<AamvaD20JurisdictionAuthorityCodeType> JurisdictionAuthorityCode { get; set; }

        /// <summary>
        /// An authority which has jurisdiction over the location where an inspection is performed. NIEM reference is j:VehicleInspectionJurisdictionAuthorityText
        /// </summary>
        /// <value>An authority which has jurisdiction over the location where an inspection is performed. NIEM reference is j:VehicleInspectionJurisdictionAuthorityText</value>

        [DataMember(Name="jurisdictionAuthority")]
        public List<NcTextType> JurisdictionAuthority { get; set; }

        /// <summary>
        /// An indication of whether or not a vehicle has a current smog certificate. NIEM reference is j:VehicleInspectionSmogCertificateCode
        /// </summary>
        /// <value>An indication of whether or not a vehicle has a current smog certificate. NIEM reference is j:VehicleInspectionSmogCertificateCode</value>

        [DataMember(Name="smogCertificateCode")]
        public List<AamvaD20SmogCertificateCodeType> SmogCertificateCode { get; set; }

        /// <summary>
        /// An identification of a station which performs a vehicle inspection. NIEM reference is j:VehicleInspectionStationIdentification
        /// </summary>
        /// <value>An identification of a station which performs a vehicle inspection. NIEM reference is j:VehicleInspectionStationIdentification</value>

        [DataMember(Name="stationIdentification")]
        public List<NcIdentificationType> StationIdentification { get; set; }

        /// <summary>
        /// A kind of test used to conduct an inspection of a vehicle. NIEM reference is j:VehicleInspectionTestCategoryText
        /// </summary>
        /// <value>A kind of test used to conduct an inspection of a vehicle. NIEM reference is j:VehicleInspectionTestCategoryText</value>

        [DataMember(Name="testCategory")]
        public List<NcTextType> TestCategory { get; set; }

        /// <summary>
        /// jVehicleInspectionType JSON-LD context
        /// </summary>
        /// <value>jVehicleInspectionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjVehicleInspectionTypeContextJsonldEnum for ../JSON-LD_Contexts/jVehicleInspectionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jVehicleInspectionTypeContext.jsonld")]
            JSONLDContextsjVehicleInspectionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jVehicleInspectionType JSON-LD context
        /// </summary>
        /// <value>jVehicleInspectionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JVehicleInspectionType {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  InspectorIdentification: ").Append(InspectorIdentification).Append("\n");
            sb.Append("  JurisdictionAuthorityCode: ").Append(JurisdictionAuthorityCode).Append("\n");
            sb.Append("  JurisdictionAuthority: ").Append(JurisdictionAuthority).Append("\n");
            sb.Append("  SmogCertificateCode: ").Append(SmogCertificateCode).Append("\n");
            sb.Append("  StationIdentification: ").Append(StationIdentification).Append("\n");
            sb.Append("  TestCategory: ").Append(TestCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JVehicleInspectionType)obj);
        }

        /// <summary>
        /// Returns true if JVehicleInspectionType instances are equal
        /// </summary>
        /// <param name="other">Instance of JVehicleInspectionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JVehicleInspectionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.SequenceEqual(other.Address)
                ) && 
                (
                    InspectorIdentification == other.InspectorIdentification ||
                    InspectorIdentification != null &&
                    InspectorIdentification.SequenceEqual(other.InspectorIdentification)
                ) && 
                (
                    JurisdictionAuthorityCode == other.JurisdictionAuthorityCode ||
                    JurisdictionAuthorityCode != null &&
                    JurisdictionAuthorityCode.SequenceEqual(other.JurisdictionAuthorityCode)
                ) && 
                (
                    JurisdictionAuthority == other.JurisdictionAuthority ||
                    JurisdictionAuthority != null &&
                    JurisdictionAuthority.SequenceEqual(other.JurisdictionAuthority)
                ) && 
                (
                    SmogCertificateCode == other.SmogCertificateCode ||
                    SmogCertificateCode != null &&
                    SmogCertificateCode.SequenceEqual(other.SmogCertificateCode)
                ) && 
                (
                    StationIdentification == other.StationIdentification ||
                    StationIdentification != null &&
                    StationIdentification.SequenceEqual(other.StationIdentification)
                ) && 
                (
                    TestCategory == other.TestCategory ||
                    TestCategory != null &&
                    TestCategory.SequenceEqual(other.TestCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (InspectorIdentification != null)
                    hashCode = hashCode * 59 + InspectorIdentification.GetHashCode();
                    if (JurisdictionAuthorityCode != null)
                    hashCode = hashCode * 59 + JurisdictionAuthorityCode.GetHashCode();
                    if (JurisdictionAuthority != null)
                    hashCode = hashCode * 59 + JurisdictionAuthority.GetHashCode();
                    if (SmogCertificateCode != null)
                    hashCode = hashCode * 59 + SmogCertificateCode.GetHashCode();
                    if (StationIdentification != null)
                    hashCode = hashCode * 59 + StationIdentification.GetHashCode();
                    if (TestCategory != null)
                    hashCode = hashCode * 59 + TestCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JVehicleInspectionType left, JVehicleInspectionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JVehicleInspectionType left, JVehicleInspectionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
