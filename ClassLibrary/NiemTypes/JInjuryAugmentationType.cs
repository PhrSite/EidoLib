/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Injury.
    /// </summary>
    [DataContract]
    public partial class JInjuryAugmentationType : IEquatable<JInjuryAugmentationType>
    { 
        /// <summary>
        /// A date and time the medical unit was notified of the injury. NIEM reference is j:InjuryNoticedDate
        /// </summary>
        /// <value>A date and time the medical unit was notified of the injury. NIEM reference is j:InjuryNoticedDate</value>

        [DataMember(Name="injuryNoticedDate")]
        public List<NcDateType> InjuryNoticedDate { get; set; }

        /// <summary>
        /// A date the disposition of an injury was recorded. NIEM reference is j:InjuryDispositionDate
        /// </summary>
        /// <value>A date the disposition of an injury was recorded. NIEM reference is j:InjuryDispositionDate</value>

        [DataMember(Name="injuryDispositionDate")]
        public List<NcDateType> InjuryDispositionDate { get; set; }

        /// <summary>
        /// A description of the circumstances of the injury. NIEM reference is j:InjuryCircumstancesText
        /// </summary>
        /// <value>A description of the circumstances of the injury. NIEM reference is j:InjuryCircumstancesText</value>

        [DataMember(Name="injuryCircumstances")]
        public List<NcTextType> InjuryCircumstances { get; set; }

        /// <summary>
        /// A witness to the event that resulted in the injury. NIEM reference is j:InjuryWitness
        /// </summary>
        /// <value>A witness to the event that resulted in the injury. NIEM reference is j:InjuryWitness</value>

        [DataMember(Name="injuryWitness")]
        public List<JWitnessType> InjuryWitness { get; set; }

        /// <summary>
        /// A date on which the injury report was prepared. NIEM reference is j:InjuryReportedDate
        /// </summary>
        /// <value>A date on which the injury report was prepared. NIEM reference is j:InjuryReportedDate</value>

        [DataMember(Name="injuryReportedDate")]
        public List<NcDateType> InjuryReportedDate { get; set; }

        /// <summary>
        /// A date the injured person received medical attention. NIEM reference is j:InjuryReceivedMedicalAttentionDate
        /// </summary>
        /// <value>A date the injured person received medical attention. NIEM reference is j:InjuryReceivedMedicalAttentionDate</value>

        [DataMember(Name="injuryReceivedMedicalAttentionDate")]
        public List<NcDateType> InjuryReceivedMedicalAttentionDate { get; set; }

        /// <summary>
        /// A location description of an injury incident. NIEM reference is j:InjuryOccurrenceLocation
        /// </summary>
        /// <value>A location description of an injury incident. NIEM reference is j:InjuryOccurrenceLocation</value>

        [DataMember(Name="injuryOccurrenceLocation")]
        public List<NcLocationType> InjuryOccurrenceLocation { get; set; }

        /// <summary>
        /// A kind of method of how an injured person arrived for medical treatment. NIEM reference is j:InjuryModeOfArrivalText
        /// </summary>
        /// <value>A kind of method of how an injured person arrived for medical treatment. NIEM reference is j:InjuryModeOfArrivalText</value>

        [DataMember(Name="injuryModeOfArrival")]
        public List<NcTextType> InjuryModeOfArrival { get; set; }

        /// <summary>
        /// A disposition of an injury. NIEM reference is j:InjuryDispositionText
        /// </summary>
        /// <value>A disposition of an injury. NIEM reference is j:InjuryDispositionText</value>

        [DataMember(Name="injuryDisposition")]
        public List<NcTextType> InjuryDisposition { get; set; }

        /// <summary>
        /// A set of details on the other type of issue associated with the injury. NIEM reference is j:InjuryOtherDetailsText
        /// </summary>
        /// <value>A set of details on the other type of issue associated with the injury. NIEM reference is j:InjuryOtherDetailsText</value>

        [DataMember(Name="injuryOtherDetails")]
        public List<NcTextType> InjuryOtherDetails { get; set; }

        /// <summary>
        /// jInjuryAugmentationType JSON-LD context
        /// </summary>
        /// <value>jInjuryAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjInjuryAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jInjuryAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jInjuryAugmentationTypeContext.jsonld")]
            JSONLDContextsjInjuryAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jInjuryAugmentationType JSON-LD context
        /// </summary>
        /// <value>jInjuryAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JInjuryAugmentationType {\n");
            sb.Append("  InjuryNoticedDate: ").Append(InjuryNoticedDate).Append("\n");
            sb.Append("  InjuryDispositionDate: ").Append(InjuryDispositionDate).Append("\n");
            sb.Append("  InjuryCircumstances: ").Append(InjuryCircumstances).Append("\n");
            sb.Append("  InjuryWitness: ").Append(InjuryWitness).Append("\n");
            sb.Append("  InjuryReportedDate: ").Append(InjuryReportedDate).Append("\n");
            sb.Append("  InjuryReceivedMedicalAttentionDate: ").Append(InjuryReceivedMedicalAttentionDate).Append("\n");
            sb.Append("  InjuryOccurrenceLocation: ").Append(InjuryOccurrenceLocation).Append("\n");
            sb.Append("  InjuryModeOfArrival: ").Append(InjuryModeOfArrival).Append("\n");
            sb.Append("  InjuryDisposition: ").Append(InjuryDisposition).Append("\n");
            sb.Append("  InjuryOtherDetails: ").Append(InjuryOtherDetails).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JInjuryAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JInjuryAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JInjuryAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JInjuryAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InjuryNoticedDate == other.InjuryNoticedDate ||
                    InjuryNoticedDate != null &&
                    InjuryNoticedDate.SequenceEqual(other.InjuryNoticedDate)
                ) && 
                (
                    InjuryDispositionDate == other.InjuryDispositionDate ||
                    InjuryDispositionDate != null &&
                    InjuryDispositionDate.SequenceEqual(other.InjuryDispositionDate)
                ) && 
                (
                    InjuryCircumstances == other.InjuryCircumstances ||
                    InjuryCircumstances != null &&
                    InjuryCircumstances.SequenceEqual(other.InjuryCircumstances)
                ) && 
                (
                    InjuryWitness == other.InjuryWitness ||
                    InjuryWitness != null &&
                    InjuryWitness.SequenceEqual(other.InjuryWitness)
                ) && 
                (
                    InjuryReportedDate == other.InjuryReportedDate ||
                    InjuryReportedDate != null &&
                    InjuryReportedDate.SequenceEqual(other.InjuryReportedDate)
                ) && 
                (
                    InjuryReceivedMedicalAttentionDate == other.InjuryReceivedMedicalAttentionDate ||
                    InjuryReceivedMedicalAttentionDate != null &&
                    InjuryReceivedMedicalAttentionDate.SequenceEqual(other.InjuryReceivedMedicalAttentionDate)
                ) && 
                (
                    InjuryOccurrenceLocation == other.InjuryOccurrenceLocation ||
                    InjuryOccurrenceLocation != null &&
                    InjuryOccurrenceLocation.SequenceEqual(other.InjuryOccurrenceLocation)
                ) && 
                (
                    InjuryModeOfArrival == other.InjuryModeOfArrival ||
                    InjuryModeOfArrival != null &&
                    InjuryModeOfArrival.SequenceEqual(other.InjuryModeOfArrival)
                ) && 
                (
                    InjuryDisposition == other.InjuryDisposition ||
                    InjuryDisposition != null &&
                    InjuryDisposition.SequenceEqual(other.InjuryDisposition)
                ) && 
                (
                    InjuryOtherDetails == other.InjuryOtherDetails ||
                    InjuryOtherDetails != null &&
                    InjuryOtherDetails.SequenceEqual(other.InjuryOtherDetails)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InjuryNoticedDate != null)
                    hashCode = hashCode * 59 + InjuryNoticedDate.GetHashCode();
                    if (InjuryDispositionDate != null)
                    hashCode = hashCode * 59 + InjuryDispositionDate.GetHashCode();
                    if (InjuryCircumstances != null)
                    hashCode = hashCode * 59 + InjuryCircumstances.GetHashCode();
                    if (InjuryWitness != null)
                    hashCode = hashCode * 59 + InjuryWitness.GetHashCode();
                    if (InjuryReportedDate != null)
                    hashCode = hashCode * 59 + InjuryReportedDate.GetHashCode();
                    if (InjuryReceivedMedicalAttentionDate != null)
                    hashCode = hashCode * 59 + InjuryReceivedMedicalAttentionDate.GetHashCode();
                    if (InjuryOccurrenceLocation != null)
                    hashCode = hashCode * 59 + InjuryOccurrenceLocation.GetHashCode();
                    if (InjuryModeOfArrival != null)
                    hashCode = hashCode * 59 + InjuryModeOfArrival.GetHashCode();
                    if (InjuryDisposition != null)
                    hashCode = hashCode * 59 + InjuryDisposition.GetHashCode();
                    if (InjuryOtherDetails != null)
                    hashCode = hashCode * 59 + InjuryOtherDetails.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JInjuryAugmentationType left, JInjuryAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JInjuryAugmentationType left, JInjuryAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
