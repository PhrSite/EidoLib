/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an association between a conveyance and the people and/or goods it transported.
    /// </summary>
    [DataContract]
    public partial class NcTransportationAssociationType : NcAssociationType, IEquatable<NcTransportationAssociationType>
    { 
        /// <summary>
        /// A means of transport. NIEM reference is nc:Conveyance
        /// </summary>
        /// <value>A means of transport. NIEM reference is nc:Conveyance</value>

        [DataMember(Name="conveyance")]
        public List<NcConveyanceType> Conveyance { get; set; }

        /// <summary>
        /// An item that is specifically being conveyed. NIEM reference is nc:ConveyedItem
        /// </summary>
        /// <value>An item that is specifically being conveyed. NIEM reference is nc:ConveyedItem</value>

        [DataMember(Name="conveyedItem")]
        public List<NcItemType> ConveyedItem { get; set; }

        /// <summary>
        /// A person who operates or drives a conveyance. NIEM reference is nc:ConveyanceOperator
        /// </summary>
        /// <value>A person who operates or drives a conveyance. NIEM reference is nc:ConveyanceOperator</value>

        [DataMember(Name="conveyanceOperator")]
        public List<NcPersonType> ConveyanceOperator { get; set; }

        /// <summary>
        /// A person being conveyed. NIEM reference is nc:ConveyedPerson
        /// </summary>
        /// <value>A person being conveyed. NIEM reference is nc:ConveyedPerson</value>

        [DataMember(Name="conveyedPerson")]
        public List<NcPersonType> ConveyedPerson { get; set; }

        /// <summary>
        /// A number of people in a conveyance excluding the driver. NIEM reference is nc:ConveyancePassengerQuantity
        /// </summary>
        /// <value>A number of people in a conveyance excluding the driver. NIEM reference is nc:ConveyancePassengerQuantity</value>

        [DataMember(Name="conveyancePassengerQuantity")]
        public List<NcQuantityType> ConveyancePassengerQuantity { get; set; }

        /// <summary>
        /// ncTransportationAssociationType JSON-LD context
        /// </summary>
        /// <value>ncTransportationAssociationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncTransportationAssociationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncTransportationAssociationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncTransportationAssociationTypeContext.jsonld")]
            JSONLDContextsncTransportationAssociationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncTransportationAssociationType JSON-LD context
        /// </summary>
        /// <value>ncTransportationAssociationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcTransportationAssociationType {\n");
            sb.Append("  Conveyance: ").Append(Conveyance).Append("\n");
            sb.Append("  ConveyedItem: ").Append(ConveyedItem).Append("\n");
            sb.Append("  ConveyanceOperator: ").Append(ConveyanceOperator).Append("\n");
            sb.Append("  ConveyedPerson: ").Append(ConveyedPerson).Append("\n");
            sb.Append("  ConveyancePassengerQuantity: ").Append(ConveyancePassengerQuantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcTransportationAssociationType)obj);
        }

        /// <summary>
        /// Returns true if NcTransportationAssociationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcTransportationAssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcTransportationAssociationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Conveyance == other.Conveyance ||
                    Conveyance != null &&
                    Conveyance.SequenceEqual(other.Conveyance)
                ) && 
                (
                    ConveyedItem == other.ConveyedItem ||
                    ConveyedItem != null &&
                    ConveyedItem.SequenceEqual(other.ConveyedItem)
                ) && 
                (
                    ConveyanceOperator == other.ConveyanceOperator ||
                    ConveyanceOperator != null &&
                    ConveyanceOperator.SequenceEqual(other.ConveyanceOperator)
                ) && 
                (
                    ConveyedPerson == other.ConveyedPerson ||
                    ConveyedPerson != null &&
                    ConveyedPerson.SequenceEqual(other.ConveyedPerson)
                ) && 
                (
                    ConveyancePassengerQuantity == other.ConveyancePassengerQuantity ||
                    ConveyancePassengerQuantity != null &&
                    ConveyancePassengerQuantity.SequenceEqual(other.ConveyancePassengerQuantity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Conveyance != null)
                    hashCode = hashCode * 59 + Conveyance.GetHashCode();
                    if (ConveyedItem != null)
                    hashCode = hashCode * 59 + ConveyedItem.GetHashCode();
                    if (ConveyanceOperator != null)
                    hashCode = hashCode * 59 + ConveyanceOperator.GetHashCode();
                    if (ConveyedPerson != null)
                    hashCode = hashCode * 59 + ConveyedPerson.GetHashCode();
                    if (ConveyancePassengerQuantity != null)
                    hashCode = hashCode * 59 + ConveyancePassengerQuantity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcTransportationAssociationType left, NcTransportationAssociationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcTransportationAssociationType left, NcTransportationAssociationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
