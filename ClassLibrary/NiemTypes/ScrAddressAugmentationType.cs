/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an address.
    /// </summary>
    [DataContract]
    public partial class ScrAddressAugmentationType : IEquatable<ScrAddressAugmentationType>
    { 
        /// <summary>
        /// An identification value for an ADDRESS. NIEM reference is scr:AddressIdentification
        /// </summary>
        /// <value>An identification value for an ADDRESS. NIEM reference is scr:AddressIdentification</value>

        [DataMember(Name="addressIdentification")]
        public List<NcIdentificationType> AddressIdentification { get; set; }

        /// <summary>
        /// A classification of an ADDRESS NIEM reference is scr:AddressClassification
        /// </summary>
        /// <value>A classification of an ADDRESS NIEM reference is scr:AddressClassification</value>

        [DataMember(Name="addressClassification")]
        public List<ScrAddressClassificationType> AddressClassification { get; set; }

        /// <summary>
        /// True if the COUNTRY is on the DHS list as a potential threat to the United States; false otherwise. NIEM reference is scr:INSLookoutIndicator
        /// </summary>
        /// <value>True if the COUNTRY is on the DHS list as a potential threat to the United States; false otherwise. NIEM reference is scr:INSLookoutIndicator</value>

        [DataMember(Name="isInsLookout")]
        public List<NiemXsboolean> IsInsLookout { get; set; }

        /// <summary>
        /// An identifier for a COUNTRY NAME. NIEM reference is scr:CountryNameID
        /// </summary>
        /// <value>An identifier for a COUNTRY NAME. NIEM reference is scr:CountryNameID</value>

        [DataMember(Name="countryNameId")]
        public List<NiemXsstring> CountryNameId { get; set; }

        /// <summary>
        /// A date on which the COUNTRY NAME came into existence NIEM reference is scr:CountryNameBeginDate
        /// </summary>
        /// <value>A date on which the COUNTRY NAME came into existence NIEM reference is scr:CountryNameBeginDate</value>

        [DataMember(Name="countryNameBeginDate")]
        public List<NcDateType> CountryNameBeginDate { get; set; }

        /// <summary>
        /// A date on which the COUNTRY NAME ended. NIEM reference is scr:CountryNameEndDate
        /// </summary>
        /// <value>A date on which the COUNTRY NAME ended. NIEM reference is scr:CountryNameEndDate</value>

        [DataMember(Name="countryNameEndDate")]
        public List<NcDateType> CountryNameEndDate { get; set; }

        /// <summary>
        /// An identifier that represents a COUNTRY SUBDIVISION. NIEM reference is scr:CountrySubdivisionID
        /// </summary>
        /// <value>An identifier that represents a COUNTRY SUBDIVISION. NIEM reference is scr:CountrySubdivisionID</value>

        [DataMember(Name="countrySubdivisionId")]
        public List<NiemXsstring> CountrySubdivisionId { get; set; }

        /// <summary>
        /// An identifier that represents a COUNTRY SUBDIVISION NAME. NIEM reference is scr:CountrySubdivisionNameID
        /// </summary>
        /// <value>An identifier that represents a COUNTRY SUBDIVISION NAME. NIEM reference is scr:CountrySubdivisionNameID</value>

        [DataMember(Name="countrySubdivisionNameId")]
        public List<NiemXsstring> CountrySubdivisionNameId { get; set; }

        /// <summary>
        /// A date on which the COUNTRY SUBDIVISION NAME came into existence. NIEM reference is scr:CountrySubdivisionNameBeginDate
        /// </summary>
        /// <value>A date on which the COUNTRY SUBDIVISION NAME came into existence. NIEM reference is scr:CountrySubdivisionNameBeginDate</value>

        [DataMember(Name="countrySubdivisionNameBeginDate")]
        public List<NcDateType> CountrySubdivisionNameBeginDate { get; set; }

        /// <summary>
        /// A date on which the COUNTRY SUBDIVISION NAME ended. NIEM reference is scr:CountrySubdivisionNameEndDate
        /// </summary>
        /// <value>A date on which the COUNTRY SUBDIVISION NAME ended. NIEM reference is scr:CountrySubdivisionNameEndDate</value>

        [DataMember(Name="countrySubdivisionNameEndDate")]
        public List<NcDateType> CountrySubdivisionNameEndDate { get; set; }

        /// <summary>
        /// A name of the COUNTRY SUBDIVISION. NIEM reference is scr:CountrySubdivisionName
        /// </summary>
        /// <value>A name of the COUNTRY SUBDIVISION. NIEM reference is scr:CountrySubdivisionName</value>

        [DataMember(Name="countrySubdivisionName")]
        public List<NcTextType> CountrySubdivisionName { get; set; }

        /// <summary>
        /// A description of the values used for a COUNTRY SUBDIVISION TYPE. NIEM reference is scr:CountrySubdivisionCategoryDescriptionText
        /// </summary>
        /// <value>A description of the values used for a COUNTRY SUBDIVISION TYPE. NIEM reference is scr:CountrySubdivisionCategoryDescriptionText</value>

        [DataMember(Name="countrySubdivisionCategoryDescription")]
        public List<NcTextType> CountrySubdivisionCategoryDescription { get; set; }

        /// <summary>
        /// A real estate subdivision of the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBlockGroupText
        /// </summary>
        /// <value>A real estate subdivision of the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBlockGroupText</value>

        [DataMember(Name="locationBlockGroup")]
        public List<NcTextType> LocationBlockGroup { get; set; }

        /// <summary>
        /// A postal carrier route serving the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationCarrierRouteText
        /// </summary>
        /// <value>A postal carrier route serving the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationCarrierRouteText</value>

        [DataMember(Name="locationCarrierRoute")]
        public List<NcTextType> LocationCarrierRoute { get; set; }

        /// <summary>
        /// A real estate tract of the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationTractText
        /// </summary>
        /// <value>A real estate tract of the GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationTractText</value>

        [DataMember(Name="locationTract")]
        public List<NcTextType> LocationTract { get; set; }

        /// <summary>
        /// A name of the part (room) of the physical structure specified for a GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBuildingUnitName
        /// </summary>
        /// <value>A name of the part (room) of the physical structure specified for a GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBuildingUnitName</value>

        [DataMember(Name="locationBuildingUnitName")]
        public List<NcTextType> LocationBuildingUnitName { get; set; }

        /// <summary>
        /// A number of the part (room) of the physical structure specified for a GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBuildingUnitNumberText
        /// </summary>
        /// <value>A number of the part (room) of the physical structure specified for a GEOPHYSICAL ADDRESS. NIEM reference is scr:LocationBuildingUnitNumberText</value>

        [DataMember(Name="locationBuildingUnitNumber")]
        public List<NcTextType> LocationBuildingUnitNumber { get; set; }

        /// <summary>
        /// A part or sub-division of a location. NIEM reference is scr:LocationElement
        /// </summary>
        /// <value>A part or sub-division of a location. NIEM reference is scr:LocationElement</value>

        [DataMember(Name="locationElement")]
        public List<ScrLocationElementType> LocationElement { get; set; }

        /// <summary>
        /// A COUNTRY SUBDIVISION TYPE. NIEM reference is scr:CountrySubdivisionCategoryCode
        /// </summary>
        /// <value>A COUNTRY SUBDIVISION TYPE. NIEM reference is scr:CountrySubdivisionCategoryCode</value>

        [DataMember(Name="countrySubdivisionCategoryCode")]
        public List<ScrCountrySubdivisionCategoryCodeType> CountrySubdivisionCategoryCode { get; set; }

        /// <summary>
        /// scrAddressAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrAddressAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrAddressAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrAddressAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrAddressAugmentationTypeContext.jsonld")]
            JSONLDContextsscrAddressAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrAddressAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrAddressAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrAddressAugmentationType {\n");
            sb.Append("  AddressIdentification: ").Append(AddressIdentification).Append("\n");
            sb.Append("  AddressClassification: ").Append(AddressClassification).Append("\n");
            sb.Append("  IsInsLookout: ").Append(IsInsLookout).Append("\n");
            sb.Append("  CountryNameId: ").Append(CountryNameId).Append("\n");
            sb.Append("  CountryNameBeginDate: ").Append(CountryNameBeginDate).Append("\n");
            sb.Append("  CountryNameEndDate: ").Append(CountryNameEndDate).Append("\n");
            sb.Append("  CountrySubdivisionId: ").Append(CountrySubdivisionId).Append("\n");
            sb.Append("  CountrySubdivisionNameId: ").Append(CountrySubdivisionNameId).Append("\n");
            sb.Append("  CountrySubdivisionNameBeginDate: ").Append(CountrySubdivisionNameBeginDate).Append("\n");
            sb.Append("  CountrySubdivisionNameEndDate: ").Append(CountrySubdivisionNameEndDate).Append("\n");
            sb.Append("  CountrySubdivisionName: ").Append(CountrySubdivisionName).Append("\n");
            sb.Append("  CountrySubdivisionCategoryDescription: ").Append(CountrySubdivisionCategoryDescription).Append("\n");
            sb.Append("  LocationBlockGroup: ").Append(LocationBlockGroup).Append("\n");
            sb.Append("  LocationCarrierRoute: ").Append(LocationCarrierRoute).Append("\n");
            sb.Append("  LocationTract: ").Append(LocationTract).Append("\n");
            sb.Append("  LocationBuildingUnitName: ").Append(LocationBuildingUnitName).Append("\n");
            sb.Append("  LocationBuildingUnitNumber: ").Append(LocationBuildingUnitNumber).Append("\n");
            sb.Append("  LocationElement: ").Append(LocationElement).Append("\n");
            sb.Append("  CountrySubdivisionCategoryCode: ").Append(CountrySubdivisionCategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrAddressAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrAddressAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrAddressAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrAddressAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddressIdentification == other.AddressIdentification ||
                    AddressIdentification != null &&
                    AddressIdentification.SequenceEqual(other.AddressIdentification)
                ) && 
                (
                    AddressClassification == other.AddressClassification ||
                    AddressClassification != null &&
                    AddressClassification.SequenceEqual(other.AddressClassification)
                ) && 
                (
                    IsInsLookout == other.IsInsLookout ||
                    IsInsLookout != null &&
                    IsInsLookout.SequenceEqual(other.IsInsLookout)
                ) && 
                (
                    CountryNameId == other.CountryNameId ||
                    CountryNameId != null &&
                    CountryNameId.SequenceEqual(other.CountryNameId)
                ) && 
                (
                    CountryNameBeginDate == other.CountryNameBeginDate ||
                    CountryNameBeginDate != null &&
                    CountryNameBeginDate.SequenceEqual(other.CountryNameBeginDate)
                ) && 
                (
                    CountryNameEndDate == other.CountryNameEndDate ||
                    CountryNameEndDate != null &&
                    CountryNameEndDate.SequenceEqual(other.CountryNameEndDate)
                ) && 
                (
                    CountrySubdivisionId == other.CountrySubdivisionId ||
                    CountrySubdivisionId != null &&
                    CountrySubdivisionId.SequenceEqual(other.CountrySubdivisionId)
                ) && 
                (
                    CountrySubdivisionNameId == other.CountrySubdivisionNameId ||
                    CountrySubdivisionNameId != null &&
                    CountrySubdivisionNameId.SequenceEqual(other.CountrySubdivisionNameId)
                ) && 
                (
                    CountrySubdivisionNameBeginDate == other.CountrySubdivisionNameBeginDate ||
                    CountrySubdivisionNameBeginDate != null &&
                    CountrySubdivisionNameBeginDate.SequenceEqual(other.CountrySubdivisionNameBeginDate)
                ) && 
                (
                    CountrySubdivisionNameEndDate == other.CountrySubdivisionNameEndDate ||
                    CountrySubdivisionNameEndDate != null &&
                    CountrySubdivisionNameEndDate.SequenceEqual(other.CountrySubdivisionNameEndDate)
                ) && 
                (
                    CountrySubdivisionName == other.CountrySubdivisionName ||
                    CountrySubdivisionName != null &&
                    CountrySubdivisionName.SequenceEqual(other.CountrySubdivisionName)
                ) && 
                (
                    CountrySubdivisionCategoryDescription == other.CountrySubdivisionCategoryDescription ||
                    CountrySubdivisionCategoryDescription != null &&
                    CountrySubdivisionCategoryDescription.SequenceEqual(other.CountrySubdivisionCategoryDescription)
                ) && 
                (
                    LocationBlockGroup == other.LocationBlockGroup ||
                    LocationBlockGroup != null &&
                    LocationBlockGroup.SequenceEqual(other.LocationBlockGroup)
                ) && 
                (
                    LocationCarrierRoute == other.LocationCarrierRoute ||
                    LocationCarrierRoute != null &&
                    LocationCarrierRoute.SequenceEqual(other.LocationCarrierRoute)
                ) && 
                (
                    LocationTract == other.LocationTract ||
                    LocationTract != null &&
                    LocationTract.SequenceEqual(other.LocationTract)
                ) && 
                (
                    LocationBuildingUnitName == other.LocationBuildingUnitName ||
                    LocationBuildingUnitName != null &&
                    LocationBuildingUnitName.SequenceEqual(other.LocationBuildingUnitName)
                ) && 
                (
                    LocationBuildingUnitNumber == other.LocationBuildingUnitNumber ||
                    LocationBuildingUnitNumber != null &&
                    LocationBuildingUnitNumber.SequenceEqual(other.LocationBuildingUnitNumber)
                ) && 
                (
                    LocationElement == other.LocationElement ||
                    LocationElement != null &&
                    LocationElement.SequenceEqual(other.LocationElement)
                ) && 
                (
                    CountrySubdivisionCategoryCode == other.CountrySubdivisionCategoryCode ||
                    CountrySubdivisionCategoryCode != null &&
                    CountrySubdivisionCategoryCode.SequenceEqual(other.CountrySubdivisionCategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddressIdentification != null)
                    hashCode = hashCode * 59 + AddressIdentification.GetHashCode();
                    if (AddressClassification != null)
                    hashCode = hashCode * 59 + AddressClassification.GetHashCode();
                    if (IsInsLookout != null)
                    hashCode = hashCode * 59 + IsInsLookout.GetHashCode();
                    if (CountryNameId != null)
                    hashCode = hashCode * 59 + CountryNameId.GetHashCode();
                    if (CountryNameBeginDate != null)
                    hashCode = hashCode * 59 + CountryNameBeginDate.GetHashCode();
                    if (CountryNameEndDate != null)
                    hashCode = hashCode * 59 + CountryNameEndDate.GetHashCode();
                    if (CountrySubdivisionId != null)
                    hashCode = hashCode * 59 + CountrySubdivisionId.GetHashCode();
                    if (CountrySubdivisionNameId != null)
                    hashCode = hashCode * 59 + CountrySubdivisionNameId.GetHashCode();
                    if (CountrySubdivisionNameBeginDate != null)
                    hashCode = hashCode * 59 + CountrySubdivisionNameBeginDate.GetHashCode();
                    if (CountrySubdivisionNameEndDate != null)
                    hashCode = hashCode * 59 + CountrySubdivisionNameEndDate.GetHashCode();
                    if (CountrySubdivisionName != null)
                    hashCode = hashCode * 59 + CountrySubdivisionName.GetHashCode();
                    if (CountrySubdivisionCategoryDescription != null)
                    hashCode = hashCode * 59 + CountrySubdivisionCategoryDescription.GetHashCode();
                    if (LocationBlockGroup != null)
                    hashCode = hashCode * 59 + LocationBlockGroup.GetHashCode();
                    if (LocationCarrierRoute != null)
                    hashCode = hashCode * 59 + LocationCarrierRoute.GetHashCode();
                    if (LocationTract != null)
                    hashCode = hashCode * 59 + LocationTract.GetHashCode();
                    if (LocationBuildingUnitName != null)
                    hashCode = hashCode * 59 + LocationBuildingUnitName.GetHashCode();
                    if (LocationBuildingUnitNumber != null)
                    hashCode = hashCode * 59 + LocationBuildingUnitNumber.GetHashCode();
                    if (LocationElement != null)
                    hashCode = hashCode * 59 + LocationElement.GetHashCode();
                    if (CountrySubdivisionCategoryCode != null)
                    hashCode = hashCode * 59 + CountrySubdivisionCategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrAddressAugmentationType left, ScrAddressAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrAddressAugmentationType left, ScrAddressAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
