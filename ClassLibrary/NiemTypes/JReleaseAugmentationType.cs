/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Release.
    /// </summary>
    [DataContract]
    public partial class JReleaseAugmentationType : IEquatable<JReleaseAugmentationType>
    { 
        /// <summary>
        /// An association between a transportation plan and a parolee on release. NIEM reference is j:ReleaseTransportationAssociation
        /// </summary>
        /// <value>An association between a transportation plan and a parolee on release. NIEM reference is j:ReleaseTransportationAssociation</value>

        [DataMember(Name="releaseTransportationAssociation")]
        public List<NcTransportationAssociationType> ReleaseTransportationAssociation { get; set; }

        /// <summary>
        /// A decision or outcome of a discharge review. NIEM reference is j:ReleaseReviewDecision
        /// </summary>
        /// <value>A decision or outcome of a discharge review. NIEM reference is j:ReleaseReviewDecision</value>

        [DataMember(Name="releaseReviewDecision")]
        public List<NcActivityType> ReleaseReviewDecision { get; set; }

        /// <summary>
        /// A numerical amount of the money returned to a subject at the point of release. NIEM reference is j:ReleaseFundsAmount
        /// </summary>
        /// <value>A numerical amount of the money returned to a subject at the point of release. NIEM reference is j:ReleaseFundsAmount</value>

        [DataMember(Name="releaseFundsAmount")]
        public List<NcAmountType> ReleaseFundsAmount { get; set; }

        /// <summary>
        /// True if the subject will be released with full funds; false otherwise. NIEM reference is j:ReleaseFundsDisperseIndicator
        /// </summary>
        /// <value>True if the subject will be released with full funds; false otherwise. NIEM reference is j:ReleaseFundsDisperseIndicator</value>

        [DataMember(Name="isReleaseFundsDisperse")]
        public List<NiemXsboolean> IsReleaseFundsDisperse { get; set; }

        /// <summary>
        /// An event or activity of review for the purpose of determining the release of a subject. NIEM reference is j:ReleaseReview
        /// </summary>
        /// <value>An event or activity of review for the purpose of determining the release of a subject. NIEM reference is j:ReleaseReview</value>

        [DataMember(Name="releaseReview")]
        public List<NcActivityType> ReleaseReview { get; set; }

        /// <summary>
        /// A kind of release date. NIEM reference is j:ReleaseDateCategoryText
        /// </summary>
        /// <value>A kind of release date. NIEM reference is j:ReleaseDateCategoryText</value>

        [DataMember(Name="releaseDateCategory")]
        public List<NcTextType> ReleaseDateCategory { get; set; }

        /// <summary>
        /// An institution from which the subject is to be released. NIEM reference is j:ReleaseToFacility
        /// </summary>
        /// <value>An institution from which the subject is to be released. NIEM reference is j:ReleaseToFacility</value>

        [DataMember(Name="releaseToFacility")]
        public List<NcFacilityType> ReleaseToFacility { get; set; }

        /// <summary>
        /// A person who serves as the witness to a release event. NIEM reference is j:ReleaseWitness
        /// </summary>
        /// <value>A person who serves as the witness to a release event. NIEM reference is j:ReleaseWitness</value>

        [DataMember(Name="releaseWitness")]
        public List<JWitnessType> ReleaseWitness { get; set; }

        /// <summary>
        /// A date range reflecting possible release date adjustment. NIEM reference is j:ReleaseDateAdjustedDateRange
        /// </summary>
        /// <value>A date range reflecting possible release date adjustment. NIEM reference is j:ReleaseDateAdjustedDateRange</value>

        [DataMember(Name="releaseDateAdjustedDateRange")]
        public List<NcDateRangeType> ReleaseDateAdjustedDateRange { get; set; }

        /// <summary>
        /// A date range reflecting possible release dates. NIEM reference is j:ReleasePotentialDateRange
        /// </summary>
        /// <value>A date range reflecting possible release dates. NIEM reference is j:ReleasePotentialDateRange</value>

        [DataMember(Name="releasePotentialDateRange")]
        public List<NcDateRangeType> ReleasePotentialDateRange { get; set; }

        /// <summary>
        /// jReleaseAugmentationType JSON-LD context
        /// </summary>
        /// <value>jReleaseAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjReleaseAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jReleaseAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jReleaseAugmentationTypeContext.jsonld")]
            JSONLDContextsjReleaseAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jReleaseAugmentationType JSON-LD context
        /// </summary>
        /// <value>jReleaseAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JReleaseAugmentationType {\n");
            sb.Append("  ReleaseTransportationAssociation: ").Append(ReleaseTransportationAssociation).Append("\n");
            sb.Append("  ReleaseReviewDecision: ").Append(ReleaseReviewDecision).Append("\n");
            sb.Append("  ReleaseFundsAmount: ").Append(ReleaseFundsAmount).Append("\n");
            sb.Append("  IsReleaseFundsDisperse: ").Append(IsReleaseFundsDisperse).Append("\n");
            sb.Append("  ReleaseReview: ").Append(ReleaseReview).Append("\n");
            sb.Append("  ReleaseDateCategory: ").Append(ReleaseDateCategory).Append("\n");
            sb.Append("  ReleaseToFacility: ").Append(ReleaseToFacility).Append("\n");
            sb.Append("  ReleaseWitness: ").Append(ReleaseWitness).Append("\n");
            sb.Append("  ReleaseDateAdjustedDateRange: ").Append(ReleaseDateAdjustedDateRange).Append("\n");
            sb.Append("  ReleasePotentialDateRange: ").Append(ReleasePotentialDateRange).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JReleaseAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JReleaseAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JReleaseAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JReleaseAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReleaseTransportationAssociation == other.ReleaseTransportationAssociation ||
                    ReleaseTransportationAssociation != null &&
                    ReleaseTransportationAssociation.SequenceEqual(other.ReleaseTransportationAssociation)
                ) && 
                (
                    ReleaseReviewDecision == other.ReleaseReviewDecision ||
                    ReleaseReviewDecision != null &&
                    ReleaseReviewDecision.SequenceEqual(other.ReleaseReviewDecision)
                ) && 
                (
                    ReleaseFundsAmount == other.ReleaseFundsAmount ||
                    ReleaseFundsAmount != null &&
                    ReleaseFundsAmount.SequenceEqual(other.ReleaseFundsAmount)
                ) && 
                (
                    IsReleaseFundsDisperse == other.IsReleaseFundsDisperse ||
                    IsReleaseFundsDisperse != null &&
                    IsReleaseFundsDisperse.SequenceEqual(other.IsReleaseFundsDisperse)
                ) && 
                (
                    ReleaseReview == other.ReleaseReview ||
                    ReleaseReview != null &&
                    ReleaseReview.SequenceEqual(other.ReleaseReview)
                ) && 
                (
                    ReleaseDateCategory == other.ReleaseDateCategory ||
                    ReleaseDateCategory != null &&
                    ReleaseDateCategory.SequenceEqual(other.ReleaseDateCategory)
                ) && 
                (
                    ReleaseToFacility == other.ReleaseToFacility ||
                    ReleaseToFacility != null &&
                    ReleaseToFacility.SequenceEqual(other.ReleaseToFacility)
                ) && 
                (
                    ReleaseWitness == other.ReleaseWitness ||
                    ReleaseWitness != null &&
                    ReleaseWitness.SequenceEqual(other.ReleaseWitness)
                ) && 
                (
                    ReleaseDateAdjustedDateRange == other.ReleaseDateAdjustedDateRange ||
                    ReleaseDateAdjustedDateRange != null &&
                    ReleaseDateAdjustedDateRange.SequenceEqual(other.ReleaseDateAdjustedDateRange)
                ) && 
                (
                    ReleasePotentialDateRange == other.ReleasePotentialDateRange ||
                    ReleasePotentialDateRange != null &&
                    ReleasePotentialDateRange.SequenceEqual(other.ReleasePotentialDateRange)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReleaseTransportationAssociation != null)
                    hashCode = hashCode * 59 + ReleaseTransportationAssociation.GetHashCode();
                    if (ReleaseReviewDecision != null)
                    hashCode = hashCode * 59 + ReleaseReviewDecision.GetHashCode();
                    if (ReleaseFundsAmount != null)
                    hashCode = hashCode * 59 + ReleaseFundsAmount.GetHashCode();
                    if (IsReleaseFundsDisperse != null)
                    hashCode = hashCode * 59 + IsReleaseFundsDisperse.GetHashCode();
                    if (ReleaseReview != null)
                    hashCode = hashCode * 59 + ReleaseReview.GetHashCode();
                    if (ReleaseDateCategory != null)
                    hashCode = hashCode * 59 + ReleaseDateCategory.GetHashCode();
                    if (ReleaseToFacility != null)
                    hashCode = hashCode * 59 + ReleaseToFacility.GetHashCode();
                    if (ReleaseWitness != null)
                    hashCode = hashCode * 59 + ReleaseWitness.GetHashCode();
                    if (ReleaseDateAdjustedDateRange != null)
                    hashCode = hashCode * 59 + ReleaseDateAdjustedDateRange.GetHashCode();
                    if (ReleasePotentialDateRange != null)
                    hashCode = hashCode * 59 + ReleasePotentialDateRange.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JReleaseAugmentationType left, JReleaseAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JReleaseAugmentationType left, JReleaseAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
