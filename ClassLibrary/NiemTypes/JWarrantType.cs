/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an authorization for an enforcement official to perform a specified action.
    /// </summary>
    [DataContract]
    public partial class JWarrantType : JCourtOrderType, IEquatable<JWarrantType>
    { 
        /// <summary>
        /// A monetary condition placed on a person to ensure appearance in court. NIEM reference is j:WarrantAppearanceBail
        /// </summary>
        /// <value>A monetary condition placed on a person to ensure appearance in court. NIEM reference is j:WarrantAppearanceBail</value>

        [DataMember(Name="appearanceBail")]
        public List<JBailType> AppearanceBail { get; set; }

        /// <summary>
        /// A narrative or note as reported by an investigator. NIEM reference is j:InvestigatorNarrative
        /// </summary>
        /// <value>A narrative or note as reported by an investigator. NIEM reference is j:InvestigatorNarrative</value>

        [DataMember(Name="investigatorNarrative")]
        public List<NcCommentType> InvestigatorNarrative { get; set; }

        /// <summary>
        /// A kind of warrant. NIEM reference is j:WarrantCategoryText
        /// </summary>
        /// <value>A kind of warrant. NIEM reference is j:WarrantCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A reason an appearance bond was forfeited in connection to a warrant. NIEM reference is j:WarrantAppearanceBailForfeitText
        /// </summary>
        /// <value>A reason an appearance bond was forfeited in connection to a warrant. NIEM reference is j:WarrantAppearanceBailForfeitText</value>

        [DataMember(Name="appearanceBailForfeit")]
        public List<NcTextType> AppearanceBailForfeit { get; set; }

        /// <summary>
        /// A kind of limitation placed on the extradition of a subject from an area outside the immediate jurisdiction of the issuing court. NIEM reference is j:WarrantExtraditionLimitationCode
        /// </summary>
        /// <value>A kind of limitation placed on the extradition of a subject from an area outside the immediate jurisdiction of the issuing court. NIEM reference is j:WarrantExtraditionLimitationCode</value>

        [DataMember(Name="extraditionLimitationCode")]
        public List<NcicEXLCodeType> ExtraditionLimitationCode { get; set; }

        /// <summary>
        /// A limitation placed on the extradition of a subject from an area outside the immediate jurisdiction of the issuing court. NIEM reference is j:WarrantExtraditionLimitationText
        /// </summary>
        /// <value>A limitation placed on the extradition of a subject from an area outside the immediate jurisdiction of the issuing court. NIEM reference is j:WarrantExtraditionLimitationText</value>

        [DataMember(Name="extraditionLimitation")]
        public List<NcTextType> ExtraditionLimitation { get; set; }

        /// <summary>
        /// A name of a state that an arrest warrant specifies a subject is to be extradited from. NIEM reference is j:WarrantExtraditionStateName
        /// </summary>
        /// <value>A name of a state that an arrest warrant specifies a subject is to be extradited from. NIEM reference is j:WarrantExtraditionStateName</value>

        [DataMember(Name="extraditionStateName")]
        public List<NcTextType> ExtraditionStateName { get; set; }

        /// <summary>
        /// An area a warrant went to for further processing or service. NIEM reference is j:WarrantFurtherProcessingText
        /// </summary>
        /// <value>An area a warrant went to for further processing or service. NIEM reference is j:WarrantFurtherProcessingText</value>

        [DataMember(Name="furtherProcessing")]
        public List<NcTextType> FurtherProcessing { get; set; }

        /// <summary>
        /// An offense level associated with a warrant to be served. NIEM reference is j:WarrantLevelText
        /// </summary>
        /// <value>An offense level associated with a warrant to be served. NIEM reference is j:WarrantLevelText</value>

        [DataMember(Name="level")]
        public List<NcTextType> Level { get; set; }

        /// <summary>
        /// A justification for securing a warrant.  NIEM reference is j:WarrantProbableCauseText
        /// </summary>
        /// <value>A justification for securing a warrant.  NIEM reference is j:WarrantProbableCauseText</value>

        [DataMember(Name="probableCause")]
        public List<NcTextType> ProbableCause { get; set; }

        /// <summary>
        /// Additional information about a warrant. NIEM reference is scr:WarrantAugmentation
        /// </summary>
        /// <value>Additional information about a warrant. NIEM reference is scr:WarrantAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ScrWarrantAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// jWarrantType JSON-LD context
        /// </summary>
        /// <value>jWarrantType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjWarrantTypeContextJsonldEnum for ../JSON-LD_Contexts/jWarrantTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jWarrantTypeContext.jsonld")]
            JSONLDContextsjWarrantTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jWarrantType JSON-LD context
        /// </summary>
        /// <value>jWarrantType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JWarrantType {\n");
            sb.Append("  AppearanceBail: ").Append(AppearanceBail).Append("\n");
            sb.Append("  InvestigatorNarrative: ").Append(InvestigatorNarrative).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AppearanceBailForfeit: ").Append(AppearanceBailForfeit).Append("\n");
            sb.Append("  ExtraditionLimitationCode: ").Append(ExtraditionLimitationCode).Append("\n");
            sb.Append("  ExtraditionLimitation: ").Append(ExtraditionLimitation).Append("\n");
            sb.Append("  ExtraditionStateName: ").Append(ExtraditionStateName).Append("\n");
            sb.Append("  FurtherProcessing: ").Append(FurtherProcessing).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  ProbableCause: ").Append(ProbableCause).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JWarrantType)obj);
        }

        /// <summary>
        /// Returns true if JWarrantType instances are equal
        /// </summary>
        /// <param name="other">Instance of JWarrantType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JWarrantType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppearanceBail == other.AppearanceBail ||
                    AppearanceBail != null &&
                    AppearanceBail.SequenceEqual(other.AppearanceBail)
                ) && 
                (
                    InvestigatorNarrative == other.InvestigatorNarrative ||
                    InvestigatorNarrative != null &&
                    InvestigatorNarrative.SequenceEqual(other.InvestigatorNarrative)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    AppearanceBailForfeit == other.AppearanceBailForfeit ||
                    AppearanceBailForfeit != null &&
                    AppearanceBailForfeit.SequenceEqual(other.AppearanceBailForfeit)
                ) && 
                (
                    ExtraditionLimitationCode == other.ExtraditionLimitationCode ||
                    ExtraditionLimitationCode != null &&
                    ExtraditionLimitationCode.SequenceEqual(other.ExtraditionLimitationCode)
                ) && 
                (
                    ExtraditionLimitation == other.ExtraditionLimitation ||
                    ExtraditionLimitation != null &&
                    ExtraditionLimitation.SequenceEqual(other.ExtraditionLimitation)
                ) && 
                (
                    ExtraditionStateName == other.ExtraditionStateName ||
                    ExtraditionStateName != null &&
                    ExtraditionStateName.SequenceEqual(other.ExtraditionStateName)
                ) && 
                (
                    FurtherProcessing == other.FurtherProcessing ||
                    FurtherProcessing != null &&
                    FurtherProcessing.SequenceEqual(other.FurtherProcessing)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.SequenceEqual(other.Level)
                ) && 
                (
                    ProbableCause == other.ProbableCause ||
                    ProbableCause != null &&
                    ProbableCause.SequenceEqual(other.ProbableCause)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AppearanceBail != null)
                    hashCode = hashCode * 59 + AppearanceBail.GetHashCode();
                    if (InvestigatorNarrative != null)
                    hashCode = hashCode * 59 + InvestigatorNarrative.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (AppearanceBailForfeit != null)
                    hashCode = hashCode * 59 + AppearanceBailForfeit.GetHashCode();
                    if (ExtraditionLimitationCode != null)
                    hashCode = hashCode * 59 + ExtraditionLimitationCode.GetHashCode();
                    if (ExtraditionLimitation != null)
                    hashCode = hashCode * 59 + ExtraditionLimitation.GetHashCode();
                    if (ExtraditionStateName != null)
                    hashCode = hashCode * 59 + ExtraditionStateName.GetHashCode();
                    if (FurtherProcessing != null)
                    hashCode = hashCode * 59 + FurtherProcessing.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (ProbableCause != null)
                    hashCode = hashCode * 59 + ProbableCause.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JWarrantType left, JWarrantType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JWarrantType left, JWarrantType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
