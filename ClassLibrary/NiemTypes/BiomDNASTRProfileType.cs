/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an autosomal STR, X-STR, and Y-STR DNA profile
    /// </summary>
    [DataContract]
    public partial class BiomDNASTRProfileType : IEquatable<BiomDNASTRProfileType>
    { 
        /// <summary>
        /// A kind of autosomal STR, X-STR, and Y-STR DNA profile NIEM reference is biom:DNASTRProfileCategoryCode
        /// </summary>
        /// <value>A kind of autosomal STR, X-STR, and Y-STR DNA profile NIEM reference is biom:DNASTRProfileCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomDNASTRProfileCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// An identifier for a reference number of a DNA locus NIEM reference is biom:DNALocusReferenceID
        /// </summary>
        /// <value>An identifier for a reference number of a DNA locus NIEM reference is biom:DNALocusReferenceID</value>

        [DataMember(Name="dnaLocusReferenceId")]
        public List<BiomInteger1to999Type> DnaLocusReferenceId { get; set; }

        /// <summary>
        /// True if DNA allele is found; false otherwise NIEM reference is biom:DNAAlleleIndicator
        /// </summary>
        /// <value>True if DNA allele is found; false otherwise NIEM reference is biom:DNAAlleleIndicator</value>

        [DataMember(Name="isDnaAllele")]
        public List<NiemXsboolean> IsDnaAllele { get; set; }

        /// <summary>
        /// True if DNA locus is analyzed; false otherwise NIEM reference is biom:DNALocusAnalysisIndicator
        /// </summary>
        /// <value>True if DNA locus is analyzed; false otherwise NIEM reference is biom:DNALocusAnalysisIndicator</value>

        [DataMember(Name="isDnaLocusAnalysis")]
        public List<NiemXsboolean> IsDnaLocusAnalysis { get; set; }

        /// <summary>
        /// True if DNA precise call has been determined; false otherwise NIEM reference is biom:DNAPreciseCallIndicator
        /// </summary>
        /// <value>True if DNA precise call has been determined; false otherwise NIEM reference is biom:DNAPreciseCallIndicator</value>

        [DataMember(Name="isDnaPreciseCall")]
        public List<NiemXsboolean> IsDnaPreciseCall { get; set; }

        /// <summary>
        /// A kind of a DNA allele call (first of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall1Text
        /// </summary>
        /// <value>A kind of a DNA allele call (first of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall1Text</value>

        [DataMember(Name="dnaAlleleCall1")]
        public List<NcTextType> DnaAlleleCall1 { get; set; }

        /// <summary>
        /// A kind of a DNA allele call (second of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall2Text
        /// </summary>
        /// <value>A kind of a DNA allele call (second of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall2Text</value>

        [DataMember(Name="dnaAlleleCall2")]
        public List<NcTextType> DnaAlleleCall2 { get; set; }

        /// <summary>
        /// A kind of a DNA allele call (third of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall3Text
        /// </summary>
        /// <value>A kind of a DNA allele call (third of three possible) for the referenced locus in an STR profile NIEM reference is biom:DNAAlleleCall3Text</value>

        [DataMember(Name="dnaAlleleCall3")]
        public List<NcTextType> DnaAlleleCall3 { get; set; }

        /// <summary>
        /// A identifier of the DNA batch to which a locus belongs NIEM reference is biom:DNABatchID
        /// </summary>
        /// <value>A identifier of the DNA batch to which a locus belongs NIEM reference is biom:DNABatchID</value>

        [DataMember(Name="dnaBatchId")]
        public List<NcTextType> DnaBatchId { get; set; }

        /// <summary>
        /// An identifier for a DNA electropherogram image NIEM reference is biom:DNAElectropherogramID
        /// </summary>
        /// <value>An identifier for a DNA electropherogram image NIEM reference is biom:DNAElectropherogramID</value>

        [DataMember(Name="dnaElectropherogramId")]
        public List<NcTextType> DnaElectropherogramId { get; set; }

        /// <summary>
        /// A unique identifier for a DNA electropherogram ladder image NIEM reference is biom:DNAElectropherogramLadderID
        /// </summary>
        /// <value>A unique identifier for a DNA electropherogram ladder image NIEM reference is biom:DNAElectropherogramLadderID</value>

        [DataMember(Name="dnaElectropherogramLadderId")]
        public List<NcTextType> DnaElectropherogramLadderId { get; set; }

        /// <summary>
        /// A DNA kit NIEM reference is biom:DNAKit
        /// </summary>
        /// <value>A DNA kit NIEM reference is biom:DNAKit</value>

        [DataMember(Name="dnaKit")]
        public List<BiomDNAKitType> DnaKit { get; set; }

        /// <summary>
        /// biomDNASTRProfileType JSON-LD context
        /// </summary>
        /// <value>biomDNASTRProfileType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDNASTRProfileTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDNASTRProfileTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDNASTRProfileTypeContext.jsonld")]
            JSONLDContextsbiomDNASTRProfileTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDNASTRProfileType JSON-LD context
        /// </summary>
        /// <value>biomDNASTRProfileType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDNASTRProfileType {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  DnaLocusReferenceId: ").Append(DnaLocusReferenceId).Append("\n");
            sb.Append("  IsDnaAllele: ").Append(IsDnaAllele).Append("\n");
            sb.Append("  IsDnaLocusAnalysis: ").Append(IsDnaLocusAnalysis).Append("\n");
            sb.Append("  IsDnaPreciseCall: ").Append(IsDnaPreciseCall).Append("\n");
            sb.Append("  DnaAlleleCall1: ").Append(DnaAlleleCall1).Append("\n");
            sb.Append("  DnaAlleleCall2: ").Append(DnaAlleleCall2).Append("\n");
            sb.Append("  DnaAlleleCall3: ").Append(DnaAlleleCall3).Append("\n");
            sb.Append("  DnaBatchId: ").Append(DnaBatchId).Append("\n");
            sb.Append("  DnaElectropherogramId: ").Append(DnaElectropherogramId).Append("\n");
            sb.Append("  DnaElectropherogramLadderId: ").Append(DnaElectropherogramLadderId).Append("\n");
            sb.Append("  DnaKit: ").Append(DnaKit).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDNASTRProfileType)obj);
        }

        /// <summary>
        /// Returns true if BiomDNASTRProfileType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDNASTRProfileType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDNASTRProfileType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    DnaLocusReferenceId == other.DnaLocusReferenceId ||
                    DnaLocusReferenceId != null &&
                    DnaLocusReferenceId.SequenceEqual(other.DnaLocusReferenceId)
                ) && 
                (
                    IsDnaAllele == other.IsDnaAllele ||
                    IsDnaAllele != null &&
                    IsDnaAllele.SequenceEqual(other.IsDnaAllele)
                ) && 
                (
                    IsDnaLocusAnalysis == other.IsDnaLocusAnalysis ||
                    IsDnaLocusAnalysis != null &&
                    IsDnaLocusAnalysis.SequenceEqual(other.IsDnaLocusAnalysis)
                ) && 
                (
                    IsDnaPreciseCall == other.IsDnaPreciseCall ||
                    IsDnaPreciseCall != null &&
                    IsDnaPreciseCall.SequenceEqual(other.IsDnaPreciseCall)
                ) && 
                (
                    DnaAlleleCall1 == other.DnaAlleleCall1 ||
                    DnaAlleleCall1 != null &&
                    DnaAlleleCall1.SequenceEqual(other.DnaAlleleCall1)
                ) && 
                (
                    DnaAlleleCall2 == other.DnaAlleleCall2 ||
                    DnaAlleleCall2 != null &&
                    DnaAlleleCall2.SequenceEqual(other.DnaAlleleCall2)
                ) && 
                (
                    DnaAlleleCall3 == other.DnaAlleleCall3 ||
                    DnaAlleleCall3 != null &&
                    DnaAlleleCall3.SequenceEqual(other.DnaAlleleCall3)
                ) && 
                (
                    DnaBatchId == other.DnaBatchId ||
                    DnaBatchId != null &&
                    DnaBatchId.SequenceEqual(other.DnaBatchId)
                ) && 
                (
                    DnaElectropherogramId == other.DnaElectropherogramId ||
                    DnaElectropherogramId != null &&
                    DnaElectropherogramId.SequenceEqual(other.DnaElectropherogramId)
                ) && 
                (
                    DnaElectropherogramLadderId == other.DnaElectropherogramLadderId ||
                    DnaElectropherogramLadderId != null &&
                    DnaElectropherogramLadderId.SequenceEqual(other.DnaElectropherogramLadderId)
                ) && 
                (
                    DnaKit == other.DnaKit ||
                    DnaKit != null &&
                    DnaKit.SequenceEqual(other.DnaKit)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (DnaLocusReferenceId != null)
                    hashCode = hashCode * 59 + DnaLocusReferenceId.GetHashCode();
                    if (IsDnaAllele != null)
                    hashCode = hashCode * 59 + IsDnaAllele.GetHashCode();
                    if (IsDnaLocusAnalysis != null)
                    hashCode = hashCode * 59 + IsDnaLocusAnalysis.GetHashCode();
                    if (IsDnaPreciseCall != null)
                    hashCode = hashCode * 59 + IsDnaPreciseCall.GetHashCode();
                    if (DnaAlleleCall1 != null)
                    hashCode = hashCode * 59 + DnaAlleleCall1.GetHashCode();
                    if (DnaAlleleCall2 != null)
                    hashCode = hashCode * 59 + DnaAlleleCall2.GetHashCode();
                    if (DnaAlleleCall3 != null)
                    hashCode = hashCode * 59 + DnaAlleleCall3.GetHashCode();
                    if (DnaBatchId != null)
                    hashCode = hashCode * 59 + DnaBatchId.GetHashCode();
                    if (DnaElectropherogramId != null)
                    hashCode = hashCode * 59 + DnaElectropherogramId.GetHashCode();
                    if (DnaElectropherogramLadderId != null)
                    hashCode = hashCode * 59 + DnaElectropherogramLadderId.GetHashCode();
                    if (DnaKit != null)
                    hashCode = hashCode * 59 + DnaKit.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDNASTRProfileType left, BiomDNASTRProfileType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDNASTRProfileType left, BiomDNASTRProfileType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
