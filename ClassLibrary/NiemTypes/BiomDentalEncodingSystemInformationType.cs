/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of information regarding the data collection schema that was used for the recording of dental information.
    /// </summary>
    [DataContract]
    public partial class BiomDentalEncodingSystemInformationType : IEquatable<BiomDentalEncodingSystemInformationType>
    { 
        /// <summary>
        /// A code that contains the dental system codes NIEM reference is biom:SystemNameCode
        /// </summary>
        /// <value>A code that contains the dental system codes NIEM reference is biom:SystemNameCode</value>

        [DataMember(Name="systemNameCode")]
        public List<BiomSystemNameCodeType> SystemNameCode { get; set; }

        /// <summary>
        /// A kind of system version text NIEM reference is biom:SystemVersionText
        /// </summary>
        /// <value>A kind of system version text NIEM reference is biom:SystemVersionText</value>

        [DataMember(Name="systemVersion")]
        public List<NcTextType> SystemVersion { get; set; }

        /// <summary>
        /// A code that is used to designate the way that permanent and deciduous teeth are coded according to the system used to enter the data. NIEM reference is biom:ToothPermanenceCategoryCode
        /// </summary>
        /// <value>A code that is used to designate the way that permanent and deciduous teeth are coded according to the system used to enter the data. NIEM reference is biom:ToothPermanenceCategoryCode</value>

        [DataMember(Name="toothPermanenceCategoryCode")]
        public List<BiomToothPermanenceCategoryCodeType> ToothPermanenceCategoryCode { get; set; }

        /// <summary>
        /// A code indicates the type and level of restoration and surface information coded in Field 12.010: Tooth data detail / TDD. NIEM reference is biom:RestorationDataGranularityCode
        /// </summary>
        /// <value>A code indicates the type and level of restoration and surface information coded in Field 12.010: Tooth data detail / TDD. NIEM reference is biom:RestorationDataGranularityCode</value>

        [DataMember(Name="restorationDataGranularityCode")]
        public List<BiomRestorationDataGranularityCodeType> RestorationDataGranularityCode { get; set; }

        /// <summary>
        /// A code to indicate whether the assignment of tooth numbers was done on a morphological basis or positional basis. NIEM reference is biom:MorphologyPositionalNumberingCode
        /// </summary>
        /// <value>A code to indicate whether the assignment of tooth numbers was done on a morphological basis or positional basis. NIEM reference is biom:MorphologyPositionalNumberingCode</value>

        [DataMember(Name="morphologyPositionalNumberingCode")]
        public List<BiomMorphologyPositionalNumberingCodeType> MorphologyPositionalNumberingCode { get; set; }

        /// <summary>
        /// biomDentalEncodingSystemInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalEncodingSystemInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDentalEncodingSystemInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDentalEncodingSystemInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDentalEncodingSystemInformationTypeContext.jsonld")]
            JSONLDContextsbiomDentalEncodingSystemInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDentalEncodingSystemInformationType JSON-LD context
        /// </summary>
        /// <value>biomDentalEncodingSystemInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDentalEncodingSystemInformationType {\n");
            sb.Append("  SystemNameCode: ").Append(SystemNameCode).Append("\n");
            sb.Append("  SystemVersion: ").Append(SystemVersion).Append("\n");
            sb.Append("  ToothPermanenceCategoryCode: ").Append(ToothPermanenceCategoryCode).Append("\n");
            sb.Append("  RestorationDataGranularityCode: ").Append(RestorationDataGranularityCode).Append("\n");
            sb.Append("  MorphologyPositionalNumberingCode: ").Append(MorphologyPositionalNumberingCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDentalEncodingSystemInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomDentalEncodingSystemInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDentalEncodingSystemInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDentalEncodingSystemInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SystemNameCode == other.SystemNameCode ||
                    SystemNameCode != null &&
                    SystemNameCode.SequenceEqual(other.SystemNameCode)
                ) && 
                (
                    SystemVersion == other.SystemVersion ||
                    SystemVersion != null &&
                    SystemVersion.SequenceEqual(other.SystemVersion)
                ) && 
                (
                    ToothPermanenceCategoryCode == other.ToothPermanenceCategoryCode ||
                    ToothPermanenceCategoryCode != null &&
                    ToothPermanenceCategoryCode.SequenceEqual(other.ToothPermanenceCategoryCode)
                ) && 
                (
                    RestorationDataGranularityCode == other.RestorationDataGranularityCode ||
                    RestorationDataGranularityCode != null &&
                    RestorationDataGranularityCode.SequenceEqual(other.RestorationDataGranularityCode)
                ) && 
                (
                    MorphologyPositionalNumberingCode == other.MorphologyPositionalNumberingCode ||
                    MorphologyPositionalNumberingCode != null &&
                    MorphologyPositionalNumberingCode.SequenceEqual(other.MorphologyPositionalNumberingCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SystemNameCode != null)
                    hashCode = hashCode * 59 + SystemNameCode.GetHashCode();
                    if (SystemVersion != null)
                    hashCode = hashCode * 59 + SystemVersion.GetHashCode();
                    if (ToothPermanenceCategoryCode != null)
                    hashCode = hashCode * 59 + ToothPermanenceCategoryCode.GetHashCode();
                    if (RestorationDataGranularityCode != null)
                    hashCode = hashCode * 59 + RestorationDataGranularityCode.GetHashCode();
                    if (MorphologyPositionalNumberingCode != null)
                    hashCode = hashCode * 59 + MorphologyPositionalNumberingCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDentalEncodingSystemInformationType left, BiomDentalEncodingSystemInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDentalEncodingSystemInformationType left, BiomDentalEncodingSystemInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
