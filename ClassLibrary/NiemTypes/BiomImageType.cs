/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a biometric image
    /// </summary>
    [DataContract]
    public partial class BiomImageType : NcBinaryType, IEquatable<BiomImageType>
    { 
        /// <summary>
        /// A number of bits used to represent a pixel NIEM reference is biom:ImageBitsPerPixelQuantity
        /// </summary>
        /// <value>A number of bits used to represent a pixel NIEM reference is biom:ImageBitsPerPixelQuantity</value>

        [DataMember(Name="bitsPerPixelQuantity")]
        public List<BiomInteger1to99Type> BitsPerPixelQuantity { get; set; }

        /// <summary>
        /// A set of information regarding the captured (e.g., scanned) image NIEM reference is biom:ImageCaptureDetail
        /// </summary>
        /// <value>A set of information regarding the captured (e.g., scanned) image NIEM reference is biom:ImageCaptureDetail</value>

        [DataMember(Name="captureDetail")]
        public List<BiomImageCaptureType> CaptureDetail { get; set; }

        /// <summary>
        /// A color space used to exchange an image. NIEM reference is biom:ImageColorSpaceCode
        /// </summary>
        /// <value>A color space used to exchange an image. NIEM reference is biom:ImageColorSpaceCode</value>

        [DataMember(Name="colorSpaceCode")]
        public List<BiomCSPCodeType> ColorSpaceCode { get; set; }

        /// <summary>
        /// A comment regarding an image NIEM reference is biom:ImageCommentText
        /// </summary>
        /// <value>A comment regarding an image NIEM reference is biom:ImageCommentText</value>

        [DataMember(Name="comment")]
        public List<NcTextType> Comment { get; set; }

        /// <summary>
        /// An image compression algorithm NIEM reference is biom:ImageCompressionAlgorithmCode
        /// </summary>
        /// <value>An image compression algorithm NIEM reference is biom:ImageCompressionAlgorithmCode</value>

        [DataMember(Name="compressionAlgorithmCode")]
        public List<BiomImageCompressionAlgorithmCodeType> CompressionAlgorithmCode { get; set; }

        /// <summary>
        /// An image compression algorithm NIEM reference is biom:ImageCompressionAlgorithmText
        /// </summary>
        /// <value>An image compression algorithm NIEM reference is biom:ImageCompressionAlgorithmText</value>

        [DataMember(Name="compressionAlgorithm")]
        public List<NcTextType> CompressionAlgorithm { get; set; }

        /// <summary>
        /// A number of pixels on a single horizontal line of a variable-resolution image NIEM reference is biom:HorizontalLineLengthPixelQuantity
        /// </summary>
        /// <value>A number of pixels on a single horizontal line of a variable-resolution image NIEM reference is biom:HorizontalLineLengthPixelQuantity</value>

        [DataMember(Name="horizontalLineLengthPixelQuantity")]
        public List<BiomLargeLineLengthPixelQuantityType> HorizontalLineLengthPixelQuantity { get; set; }

        /// <summary>
        /// A transmitted pixel density in horizontal direction NIEM reference is biom:ImageHorizontalPixelDensityValue
        /// </summary>
        /// <value>A transmitted pixel density in horizontal direction NIEM reference is biom:ImageHorizontalPixelDensityValue</value>

        [DataMember(Name="horizontalPixelDensityValue")]
        public List<NiemXspositiveInteger> HorizontalPixelDensityValue { get; set; }

        /// <summary>
        /// A set of details about the quality of an image NIEM reference is biom:ImageQuality
        /// </summary>
        /// <value>A set of details about the quality of an image NIEM reference is biom:ImageQuality</value>

        [DataMember(Name="quality")]
        public List<BiomImageQualityType> Quality { get; set; }

        /// <summary>
        /// A sampling frequency unit designator, pixels per inch, or pixels per centimeter NIEM reference is biom:ImageScaleUnitsCode
        /// </summary>
        /// <value>A sampling frequency unit designator, pixels per inch, or pixels per centimeter NIEM reference is biom:ImageScaleUnitsCode</value>

        [DataMember(Name="scaleUnitsCode")]
        public List<BiomScaleUnitsCodeType> ScaleUnitsCode { get; set; }

        /// <summary>
        /// A kind of image of a person NIEM reference is biom:ImageCategoryCode
        /// </summary>
        /// <value>A kind of image of a person NIEM reference is biom:ImageCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomPersonImageCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A number of pixels on a single vertical line of an image NIEM reference is biom:VerticalLineLengthPixelQuantity
        /// </summary>
        /// <value>A number of pixels on a single vertical line of an image NIEM reference is biom:VerticalLineLengthPixelQuantity</value>

        [DataMember(Name="verticalLineLengthPixelQuantity")]
        public List<BiomLargeLineLengthPixelQuantityType> VerticalLineLengthPixelQuantity { get; set; }

        /// <summary>
        /// A transmitted pixel density in the vertical direction NIEM reference is biom:ImageVerticalPixelDensityValue
        /// </summary>
        /// <value>A transmitted pixel density in the vertical direction NIEM reference is biom:ImageVerticalPixelDensityValue</value>

        [DataMember(Name="verticalPixelDensityValue")]
        public List<NiemXspositiveInteger> VerticalPixelDensityValue { get; set; }

        /// <summary>
        /// A distortion in an image NIEM reference is biom:ImageDistortion
        /// </summary>
        /// <value>A distortion in an image NIEM reference is biom:ImageDistortion</value>

        [DataMember(Name="distortion")]
        public List<BiomImageDistortionType> Distortion { get; set; }

        /// <summary>
        /// A scanning resolution used by a specific biometric image capture device. Valid values between 19.29 and 99.99 OR equal to 00.00 (corresponds to 500ppi postive and negative 2% up to maximum allowed value.). Should only allow two decimal places NIEM reference is biom:NativeScanningResolutionValue
        /// </summary>
        /// <value>A scanning resolution used by a specific biometric image capture device. Valid values between 19.29 and 99.99 OR equal to 00.00 (corresponds to 500ppi postive and negative 2% up to maximum allowed value.). Should only allow two decimal places NIEM reference is biom:NativeScanningResolutionValue</value>

        [DataMember(Name="nativeScanningResolutionValue")]
        public List<BiomDecimal2DigitPrecisionType> NativeScanningResolutionValue { get; set; }

        /// <summary>
        /// A nominal number of pixels per unit distance (ppmm or ppi) of a transmitted biometric image. NIEM reference is biom:NominalScanningResolutionValue
        /// </summary>
        /// <value>A nominal number of pixels per unit distance (ppmm or ppi) of a transmitted biometric image. NIEM reference is biom:NominalScanningResolutionValue</value>

        [DataMember(Name="nominalScanningResolutionValue")]
        public List<NiemXsdecimal> NominalScanningResolutionValue { get; set; }

        /// <summary>
        /// A transaction&#x27;s transmitting resolution, in pixels per mm. Valid value between 19.29 and 20.08 OR equal to 00.00 (corresponds to 500ppi postive and negative 2% ) OR between 38.58 and 40.16 (corresponds to 1000ppi postive and negative 2%.) Shoul NIEM reference is biom:NominalTransmittingResolutionValue
        /// </summary>
        /// <value>A transaction&#x27;s transmitting resolution, in pixels per mm. Valid value between 19.29 and 20.08 OR equal to 00.00 (corresponds to 500ppi postive and negative 2% ) OR between 38.58 and 40.16 (corresponds to 1000ppi postive and negative 2%.) Shoul NIEM reference is biom:NominalTransmittingResolutionValue</value>

        [DataMember(Name="nominalTransmittingResolutionValue")]
        public List<BiomDecimal2DigitPrecisionType> NominalTransmittingResolutionValue { get; set; }

        /// <summary>
        /// An indication of whether minimal (nominal) or native scanning resolution applies to a biometric image. NIEM reference is biom:ScanningResolutionCategoryCode
        /// </summary>
        /// <value>An indication of whether minimal (nominal) or native scanning resolution applies to a biometric image. NIEM reference is biom:ScanningResolutionCategoryCode</value>

        [DataMember(Name="scanningResolutionCategoryCode")]
        public List<BiomScanningResolutionCategoryCodeType> ScanningResolutionCategoryCode { get; set; }

        /// <summary>
        /// An imagery data block for the image NIEM reference is biom:MedicalImageryDataBlockBinaryObject
        /// </summary>
        /// <value>An imagery data block for the image NIEM reference is biom:MedicalImageryDataBlockBinaryObject</value>

        [DataMember(Name="medicalryDataBlockBinaryObject")]
        public List<NiemXsbase64Binary> MedicalryDataBlockBinaryObject { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for an analog source representation. NIEM reference is biom:SourceExternalAnalogFileReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for an analog source representation. NIEM reference is biom:SourceExternalAnalogFileReferenceText</value>

        [DataMember(Name="sourceExternalAnalogFileReference")]
        public List<NcTextType> SourceExternalAnalogFileReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital audio source representation. NIEM reference is biom:SourceExternalDigitalAudioReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital audio source representation. NIEM reference is biom:SourceExternalDigitalAudioReferenceText</value>

        [DataMember(Name="sourceExternalDigitalAudioReference")]
        public List<NcTextType> SourceExternalDigitalAudioReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital image source representation. NIEM reference is biom:SourceExternalDigitalImageReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital image source representation. NIEM reference is biom:SourceExternalDigitalImageReferenceText</value>

        [DataMember(Name="sourceExternalDigitalReference")]
        public List<NcTextType> SourceExternalDigitalReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a digital video source representation. NIEM reference is biom:SourceExternalDigitalVideoReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a digital video source representation. NIEM reference is biom:SourceExternalDigitalVideoReferenceText</value>

        [DataMember(Name="sourceExternalDigitalVideoReference")]
        public List<NcTextType> SourceExternalDigitalVideoReference { get; set; }

        /// <summary>
        /// A URI, URL or other unique reference to a storage location for a source representation. NIEM reference is biom:SourceExternalFileReferenceText
        /// </summary>
        /// <value>A URI, URL or other unique reference to a storage location for a source representation. NIEM reference is biom:SourceExternalFileReferenceText</value>

        [DataMember(Name="sourceExternalFileReference")]
        public List<NcTextType> SourceExternalFileReference { get; set; }

        /// <summary>
        /// biomImageType JSON-LD context
        /// </summary>
        /// <value>biomImageType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomImageTypeContextJsonldEnum for ../JSON-LD_Contexts/biomImageTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomImageTypeContext.jsonld")]
            JSONLDContextsbiomImageTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomImageType JSON-LD context
        /// </summary>
        /// <value>biomImageType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomImageType {\n");
            sb.Append("  BitsPerPixelQuantity: ").Append(BitsPerPixelQuantity).Append("\n");
            sb.Append("  CaptureDetail: ").Append(CaptureDetail).Append("\n");
            sb.Append("  ColorSpaceCode: ").Append(ColorSpaceCode).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CompressionAlgorithmCode: ").Append(CompressionAlgorithmCode).Append("\n");
            sb.Append("  CompressionAlgorithm: ").Append(CompressionAlgorithm).Append("\n");
            sb.Append("  HorizontalLineLengthPixelQuantity: ").Append(HorizontalLineLengthPixelQuantity).Append("\n");
            sb.Append("  HorizontalPixelDensityValue: ").Append(HorizontalPixelDensityValue).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  ScaleUnitsCode: ").Append(ScaleUnitsCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  VerticalLineLengthPixelQuantity: ").Append(VerticalLineLengthPixelQuantity).Append("\n");
            sb.Append("  VerticalPixelDensityValue: ").Append(VerticalPixelDensityValue).Append("\n");
            sb.Append("  Distortion: ").Append(Distortion).Append("\n");
            sb.Append("  NativeScanningResolutionValue: ").Append(NativeScanningResolutionValue).Append("\n");
            sb.Append("  NominalScanningResolutionValue: ").Append(NominalScanningResolutionValue).Append("\n");
            sb.Append("  NominalTransmittingResolutionValue: ").Append(NominalTransmittingResolutionValue).Append("\n");
            sb.Append("  ScanningResolutionCategoryCode: ").Append(ScanningResolutionCategoryCode).Append("\n");
            sb.Append("  MedicalryDataBlockBinaryObject: ").Append(MedicalryDataBlockBinaryObject).Append("\n");
            sb.Append("  SourceExternalAnalogFileReference: ").Append(SourceExternalAnalogFileReference).Append("\n");
            sb.Append("  SourceExternalDigitalAudioReference: ").Append(SourceExternalDigitalAudioReference).Append("\n");
            sb.Append("  SourceExternalDigitalReference: ").Append(SourceExternalDigitalReference).Append("\n");
            sb.Append("  SourceExternalDigitalVideoReference: ").Append(SourceExternalDigitalVideoReference).Append("\n");
            sb.Append("  SourceExternalFileReference: ").Append(SourceExternalFileReference).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomImageType)obj);
        }

        /// <summary>
        /// Returns true if BiomImageType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomImageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomImageType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BitsPerPixelQuantity == other.BitsPerPixelQuantity ||
                    BitsPerPixelQuantity != null &&
                    BitsPerPixelQuantity.SequenceEqual(other.BitsPerPixelQuantity)
                ) && 
                (
                    CaptureDetail == other.CaptureDetail ||
                    CaptureDetail != null &&
                    CaptureDetail.SequenceEqual(other.CaptureDetail)
                ) && 
                (
                    ColorSpaceCode == other.ColorSpaceCode ||
                    ColorSpaceCode != null &&
                    ColorSpaceCode.SequenceEqual(other.ColorSpaceCode)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    CompressionAlgorithmCode == other.CompressionAlgorithmCode ||
                    CompressionAlgorithmCode != null &&
                    CompressionAlgorithmCode.SequenceEqual(other.CompressionAlgorithmCode)
                ) && 
                (
                    CompressionAlgorithm == other.CompressionAlgorithm ||
                    CompressionAlgorithm != null &&
                    CompressionAlgorithm.SequenceEqual(other.CompressionAlgorithm)
                ) && 
                (
                    HorizontalLineLengthPixelQuantity == other.HorizontalLineLengthPixelQuantity ||
                    HorizontalLineLengthPixelQuantity != null &&
                    HorizontalLineLengthPixelQuantity.SequenceEqual(other.HorizontalLineLengthPixelQuantity)
                ) && 
                (
                    HorizontalPixelDensityValue == other.HorizontalPixelDensityValue ||
                    HorizontalPixelDensityValue != null &&
                    HorizontalPixelDensityValue.SequenceEqual(other.HorizontalPixelDensityValue)
                ) && 
                (
                    Quality == other.Quality ||
                    Quality != null &&
                    Quality.SequenceEqual(other.Quality)
                ) && 
                (
                    ScaleUnitsCode == other.ScaleUnitsCode ||
                    ScaleUnitsCode != null &&
                    ScaleUnitsCode.SequenceEqual(other.ScaleUnitsCode)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    VerticalLineLengthPixelQuantity == other.VerticalLineLengthPixelQuantity ||
                    VerticalLineLengthPixelQuantity != null &&
                    VerticalLineLengthPixelQuantity.SequenceEqual(other.VerticalLineLengthPixelQuantity)
                ) && 
                (
                    VerticalPixelDensityValue == other.VerticalPixelDensityValue ||
                    VerticalPixelDensityValue != null &&
                    VerticalPixelDensityValue.SequenceEqual(other.VerticalPixelDensityValue)
                ) && 
                (
                    Distortion == other.Distortion ||
                    Distortion != null &&
                    Distortion.SequenceEqual(other.Distortion)
                ) && 
                (
                    NativeScanningResolutionValue == other.NativeScanningResolutionValue ||
                    NativeScanningResolutionValue != null &&
                    NativeScanningResolutionValue.SequenceEqual(other.NativeScanningResolutionValue)
                ) && 
                (
                    NominalScanningResolutionValue == other.NominalScanningResolutionValue ||
                    NominalScanningResolutionValue != null &&
                    NominalScanningResolutionValue.SequenceEqual(other.NominalScanningResolutionValue)
                ) && 
                (
                    NominalTransmittingResolutionValue == other.NominalTransmittingResolutionValue ||
                    NominalTransmittingResolutionValue != null &&
                    NominalTransmittingResolutionValue.SequenceEqual(other.NominalTransmittingResolutionValue)
                ) && 
                (
                    ScanningResolutionCategoryCode == other.ScanningResolutionCategoryCode ||
                    ScanningResolutionCategoryCode != null &&
                    ScanningResolutionCategoryCode.SequenceEqual(other.ScanningResolutionCategoryCode)
                ) && 
                (
                    MedicalryDataBlockBinaryObject == other.MedicalryDataBlockBinaryObject ||
                    MedicalryDataBlockBinaryObject != null &&
                    MedicalryDataBlockBinaryObject.SequenceEqual(other.MedicalryDataBlockBinaryObject)
                ) && 
                (
                    SourceExternalAnalogFileReference == other.SourceExternalAnalogFileReference ||
                    SourceExternalAnalogFileReference != null &&
                    SourceExternalAnalogFileReference.SequenceEqual(other.SourceExternalAnalogFileReference)
                ) && 
                (
                    SourceExternalDigitalAudioReference == other.SourceExternalDigitalAudioReference ||
                    SourceExternalDigitalAudioReference != null &&
                    SourceExternalDigitalAudioReference.SequenceEqual(other.SourceExternalDigitalAudioReference)
                ) && 
                (
                    SourceExternalDigitalReference == other.SourceExternalDigitalReference ||
                    SourceExternalDigitalReference != null &&
                    SourceExternalDigitalReference.SequenceEqual(other.SourceExternalDigitalReference)
                ) && 
                (
                    SourceExternalDigitalVideoReference == other.SourceExternalDigitalVideoReference ||
                    SourceExternalDigitalVideoReference != null &&
                    SourceExternalDigitalVideoReference.SequenceEqual(other.SourceExternalDigitalVideoReference)
                ) && 
                (
                    SourceExternalFileReference == other.SourceExternalFileReference ||
                    SourceExternalFileReference != null &&
                    SourceExternalFileReference.SequenceEqual(other.SourceExternalFileReference)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BitsPerPixelQuantity != null)
                    hashCode = hashCode * 59 + BitsPerPixelQuantity.GetHashCode();
                    if (CaptureDetail != null)
                    hashCode = hashCode * 59 + CaptureDetail.GetHashCode();
                    if (ColorSpaceCode != null)
                    hashCode = hashCode * 59 + ColorSpaceCode.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (CompressionAlgorithmCode != null)
                    hashCode = hashCode * 59 + CompressionAlgorithmCode.GetHashCode();
                    if (CompressionAlgorithm != null)
                    hashCode = hashCode * 59 + CompressionAlgorithm.GetHashCode();
                    if (HorizontalLineLengthPixelQuantity != null)
                    hashCode = hashCode * 59 + HorizontalLineLengthPixelQuantity.GetHashCode();
                    if (HorizontalPixelDensityValue != null)
                    hashCode = hashCode * 59 + HorizontalPixelDensityValue.GetHashCode();
                    if (Quality != null)
                    hashCode = hashCode * 59 + Quality.GetHashCode();
                    if (ScaleUnitsCode != null)
                    hashCode = hashCode * 59 + ScaleUnitsCode.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (VerticalLineLengthPixelQuantity != null)
                    hashCode = hashCode * 59 + VerticalLineLengthPixelQuantity.GetHashCode();
                    if (VerticalPixelDensityValue != null)
                    hashCode = hashCode * 59 + VerticalPixelDensityValue.GetHashCode();
                    if (Distortion != null)
                    hashCode = hashCode * 59 + Distortion.GetHashCode();
                    if (NativeScanningResolutionValue != null)
                    hashCode = hashCode * 59 + NativeScanningResolutionValue.GetHashCode();
                    if (NominalScanningResolutionValue != null)
                    hashCode = hashCode * 59 + NominalScanningResolutionValue.GetHashCode();
                    if (NominalTransmittingResolutionValue != null)
                    hashCode = hashCode * 59 + NominalTransmittingResolutionValue.GetHashCode();
                    if (ScanningResolutionCategoryCode != null)
                    hashCode = hashCode * 59 + ScanningResolutionCategoryCode.GetHashCode();
                    if (MedicalryDataBlockBinaryObject != null)
                    hashCode = hashCode * 59 + MedicalryDataBlockBinaryObject.GetHashCode();
                    if (SourceExternalAnalogFileReference != null)
                    hashCode = hashCode * 59 + SourceExternalAnalogFileReference.GetHashCode();
                    if (SourceExternalDigitalAudioReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalAudioReference.GetHashCode();
                    if (SourceExternalDigitalReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalReference.GetHashCode();
                    if (SourceExternalDigitalVideoReference != null)
                    hashCode = hashCode * 59 + SourceExternalDigitalVideoReference.GetHashCode();
                    if (SourceExternalFileReference != null)
                    hashCode = hashCode * 59 + SourceExternalFileReference.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomImageType left, BiomImageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomImageType left, BiomImageType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
