/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a live birth of a human being.
    /// </summary>
    [DataContract]
    public partial class JBirthType : NcActivityType, IEquatable<JBirthType>
    { 
        /// <summary>
        /// A number indicating the order of birth specified on the birth certificate (e.g., first, second). NIEM reference is j:BirthChildBirthOrderNumeric
        /// </summary>
        /// <value>A number indicating the order of birth specified on the birth certificate (e.g., first, second). NIEM reference is j:BirthChildBirthOrderNumeric</value>

        [DataMember(Name="childBirthOrderNumeric")]
        public List<NcNumericType> ChildBirthOrderNumeric { get; set; }

        /// <summary>
        /// A registration for a government certificate of live birth. NIEM reference is j:BirthRegistration
        /// </summary>
        /// <value>A registration for a government certificate of live birth. NIEM reference is j:BirthRegistration</value>

        [DataMember(Name="registration")]
        public List<NcDocumentType> Registration { get; set; }

        /// <summary>
        /// A person or entity who attended the birth. NIEM reference is j:BirthAttendant
        /// </summary>
        /// <value>A person or entity who attended the birth. NIEM reference is j:BirthAttendant</value>

        [DataMember(Name="attendant")]
        public List<NcPersonType> Attendant { get; set; }

        /// <summary>
        /// True if a person was born in a hospital; false otherwise. NIEM reference is j:PersonHospitalBirthIndicator
        /// </summary>
        /// <value>True if a person was born in a hospital; false otherwise. NIEM reference is j:PersonHospitalBirthIndicator</value>

        [DataMember(Name="isPersonHospital")]
        public List<NiemXsboolean> IsPersonHospital { get; set; }

        /// <summary>
        /// jBirthType JSON-LD context
        /// </summary>
        /// <value>jBirthType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjBirthTypeContextJsonldEnum for ../JSON-LD_Contexts/jBirthTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jBirthTypeContext.jsonld")]
            JSONLDContextsjBirthTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jBirthType JSON-LD context
        /// </summary>
        /// <value>jBirthType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JBirthType {\n");
            sb.Append("  ChildBirthOrderNumeric: ").Append(ChildBirthOrderNumeric).Append("\n");
            sb.Append("  Registration: ").Append(Registration).Append("\n");
            sb.Append("  Attendant: ").Append(Attendant).Append("\n");
            sb.Append("  IsPersonHospital: ").Append(IsPersonHospital).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JBirthType)obj);
        }

        /// <summary>
        /// Returns true if JBirthType instances are equal
        /// </summary>
        /// <param name="other">Instance of JBirthType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JBirthType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChildBirthOrderNumeric == other.ChildBirthOrderNumeric ||
                    ChildBirthOrderNumeric != null &&
                    ChildBirthOrderNumeric.SequenceEqual(other.ChildBirthOrderNumeric)
                ) && 
                (
                    Registration == other.Registration ||
                    Registration != null &&
                    Registration.SequenceEqual(other.Registration)
                ) && 
                (
                    Attendant == other.Attendant ||
                    Attendant != null &&
                    Attendant.SequenceEqual(other.Attendant)
                ) && 
                (
                    IsPersonHospital == other.IsPersonHospital ||
                    IsPersonHospital != null &&
                    IsPersonHospital.SequenceEqual(other.IsPersonHospital)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChildBirthOrderNumeric != null)
                    hashCode = hashCode * 59 + ChildBirthOrderNumeric.GetHashCode();
                    if (Registration != null)
                    hashCode = hashCode * 59 + Registration.GetHashCode();
                    if (Attendant != null)
                    hashCode = hashCode * 59 + Attendant.GetHashCode();
                    if (IsPersonHospital != null)
                    hashCode = hashCode * 59 + IsPersonHospital.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JBirthType left, JBirthType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JBirthType left, JBirthType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
