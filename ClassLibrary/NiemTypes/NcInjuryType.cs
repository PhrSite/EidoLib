/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a form of harm or damage sustained by a person.
    /// </summary>
    [DataContract]
    public partial class NcInjuryType : IEquatable<NcInjuryType>
    { 
        /// <summary>
        /// A primary or most obvious area of the persons body injured during the crash. NIEM reference is j:InjuryLocationCode
        /// </summary>
        /// <value>A primary or most obvious area of the persons body injured during the crash. NIEM reference is j:InjuryLocationCode</value>

        [DataMember(Name="locationCode")]
        public List<MmuccPersonInjuryLocationCodeType> LocationCode { get; set; }

        /// <summary>
        /// A location of the victim&#x27;s injury. NIEM reference is j:InjuryLocationNDEXCode
        /// </summary>
        /// <value>A location of the victim&#x27;s injury. NIEM reference is j:InjuryLocationNDEXCode</value>

        [DataMember(Name="locationNdexCode")]
        public List<NdexInjuryLocationCodeType> LocationNdexCode { get; set; }

        /// <summary>
        /// A place on the body of a person where an injury occurred. NIEM reference is nc:InjuryLocationText
        /// </summary>
        /// <value>A place on the body of a person where an injury occurred. NIEM reference is nc:InjuryLocationText</value>

        [DataMember(Name="location")]
        public List<NcTextType> Location { get; set; }

        /// <summary>
        /// A general category of harm or injury. NIEM reference is j:InjuryCategoryCode
        /// </summary>
        /// <value>A general category of harm or injury. NIEM reference is j:InjuryCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<UcrInjuryCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A bodily injury suffered by a victim. NIEM reference is j:InjuryCategoryNDExCode
        /// </summary>
        /// <value>A bodily injury suffered by a victim. NIEM reference is j:InjuryCategoryNDExCode</value>

        [DataMember(Name="categoryNdExCode")]
        public List<NdexInjuryCategoryCodeType> CategoryNdExCode { get; set; }

        /// <summary>
        /// A kind of bodily harm or injury. NIEM reference is nc:InjuryCategoryText
        /// </summary>
        /// <value>A kind of bodily harm or injury. NIEM reference is nc:InjuryCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A date on which an injury occurred. NIEM reference is nc:InjuryDate
        /// </summary>
        /// <value>A date on which an injury occurred. NIEM reference is nc:InjuryDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// A description of an injury. NIEM reference is nc:InjuryDescriptionText
        /// </summary>
        /// <value>A description of an injury. NIEM reference is nc:InjuryDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A causer of an injury. NIEM reference is j:InjuryCauserForce
        /// </summary>
        /// <value>A causer of an injury. NIEM reference is j:InjuryCauserForce</value>

        [DataMember(Name="causerForce")]
        public List<JForceType> CauserForce { get; set; }

        /// <summary>
        /// A person who caused an injury. NIEM reference is nc:InjuryCauserPerson
        /// </summary>
        /// <value>A person who caused an injury. NIEM reference is nc:InjuryCauserPerson</value>

        [DataMember(Name="causerPerson")]
        public List<NcPersonType> CauserPerson { get; set; }

        /// <summary>
        /// A person who receives or sustains an injury. NIEM reference is nc:InjurySustainer
        /// </summary>
        /// <value>A person who receives or sustains an injury. NIEM reference is nc:InjurySustainer</value>

        [DataMember(Name="sustainer")]
        public List<NcPersonType> Sustainer { get; set; }

        /// <summary>
        /// A severity of an injury received by a person involved into a Traffic Accident. NIEM reference is j:InjurySeverityCode
        /// </summary>
        /// <value>A severity of an injury received by a person involved into a Traffic Accident. NIEM reference is j:InjurySeverityCode</value>

        [DataMember(Name="severityCode")]
        public List<AamvaD20AccidentSeverityCodeType> SeverityCode { get; set; }

        /// <summary>
        /// A degree of the seriousness or intensity of an injury. NIEM reference is nc:InjurySeverityText
        /// </summary>
        /// <value>A degree of the seriousness or intensity of an injury. NIEM reference is nc:InjurySeverityText</value>

        [DataMember(Name="severity")]
        public List<NcTextType> Severity { get; set; }

        /// <summary>
        /// Additional information about a Injury. NIEM reference is j:InjuryAugmentation
        /// </summary>
        /// <value>Additional information about a Injury. NIEM reference is j:InjuryAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JInjuryAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncInjuryType JSON-LD context
        /// </summary>
        /// <value>ncInjuryType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncInjuryTypeContextJsonldEnum for ../JSON-LD_Contexts/ncInjuryTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncInjuryTypeContext.jsonld")]
            JSONLDContextsncInjuryTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncInjuryType JSON-LD context
        /// </summary>
        /// <value>ncInjuryType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcInjuryType {\n");
            sb.Append("  LocationCode: ").Append(LocationCode).Append("\n");
            sb.Append("  LocationNdexCode: ").Append(LocationNdexCode).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryNdExCode: ").Append(CategoryNdExCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CauserForce: ").Append(CauserForce).Append("\n");
            sb.Append("  CauserPerson: ").Append(CauserPerson).Append("\n");
            sb.Append("  Sustainer: ").Append(Sustainer).Append("\n");
            sb.Append("  SeverityCode: ").Append(SeverityCode).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcInjuryType)obj);
        }

        /// <summary>
        /// Returns true if NcInjuryType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcInjuryType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcInjuryType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationCode == other.LocationCode ||
                    LocationCode != null &&
                    LocationCode.SequenceEqual(other.LocationCode)
                ) && 
                (
                    LocationNdexCode == other.LocationNdexCode ||
                    LocationNdexCode != null &&
                    LocationNdexCode.SequenceEqual(other.LocationNdexCode)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CategoryNdExCode == other.CategoryNdExCode ||
                    CategoryNdExCode != null &&
                    CategoryNdExCode.SequenceEqual(other.CategoryNdExCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    CauserForce == other.CauserForce ||
                    CauserForce != null &&
                    CauserForce.SequenceEqual(other.CauserForce)
                ) && 
                (
                    CauserPerson == other.CauserPerson ||
                    CauserPerson != null &&
                    CauserPerson.SequenceEqual(other.CauserPerson)
                ) && 
                (
                    Sustainer == other.Sustainer ||
                    Sustainer != null &&
                    Sustainer.SequenceEqual(other.Sustainer)
                ) && 
                (
                    SeverityCode == other.SeverityCode ||
                    SeverityCode != null &&
                    SeverityCode.SequenceEqual(other.SeverityCode)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.SequenceEqual(other.Severity)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationCode != null)
                    hashCode = hashCode * 59 + LocationCode.GetHashCode();
                    if (LocationNdexCode != null)
                    hashCode = hashCode * 59 + LocationNdexCode.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CategoryNdExCode != null)
                    hashCode = hashCode * 59 + CategoryNdExCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CauserForce != null)
                    hashCode = hashCode * 59 + CauserForce.GetHashCode();
                    if (CauserPerson != null)
                    hashCode = hashCode * 59 + CauserPerson.GetHashCode();
                    if (Sustainer != null)
                    hashCode = hashCode * 59 + Sustainer.GetHashCode();
                    if (SeverityCode != null)
                    hashCode = hashCode * 59 + SeverityCode.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcInjuryType left, NcInjuryType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcInjuryType left, NcInjuryType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
