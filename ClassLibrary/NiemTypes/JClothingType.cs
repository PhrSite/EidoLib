/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an article of clothing, dress, or attire.
    /// </summary>
    [DataContract]
    public partial class JClothingType : IEquatable<JClothingType>
    { 
        /// <summary>
        /// A kind of clothing. NIEM reference is j:ClothingCategoryText
        /// </summary>
        /// <value>A kind of clothing. NIEM reference is j:ClothingCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A color of an article of clothing. NIEM reference is j:ClothingColorText
        /// </summary>
        /// <value>A color of an article of clothing. NIEM reference is j:ClothingColorText</value>

        [DataMember(Name="color")]
        public List<NcTextType> Color { get; set; }

        /// <summary>
        /// A description of an article of clothing. NIEM reference is j:ClothingDescriptionText
        /// </summary>
        /// <value>A description of an article of clothing. NIEM reference is j:ClothingDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A style of an article of clothing. NIEM reference is j:ClothingStyleText
        /// </summary>
        /// <value>A style of an article of clothing. NIEM reference is j:ClothingStyleText</value>

        [DataMember(Name="style")]
        public List<NcTextType> Style { get; set; }

        /// <summary>
        /// jClothingType JSON-LD context
        /// </summary>
        /// <value>jClothingType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjClothingTypeContextJsonldEnum for ../JSON-LD_Contexts/jClothingTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jClothingTypeContext.jsonld")]
            JSONLDContextsjClothingTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jClothingType JSON-LD context
        /// </summary>
        /// <value>jClothingType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JClothingType {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JClothingType)obj);
        }

        /// <summary>
        /// Returns true if JClothingType instances are equal
        /// </summary>
        /// <param name="other">Instance of JClothingType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JClothingType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.SequenceEqual(other.Color)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Style == other.Style ||
                    Style != null &&
                    Style.SequenceEqual(other.Style)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Style != null)
                    hashCode = hashCode * 59 + Style.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JClothingType left, JClothingType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JClothingType left, JClothingType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
