/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a type of disability recorded as part of a subject assessment.
    /// </summary>
    [DataContract]
    public partial class JPersonDisabilityType : IEquatable<JPersonDisabilityType>
    { 
        /// <summary>
        /// A date on which the mobility impairment expires. NIEM reference is j:PersonDisabilityMobilityImpairmentExpirationDate
        /// </summary>
        /// <value>A date on which the mobility impairment expires. NIEM reference is j:PersonDisabilityMobilityImpairmentExpirationDate</value>

        [DataMember(Name="mobilityImpairmentExpirationDate")]
        public List<NcDateType> MobilityImpairmentExpirationDate { get; set; }

        /// <summary>
        /// A kind of ADA daily living level. NIEM reference is j:PersonDisabilityDailyLivingLevelText
        /// </summary>
        /// <value>A kind of ADA daily living level. NIEM reference is j:PersonDisabilityDailyLivingLevelText</value>

        [DataMember(Name="dailyLivingLevel")]
        public List<NcTextType> DailyLivingLevel { get; set; }

        /// <summary>
        /// True if the person identified a condition potentially resulting in disability placement; false otherwise. NIEM reference is j:PersonDisabilitySelfIdentifiedIndicator
        /// </summary>
        /// <value>True if the person identified a condition potentially resulting in disability placement; false otherwise. NIEM reference is j:PersonDisabilitySelfIdentifiedIndicator</value>

        [DataMember(Name="isSelfIdentified")]
        public List<NiemXsboolean> IsSelfIdentified { get; set; }

        /// <summary>
        /// A comment clarifying a person&#x27;s physical impairment with respect to their own mobility. NIEM reference is j:PersonDisabilityMobilityImpairmentText
        /// </summary>
        /// <value>A comment clarifying a person&#x27;s physical impairment with respect to their own mobility. NIEM reference is j:PersonDisabilityMobilityImpairmentText</value>

        [DataMember(Name="mobilityImpairment")]
        public List<NcTextType> MobilityImpairment { get; set; }

        /// <summary>
        /// True if the mobility impairment is temporary; false otherwise. NIEM reference is j:PersonDisabilityMobilityImpairmentTemporaryIndicator
        /// </summary>
        /// <value>True if the mobility impairment is temporary; false otherwise. NIEM reference is j:PersonDisabilityMobilityImpairmentTemporaryIndicator</value>

        [DataMember(Name="isMobilityImpairmentTemporary")]
        public List<NiemXsboolean> IsMobilityImpairmentTemporary { get; set; }

        /// <summary>
        /// A date the placement mobility impairment restrictions were recorded. NIEM reference is j:PersonDisabilityMobilityImpairmentRecordedDate
        /// </summary>
        /// <value>A date the placement mobility impairment restrictions were recorded. NIEM reference is j:PersonDisabilityMobilityImpairmentRecordedDate</value>

        [DataMember(Name="mobilityImpairmentRecordedDate")]
        public List<NcDateType> MobilityImpairmentRecordedDate { get; set; }

        /// <summary>
        /// True if a person has a mobility impairment but that impairment does not create housing restrictions; false otherwise. NIEM reference is j:PersonDisabilityMobilityImpairmentIndicator
        /// </summary>
        /// <value>True if a person has a mobility impairment but that impairment does not create housing restrictions; false otherwise. NIEM reference is j:PersonDisabilityMobilityImpairmentIndicator</value>

        [DataMember(Name="isMobilityImpairment")]
        public List<NiemXsboolean> IsMobilityImpairment { get; set; }

        /// <summary>
        /// A description of medical equipment or devices required by a person due to a physical disability. NIEM reference is j:PersonDisabilityMedicalEquipment
        /// </summary>
        /// <value>A description of medical equipment or devices required by a person due to a physical disability. NIEM reference is j:PersonDisabilityMedicalEquipment</value>

        [DataMember(Name="medicalEquipment")]
        public List<JMedicalEquipmentType> MedicalEquipment { get; set; }

        /// <summary>
        /// A kind of method used to identify a disability. NIEM reference is j:PersonDisabilityIdentificationMethodText
        /// </summary>
        /// <value>A kind of method used to identify a disability. NIEM reference is j:PersonDisabilityIdentificationMethodText</value>

        [DataMember(Name="identificationMethod")]
        public List<NcTextType> IdentificationMethod { get; set; }

        /// <summary>
        /// jPersonDisabilityType JSON-LD context
        /// </summary>
        /// <value>jPersonDisabilityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPersonDisabilityTypeContextJsonldEnum for ../JSON-LD_Contexts/jPersonDisabilityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPersonDisabilityTypeContext.jsonld")]
            JSONLDContextsjPersonDisabilityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPersonDisabilityType JSON-LD context
        /// </summary>
        /// <value>jPersonDisabilityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPersonDisabilityType {\n");
            sb.Append("  MobilityImpairmentExpirationDate: ").Append(MobilityImpairmentExpirationDate).Append("\n");
            sb.Append("  DailyLivingLevel: ").Append(DailyLivingLevel).Append("\n");
            sb.Append("  IsSelfIdentified: ").Append(IsSelfIdentified).Append("\n");
            sb.Append("  MobilityImpairment: ").Append(MobilityImpairment).Append("\n");
            sb.Append("  IsMobilityImpairmentTemporary: ").Append(IsMobilityImpairmentTemporary).Append("\n");
            sb.Append("  MobilityImpairmentRecordedDate: ").Append(MobilityImpairmentRecordedDate).Append("\n");
            sb.Append("  IsMobilityImpairment: ").Append(IsMobilityImpairment).Append("\n");
            sb.Append("  MedicalEquipment: ").Append(MedicalEquipment).Append("\n");
            sb.Append("  IdentificationMethod: ").Append(IdentificationMethod).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPersonDisabilityType)obj);
        }

        /// <summary>
        /// Returns true if JPersonDisabilityType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPersonDisabilityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPersonDisabilityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MobilityImpairmentExpirationDate == other.MobilityImpairmentExpirationDate ||
                    MobilityImpairmentExpirationDate != null &&
                    MobilityImpairmentExpirationDate.SequenceEqual(other.MobilityImpairmentExpirationDate)
                ) && 
                (
                    DailyLivingLevel == other.DailyLivingLevel ||
                    DailyLivingLevel != null &&
                    DailyLivingLevel.SequenceEqual(other.DailyLivingLevel)
                ) && 
                (
                    IsSelfIdentified == other.IsSelfIdentified ||
                    IsSelfIdentified != null &&
                    IsSelfIdentified.SequenceEqual(other.IsSelfIdentified)
                ) && 
                (
                    MobilityImpairment == other.MobilityImpairment ||
                    MobilityImpairment != null &&
                    MobilityImpairment.SequenceEqual(other.MobilityImpairment)
                ) && 
                (
                    IsMobilityImpairmentTemporary == other.IsMobilityImpairmentTemporary ||
                    IsMobilityImpairmentTemporary != null &&
                    IsMobilityImpairmentTemporary.SequenceEqual(other.IsMobilityImpairmentTemporary)
                ) && 
                (
                    MobilityImpairmentRecordedDate == other.MobilityImpairmentRecordedDate ||
                    MobilityImpairmentRecordedDate != null &&
                    MobilityImpairmentRecordedDate.SequenceEqual(other.MobilityImpairmentRecordedDate)
                ) && 
                (
                    IsMobilityImpairment == other.IsMobilityImpairment ||
                    IsMobilityImpairment != null &&
                    IsMobilityImpairment.SequenceEqual(other.IsMobilityImpairment)
                ) && 
                (
                    MedicalEquipment == other.MedicalEquipment ||
                    MedicalEquipment != null &&
                    MedicalEquipment.SequenceEqual(other.MedicalEquipment)
                ) && 
                (
                    IdentificationMethod == other.IdentificationMethod ||
                    IdentificationMethod != null &&
                    IdentificationMethod.SequenceEqual(other.IdentificationMethod)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MobilityImpairmentExpirationDate != null)
                    hashCode = hashCode * 59 + MobilityImpairmentExpirationDate.GetHashCode();
                    if (DailyLivingLevel != null)
                    hashCode = hashCode * 59 + DailyLivingLevel.GetHashCode();
                    if (IsSelfIdentified != null)
                    hashCode = hashCode * 59 + IsSelfIdentified.GetHashCode();
                    if (MobilityImpairment != null)
                    hashCode = hashCode * 59 + MobilityImpairment.GetHashCode();
                    if (IsMobilityImpairmentTemporary != null)
                    hashCode = hashCode * 59 + IsMobilityImpairmentTemporary.GetHashCode();
                    if (MobilityImpairmentRecordedDate != null)
                    hashCode = hashCode * 59 + MobilityImpairmentRecordedDate.GetHashCode();
                    if (IsMobilityImpairment != null)
                    hashCode = hashCode * 59 + IsMobilityImpairment.GetHashCode();
                    if (MedicalEquipment != null)
                    hashCode = hashCode * 59 + MedicalEquipment.GetHashCode();
                    if (IdentificationMethod != null)
                    hashCode = hashCode * 59 + IdentificationMethod.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPersonDisabilityType left, JPersonDisabilityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPersonDisabilityType left, JPersonDisabilityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
