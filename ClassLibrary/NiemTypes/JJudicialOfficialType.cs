/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person involved in a judicial area of government.
    /// </summary>
    [DataContract]
    public partial class JJudicialOfficialType : IEquatable<JJudicialOfficialType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// A legal capacity in which a judicial official is able to practice law. NIEM reference is j:JudicialOfficialBarMembership
        /// </summary>
        /// <value>A legal capacity in which a judicial official is able to practice law. NIEM reference is j:JudicialOfficialBarMembership</value>

        [DataMember(Name="barMembership")]
        public List<JJudicialOfficialBarMembershipType> BarMembership { get; set; }

        /// <summary>
        /// A court unit to which a judicial official is assigned. NIEM reference is j:JudicialOfficialCourt
        /// </summary>
        /// <value>A court unit to which a judicial official is assigned. NIEM reference is j:JudicialOfficialCourt</value>

        [DataMember(Name="court")]
        public List<JCourtType> Court { get; set; }

        /// <summary>
        /// An agency at which a judicial official works. NIEM reference is j:JudicialOfficialFirm
        /// </summary>
        /// <value>An agency at which a judicial official works. NIEM reference is j:JudicialOfficialFirm</value>

        [DataMember(Name="firm")]
        public List<NcOrganizationType> Firm { get; set; }

        /// <summary>
        /// An identification or name of a panel or group to which a judicial official is assigned. NIEM reference is j:JudicialOfficialPanelIdentification
        /// </summary>
        /// <value>An identification or name of a panel or group to which a judicial official is assigned. NIEM reference is j:JudicialOfficialPanelIdentification</value>

        [DataMember(Name="panelIdentification")]
        public List<NcIdentificationType> PanelIdentification { get; set; }

        /// <summary>
        /// An identification assigned to a judicial official after registering within a state or region. NIEM reference is j:JudicialOfficialRegistrationIdentification
        /// </summary>
        /// <value>An identification assigned to a judicial official after registering within a state or region. NIEM reference is j:JudicialOfficialRegistrationIdentification</value>

        [DataMember(Name="registrationIdentification")]
        public List<NcIdentificationType> RegistrationIdentification { get; set; }

        /// <summary>
        /// A kind of judicial official. NIEM reference is j:JudicialOfficialCategoryText
        /// </summary>
        /// <value>A kind of judicial official. NIEM reference is j:JudicialOfficialCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// Additional information about a judicial official. NIEM reference is im:JudicialOfficialAugmentation
        /// </summary>
        /// <value>Additional information about a judicial official. NIEM reference is im:JudicialOfficialAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ImJudicialOfficialAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// jJudicialOfficialType JSON-LD context
        /// </summary>
        /// <value>jJudicialOfficialType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjJudicialOfficialTypeContextJsonldEnum for ../JSON-LD_Contexts/jJudicialOfficialTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jJudicialOfficialTypeContext.jsonld")]
            JSONLDContextsjJudicialOfficialTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jJudicialOfficialType JSON-LD context
        /// </summary>
        /// <value>jJudicialOfficialType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JJudicialOfficialType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  BarMembership: ").Append(BarMembership).Append("\n");
            sb.Append("  Court: ").Append(Court).Append("\n");
            sb.Append("  Firm: ").Append(Firm).Append("\n");
            sb.Append("  PanelIdentification: ").Append(PanelIdentification).Append("\n");
            sb.Append("  RegistrationIdentification: ").Append(RegistrationIdentification).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JJudicialOfficialType)obj);
        }

        /// <summary>
        /// Returns true if JJudicialOfficialType instances are equal
        /// </summary>
        /// <param name="other">Instance of JJudicialOfficialType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JJudicialOfficialType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    BarMembership == other.BarMembership ||
                    BarMembership != null &&
                    BarMembership.SequenceEqual(other.BarMembership)
                ) && 
                (
                    Court == other.Court ||
                    Court != null &&
                    Court.SequenceEqual(other.Court)
                ) && 
                (
                    Firm == other.Firm ||
                    Firm != null &&
                    Firm.SequenceEqual(other.Firm)
                ) && 
                (
                    PanelIdentification == other.PanelIdentification ||
                    PanelIdentification != null &&
                    PanelIdentification.SequenceEqual(other.PanelIdentification)
                ) && 
                (
                    RegistrationIdentification == other.RegistrationIdentification ||
                    RegistrationIdentification != null &&
                    RegistrationIdentification.SequenceEqual(other.RegistrationIdentification)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (BarMembership != null)
                    hashCode = hashCode * 59 + BarMembership.GetHashCode();
                    if (Court != null)
                    hashCode = hashCode * 59 + Court.GetHashCode();
                    if (Firm != null)
                    hashCode = hashCode * 59 + Firm.GetHashCode();
                    if (PanelIdentification != null)
                    hashCode = hashCode * 59 + PanelIdentification.GetHashCode();
                    if (RegistrationIdentification != null)
                    hashCode = hashCode * 59 + RegistrationIdentification.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JJudicialOfficialType left, JJudicialOfficialType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JJudicialOfficialType left, JJudicialOfficialType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
