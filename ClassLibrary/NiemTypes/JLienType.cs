/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a legal encumbrance placed on a property item.
    /// </summary>
    [DataContract]
    public partial class JLienType : IEquatable<JLienType>
    { 
        /// <summary>
        /// A monetary amount representing a legal encumbrance placed on a property. NIEM reference is j:LienAmount
        /// </summary>
        /// <value>A monetary amount representing a legal encumbrance placed on a property. NIEM reference is j:LienAmount</value>

        [DataMember(Name="amount")]
        public List<NcAmountType> Amount { get; set; }

        /// <summary>
        /// A date a lien was placed on a property item. NIEM reference is j:LienDate
        /// </summary>
        /// <value>A date a lien was placed on a property item. NIEM reference is j:LienDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// A date a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseDate
        /// </summary>
        /// <value>A date a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseDate</value>

        [DataMember(Name="releaseDate")]
        public List<NcDateType> ReleaseDate { get; set; }

        /// <summary>
        /// A reason a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseReasonCode
        /// </summary>
        /// <value>A reason a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseReasonCode</value>

        [DataMember(Name="releaseReasonCode")]
        public List<AamvaD20LienReleaseReasonCodeType> ReleaseReasonCode { get; set; }

        /// <summary>
        /// A reason a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseReasonText
        /// </summary>
        /// <value>A reason a legal encumbrance is removed from a property item. NIEM reference is j:LienReleaseReasonText</value>

        [DataMember(Name="releaseReason")]
        public List<NcTextType> ReleaseReason { get; set; }

        /// <summary>
        /// jLienType JSON-LD context
        /// </summary>
        /// <value>jLienType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjLienTypeContextJsonldEnum for ../JSON-LD_Contexts/jLienTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jLienTypeContext.jsonld")]
            JSONLDContextsjLienTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jLienType JSON-LD context
        /// </summary>
        /// <value>jLienType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JLienType {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  ReleaseReasonCode: ").Append(ReleaseReasonCode).Append("\n");
            sb.Append("  ReleaseReason: ").Append(ReleaseReason).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JLienType)obj);
        }

        /// <summary>
        /// Returns true if JLienType instances are equal
        /// </summary>
        /// <param name="other">Instance of JLienType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JLienType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.SequenceEqual(other.Amount)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    ReleaseDate == other.ReleaseDate ||
                    ReleaseDate != null &&
                    ReleaseDate.SequenceEqual(other.ReleaseDate)
                ) && 
                (
                    ReleaseReasonCode == other.ReleaseReasonCode ||
                    ReleaseReasonCode != null &&
                    ReleaseReasonCode.SequenceEqual(other.ReleaseReasonCode)
                ) && 
                (
                    ReleaseReason == other.ReleaseReason ||
                    ReleaseReason != null &&
                    ReleaseReason.SequenceEqual(other.ReleaseReason)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                    if (ReleaseReasonCode != null)
                    hashCode = hashCode * 59 + ReleaseReasonCode.GetHashCode();
                    if (ReleaseReason != null)
                    hashCode = hashCode * 59 + ReleaseReason.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JLienType left, JLienType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JLienType left, JLienType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
