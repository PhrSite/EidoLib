/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for something that is owed to an entity.
    /// </summary>
    [DataContract]
    public partial class NcObligationType : IEquatable<NcObligationType>
    { 
        /// <summary>
        /// A total amount of money to be charged or paid to meet a financial obligation. NIEM reference is nc:ObligationTotalAmount
        /// </summary>
        /// <value>A total amount of money to be charged or paid to meet a financial obligation. NIEM reference is nc:ObligationTotalAmount</value>

        [DataMember(Name="totalAmount")]
        public List<NcAmountType> TotalAmount { get; set; }

        /// <summary>
        /// A quantity of time that must be spent in order to fulfill an obligation. NIEM reference is nc:ObligationTotalDuration
        /// </summary>
        /// <value>A quantity of time that must be spent in order to fulfill an obligation. NIEM reference is nc:ObligationTotalDuration</value>

        [DataMember(Name="totalDuration")]
        public List<NiemXsduration> TotalDuration { get; set; }

        /// <summary>
        /// An amount of a payment obligation that has not been made. NIEM reference is nc:ObligationDueAmount
        /// </summary>
        /// <value>An amount of a payment obligation that has not been made. NIEM reference is nc:ObligationDueAmount</value>

        [DataMember(Name="dueAmount")]
        public List<NcAmountType> DueAmount { get; set; }

        /// <summary>
        /// A quantity of time still required to be spent in order to fulfill an obligation. NIEM reference is nc:ObligationDueDuration
        /// </summary>
        /// <value>A quantity of time still required to be spent in order to fulfill an obligation. NIEM reference is nc:ObligationDueDuration</value>

        [DataMember(Name="dueDuration")]
        public List<NiemXsduration> DueDuration { get; set; }

        /// <summary>
        /// An amount of a payment obligation that has been made. NIEM reference is nc:ObligationPaidAmount
        /// </summary>
        /// <value>An amount of a payment obligation that has been made. NIEM reference is nc:ObligationPaidAmount</value>

        [DataMember(Name="paidAmount")]
        public List<NcAmountType> PaidAmount { get; set; }

        /// <summary>
        /// A quantity of time that has been spent towards fulfilling an obligation. NIEM reference is nc:ObligationPaidDuration
        /// </summary>
        /// <value>A quantity of time that has been spent towards fulfilling an obligation. NIEM reference is nc:ObligationPaidDuration</value>

        [DataMember(Name="paidDuration")]
        public List<NiemXsduration> PaidDuration { get; set; }

        /// <summary>
        /// True if an obligation has been fulfilled; false otherwise. NIEM reference is nc:ObligationCompleteIndicator
        /// </summary>
        /// <value>True if an obligation has been fulfilled; false otherwise. NIEM reference is nc:ObligationCompleteIndicator</value>

        [DataMember(Name="isComplete")]
        public List<NiemXsboolean> IsComplete { get; set; }

        /// <summary>
        /// True if a person with an obligation is in compliance with the requirements; false otherwise. NIEM reference is nc:ObligationComplianceIndicator
        /// </summary>
        /// <value>True if a person with an obligation is in compliance with the requirements; false otherwise. NIEM reference is nc:ObligationComplianceIndicator</value>

        [DataMember(Name="isCompliance")]
        public List<NiemXsboolean> IsCompliance { get; set; }

        /// <summary>
        /// A date by which an obligation must be fulfilled. NIEM reference is nc:ObligationDueDate
        /// </summary>
        /// <value>A date by which an obligation must be fulfilled. NIEM reference is nc:ObligationDueDate</value>

        [DataMember(Name="dueDate")]
        public List<NcDateType> DueDate { get; set; }

        /// <summary>
        /// A waiving or dismissal of an obligation. NIEM reference is nc:ObligationExemption
        /// </summary>
        /// <value>A waiving or dismissal of an obligation. NIEM reference is nc:ObligationExemption</value>

        [DataMember(Name="exemption")]
        public List<NcObligationExemptionType> Exemption { get; set; }

        /// <summary>
        /// True if an obligation has been waived or dismissed; false otherwise. NIEM reference is nc:ObligationExemptionIndicator
        /// </summary>
        /// <value>True if an obligation has been waived or dismissed; false otherwise. NIEM reference is nc:ObligationExemptionIndicator</value>

        [DataMember(Name="isExemption")]
        public List<NiemXsboolean> IsExemption { get; set; }

        /// <summary>
        /// A date an obligation was fulfilled. NIEM reference is nc:ObligationPaidDate
        /// </summary>
        /// <value>A date an obligation was fulfilled. NIEM reference is nc:ObligationPaidDate</value>

        [DataMember(Name="paidDate")]
        public List<NcDateType> PaidDate { get; set; }

        /// <summary>
        /// A description of the progress that has been made in fulfilling an obligation. NIEM reference is nc:ObligationProgressDescriptionText
        /// </summary>
        /// <value>A description of the progress that has been made in fulfilling an obligation. NIEM reference is nc:ObligationProgressDescriptionText</value>

        [DataMember(Name="progressDescription")]
        public List<NcTextType> ProgressDescription { get; set; }

        /// <summary>
        /// A description of what is necessary in order to fulfill an obligation. NIEM reference is nc:ObligationRequirementDescriptionText
        /// </summary>
        /// <value>A description of what is necessary in order to fulfill an obligation. NIEM reference is nc:ObligationRequirementDescriptionText</value>

        [DataMember(Name="requirementDescription")]
        public List<NcTextType> RequirementDescription { get; set; }

        /// <summary>
        /// A kind of obligation. NIEM reference is nc:ObligationCategoryText
        /// </summary>
        /// <value>A kind of obligation. NIEM reference is nc:ObligationCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// An entity that must fulfill an obligation. NIEM reference is nc:ObligationEntity
        /// </summary>
        /// <value>An entity that must fulfill an obligation. NIEM reference is nc:ObligationEntity</value>

        [DataMember(Name="entity")]
        public List<NcEntityType> Entity { get; set; }

        /// <summary>
        /// An entity to whom an obligation must be fulfilled. NIEM reference is nc:ObligationRecipient
        /// </summary>
        /// <value>An entity to whom an obligation must be fulfilled. NIEM reference is nc:ObligationRecipient</value>

        [DataMember(Name="recipient")]
        public List<NcEntityType> Recipient { get; set; }

        /// <summary>
        /// A periodic basis on which an obligation must be met. NIEM reference is nc:ObligationRecurrence
        /// </summary>
        /// <value>A periodic basis on which an obligation must be met. NIEM reference is nc:ObligationRecurrence</value>

        [DataMember(Name="recurrence")]
        public List<NcObligationRecurrenceType> Recurrence { get; set; }

        /// <summary>
        /// Additional information about an obligation. NIEM reference is it:ObligationAugmentation
        /// </summary>
        /// <value>Additional information about an obligation. NIEM reference is it:ObligationAugmentation</value>

        [DataMember(Name="itAugmentation")]
        public List<ItObligationAugmentationType> ItAugmentation { get; set; }

        /// <summary>
        /// Additional information about a Obligation. NIEM reference is j:ObligationAugmentation
        /// </summary>
        /// <value>Additional information about a Obligation. NIEM reference is j:ObligationAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JObligationAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// ncObligationType JSON-LD context
        /// </summary>
        /// <value>ncObligationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncObligationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncObligationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncObligationTypeContext.jsonld")]
            JSONLDContextsncObligationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncObligationType JSON-LD context
        /// </summary>
        /// <value>ncObligationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcObligationType {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalDuration: ").Append(TotalDuration).Append("\n");
            sb.Append("  DueAmount: ").Append(DueAmount).Append("\n");
            sb.Append("  DueDuration: ").Append(DueDuration).Append("\n");
            sb.Append("  PaidAmount: ").Append(PaidAmount).Append("\n");
            sb.Append("  PaidDuration: ").Append(PaidDuration).Append("\n");
            sb.Append("  IsComplete: ").Append(IsComplete).Append("\n");
            sb.Append("  IsCompliance: ").Append(IsCompliance).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Exemption: ").Append(Exemption).Append("\n");
            sb.Append("  IsExemption: ").Append(IsExemption).Append("\n");
            sb.Append("  PaidDate: ").Append(PaidDate).Append("\n");
            sb.Append("  ProgressDescription: ").Append(ProgressDescription).Append("\n");
            sb.Append("  RequirementDescription: ").Append(RequirementDescription).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  ItAugmentation: ").Append(ItAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcObligationType)obj);
        }

        /// <summary>
        /// Returns true if NcObligationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcObligationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcObligationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalAmount == other.TotalAmount ||
                    TotalAmount != null &&
                    TotalAmount.SequenceEqual(other.TotalAmount)
                ) && 
                (
                    TotalDuration == other.TotalDuration ||
                    TotalDuration != null &&
                    TotalDuration.SequenceEqual(other.TotalDuration)
                ) && 
                (
                    DueAmount == other.DueAmount ||
                    DueAmount != null &&
                    DueAmount.SequenceEqual(other.DueAmount)
                ) && 
                (
                    DueDuration == other.DueDuration ||
                    DueDuration != null &&
                    DueDuration.SequenceEqual(other.DueDuration)
                ) && 
                (
                    PaidAmount == other.PaidAmount ||
                    PaidAmount != null &&
                    PaidAmount.SequenceEqual(other.PaidAmount)
                ) && 
                (
                    PaidDuration == other.PaidDuration ||
                    PaidDuration != null &&
                    PaidDuration.SequenceEqual(other.PaidDuration)
                ) && 
                (
                    IsComplete == other.IsComplete ||
                    IsComplete != null &&
                    IsComplete.SequenceEqual(other.IsComplete)
                ) && 
                (
                    IsCompliance == other.IsCompliance ||
                    IsCompliance != null &&
                    IsCompliance.SequenceEqual(other.IsCompliance)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.SequenceEqual(other.DueDate)
                ) && 
                (
                    Exemption == other.Exemption ||
                    Exemption != null &&
                    Exemption.SequenceEqual(other.Exemption)
                ) && 
                (
                    IsExemption == other.IsExemption ||
                    IsExemption != null &&
                    IsExemption.SequenceEqual(other.IsExemption)
                ) && 
                (
                    PaidDate == other.PaidDate ||
                    PaidDate != null &&
                    PaidDate.SequenceEqual(other.PaidDate)
                ) && 
                (
                    ProgressDescription == other.ProgressDescription ||
                    ProgressDescription != null &&
                    ProgressDescription.SequenceEqual(other.ProgressDescription)
                ) && 
                (
                    RequirementDescription == other.RequirementDescription ||
                    RequirementDescription != null &&
                    RequirementDescription.SequenceEqual(other.RequirementDescription)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Entity == other.Entity ||
                    Entity != null &&
                    Entity.SequenceEqual(other.Entity)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.SequenceEqual(other.Recipient)
                ) && 
                (
                    Recurrence == other.Recurrence ||
                    Recurrence != null &&
                    Recurrence.SequenceEqual(other.Recurrence)
                ) && 
                (
                    ItAugmentation == other.ItAugmentation ||
                    ItAugmentation != null &&
                    ItAugmentation.SequenceEqual(other.ItAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalAmount != null)
                    hashCode = hashCode * 59 + TotalAmount.GetHashCode();
                    if (TotalDuration != null)
                    hashCode = hashCode * 59 + TotalDuration.GetHashCode();
                    if (DueAmount != null)
                    hashCode = hashCode * 59 + DueAmount.GetHashCode();
                    if (DueDuration != null)
                    hashCode = hashCode * 59 + DueDuration.GetHashCode();
                    if (PaidAmount != null)
                    hashCode = hashCode * 59 + PaidAmount.GetHashCode();
                    if (PaidDuration != null)
                    hashCode = hashCode * 59 + PaidDuration.GetHashCode();
                    if (IsComplete != null)
                    hashCode = hashCode * 59 + IsComplete.GetHashCode();
                    if (IsCompliance != null)
                    hashCode = hashCode * 59 + IsCompliance.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (Exemption != null)
                    hashCode = hashCode * 59 + Exemption.GetHashCode();
                    if (IsExemption != null)
                    hashCode = hashCode * 59 + IsExemption.GetHashCode();
                    if (PaidDate != null)
                    hashCode = hashCode * 59 + PaidDate.GetHashCode();
                    if (ProgressDescription != null)
                    hashCode = hashCode * 59 + ProgressDescription.GetHashCode();
                    if (RequirementDescription != null)
                    hashCode = hashCode * 59 + RequirementDescription.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Entity != null)
                    hashCode = hashCode * 59 + Entity.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Recurrence != null)
                    hashCode = hashCode * 59 + Recurrence.GetHashCode();
                    if (ItAugmentation != null)
                    hashCode = hashCode * 59 + ItAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcObligationType left, NcObligationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcObligationType left, NcObligationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
