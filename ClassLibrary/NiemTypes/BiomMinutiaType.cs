/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type definition for a single minutia.
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaType : IEquatable<BiomMinutiaType>
    { 
        /// <summary>
        /// An index identifier for uniquely denoting a minutia NIEM reference is biom:MinutiaID
        /// </summary>
        /// <value>An index identifier for uniquely denoting a minutia NIEM reference is biom:MinutiaID</value>

        [DataMember(Name="minutiaId")]
        public List<NiemXspositiveInteger> MinutiaId { get; set; }

        /// <summary>
        /// A single pair of horizontal and vertical measures describing a point in an image NIEM reference is biom:ImageSegmentVertex
        /// </summary>
        /// <value>A single pair of horizontal and vertical measures describing a point in an image NIEM reference is biom:ImageSegmentVertex</value>

        [DataMember(Name="imageSegmentVertex")]
        public List<BiomImageSegmentVertexType> ImageSegmentVertex { get; set; }

        /// <summary>
        /// A minutia&#x27;s theta angle NIEM reference is biom:PositionThetaAngleMeasure
        /// </summary>
        /// <value>A minutia&#x27;s theta angle NIEM reference is biom:PositionThetaAngleMeasure</value>

        [DataMember(Name="positionThetaAngleMeasure")]
        public List<BiomThetaAngleMeasureType> PositionThetaAngleMeasure { get; set; }

        /// <summary>
        /// A kind of minutia. NIEM reference is biom:MinutiaCategoryCode
        /// </summary>
        /// <value>A kind of minutia. NIEM reference is biom:MinutiaCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomMinutiaCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality
        /// </summary>
        /// <value>A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality</value>

        [DataMember(Name="eQuality")]
        public List<BiomImageQualityType> EQuality { get; set; }

        /// <summary>
        /// A set of measurements from this minutia point to distant minutia points. NIEM reference is biom:MinutiaRidgeCount
        /// </summary>
        /// <value>A set of measurements from this minutia point to distant minutia points. NIEM reference is biom:MinutiaRidgeCount</value>

        [DataMember(Name="ridgeCount")]
        public List<BiomMinutiaRidgeCountType> RidgeCount { get; set; }

        /// <summary>
        /// biomMinutiaType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaType {\n");
            sb.Append("  MinutiaId: ").Append(MinutiaId).Append("\n");
            sb.Append("  ImageSegmentVertex: ").Append(ImageSegmentVertex).Append("\n");
            sb.Append("  PositionThetaAngleMeasure: ").Append(PositionThetaAngleMeasure).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  EQuality: ").Append(EQuality).Append("\n");
            sb.Append("  RidgeCount: ").Append(RidgeCount).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MinutiaId == other.MinutiaId ||
                    MinutiaId != null &&
                    MinutiaId.SequenceEqual(other.MinutiaId)
                ) && 
                (
                    ImageSegmentVertex == other.ImageSegmentVertex ||
                    ImageSegmentVertex != null &&
                    ImageSegmentVertex.SequenceEqual(other.ImageSegmentVertex)
                ) && 
                (
                    PositionThetaAngleMeasure == other.PositionThetaAngleMeasure ||
                    PositionThetaAngleMeasure != null &&
                    PositionThetaAngleMeasure.SequenceEqual(other.PositionThetaAngleMeasure)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    EQuality == other.EQuality ||
                    EQuality != null &&
                    EQuality.SequenceEqual(other.EQuality)
                ) && 
                (
                    RidgeCount == other.RidgeCount ||
                    RidgeCount != null &&
                    RidgeCount.SequenceEqual(other.RidgeCount)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MinutiaId != null)
                    hashCode = hashCode * 59 + MinutiaId.GetHashCode();
                    if (ImageSegmentVertex != null)
                    hashCode = hashCode * 59 + ImageSegmentVertex.GetHashCode();
                    if (PositionThetaAngleMeasure != null)
                    hashCode = hashCode * 59 + PositionThetaAngleMeasure.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (EQuality != null)
                    hashCode = hashCode * 59 + EQuality.GetHashCode();
                    if (RidgeCount != null)
                    hashCode = hashCode * 59 + RidgeCount.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaType left, BiomMinutiaType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaType left, BiomMinutiaType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
