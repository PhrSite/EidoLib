/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a driver license withdrawal.
    /// </summary>
    [DataContract]
    public partial class JDriverLicenseWithdrawalType : NcActivityType, IEquatable<JDriverLicenseWithdrawalType>
    { 
        /// <summary>
        /// A license issued to a person granting driving privileges. NIEM reference is j:DriverLicense
        /// </summary>
        /// <value>A license issued to a person granting driving privileges. NIEM reference is j:DriverLicense</value>

        [DataMember(Name="driverLicense")]
        public List<JDriverLicenseType> DriverLicense { get; set; }

        /// <summary>
        /// A kind of driver license withdrawal action that was taken. NIEM reference is j:DriverLicenseWithdrawalActionCode
        /// </summary>
        /// <value>A kind of driver license withdrawal action that was taken. NIEM reference is j:DriverLicenseWithdrawalActionCode</value>

        [DataMember(Name="actionCode")]
        public List<AamvaD20DriverLicenseWithdrawalActionCodeType> ActionCode { get; set; }

        /// <summary>
        /// A kind of driver license withdrawal action that was taken. NIEM reference is j:DriverLicenseWithdrawalActionText
        /// </summary>
        /// <value>A kind of driver license withdrawal action that was taken. NIEM reference is j:DriverLicenseWithdrawalActionText</value>

        [DataMember(Name="action")]
        public List<NcTextType> Action { get; set; }

        /// <summary>
        /// A basis for the withdrawal action for a driver. NIEM reference is j:DriverLicenseWithdrawalBasisCode
        /// </summary>
        /// <value>A basis for the withdrawal action for a driver. NIEM reference is j:DriverLicenseWithdrawalBasisCode</value>

        [DataMember(Name="basisCode")]
        public List<AamvaD20DriverLicenseWithdrawalBasisCodeType> BasisCode { get; set; }

        /// <summary>
        /// A basis for the withdrawal action for a driver. NIEM reference is j:DriverLicenseWithdrawalBasisText
        /// </summary>
        /// <value>A basis for the withdrawal action for a driver. NIEM reference is j:DriverLicenseWithdrawalBasisText</value>

        [DataMember(Name="basis")]
        public List<NcTextType> Basis { get; set; }

        /// <summary>
        /// A reason for a driver license withdrawal. NIEM reference is j:DriverLicenseWithdrawalCode
        /// </summary>
        /// <value>A reason for a driver license withdrawal. NIEM reference is j:DriverLicenseWithdrawalCode</value>

        [DataMember(Name="code")]
        public List<AamvaD20DrivingOffenseCodeType> Code { get; set; }

        /// <summary>
        /// A reason for the withdrawal. NIEM reference is j:DriverLicenseWithdrawalText
        /// </summary>
        /// <value>A reason for the withdrawal. NIEM reference is j:DriverLicenseWithdrawalText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A due process status of a withdrawal action. NIEM reference is j:DriverLicenseWithdrawalDueProcessStatusCode
        /// </summary>
        /// <value>A due process status of a withdrawal action. NIEM reference is j:DriverLicenseWithdrawalDueProcessStatusCode</value>

        [DataMember(Name="dueProcessStatusCode")]
        public List<AamvaD20DriverLicenseWithdrawalDueProcessStatusCodeType> DueProcessStatusCode { get; set; }

        /// <summary>
        /// A due process status of a withdrawal action. NIEM reference is j:DriverLicenseWithdrawalDueProcessStatusText
        /// </summary>
        /// <value>A due process status of a withdrawal action. NIEM reference is j:DriverLicenseWithdrawalDueProcessStatusText</value>

        [DataMember(Name="dueProcessStatus")]
        public List<NcTextType> DueProcessStatus { get; set; }

        /// <summary>
        /// A date on which a driver license withdrawal becomes effective. NIEM reference is j:DriverLicenseWithdrawalEffectiveDate
        /// </summary>
        /// <value>A date on which a driver license withdrawal becomes effective. NIEM reference is j:DriverLicenseWithdrawalEffectiveDate</value>

        [DataMember(Name="effectiveDate")]
        public List<NcDateType> EffectiveDate { get; set; }

        /// <summary>
        /// An indication of when a driver is eligible to apply for reinstatement of those driving privileges withdrawn. NIEM reference is j:DriverLicenseWithdrawalEligibilityCode
        /// </summary>
        /// <value>An indication of when a driver is eligible to apply for reinstatement of those driving privileges withdrawn. NIEM reference is j:DriverLicenseWithdrawalEligibilityCode</value>

        [DataMember(Name="eligibilityCode")]
        public List<AamvaD20DriverLicenseWithdrawalEligibilityCodeType> EligibilityCode { get; set; }

        /// <summary>
        /// A date on or after which a driver is eligible to apply for reinstatement of those driving privileges withdrawn. NIEM reference is j:DriverLicenseWithdrawalEligibilityDate
        /// </summary>
        /// <value>A date on or after which a driver is eligible to apply for reinstatement of those driving privileges withdrawn. NIEM reference is j:DriverLicenseWithdrawalEligibilityDate</value>

        [DataMember(Name="eligibilityDate")]
        public List<NcDateType> EligibilityDate { get; set; }

        /// <summary>
        /// A portion of driving privileges being withdrawn. NIEM reference is j:DriverLicenseWithdrawalExtentCode
        /// </summary>
        /// <value>A portion of driving privileges being withdrawn. NIEM reference is j:DriverLicenseWithdrawalExtentCode</value>

        [DataMember(Name="extentCode")]
        public List<AamvaD20DriverLicenseWithdrawalExtentCodeType> ExtentCode { get; set; }

        /// <summary>
        /// A portion of driving privileges being withdrawn. NIEM reference is j:DriverLicenseWithdrawalExtentText
        /// </summary>
        /// <value>A portion of driving privileges being withdrawn. NIEM reference is j:DriverLicenseWithdrawalExtentText</value>

        [DataMember(Name="extent")]
        public List<NcTextType> Extent { get; set; }

        /// <summary>
        /// A jurisdiction which withdrew driving privileges for a driver. NIEM reference is j:DriverLicenseWithdrawalIssuingAuthorityCode
        /// </summary>
        /// <value>A jurisdiction which withdrew driving privileges for a driver. NIEM reference is j:DriverLicenseWithdrawalIssuingAuthorityCode</value>

        [DataMember(Name="issuingAuthorityCode")]
        public List<AamvaD20JurisdictionAuthorityCodeType> IssuingAuthorityCode { get; set; }

        /// <summary>
        /// A jurisdiction which withdrew driving privileges for a driver. NIEM reference is j:DriverLicenseWithdrawalIssuingAuthorityText
        /// </summary>
        /// <value>A jurisdiction which withdrew driving privileges for a driver. NIEM reference is j:DriverLicenseWithdrawalIssuingAuthorityText</value>

        [DataMember(Name="issuingAuthority")]
        public List<NcTextType> IssuingAuthority { get; set; }

        /// <summary>
        /// A reference identification number for the organization that keeps the withdrawal records. NIEM reference is j:DriverLicenseWithdrawalLocatorReferenceIdentification
        /// </summary>
        /// <value>A reference identification number for the organization that keeps the withdrawal records. NIEM reference is j:DriverLicenseWithdrawalLocatorReferenceIdentification</value>

        [DataMember(Name="locatorReferenceIdentification")]
        public List<NcIdentificationType> LocatorReferenceIdentification { get; set; }

        /// <summary>
        /// A withdrawal reason for future reference by the original State of Conviction. NIEM reference is j:DriverLicenseWithdrawalReasonReferenceCodeText
        /// </summary>
        /// <value>A withdrawal reason for future reference by the original State of Conviction. NIEM reference is j:DriverLicenseWithdrawalReasonReferenceCodeText</value>

        [DataMember(Name="reasonReferenceCode")]
        public List<NcTextType> ReasonReferenceCode { get; set; }

        /// <summary>
        /// A date that the licensing privilege of an individual driver (which has been previously withdrawn) is reinstated. NIEM reference is j:DriverLicenseWithdrawalReinstatementDate
        /// </summary>
        /// <value>A date that the licensing privilege of an individual driver (which has been previously withdrawn) is reinstated. NIEM reference is j:DriverLicenseWithdrawalReinstatementDate</value>

        [DataMember(Name="reinstatementDate")]
        public List<NcDateType> ReinstatementDate { get; set; }

        /// <summary>
        /// jDriverLicenseWithdrawalType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseWithdrawalType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDriverLicenseWithdrawalTypeContextJsonldEnum for ../JSON-LD_Contexts/jDriverLicenseWithdrawalTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDriverLicenseWithdrawalTypeContext.jsonld")]
            JSONLDContextsjDriverLicenseWithdrawalTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDriverLicenseWithdrawalType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseWithdrawalType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDriverLicenseWithdrawalType {\n");
            sb.Append("  DriverLicense: ").Append(DriverLicense).Append("\n");
            sb.Append("  ActionCode: ").Append(ActionCode).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  BasisCode: ").Append(BasisCode).Append("\n");
            sb.Append("  Basis: ").Append(Basis).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DueProcessStatusCode: ").Append(DueProcessStatusCode).Append("\n");
            sb.Append("  DueProcessStatus: ").Append(DueProcessStatus).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EligibilityCode: ").Append(EligibilityCode).Append("\n");
            sb.Append("  EligibilityDate: ").Append(EligibilityDate).Append("\n");
            sb.Append("  ExtentCode: ").Append(ExtentCode).Append("\n");
            sb.Append("  Extent: ").Append(Extent).Append("\n");
            sb.Append("  IssuingAuthorityCode: ").Append(IssuingAuthorityCode).Append("\n");
            sb.Append("  IssuingAuthority: ").Append(IssuingAuthority).Append("\n");
            sb.Append("  LocatorReferenceIdentification: ").Append(LocatorReferenceIdentification).Append("\n");
            sb.Append("  ReasonReferenceCode: ").Append(ReasonReferenceCode).Append("\n");
            sb.Append("  ReinstatementDate: ").Append(ReinstatementDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDriverLicenseWithdrawalType)obj);
        }

        /// <summary>
        /// Returns true if JDriverLicenseWithdrawalType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDriverLicenseWithdrawalType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDriverLicenseWithdrawalType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DriverLicense == other.DriverLicense ||
                    DriverLicense != null &&
                    DriverLicense.SequenceEqual(other.DriverLicense)
                ) && 
                (
                    ActionCode == other.ActionCode ||
                    ActionCode != null &&
                    ActionCode.SequenceEqual(other.ActionCode)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.SequenceEqual(other.Action)
                ) && 
                (
                    BasisCode == other.BasisCode ||
                    BasisCode != null &&
                    BasisCode.SequenceEqual(other.BasisCode)
                ) && 
                (
                    Basis == other.Basis ||
                    Basis != null &&
                    Basis.SequenceEqual(other.Basis)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    DueProcessStatusCode == other.DueProcessStatusCode ||
                    DueProcessStatusCode != null &&
                    DueProcessStatusCode.SequenceEqual(other.DueProcessStatusCode)
                ) && 
                (
                    DueProcessStatus == other.DueProcessStatus ||
                    DueProcessStatus != null &&
                    DueProcessStatus.SequenceEqual(other.DueProcessStatus)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.SequenceEqual(other.EffectiveDate)
                ) && 
                (
                    EligibilityCode == other.EligibilityCode ||
                    EligibilityCode != null &&
                    EligibilityCode.SequenceEqual(other.EligibilityCode)
                ) && 
                (
                    EligibilityDate == other.EligibilityDate ||
                    EligibilityDate != null &&
                    EligibilityDate.SequenceEqual(other.EligibilityDate)
                ) && 
                (
                    ExtentCode == other.ExtentCode ||
                    ExtentCode != null &&
                    ExtentCode.SequenceEqual(other.ExtentCode)
                ) && 
                (
                    Extent == other.Extent ||
                    Extent != null &&
                    Extent.SequenceEqual(other.Extent)
                ) && 
                (
                    IssuingAuthorityCode == other.IssuingAuthorityCode ||
                    IssuingAuthorityCode != null &&
                    IssuingAuthorityCode.SequenceEqual(other.IssuingAuthorityCode)
                ) && 
                (
                    IssuingAuthority == other.IssuingAuthority ||
                    IssuingAuthority != null &&
                    IssuingAuthority.SequenceEqual(other.IssuingAuthority)
                ) && 
                (
                    LocatorReferenceIdentification == other.LocatorReferenceIdentification ||
                    LocatorReferenceIdentification != null &&
                    LocatorReferenceIdentification.SequenceEqual(other.LocatorReferenceIdentification)
                ) && 
                (
                    ReasonReferenceCode == other.ReasonReferenceCode ||
                    ReasonReferenceCode != null &&
                    ReasonReferenceCode.SequenceEqual(other.ReasonReferenceCode)
                ) && 
                (
                    ReinstatementDate == other.ReinstatementDate ||
                    ReinstatementDate != null &&
                    ReinstatementDate.SequenceEqual(other.ReinstatementDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DriverLicense != null)
                    hashCode = hashCode * 59 + DriverLicense.GetHashCode();
                    if (ActionCode != null)
                    hashCode = hashCode * 59 + ActionCode.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (BasisCode != null)
                    hashCode = hashCode * 59 + BasisCode.GetHashCode();
                    if (Basis != null)
                    hashCode = hashCode * 59 + Basis.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (DueProcessStatusCode != null)
                    hashCode = hashCode * 59 + DueProcessStatusCode.GetHashCode();
                    if (DueProcessStatus != null)
                    hashCode = hashCode * 59 + DueProcessStatus.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (EligibilityCode != null)
                    hashCode = hashCode * 59 + EligibilityCode.GetHashCode();
                    if (EligibilityDate != null)
                    hashCode = hashCode * 59 + EligibilityDate.GetHashCode();
                    if (ExtentCode != null)
                    hashCode = hashCode * 59 + ExtentCode.GetHashCode();
                    if (Extent != null)
                    hashCode = hashCode * 59 + Extent.GetHashCode();
                    if (IssuingAuthorityCode != null)
                    hashCode = hashCode * 59 + IssuingAuthorityCode.GetHashCode();
                    if (IssuingAuthority != null)
                    hashCode = hashCode * 59 + IssuingAuthority.GetHashCode();
                    if (LocatorReferenceIdentification != null)
                    hashCode = hashCode * 59 + LocatorReferenceIdentification.GetHashCode();
                    if (ReasonReferenceCode != null)
                    hashCode = hashCode * 59 + ReasonReferenceCode.GetHashCode();
                    if (ReinstatementDate != null)
                    hashCode = hashCode * 59 + ReinstatementDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDriverLicenseWithdrawalType left, JDriverLicenseWithdrawalType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDriverLicenseWithdrawalType left, JDriverLicenseWithdrawalType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
