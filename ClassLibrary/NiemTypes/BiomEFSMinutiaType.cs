/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a minutia in a friction ridge image
    /// </summary>
    [DataContract]
    public partial class BiomEFSMinutiaType : IEquatable<BiomEFSMinutiaType>
    { 
        /// <summary>
        /// A vertex in a position path NIEM reference is biom:ImageFeatureVertex
        /// </summary>
        /// <value>A vertex in a position path NIEM reference is biom:ImageFeatureVertex</value>

        [DataMember(Name="imageFeatureVertex")]
        public List<BiomVertexType> ImageFeatureVertex { get; set; }

        /// <summary>
        /// An angular position of a feature from another point in an image NIEM reference is biom:ImageLocationThetaAngleMeasure
        /// </summary>
        /// <value>An angular position of a feature from another point in an image NIEM reference is biom:ImageLocationThetaAngleMeasure</value>

        [DataMember(Name="imageLocationThetaAngleMeasure")]
        public List<BiomThetaAngleMeasureType> ImageLocationThetaAngleMeasure { get; set; }

        /// <summary>
        /// A kind of minutia. NIEM reference is biom:MinutiaCategoryCode
        /// </summary>
        /// <value>A kind of minutia. NIEM reference is biom:MinutiaCategoryCode</value>

        [DataMember(Name="minutiaCategoryCode")]
        public List<BiomMinutiaCategoryCodeType> MinutiaCategoryCode { get; set; }

        /// <summary>
        /// A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality
        /// </summary>
        /// <value>A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality</value>

        [DataMember(Name="minutiaeQuality")]
        public List<BiomImageQualityType> MinutiaeQuality { get; set; }

        /// <summary>
        /// A distance in 10 micrometer units (0.01mm) from a particular X,Ycoordinate NIEM reference is biom:ImageLocationUncertaintyRadiusMeasure
        /// </summary>
        /// <value>A distance in 10 micrometer units (0.01mm) from a particular X,Ycoordinate NIEM reference is biom:ImageLocationUncertaintyRadiusMeasure</value>

        [DataMember(Name="imageLocationUncertaintyRadiusMeasure")]
        public List<BiomInteger0to999Type> ImageLocationUncertaintyRadiusMeasure { get; set; }

        /// <summary>
        /// A value indicating the uncertainty of the minutia direction NIEM reference is biom:MinutiaDirectionUncertaintyValue
        /// </summary>
        /// <value>A value indicating the uncertainty of the minutia direction NIEM reference is biom:MinutiaDirectionUncertaintyValue</value>

        [DataMember(Name="minutiaDirectionUncertaintyValue")]
        public List<BiomUncertaintyValueType> MinutiaDirectionUncertaintyValue { get; set; }

        /// <summary>
        /// biomEFSMinutiaType JSON-LD context
        /// </summary>
        /// <value>biomEFSMinutiaType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomEFSMinutiaTypeContextJsonldEnum for ../JSON-LD_Contexts/biomEFSMinutiaTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomEFSMinutiaTypeContext.jsonld")]
            JSONLDContextsbiomEFSMinutiaTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomEFSMinutiaType JSON-LD context
        /// </summary>
        /// <value>biomEFSMinutiaType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomEFSMinutiaType {\n");
            sb.Append("  ImageFeatureVertex: ").Append(ImageFeatureVertex).Append("\n");
            sb.Append("  ImageLocationThetaAngleMeasure: ").Append(ImageLocationThetaAngleMeasure).Append("\n");
            sb.Append("  MinutiaCategoryCode: ").Append(MinutiaCategoryCode).Append("\n");
            sb.Append("  MinutiaeQuality: ").Append(MinutiaeQuality).Append("\n");
            sb.Append("  ImageLocationUncertaintyRadiusMeasure: ").Append(ImageLocationUncertaintyRadiusMeasure).Append("\n");
            sb.Append("  MinutiaDirectionUncertaintyValue: ").Append(MinutiaDirectionUncertaintyValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomEFSMinutiaType)obj);
        }

        /// <summary>
        /// Returns true if BiomEFSMinutiaType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomEFSMinutiaType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomEFSMinutiaType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageFeatureVertex == other.ImageFeatureVertex ||
                    ImageFeatureVertex != null &&
                    ImageFeatureVertex.SequenceEqual(other.ImageFeatureVertex)
                ) && 
                (
                    ImageLocationThetaAngleMeasure == other.ImageLocationThetaAngleMeasure ||
                    ImageLocationThetaAngleMeasure != null &&
                    ImageLocationThetaAngleMeasure.SequenceEqual(other.ImageLocationThetaAngleMeasure)
                ) && 
                (
                    MinutiaCategoryCode == other.MinutiaCategoryCode ||
                    MinutiaCategoryCode != null &&
                    MinutiaCategoryCode.SequenceEqual(other.MinutiaCategoryCode)
                ) && 
                (
                    MinutiaeQuality == other.MinutiaeQuality ||
                    MinutiaeQuality != null &&
                    MinutiaeQuality.SequenceEqual(other.MinutiaeQuality)
                ) && 
                (
                    ImageLocationUncertaintyRadiusMeasure == other.ImageLocationUncertaintyRadiusMeasure ||
                    ImageLocationUncertaintyRadiusMeasure != null &&
                    ImageLocationUncertaintyRadiusMeasure.SequenceEqual(other.ImageLocationUncertaintyRadiusMeasure)
                ) && 
                (
                    MinutiaDirectionUncertaintyValue == other.MinutiaDirectionUncertaintyValue ||
                    MinutiaDirectionUncertaintyValue != null &&
                    MinutiaDirectionUncertaintyValue.SequenceEqual(other.MinutiaDirectionUncertaintyValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageFeatureVertex != null)
                    hashCode = hashCode * 59 + ImageFeatureVertex.GetHashCode();
                    if (ImageLocationThetaAngleMeasure != null)
                    hashCode = hashCode * 59 + ImageLocationThetaAngleMeasure.GetHashCode();
                    if (MinutiaCategoryCode != null)
                    hashCode = hashCode * 59 + MinutiaCategoryCode.GetHashCode();
                    if (MinutiaeQuality != null)
                    hashCode = hashCode * 59 + MinutiaeQuality.GetHashCode();
                    if (ImageLocationUncertaintyRadiusMeasure != null)
                    hashCode = hashCode * 59 + ImageLocationUncertaintyRadiusMeasure.GetHashCode();
                    if (MinutiaDirectionUncertaintyValue != null)
                    hashCode = hashCode * 59 + MinutiaDirectionUncertaintyValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomEFSMinutiaType left, BiomEFSMinutiaType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomEFSMinutiaType left, BiomEFSMinutiaType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
