/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an evaluation of the monetary worth of an item.
    /// </summary>
    [DataContract]
    public partial class NcItemValueType : IEquatable<NcItemValueType>
    { 
        /// <summary>
        /// A monetary value of an item. NIEM reference is nc:ItemValueAmount
        /// </summary>
        /// <value>A monetary value of an item. NIEM reference is nc:ItemValueAmount</value>

        [DataMember(Name="amount")]
        public List<NcAmountType> Amount { get; set; }

        /// <summary>
        /// A method used to assign a value to an item. NIEM reference is nc:ItemValueAssigningMethodText
        /// </summary>
        /// <value>A method used to assign a value to an item. NIEM reference is nc:ItemValueAssigningMethodText</value>

        [DataMember(Name="assigningMethod")]
        public List<NcTextType> AssigningMethod { get; set; }

        /// <summary>
        /// A date an item value takes effect. NIEM reference is nc:ItemValueDate
        /// </summary>
        /// <value>A date an item value takes effect. NIEM reference is nc:ItemValueDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// A description of the monetary worth of an item. NIEM reference is nc:ItemValueDescriptionText
        /// </summary>
        /// <value>A description of the monetary worth of an item. NIEM reference is nc:ItemValueDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// True if taxes were included in the item value; false otherwise. NIEM reference is nc:ItemValueTaxIncludedIndicator
        /// </summary>
        /// <value>True if taxes were included in the item value; false otherwise. NIEM reference is nc:ItemValueTaxIncludedIndicator</value>

        [DataMember(Name="isTaxIncluded")]
        public List<NiemXsboolean> IsTaxIncluded { get; set; }

        /// <summary>
        /// An entity which assigns a value to an item. NIEM reference is nc:ItemValueAssigner
        /// </summary>
        /// <value>An entity which assigns a value to an item. NIEM reference is nc:ItemValueAssigner</value>

        [DataMember(Name="assigner")]
        public List<NcEntityType> Assigner { get; set; }

        /// <summary>
        /// ncItemValueType JSON-LD context
        /// </summary>
        /// <value>ncItemValueType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncItemValueTypeContextJsonldEnum for ../JSON-LD_Contexts/ncItemValueTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncItemValueTypeContext.jsonld")]
            JSONLDContextsncItemValueTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncItemValueType JSON-LD context
        /// </summary>
        /// <value>ncItemValueType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcItemValueType {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssigningMethod: ").Append(AssigningMethod).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsTaxIncluded: ").Append(IsTaxIncluded).Append("\n");
            sb.Append("  Assigner: ").Append(Assigner).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcItemValueType)obj);
        }

        /// <summary>
        /// Returns true if NcItemValueType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcItemValueType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcItemValueType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.SequenceEqual(other.Amount)
                ) && 
                (
                    AssigningMethod == other.AssigningMethod ||
                    AssigningMethod != null &&
                    AssigningMethod.SequenceEqual(other.AssigningMethod)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    IsTaxIncluded == other.IsTaxIncluded ||
                    IsTaxIncluded != null &&
                    IsTaxIncluded.SequenceEqual(other.IsTaxIncluded)
                ) && 
                (
                    Assigner == other.Assigner ||
                    Assigner != null &&
                    Assigner.SequenceEqual(other.Assigner)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AssigningMethod != null)
                    hashCode = hashCode * 59 + AssigningMethod.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsTaxIncluded != null)
                    hashCode = hashCode * 59 + IsTaxIncluded.GetHashCode();
                    if (Assigner != null)
                    hashCode = hashCode * 59 + Assigner.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcItemValueType left, NcItemValueType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcItemValueType left, NcItemValueType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
