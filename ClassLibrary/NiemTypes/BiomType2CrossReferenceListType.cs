/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a list of Type-2 records referenced in another record in the transaction.
    /// </summary>
    [DataContract]
    public partial class BiomType2CrossReferenceListType : IEquatable<BiomType2CrossReferenceListType>
    { 
        /// <summary>
        /// An identifier for a reference number for a Type-2 record in a transaction NIEM reference is biom:Type2CrossReferenceID
        /// </summary>
        /// <value>An identifier for a reference number for a Type-2 record in a transaction NIEM reference is biom:Type2CrossReferenceID</value>

        [DataMember(Name="type2CrossReferenceId")]
        public List<BiomInteger0to99Type> Type2CrossReferenceId { get; set; }

        /// <summary>
        /// biomType2CrossReferenceListType JSON-LD context
        /// </summary>
        /// <value>biomType2CrossReferenceListType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomType2CrossReferenceListTypeContextJsonldEnum for ../JSON-LD_Contexts/biomType2CrossReferenceListTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomType2CrossReferenceListTypeContext.jsonld")]
            JSONLDContextsbiomType2CrossReferenceListTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomType2CrossReferenceListType JSON-LD context
        /// </summary>
        /// <value>biomType2CrossReferenceListType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomType2CrossReferenceListType {\n");
            sb.Append("  Type2CrossReferenceId: ").Append(Type2CrossReferenceId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomType2CrossReferenceListType)obj);
        }

        /// <summary>
        /// Returns true if BiomType2CrossReferenceListType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomType2CrossReferenceListType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomType2CrossReferenceListType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type2CrossReferenceId == other.Type2CrossReferenceId ||
                    Type2CrossReferenceId != null &&
                    Type2CrossReferenceId.SequenceEqual(other.Type2CrossReferenceId)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type2CrossReferenceId != null)
                    hashCode = hashCode * 59 + Type2CrossReferenceId.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomType2CrossReferenceListType left, BiomType2CrossReferenceListType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomType2CrossReferenceListType left, BiomType2CrossReferenceListType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
