/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details of an incident involving a vehicle.
    /// </summary>
    [DataContract]
    public partial class JDrivingIncidentType : NcIncidentType, IEquatable<JDrivingIncidentType>
    { 
        /// <summary>
        /// A severity level of an accident, based on the most intense injury to any person or, if none were injured, so designating. NIEM reference is j:DrivingAccidentSeverityCode
        /// </summary>
        /// <value>A severity level of an accident, based on the most intense injury to any person or, if none were injured, so designating. NIEM reference is j:DrivingAccidentSeverityCode</value>

        [DataMember(Name="drivingAccidentSeverityCode")]
        public List<AamvaD20AccidentSeverityCodeType> DrivingAccidentSeverityCode { get; set; }

        /// <summary>
        /// A severity level of an accident, based on the most intense injury to any person or, if none were injured, so designating. NIEM reference is j:DrivingAccidentSeverityText
        /// </summary>
        /// <value>A severity level of an accident, based on the most intense injury to any person or, if none were injured, so designating. NIEM reference is j:DrivingAccidentSeverityText</value>

        [DataMember(Name="drivingAccidentSeverity")]
        public List<NcTextType> DrivingAccidentSeverity { get; set; }

        /// <summary>
        /// A determination of whether the incident occurred while the driver was operating a commercial vehicle. NIEM reference is j:DrivingIncidentCMVCode
        /// </summary>
        /// <value>A determination of whether the incident occurred while the driver was operating a commercial vehicle. NIEM reference is j:DrivingIncidentCMVCode</value>

        [DataMember(Name="cmvCode")]
        public List<AamvaD20CMVCodeType> CmvCode { get; set; }

        /// <summary>
        /// A determination of whether the incident occurred while the driver was operating a commercial vehicle. NIEM reference is j:DrivingIncidentCMVText
        /// </summary>
        /// <value>A determination of whether the incident occurred while the driver was operating a commercial vehicle. NIEM reference is j:DrivingIncidentCMVText</value>

        [DataMember(Name="cmv")]
        public List<NcTextType> Cmv { get; set; }

        /// <summary>
        /// A speed a vehicle was moving at when an incident occurred. NIEM reference is j:DrivingIncidentRecordedSpeedRateMeasure
        /// </summary>
        /// <value>A speed a vehicle was moving at when an incident occurred. NIEM reference is j:DrivingIncidentRecordedSpeedRateMeasure</value>

        [DataMember(Name="recordedSpeedRateMeasure")]
        public List<NcSpeedMeasureType> RecordedSpeedRateMeasure { get; set; }

        /// <summary>
        /// True if a driving incident involved a collision with another vehicle, person, or object; false otherwise. NIEM reference is j:DrivingIncidentCollisionIndicator
        /// </summary>
        /// <value>True if a driving incident involved a collision with another vehicle, person, or object; false otherwise. NIEM reference is j:DrivingIncidentCollisionIndicator</value>

        [DataMember(Name="isCollision")]
        public List<NiemXsboolean> IsCollision { get; set; }

        /// <summary>
        /// True if a driver owns the vehicle being driven in an incident; false otherwise. NIEM reference is j:DrivingIncidentDriverOwnershipIndicator
        /// </summary>
        /// <value>True if a driver owns the vehicle being driven in an incident; false otherwise. NIEM reference is j:DrivingIncidentDriverOwnershipIndicator</value>

        [DataMember(Name="isDriverOwnership")]
        public List<NiemXsboolean> IsDriverOwnership { get; set; }

        /// <summary>
        /// A number of females in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentFemalePassengerQuantityText
        /// </summary>
        /// <value>A number of females in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentFemalePassengerQuantityText</value>

        [DataMember(Name="femalePassengerQuantity")]
        public List<NcTextType> FemalePassengerQuantity { get; set; }

        /// <summary>
        /// A determination of whether the incident occurred while the driver was operating a commercial vehicle that was carrying hazardous materials (that required a placard). NIEM reference is j:DrivingIncidentHazMatCode
        /// </summary>
        /// <value>A determination of whether the incident occurred while the driver was operating a commercial vehicle that was carrying hazardous materials (that required a placard). NIEM reference is j:DrivingIncidentHazMatCode</value>

        [DataMember(Name="hazMatCode")]
        public List<AamvaD20HazMatCodeType> HazMatCode { get; set; }

        /// <summary>
        /// A determination of whether the incident occurred while the driver was operating a commercial vehicle that was carrying hazardous materials (that required a placard). NIEM reference is j:DrivingIncidentHazMatText
        /// </summary>
        /// <value>A determination of whether the incident occurred while the driver was operating a commercial vehicle that was carrying hazardous materials (that required a placard). NIEM reference is j:DrivingIncidentHazMatText</value>

        [DataMember(Name="hazMat")]
        public List<NcTextType> HazMat { get; set; }

        /// <summary>
        /// A jurisdiction in which an incident occurred. NIEM reference is j:DrivingIncidentJurisdiction
        /// </summary>
        /// <value>A jurisdiction in which an incident occurred. NIEM reference is j:DrivingIncidentJurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public List<NcJurisdictionType> Jurisdiction { get; set; }

        /// <summary>
        /// True if a laser was involved in the detection of an incident; false otherwise. NIEM reference is j:DrivingIncidentLaserDetectionIndicator
        /// </summary>
        /// <value>True if a laser was involved in the detection of an incident; false otherwise. NIEM reference is j:DrivingIncidentLaserDetectionIndicator</value>

        [DataMember(Name="isLaserDetection")]
        public List<NiemXsboolean> IsLaserDetection { get; set; }

        /// <summary>
        /// A legally designated speed limit in the area where an incident occurred. NIEM reference is j:DrivingIncidentLegalSpeedRateMeasure
        /// </summary>
        /// <value>A legally designated speed limit in the area where an incident occurred. NIEM reference is j:DrivingIncidentLegalSpeedRateMeasure</value>

        [DataMember(Name="legalSpeedRateMeasure")]
        public List<NcSpeedMeasureType> LegalSpeedRateMeasure { get; set; }

        /// <summary>
        /// A reference identification number for the organization that keeps the incident report. NIEM reference is j:DrivingIncidentLocatorReferenceIdentification
        /// </summary>
        /// <value>A reference identification number for the organization that keeps the incident report. NIEM reference is j:DrivingIncidentLocatorReferenceIdentification</value>

        [DataMember(Name="locatorReferenceIdentification")]
        public List<NcIdentificationType> LocatorReferenceIdentification { get; set; }

        /// <summary>
        /// A number of males in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentMalePassengerQuantityText
        /// </summary>
        /// <value>A number of males in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentMalePassengerQuantityText</value>

        [DataMember(Name="malePassengerQuantity")]
        public List<NcTextType> MalePassengerQuantity { get; set; }

        /// <summary>
        /// True if a mobile phone being used was involved in an incident; false otherwise. NIEM reference is j:DrivingIncidentMobilePhoneIndicator
        /// </summary>
        /// <value>True if a mobile phone being used was involved in an incident; false otherwise. NIEM reference is j:DrivingIncidentMobilePhoneIndicator</value>

        [DataMember(Name="isMobilePhone")]
        public List<NiemXsboolean> IsMobilePhone { get; set; }

        /// <summary>
        /// A person in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentPassenger
        /// </summary>
        /// <value>A person in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentPassenger</value>

        [DataMember(Name="passenger")]
        public List<NcPersonType> Passenger { get; set; }

        /// <summary>
        /// A description of the people in a vehicle excluding the driver during the time of an incident. NIEM reference is j:DrivingIncidentPassengerDescriptionText
        /// </summary>
        /// <value>A description of the people in a vehicle excluding the driver during the time of an incident. NIEM reference is j:DrivingIncidentPassengerDescriptionText</value>

        [DataMember(Name="passengerDescription")]
        public List<NcTextType> PassengerDescription { get; set; }

        /// <summary>
        /// A number of people in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentPassengerQuantityText
        /// </summary>
        /// <value>A number of people in a vehicle excluding the driver when an incident occurred. NIEM reference is j:DrivingIncidentPassengerQuantityText</value>

        [DataMember(Name="passengerQuantity")]
        public List<NcTextType> PassengerQuantity { get; set; }

        /// <summary>
        /// True if radar was involved in the detection of an incident; false otherwise. NIEM reference is j:DrivingIncidentRadarDetectionIndicator
        /// </summary>
        /// <value>True if radar was involved in the detection of an incident; false otherwise. NIEM reference is j:DrivingIncidentRadarDetectionIndicator</value>

        [DataMember(Name="isRadarDetection")]
        public List<NiemXsboolean> IsRadarDetection { get; set; }

        /// <summary>
        /// A description of the road conditions during the time of an incident. NIEM reference is j:DrivingIncidentRoadDescriptionText
        /// </summary>
        /// <value>A description of the road conditions during the time of an incident. NIEM reference is j:DrivingIncidentRoadDescriptionText</value>

        [DataMember(Name="roadDescription")]
        public List<NcTextType> RoadDescription { get; set; }

        /// <summary>
        /// A kind of road where an incident occurred. NIEM reference is j:DrivingIncidentRoadCategoryText
        /// </summary>
        /// <value>A kind of road where an incident occurred. NIEM reference is j:DrivingIncidentRoadCategoryText</value>

        [DataMember(Name="roadCategory")]
        public List<NcTextType> RoadCategory { get; set; }

        /// <summary>
        /// A description of the traffic conditions during the time of an incident. NIEM reference is j:DrivingIncidentTrafficDescriptionText
        /// </summary>
        /// <value>A description of the traffic conditions during the time of an incident. NIEM reference is j:DrivingIncidentTrafficDescriptionText</value>

        [DataMember(Name="trafficDescription")]
        public List<NcTextType> TrafficDescription { get; set; }

        /// <summary>
        /// A description of the weather during the time of an incident. NIEM reference is j:DrivingIncidentWeatherDescriptionText
        /// </summary>
        /// <value>A description of the weather during the time of an incident. NIEM reference is j:DrivingIncidentWeatherDescriptionText</value>

        [DataMember(Name="weatherDescription")]
        public List<NcTextType> WeatherDescription { get; set; }

        /// <summary>
        /// jDrivingIncidentType JSON-LD context
        /// </summary>
        /// <value>jDrivingIncidentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDrivingIncidentTypeContextJsonldEnum for ../JSON-LD_Contexts/jDrivingIncidentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDrivingIncidentTypeContext.jsonld")]
            JSONLDContextsjDrivingIncidentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDrivingIncidentType JSON-LD context
        /// </summary>
        /// <value>jDrivingIncidentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDrivingIncidentType {\n");
            sb.Append("  DrivingAccidentSeverityCode: ").Append(DrivingAccidentSeverityCode).Append("\n");
            sb.Append("  DrivingAccidentSeverity: ").Append(DrivingAccidentSeverity).Append("\n");
            sb.Append("  CmvCode: ").Append(CmvCode).Append("\n");
            sb.Append("  Cmv: ").Append(Cmv).Append("\n");
            sb.Append("  RecordedSpeedRateMeasure: ").Append(RecordedSpeedRateMeasure).Append("\n");
            sb.Append("  IsCollision: ").Append(IsCollision).Append("\n");
            sb.Append("  IsDriverOwnership: ").Append(IsDriverOwnership).Append("\n");
            sb.Append("  FemalePassengerQuantity: ").Append(FemalePassengerQuantity).Append("\n");
            sb.Append("  HazMatCode: ").Append(HazMatCode).Append("\n");
            sb.Append("  HazMat: ").Append(HazMat).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  IsLaserDetection: ").Append(IsLaserDetection).Append("\n");
            sb.Append("  LegalSpeedRateMeasure: ").Append(LegalSpeedRateMeasure).Append("\n");
            sb.Append("  LocatorReferenceIdentification: ").Append(LocatorReferenceIdentification).Append("\n");
            sb.Append("  MalePassengerQuantity: ").Append(MalePassengerQuantity).Append("\n");
            sb.Append("  IsMobilePhone: ").Append(IsMobilePhone).Append("\n");
            sb.Append("  Passenger: ").Append(Passenger).Append("\n");
            sb.Append("  PassengerDescription: ").Append(PassengerDescription).Append("\n");
            sb.Append("  PassengerQuantity: ").Append(PassengerQuantity).Append("\n");
            sb.Append("  IsRadarDetection: ").Append(IsRadarDetection).Append("\n");
            sb.Append("  RoadDescription: ").Append(RoadDescription).Append("\n");
            sb.Append("  RoadCategory: ").Append(RoadCategory).Append("\n");
            sb.Append("  TrafficDescription: ").Append(TrafficDescription).Append("\n");
            sb.Append("  WeatherDescription: ").Append(WeatherDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDrivingIncidentType)obj);
        }

        /// <summary>
        /// Returns true if JDrivingIncidentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDrivingIncidentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDrivingIncidentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DrivingAccidentSeverityCode == other.DrivingAccidentSeverityCode ||
                    DrivingAccidentSeverityCode != null &&
                    DrivingAccidentSeverityCode.SequenceEqual(other.DrivingAccidentSeverityCode)
                ) && 
                (
                    DrivingAccidentSeverity == other.DrivingAccidentSeverity ||
                    DrivingAccidentSeverity != null &&
                    DrivingAccidentSeverity.SequenceEqual(other.DrivingAccidentSeverity)
                ) && 
                (
                    CmvCode == other.CmvCode ||
                    CmvCode != null &&
                    CmvCode.SequenceEqual(other.CmvCode)
                ) && 
                (
                    Cmv == other.Cmv ||
                    Cmv != null &&
                    Cmv.SequenceEqual(other.Cmv)
                ) && 
                (
                    RecordedSpeedRateMeasure == other.RecordedSpeedRateMeasure ||
                    RecordedSpeedRateMeasure != null &&
                    RecordedSpeedRateMeasure.SequenceEqual(other.RecordedSpeedRateMeasure)
                ) && 
                (
                    IsCollision == other.IsCollision ||
                    IsCollision != null &&
                    IsCollision.SequenceEqual(other.IsCollision)
                ) && 
                (
                    IsDriverOwnership == other.IsDriverOwnership ||
                    IsDriverOwnership != null &&
                    IsDriverOwnership.SequenceEqual(other.IsDriverOwnership)
                ) && 
                (
                    FemalePassengerQuantity == other.FemalePassengerQuantity ||
                    FemalePassengerQuantity != null &&
                    FemalePassengerQuantity.SequenceEqual(other.FemalePassengerQuantity)
                ) && 
                (
                    HazMatCode == other.HazMatCode ||
                    HazMatCode != null &&
                    HazMatCode.SequenceEqual(other.HazMatCode)
                ) && 
                (
                    HazMat == other.HazMat ||
                    HazMat != null &&
                    HazMat.SequenceEqual(other.HazMat)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.SequenceEqual(other.Jurisdiction)
                ) && 
                (
                    IsLaserDetection == other.IsLaserDetection ||
                    IsLaserDetection != null &&
                    IsLaserDetection.SequenceEqual(other.IsLaserDetection)
                ) && 
                (
                    LegalSpeedRateMeasure == other.LegalSpeedRateMeasure ||
                    LegalSpeedRateMeasure != null &&
                    LegalSpeedRateMeasure.SequenceEqual(other.LegalSpeedRateMeasure)
                ) && 
                (
                    LocatorReferenceIdentification == other.LocatorReferenceIdentification ||
                    LocatorReferenceIdentification != null &&
                    LocatorReferenceIdentification.SequenceEqual(other.LocatorReferenceIdentification)
                ) && 
                (
                    MalePassengerQuantity == other.MalePassengerQuantity ||
                    MalePassengerQuantity != null &&
                    MalePassengerQuantity.SequenceEqual(other.MalePassengerQuantity)
                ) && 
                (
                    IsMobilePhone == other.IsMobilePhone ||
                    IsMobilePhone != null &&
                    IsMobilePhone.SequenceEqual(other.IsMobilePhone)
                ) && 
                (
                    Passenger == other.Passenger ||
                    Passenger != null &&
                    Passenger.SequenceEqual(other.Passenger)
                ) && 
                (
                    PassengerDescription == other.PassengerDescription ||
                    PassengerDescription != null &&
                    PassengerDescription.SequenceEqual(other.PassengerDescription)
                ) && 
                (
                    PassengerQuantity == other.PassengerQuantity ||
                    PassengerQuantity != null &&
                    PassengerQuantity.SequenceEqual(other.PassengerQuantity)
                ) && 
                (
                    IsRadarDetection == other.IsRadarDetection ||
                    IsRadarDetection != null &&
                    IsRadarDetection.SequenceEqual(other.IsRadarDetection)
                ) && 
                (
                    RoadDescription == other.RoadDescription ||
                    RoadDescription != null &&
                    RoadDescription.SequenceEqual(other.RoadDescription)
                ) && 
                (
                    RoadCategory == other.RoadCategory ||
                    RoadCategory != null &&
                    RoadCategory.SequenceEqual(other.RoadCategory)
                ) && 
                (
                    TrafficDescription == other.TrafficDescription ||
                    TrafficDescription != null &&
                    TrafficDescription.SequenceEqual(other.TrafficDescription)
                ) && 
                (
                    WeatherDescription == other.WeatherDescription ||
                    WeatherDescription != null &&
                    WeatherDescription.SequenceEqual(other.WeatherDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DrivingAccidentSeverityCode != null)
                    hashCode = hashCode * 59 + DrivingAccidentSeverityCode.GetHashCode();
                    if (DrivingAccidentSeverity != null)
                    hashCode = hashCode * 59 + DrivingAccidentSeverity.GetHashCode();
                    if (CmvCode != null)
                    hashCode = hashCode * 59 + CmvCode.GetHashCode();
                    if (Cmv != null)
                    hashCode = hashCode * 59 + Cmv.GetHashCode();
                    if (RecordedSpeedRateMeasure != null)
                    hashCode = hashCode * 59 + RecordedSpeedRateMeasure.GetHashCode();
                    if (IsCollision != null)
                    hashCode = hashCode * 59 + IsCollision.GetHashCode();
                    if (IsDriverOwnership != null)
                    hashCode = hashCode * 59 + IsDriverOwnership.GetHashCode();
                    if (FemalePassengerQuantity != null)
                    hashCode = hashCode * 59 + FemalePassengerQuantity.GetHashCode();
                    if (HazMatCode != null)
                    hashCode = hashCode * 59 + HazMatCode.GetHashCode();
                    if (HazMat != null)
                    hashCode = hashCode * 59 + HazMat.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (IsLaserDetection != null)
                    hashCode = hashCode * 59 + IsLaserDetection.GetHashCode();
                    if (LegalSpeedRateMeasure != null)
                    hashCode = hashCode * 59 + LegalSpeedRateMeasure.GetHashCode();
                    if (LocatorReferenceIdentification != null)
                    hashCode = hashCode * 59 + LocatorReferenceIdentification.GetHashCode();
                    if (MalePassengerQuantity != null)
                    hashCode = hashCode * 59 + MalePassengerQuantity.GetHashCode();
                    if (IsMobilePhone != null)
                    hashCode = hashCode * 59 + IsMobilePhone.GetHashCode();
                    if (Passenger != null)
                    hashCode = hashCode * 59 + Passenger.GetHashCode();
                    if (PassengerDescription != null)
                    hashCode = hashCode * 59 + PassengerDescription.GetHashCode();
                    if (PassengerQuantity != null)
                    hashCode = hashCode * 59 + PassengerQuantity.GetHashCode();
                    if (IsRadarDetection != null)
                    hashCode = hashCode * 59 + IsRadarDetection.GetHashCode();
                    if (RoadDescription != null)
                    hashCode = hashCode * 59 + RoadDescription.GetHashCode();
                    if (RoadCategory != null)
                    hashCode = hashCode * 59 + RoadCategory.GetHashCode();
                    if (TrafficDescription != null)
                    hashCode = hashCode * 59 + TrafficDescription.GetHashCode();
                    if (WeatherDescription != null)
                    hashCode = hashCode * 59 + WeatherDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDrivingIncidentType left, JDrivingIncidentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDrivingIncidentType left, JDrivingIncidentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
