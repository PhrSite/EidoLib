/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a person.
    /// </summary>
    [DataContract]
    public partial class JPersonAugmentationType : IEquatable<JPersonAugmentationType>
    { 
        /// <summary>
        /// A period of time person used drugs or alcohol. NIEM reference is j:PersonDrugAlcoholUseDateRange
        /// </summary>
        /// <value>A period of time person used drugs or alcohol. NIEM reference is j:PersonDrugAlcoholUseDateRange</value>

        [DataMember(Name="personDrugAlcoholUseDateRange")]
        public List<NcDateRangeType> PersonDrugAlcoholUseDateRange { get; set; }

        /// <summary>
        /// A date on which the Staff Member signed the subject screening form. NIEM reference is j:PersonSignature
        /// </summary>
        /// <value>A date on which the Staff Member signed the subject screening form. NIEM reference is j:PersonSignature</value>

        [DataMember(Name="personSignature")]
        public List<JSignatureType> PersonSignature { get; set; }

        /// <summary>
        /// An identification assigned to a person by Interpol. NIEM reference is j:PersonInterpolIdentification
        /// </summary>
        /// <value>An identification assigned to a person by Interpol. NIEM reference is j:PersonInterpolIdentification</value>

        [DataMember(Name="personInterpolIdentification")]
        public List<NcIdentificationType> PersonInterpolIdentification { get; set; }

        /// <summary>
        /// A description of the drug and alcohol history of a person. NIEM reference is j:PersonDrugAlcoholHistoryText
        /// </summary>
        /// <value>A description of the drug and alcohol history of a person. NIEM reference is j:PersonDrugAlcoholHistoryText</value>

        [DataMember(Name="personDrugAlcoholHistory")]
        public List<NcTextType> PersonDrugAlcoholHistory { get; set; }

        /// <summary>
        /// An identification assigned to a person by the DEA. NIEM reference is j:PersonDEAIdentification
        /// </summary>
        /// <value>An identification assigned to a person by the DEA. NIEM reference is j:PersonDEAIdentification</value>

        [DataMember(Name="personDeaIdentification")]
        public List<NcIdentificationType> PersonDeaIdentification { get; set; }

        /// <summary>
        /// A number assigned by the Combined DNA Index System (CODIS) to a CODIS DNA profile which consists of a specimen identifier, an identifier for the laboratory responsible for the profile and the results of the DNA analysis (DNA profile). NIEM reference is j:CODISNumberText
        /// </summary>
        /// <value>A number assigned by the Combined DNA Index System (CODIS) to a CODIS DNA profile which consists of a specimen identifier, an identifier for the laboratory responsible for the profile and the results of the DNA analysis (DNA profile). NIEM reference is j:CODISNumberText</value>

        [DataMember(Name="codisNumber")]
        public List<NcTextType> CodisNumber { get; set; }

        /// <summary>
        /// An identification used by the Bureau of Prisons (BOP). NIEM reference is j:PersonBOPRegisterNumberIdentification
        /// </summary>
        /// <value>An identification used by the Bureau of Prisons (BOP). NIEM reference is j:PersonBOPRegisterNumberIdentification</value>

        [DataMember(Name="personBopRegisterNumberIdentification")]
        public List<NcIdentificationType> PersonBopRegisterNumberIdentification { get; set; }

        /// <summary>
        /// A method used to pay for drugs or alcohol. NIEM reference is j:PersonDrugAlcoholPaymentMethodText
        /// </summary>
        /// <value>A method used to pay for drugs or alcohol. NIEM reference is j:PersonDrugAlcoholPaymentMethodText</value>

        [DataMember(Name="personDrugAlcoholPaymentMethod")]
        public List<NcTextType> PersonDrugAlcoholPaymentMethod { get; set; }

        /// <summary>
        /// A description of the frequency of drug or alcohol use. NIEM reference is j:PersonDrugAlcoholUseFrequencyText
        /// </summary>
        /// <value>A description of the frequency of drug or alcohol use. NIEM reference is j:PersonDrugAlcoholUseFrequencyText</value>

        [DataMember(Name="personDrugAlcoholUseFrequency")]
        public List<NcTextType> PersonDrugAlcoholUseFrequency { get; set; }

        /// <summary>
        /// True if the person is known to be a parolee; false otherwise. NIEM reference is j:PersonParoleeIndicator
        /// </summary>
        /// <value>True if the person is known to be a parolee; false otherwise. NIEM reference is j:PersonParoleeIndicator</value>

        [DataMember(Name="isPersonParolee")]
        public List<NiemXsboolean> IsPersonParolee { get; set; }

        /// <summary>
        /// True if the subject has children with information viewable in this section; false otherwise. NIEM reference is j:PersonHasChildrenIndicator
        /// </summary>
        /// <value>True if the subject has children with information viewable in this section; false otherwise. NIEM reference is j:PersonHasChildrenIndicator</value>

        [DataMember(Name="isPersonHasChildren")]
        public List<NiemXsboolean> IsPersonHasChildren { get; set; }

        /// <summary>
        /// True if a person is an illegal alien; false otherwise. NIEM reference is j:PersonIllegalAlienIndicator
        /// </summary>
        /// <value>True if a person is an illegal alien; false otherwise. NIEM reference is j:PersonIllegalAlienIndicator</value>

        [DataMember(Name="isPersonIllegalAlien")]
        public List<NiemXsboolean> IsPersonIllegalAlien { get; set; }

        /// <summary>
        /// True if a person admits to having used or abused drugs or alcohol; false otherwise. NIEM reference is j:PersonDrugAlcoholUseIndicator
        /// </summary>
        /// <value>True if a person admits to having used or abused drugs or alcohol; false otherwise. NIEM reference is j:PersonDrugAlcoholUseIndicator</value>

        [DataMember(Name="isPersonDrugAlcoholUse")]
        public List<NiemXsboolean> IsPersonDrugAlcoholUse { get; set; }

        /// <summary>
        /// True if a person has attempted suicide; false otherwise. NIEM reference is j:PersonSuicideAttemptIndicator
        /// </summary>
        /// <value>True if a person has attempted suicide; false otherwise. NIEM reference is j:PersonSuicideAttemptIndicator</value>

        [DataMember(Name="isPersonSuicideAttempt")]
        public List<NiemXsboolean> IsPersonSuicideAttempt { get; set; }

        /// <summary>
        /// An identification assigned to a fugitive by the U.S. Marshal Service (USMS). NIEM reference is j:PersonUSMSFugitiveIdentification
        /// </summary>
        /// <value>An identification assigned to a fugitive by the U.S. Marshal Service (USMS). NIEM reference is j:PersonUSMSFugitiveIdentification</value>

        [DataMember(Name="personUsmsFugitiveIdentification")]
        public List<NcIdentificationType> PersonUsmsFugitiveIdentification { get; set; }

        /// <summary>
        /// A drug or alcohol type most often used. NIEM reference is j:PersonDrugAlcoholOfChoiceText
        /// </summary>
        /// <value>A drug or alcohol type most often used. NIEM reference is j:PersonDrugAlcoholOfChoiceText</value>

        [DataMember(Name="personDrugAlcoholOfChoice")]
        public List<NcTextType> PersonDrugAlcoholOfChoice { get; set; }

        /// <summary>
        /// True if the subject is classified having a developmental disability; false otherwise. NIEM reference is j:PersonDevelopmentDisabilityIndicator
        /// </summary>
        /// <value>True if the subject is classified having a developmental disability; false otherwise. NIEM reference is j:PersonDevelopmentDisabilityIndicator</value>

        [DataMember(Name="isPersonDevelopmentDisability")]
        public List<NiemXsboolean> IsPersonDevelopmentDisability { get; set; }

        /// <summary>
        /// True if a person has difficulty hearing; false otherwise. NIEM reference is j:PersonHearingProblemIndicator
        /// </summary>
        /// <value>True if a person has difficulty hearing; false otherwise. NIEM reference is j:PersonHearingProblemIndicator</value>

        [DataMember(Name="isPersonHearingProblem")]
        public List<NiemXsboolean> IsPersonHearingProblem { get; set; }

        /// <summary>
        /// A general kind of job of an employee. NIEM reference is nc:EmployeeOccupationCategoryText
        /// </summary>
        /// <value>A general kind of job of an employee. NIEM reference is nc:EmployeeOccupationCategoryText</value>

        [DataMember(Name="employeeOccupationCategory")]
        public List<NcTextType> EmployeeOccupationCategory { get; set; }

        /// <summary>
        /// True if the person is known to be on probation; false otherwise. NIEM reference is j:PersonProbationerIndicator
        /// </summary>
        /// <value>True if the person is known to be on probation; false otherwise. NIEM reference is j:PersonProbationerIndicator</value>

        [DataMember(Name="isPersonProbationer")]
        public List<NiemXsboolean> IsPersonProbationer { get; set; }

        /// <summary>
        /// A status on the DNA collection from a subject. NIEM reference is j:DNACollectionStatusText
        /// </summary>
        /// <value>A status on the DNA collection from a subject. NIEM reference is j:DNACollectionStatusText</value>

        [DataMember(Name="dnaCollectionStatus")]
        public List<NcTextType> DnaCollectionStatus { get; set; }

        /// <summary>
        /// A license issued to a person granting driving privileges. NIEM reference is j:DriverLicense
        /// </summary>
        /// <value>A license issued to a person granting driving privileges. NIEM reference is j:DriverLicense</value>

        [DataMember(Name="driverLicense")]
        public List<JDriverLicenseType> DriverLicense { get; set; }

        /// <summary>
        /// An article of clothing, dress, or attire for a person. NIEM reference is j:PersonClothing
        /// </summary>
        /// <value>An article of clothing, dress, or attire for a person. NIEM reference is j:PersonClothing</value>

        [DataMember(Name="personClothing")]
        public List<JClothingType> PersonClothing { get; set; }

        /// <summary>
        /// An event or details of a persons birth. NIEM reference is j:PersonBirth
        /// </summary>
        /// <value>An event or details of a persons birth. NIEM reference is j:PersonBirth</value>

        [DataMember(Name="personBirth")]
        public List<JBirthType> PersonBirth { get; set; }

        /// <summary>
        /// A kind of classification for registered sex offenders. NIEM reference is j:PersonRegistryOffenderClassificationText
        /// </summary>
        /// <value>A kind of classification for registered sex offenders. NIEM reference is j:PersonRegistryOffenderClassificationText</value>

        [DataMember(Name="personRegistryOffenderClassification")]
        public List<NcTextType> PersonRegistryOffenderClassification { get; set; }

        /// <summary>
        /// A description of a dexterity of a person. NIEM reference is j:PersonDexterityText
        /// </summary>
        /// <value>A description of a dexterity of a person. NIEM reference is j:PersonDexterityText</value>

        [DataMember(Name="personDexterity")]
        public List<NcTextType> PersonDexterity { get; set; }

        /// <summary>
        /// A kind of disability. NIEM reference is j:PersonDisabilityCategoryText
        /// </summary>
        /// <value>A kind of disability. NIEM reference is j:PersonDisabilityCategoryText</value>

        [DataMember(Name="personDisabilityCategory")]
        public List<NcTextType> PersonDisabilityCategory { get; set; }

        /// <summary>
        /// True if the subject has a disability; false otherwise. NIEM reference is j:PersonHasDisabilityIndicator
        /// </summary>
        /// <value>True if the subject has a disability; false otherwise. NIEM reference is j:PersonHasDisabilityIndicator</value>

        [DataMember(Name="isPersonHasDisability")]
        public List<NiemXsboolean> IsPersonHasDisability { get; set; }

        /// <summary>
        /// True if the individual is enrolled as a student at an institution of formal learning; false otherwise. NIEM reference is j:PersonIsStudentIndicator
        /// </summary>
        /// <value>True if the individual is enrolled as a student at an institution of formal learning; false otherwise. NIEM reference is j:PersonIsStudentIndicator</value>

        [DataMember(Name="isPersonIsStudent")]
        public List<NiemXsboolean> IsPersonIsStudent { get; set; }

        /// <summary>
        /// True if the subject is a U.S. Military veteran; false otherwise. NIEM reference is j:PersonMilitaryVeteranIndicator
        /// </summary>
        /// <value>True if the subject is a U.S. Military veteran; false otherwise. NIEM reference is j:PersonMilitaryVeteranIndicator</value>

        [DataMember(Name="isPersonMilitaryVeteran")]
        public List<NiemXsboolean> IsPersonMilitaryVeteran { get; set; }

        /// <summary>
        /// True if the woman is pregnant; false otherwise. NIEM reference is j:PersonPregnantIndicator
        /// </summary>
        /// <value>True if the woman is pregnant; false otherwise. NIEM reference is j:PersonPregnantIndicator</value>

        [DataMember(Name="isPersonPregnant")]
        public List<NiemXsboolean> IsPersonPregnant { get; set; }

        /// <summary>
        /// True if the subject is registered for Selective Service; false otherwise. NIEM reference is j:PersonRegisteredForSelectiveServiceIndicator
        /// </summary>
        /// <value>True if the subject is registered for Selective Service; false otherwise. NIEM reference is j:PersonRegisteredForSelectiveServiceIndicator</value>

        [DataMember(Name="isPersonRegisteredForSelectiveService")]
        public List<NiemXsboolean> IsPersonRegisteredForSelectiveService { get; set; }

        /// <summary>
        /// A set of details specific to a subject&#x27;s living situation. NIEM reference is j:PersonLivingSituation
        /// </summary>
        /// <value>A set of details specific to a subject&#x27;s living situation. NIEM reference is j:PersonLivingSituation</value>

        [DataMember(Name="personLivingSituation")]
        public List<JPersonLivingSituationType> PersonLivingSituation { get; set; }

        /// <summary>
        /// A total number of years a person has been involved in attaining their education. NIEM reference is j:PersonEducationTotalYearsText
        /// </summary>
        /// <value>A total number of years a person has been involved in attaining their education. NIEM reference is j:PersonEducationTotalYearsText</value>

        [DataMember(Name="personEducationTotalYears")]
        public List<NcTextType> PersonEducationTotalYears { get; set; }

        /// <summary>
        /// A medical operation had by a person. NIEM reference is j:PersonMedicalOperationText
        /// </summary>
        /// <value>A medical operation had by a person. NIEM reference is j:PersonMedicalOperationText</value>

        [DataMember(Name="personMedicalOperation")]
        public List<NcTextType> PersonMedicalOperation { get; set; }

        /// <summary>
        /// A number of children a person is responsible for as legal guardian, such as biologic children, adopted children. NIEM reference is j:PersonNumberOfChildrenQuantity
        /// </summary>
        /// <value>A number of children a person is responsible for as legal guardian, such as biologic children, adopted children. NIEM reference is j:PersonNumberOfChildrenQuantity</value>

        [DataMember(Name="personNumberOfChildrenQuantity")]
        public List<NiemXsnonNegativeInteger> PersonNumberOfChildrenQuantity { get; set; }

        /// <summary>
        /// A word(s), letter(s), and/or number(s) contained in a SMT. NIEM reference is j:PhysicalFeatureAlphaNumericText
        /// </summary>
        /// <value>A word(s), letter(s), and/or number(s) contained in a SMT. NIEM reference is j:PhysicalFeatureAlphaNumericText</value>

        [DataMember(Name="physicalFeatureAlphaNumeric")]
        public List<NcTextType> PhysicalFeatureAlphaNumeric { get; set; }

        /// <summary>
        /// True if a person is the respondent/plaintiff/petitioner/protected party of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderRespondentInvolvedIndicator
        /// </summary>
        /// <value>True if a person is the respondent/plaintiff/petitioner/protected party of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderRespondentInvolvedIndicator</value>

        [DataMember(Name="isPersonProtectionOrderRespondentInvolved")]
        public List<NiemXsboolean> IsPersonProtectionOrderRespondentInvolved { get; set; }

        /// <summary>
        /// A designation earned by a person to assure that he/she is qualified to perform a job or task, includes trade certification and professional designations. NIEM reference is j:PersonProfessionalCertificateText
        /// </summary>
        /// <value>A designation earned by a person to assure that he/she is qualified to perform a job or task, includes trade certification and professional designations. NIEM reference is j:PersonProfessionalCertificateText</value>

        [DataMember(Name="personProfessionalCertificate")]
        public List<NcTextType> PersonProfessionalCertificate { get; set; }

        /// <summary>
        /// True if a person has been qualified (state or federal disability) as being disabled; false otherwise. NIEM reference is j:PersonPhysicalDisabilityIndicator
        /// </summary>
        /// <value>True if a person has been qualified (state or federal disability) as being disabled; false otherwise. NIEM reference is j:PersonPhysicalDisabilityIndicator</value>

        [DataMember(Name="isPersonPhysicalDisability")]
        public List<NiemXsboolean> IsPersonPhysicalDisability { get; set; }

        /// <summary>
        /// A date a person was qualified as being disabled. NIEM reference is j:PersonPhysicalDisabilityAwardedDate
        /// </summary>
        /// <value>A date a person was qualified as being disabled. NIEM reference is j:PersonPhysicalDisabilityAwardedDate</value>

        [DataMember(Name="personPhysicalDisabilityAwardedDate")]
        public List<NcDateType> PersonPhysicalDisabilityAwardedDate { get; set; }

        /// <summary>
        /// A description of the stipulations set forth in a protection order as they apply to the respondent. NIEM reference is j:PersonProtectionOrderConditionsText
        /// </summary>
        /// <value>A description of the stipulations set forth in a protection order as they apply to the respondent. NIEM reference is j:PersonProtectionOrderConditionsText</value>

        [DataMember(Name="personProtectionOrderConditions")]
        public List<NcTextType> PersonProtectionOrderConditions { get; set; }

        /// <summary>
        /// A feature class (general image content) of a SMT. NIEM reference is j:PhysicalFeatureClassText
        /// </summary>
        /// <value>A feature class (general image content) of a SMT. NIEM reference is j:PhysicalFeatureClassText</value>

        [DataMember(Name="physicalFeatureClass")]
        public List<NcTextType> PhysicalFeatureClass { get; set; }

        /// <summary>
        /// A description of the frequency of gambling activity. NIEM reference is j:PersonGamblingFrequencyText
        /// </summary>
        /// <value>A description of the frequency of gambling activity. NIEM reference is j:PersonGamblingFrequencyText</value>

        [DataMember(Name="personGamblingFrequency")]
        public List<NcTextType> PersonGamblingFrequency { get; set; }

        /// <summary>
        /// A description of the size of a physical feature if not measured in height and width, such as a numeric size for a prosthetic or a tattoo covering a specific area. NIEM reference is j:PhysicalFeatureSizeDescriptionText
        /// </summary>
        /// <value>A description of the size of a physical feature if not measured in height and width, such as a numeric size for a prosthetic or a tattoo covering a specific area. NIEM reference is j:PhysicalFeatureSizeDescriptionText</value>

        [DataMember(Name="physicalFeatureSizeDescription")]
        public List<NcTextType> PhysicalFeatureSizeDescription { get; set; }

        /// <summary>
        /// True if a person is a citizen of a country other than the U.S.; false otherwise. NIEM reference is j:PersonForeignNationalIndicator
        /// </summary>
        /// <value>True if a person is a citizen of a country other than the U.S.; false otherwise. NIEM reference is j:PersonForeignNationalIndicator</value>

        [DataMember(Name="isPersonForeignNational")]
        public List<NiemXsboolean> IsPersonForeignNational { get; set; }

        /// <summary>
        /// True if person is employed at time of report; false otherwise. NIEM reference is j:PersonEmploymentIndicator
        /// </summary>
        /// <value>True if person is employed at time of report; false otherwise. NIEM reference is j:PersonEmploymentIndicator</value>

        [DataMember(Name="isPersonEmployment")]
        public List<NiemXsboolean> IsPersonEmployment { get; set; }

        /// <summary>
        /// True if a person has medical insurance; false otherwise. NIEM reference is j:PersonMedicalInsuranceIndicator
        /// </summary>
        /// <value>True if a person has medical insurance; false otherwise. NIEM reference is j:PersonMedicalInsuranceIndicator</value>

        [DataMember(Name="isPersonMedicalInsurance")]
        public List<NiemXsboolean> IsPersonMedicalInsurance { get; set; }

        /// <summary>
        /// True if a person has physically abused his or her self; false otherwise. NIEM reference is j:PersonSelfInflictedViolenceIndicator
        /// </summary>
        /// <value>True if a person has physically abused his or her self; false otherwise. NIEM reference is j:PersonSelfInflictedViolenceIndicator</value>

        [DataMember(Name="isPersonSelfInflictedViolence")]
        public List<NiemXsboolean> IsPersonSelfInflictedViolence { get; set; }

        /// <summary>
        /// True if the person is the subject/respondent of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderRespondentIndicator
        /// </summary>
        /// <value>True if the person is the subject/respondent of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderRespondentIndicator</value>

        [DataMember(Name="isPersonProtectionOrderRespondent")]
        public List<NiemXsboolean> IsPersonProtectionOrderRespondent { get; set; }

        /// <summary>
        /// True if a person has been evaluated or treated for psychological/psychiatric concerns, e.g., anger management; behavioral concerns; cognitive concerns, including concerns related to suicide; false otherwise. NIEM reference is j:PersonPsychologicalPsychiatricTreatmentIndicator
        /// </summary>
        /// <value>True if a person has been evaluated or treated for psychological/psychiatric concerns, e.g., anger management; behavioral concerns; cognitive concerns, including concerns related to suicide; false otherwise. NIEM reference is j:PersonPsychologicalPsychiatricTreatmentIndicator</value>

        [DataMember(Name="isPersonPsychologicalPsychiatricTreatment")]
        public List<NiemXsboolean> IsPersonPsychologicalPsychiatricTreatment { get; set; }

        /// <summary>
        /// True if a person has distinguishing scars, marks, or tattoos; false otherwise. NIEM reference is j:PersonSMTIndicator
        /// </summary>
        /// <value>True if a person has distinguishing scars, marks, or tattoos; false otherwise. NIEM reference is j:PersonSMTIndicator</value>

        [DataMember(Name="isPersonSmt")]
        public List<NiemXsboolean> IsPersonSmt { get; set; }

        /// <summary>
        /// True if a person has been evaluated or treated for a drug or alcohol abuse; false otherwise. NIEM reference is j:PersonDrugAlcoholAbuseTreatmentIndicator
        /// </summary>
        /// <value>True if a person has been evaluated or treated for a drug or alcohol abuse; false otherwise. NIEM reference is j:PersonDrugAlcoholAbuseTreatmentIndicator</value>

        [DataMember(Name="isPersonDrugAlcoholAbuseTreatment")]
        public List<NiemXsboolean> IsPersonDrugAlcoholAbuseTreatment { get; set; }

        /// <summary>
        /// True if a person has been evaluated or treated for a gambling addiction; false otherwise. NIEM reference is j:PersonGamblingTreatmentIndicator
        /// </summary>
        /// <value>True if a person has been evaluated or treated for a gambling addiction; false otherwise. NIEM reference is j:PersonGamblingTreatmentIndicator</value>

        [DataMember(Name="isPersonGamblingTreatment")]
        public List<NiemXsboolean> IsPersonGamblingTreatment { get; set; }

        /// <summary>
        /// An indication of the general image content of an SMT. NIEM reference is j:PhysicalFeatureSubClassText
        /// </summary>
        /// <value>An indication of the general image content of an SMT. NIEM reference is j:PhysicalFeatureSubClassText</value>

        [DataMember(Name="physicalFeatureSubClass")]
        public List<NcTextType> PhysicalFeatureSubClass { get; set; }

        /// <summary>
        /// True if a person was born outside the US; false otherwise. NIEM reference is j:PersonForeignBornIndicator
        /// </summary>
        /// <value>True if a person was born outside the US; false otherwise. NIEM reference is j:PersonForeignBornIndicator</value>

        [DataMember(Name="isPersonForeignBorn")]
        public List<NiemXsboolean> IsPersonForeignBorn { get; set; }

        /// <summary>
        /// True if the person is the plaintiff/petitioner/protected party of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderPetitionerIndicator
        /// </summary>
        /// <value>True if the person is the plaintiff/petitioner/protected party of a protection order; false otherwise. NIEM reference is j:PersonProtectionOrderPetitionerIndicator</value>

        [DataMember(Name="isPersonProtectionOrderPetitioner")]
        public List<NiemXsboolean> IsPersonProtectionOrderPetitioner { get; set; }

        /// <summary>
        /// True if person is considered an adult, based on age/emancipation/etc.; false otherwise. NIEM reference is j:PersonAdultIndicator
        /// </summary>
        /// <value>True if person is considered an adult, based on age/emancipation/etc.; false otherwise. NIEM reference is j:PersonAdultIndicator</value>

        [DataMember(Name="isPersonAdult")]
        public List<NiemXsboolean> IsPersonAdult { get; set; }

        /// <summary>
        /// True if DNA has been collected; false otherwise. NIEM reference is j:DNACollectedIndicator
        /// </summary>
        /// <value>True if DNA has been collected; false otherwise. NIEM reference is j:DNACollectedIndicator</value>

        [DataMember(Name="isDnaCollected")]
        public List<NiemXsboolean> IsDnaCollected { get; set; }

        /// <summary>
        /// True if a person is a deportee; false otherwise. NIEM reference is j:PersonDeporteeIndicator
        /// </summary>
        /// <value>True if a person is a deportee; false otherwise. NIEM reference is j:PersonDeporteeIndicator</value>

        [DataMember(Name="isPersonDeportee")]
        public List<NiemXsboolean> IsPersonDeportee { get; set; }

        /// <summary>
        /// True if dental records, including x-rays, photos, models or other records, are available; false otherwise. NIEM reference is j:PersonDentalRecordsAvailableIndicator
        /// </summary>
        /// <value>True if dental records, including x-rays, photos, models or other records, are available; false otherwise. NIEM reference is j:PersonDentalRecordsAvailableIndicator</value>

        [DataMember(Name="isPersonDentalRecordsAvailable")]
        public List<NiemXsboolean> IsPersonDentalRecordsAvailable { get; set; }

        /// <summary>
        /// A dental characteristic of a person. NIEM reference is j:PersonDentalCharacteristicCode
        /// </summary>
        /// <value>A dental characteristic of a person. NIEM reference is j:PersonDentalCharacteristicCode</value>

        [DataMember(Name="personDentalCharacteristicCode")]
        public List<NdexPersonDentalCharacteristicCodeType> PersonDentalCharacteristicCode { get; set; }

        /// <summary>
        /// A characteristic of a person&#x27;s teeth. NIEM reference is j:PersonDentalCharacteristicNCICCode
        /// </summary>
        /// <value>A characteristic of a person&#x27;s teeth. NIEM reference is j:PersonDentalCharacteristicNCICCode</value>

        [DataMember(Name="personDentalCharacteristicNcicCode")]
        public List<NcicDCHCodeType> PersonDentalCharacteristicNcicCode { get; set; }

        /// <summary>
        /// A visible problem or characteristic of a person&#x27;s teeth. NIEM reference is j:PersonDentalCharacteristicText
        /// </summary>
        /// <value>A visible problem or characteristic of a person&#x27;s teeth. NIEM reference is j:PersonDentalCharacteristicText</value>

        [DataMember(Name="personDentalCharacteristic")]
        public List<NcTextType> PersonDentalCharacteristic { get; set; }

        /// <summary>
        /// A permit identification that allows a person to carry a concealed weapon. NIEM reference is j:PersonConcealedFirearmPermitIdentification
        /// </summary>
        /// <value>A permit identification that allows a person to carry a concealed weapon. NIEM reference is j:PersonConcealedFirearmPermitIdentification</value>

        [DataMember(Name="personConcealedFirearmPermitIdentification")]
        public List<NcIdentificationType> PersonConcealedFirearmPermitIdentification { get; set; }

        /// <summary>
        /// True if person has completed a college degree; false otherwise. NIEM reference is j:PersonCollegeDegreeIndicator
        /// </summary>
        /// <value>True if person has completed a college degree; false otherwise. NIEM reference is j:PersonCollegeDegreeIndicator</value>

        [DataMember(Name="isPersonCollegeDegree")]
        public List<NiemXsboolean> IsPersonCollegeDegree { get; set; }

        /// <summary>
        /// A driver license permit issued to a driver granting conditional or limited driving privileges. NIEM reference is j:DriverLicensePermit
        /// </summary>
        /// <value>A driver license permit issued to a driver granting conditional or limited driving privileges. NIEM reference is j:DriverLicensePermit</value>

        [DataMember(Name="driverLicensePermit")]
        public List<JDriverLicensePermitType> DriverLicensePermit { get; set; }

        /// <summary>
        /// An identification number issued by an agency&#x27;s automatic fingerprint system based on submitted fingerprints other than FBI ID and SSN. NIEM reference is j:PersonAFISIdentification
        /// </summary>
        /// <value>An identification number issued by an agency&#x27;s automatic fingerprint system based on submitted fingerprints other than FBI ID and SSN. NIEM reference is j:PersonAFISIdentification</value>

        [DataMember(Name="personAfisIdentification")]
        public List<NcIdentificationType> PersonAfisIdentification { get; set; }

        /// <summary>
        /// A status of the body parts of a person. NIEM reference is j:PersonBodyPartsText
        /// </summary>
        /// <value>A status of the body parts of a person. NIEM reference is j:PersonBodyPartsText</value>

        [DataMember(Name="personBodyParts")]
        public List<NcTextType> PersonBodyParts { get; set; }

        /// <summary>
        /// A sequence of charges against a person. NIEM reference is j:PersonCharge
        /// </summary>
        /// <value>A sequence of charges against a person. NIEM reference is j:PersonCharge</value>

        [DataMember(Name="personCharge")]
        public List<JChargeType> PersonCharge { get; set; }

        /// <summary>
        /// True if a person has a permit for a concealed firearm or gun; false otherwise. NIEM reference is j:PersonConcealedFirearmPermitHolderIndicator
        /// </summary>
        /// <value>True if a person has a permit for a concealed firearm or gun; false otherwise. NIEM reference is j:PersonConcealedFirearmPermitHolderIndicator</value>

        [DataMember(Name="isPersonConcealedFirearmPermitHolder")]
        public List<NiemXsboolean> IsPersonConcealedFirearmPermitHolder { get; set; }

        /// <summary>
        /// A person&#x27;s general dental characteristics. NIEM reference is j:PersonDentalCharacteristicGeneralText
        /// </summary>
        /// <value>A person&#x27;s general dental characteristics. NIEM reference is j:PersonDentalCharacteristicGeneralText</value>

        [DataMember(Name="personDentalCharacteristicGeneral")]
        public List<NcTextType> PersonDentalCharacteristicGeneral { get; set; }

        /// <summary>
        /// A person&#x27;s removable dental appliance. NIEM reference is j:PersonDentalCharacteristicRemovableAppliancesText
        /// </summary>
        /// <value>A person&#x27;s removable dental appliance. NIEM reference is j:PersonDentalCharacteristicRemovableAppliancesText</value>

        [DataMember(Name="personDentalCharacteristicRemovableAppliances")]
        public List<NcTextType> PersonDentalCharacteristicRemovableAppliances { get; set; }

        /// <summary>
        /// True if dental x-rays are available with a record; false otherwise. NIEM reference is j:PersonDentalPhotoModelAvailableIndicator
        /// </summary>
        /// <value>True if dental x-rays are available with a record; false otherwise. NIEM reference is j:PersonDentalPhotoModelAvailableIndicator</value>

        [DataMember(Name="isPersonDentalPhotoModelAvailable")]
        public List<NiemXsboolean> IsPersonDentalPhotoModelAvailable { get; set; }

        /// <summary>
        /// True if dental photos or models are available with a record; false otherwise. NIEM reference is j:PersonDentalXRayAvailableIndicator
        /// </summary>
        /// <value>True if dental photos or models are available with a record; false otherwise. NIEM reference is j:PersonDentalXRayAvailableIndicator</value>

        [DataMember(Name="isPersonDentalXRayAvailable")]
        public List<NiemXsboolean> IsPersonDentalXRayAvailable { get; set; }

        /// <summary>
        /// True if a person has been sighted; false otherwise. NIEM reference is j:PersonSightedIndicator
        /// </summary>
        /// <value>True if a person has been sighted; false otherwise. NIEM reference is j:PersonSightedIndicator</value>

        [DataMember(Name="isPersonSighted")]
        public List<NiemXsboolean> IsPersonSighted { get; set; }

        /// <summary>
        /// A driving accident in which a person is involved. NIEM reference is j:PersonDrivingIncident
        /// </summary>
        /// <value>A driving accident in which a person is involved. NIEM reference is j:PersonDrivingIncident</value>

        [DataMember(Name="personDrivingIncident")]
        public List<JDrivingIncidentType> PersonDrivingIncident { get; set; }

        /// <summary>
        /// A kind of insurance coverage a driver of a vehicle has. NIEM reference is j:PersonDrivingInsuranceCoverageCategoryText
        /// </summary>
        /// <value>A kind of insurance coverage a driver of a vehicle has. NIEM reference is j:PersonDrivingInsuranceCoverageCategoryText</value>

        [DataMember(Name="personDrivingInsuranceCoverageCategory")]
        public List<NcTextType> PersonDrivingInsuranceCoverageCategory { get; set; }

        /// <summary>
        /// A status of a person&#x27;s driving insurance. NIEM reference is j:PersonDrivingInsuranceStatusText
        /// </summary>
        /// <value>A status of a person&#x27;s driving insurance. NIEM reference is j:PersonDrivingInsuranceStatusText</value>

        [DataMember(Name="personDrivingInsuranceStatus")]
        public List<NcTextType> PersonDrivingInsuranceStatus { get; set; }

        /// <summary>
        /// A date the subject will become an adult. NIEM reference is j:PersonEmancipationDate
        /// </summary>
        /// <value>A date the subject will become an adult. NIEM reference is j:PersonEmancipationDate</value>

        [DataMember(Name="personEmancipationDate")]
        public List<NcDateType> PersonEmancipationDate { get; set; }

        /// <summary>
        /// A number issued by the FBI&#x27;s Automated Fingerprint Identification System (AFIS) based on submitted fingerprints. NIEM reference is j:PersonFBIIdentification
        /// </summary>
        /// <value>A number issued by the FBI&#x27;s Automated Fingerprint Identification System (AFIS) based on submitted fingerprints. NIEM reference is j:PersonFBIIdentification</value>

        [DataMember(Name="personFbiIdentification")]
        public List<NcIdentificationType> PersonFbiIdentification { get; set; }

        /// <summary>
        /// True if a person has a gun or firearm permit; false otherwise. NIEM reference is j:PersonFirearmPermitHolderIndicator
        /// </summary>
        /// <value>True if a person has a gun or firearm permit; false otherwise. NIEM reference is j:PersonFirearmPermitHolderIndicator</value>

        [DataMember(Name="isPersonFirearmPermitHolder")]
        public List<NiemXsboolean> IsPersonFirearmPermitHolder { get; set; }

        /// <summary>
        /// True if a footprint is available with a person record; false otherwise. NIEM reference is j:PersonFootPrintAvailableIndicator
        /// </summary>
        /// <value>True if a footprint is available with a person record; false otherwise. NIEM reference is j:PersonFootPrintAvailableIndicator</value>

        [DataMember(Name="isPersonFootPrintAvailable")]
        public List<NiemXsboolean> IsPersonFootPrintAvailable { get; set; }

        /// <summary>
        /// A general-ledger account identification number associated with a person. NIEM reference is j:PersonGeneralLedgerIdentification
        /// </summary>
        /// <value>A general-ledger account identification number associated with a person. NIEM reference is j:PersonGeneralLedgerIdentification</value>

        [DataMember(Name="personGeneralLedgerIdentification")]
        public List<NcIdentificationType> PersonGeneralLedgerIdentification { get; set; }

        /// <summary>
        /// A physiological state of a person due to the presence of drugs, alcohol, or another toxic substance. NIEM reference is j:PersonIntoxication
        /// </summary>
        /// <value>A physiological state of a person due to the presence of drugs, alcohol, or another toxic substance. NIEM reference is j:PersonIntoxication</value>

        [DataMember(Name="personIntoxication")]
        public List<JIntoxicationType> PersonIntoxication { get; set; }

        /// <summary>
        /// A file control number (FCN) identification that is often used to link a NCIC record to a person. NIEM reference is j:PersonNCICIdentification
        /// </summary>
        /// <value>A file control number (FCN) identification that is often used to link a NCIC record to a person. NIEM reference is j:PersonNCICIdentification</value>

        [DataMember(Name="personNcicIdentification")]
        public List<NcIdentificationType> PersonNcicIdentification { get; set; }

        /// <summary>
        /// A password provided/used by a victim of Identity Theft to verify their ID. NIEM reference is j:PersonPasswordText
        /// </summary>
        /// <value>A password provided/used by a victim of Identity Theft to verify their ID. NIEM reference is j:PersonPasswordText</value>

        [DataMember(Name="personPassword")]
        public List<NcTextType> PersonPassword { get; set; }

        /// <summary>
        /// A primary social worker or other overseer assigned to a person that is not a caregiver. NIEM reference is j:PersonPrimaryWorker
        /// </summary>
        /// <value>A primary social worker or other overseer assigned to a person that is not a caregiver. NIEM reference is j:PersonPrimaryWorker</value>

        [DataMember(Name="personPrimaryWorker")]
        public List<NcPersonType> PersonPrimaryWorker { get; set; }

        /// <summary>
        /// An Employee of State assigned to the particular juvenile. NIEM reference is j:PersonReferralWorker
        /// </summary>
        /// <value>An Employee of State assigned to the particular juvenile. NIEM reference is j:PersonReferralWorker</value>

        [DataMember(Name="personReferralWorker")]
        public List<NcPersonType> PersonReferralWorker { get; set; }

        /// <summary>
        /// True if a person is required to register as an offender; false otherwise. NIEM reference is j:PersonRegisteredOffenderIndicator
        /// </summary>
        /// <value>True if a person is required to register as an offender; false otherwise. NIEM reference is j:PersonRegisteredOffenderIndicator</value>

        [DataMember(Name="isPersonRegisteredOffender")]
        public List<NiemXsboolean> IsPersonRegisteredOffender { get; set; }

        /// <summary>
        /// An identifier assigned to a person by a state identification bureau, generally based on submission of the person&#x27;s fingerprints to the state&#x27;s Automated Fingerprint Identification System (AFIS). NIEM reference is j:PersonStateFingerprintIdentification
        /// </summary>
        /// <value>An identifier assigned to a person by a state identification bureau, generally based on submission of the person&#x27;s fingerprints to the state&#x27;s Automated Fingerprint Identification System (AFIS). NIEM reference is j:PersonStateFingerprintIdentification</value>

        [DataMember(Name="personStateFingerprintIdentification")]
        public List<NcIdentificationType> PersonStateFingerprintIdentification { get; set; }

        /// <summary>
        /// An organizational unit to which a person is assigned, specifically a temporary assignment. NIEM reference is j:PersonTemporaryAssignmentUnit
        /// </summary>
        /// <value>An organizational unit to which a person is assigned, specifically a temporary assignment. NIEM reference is j:PersonTemporaryAssignmentUnit</value>

        [DataMember(Name="personTemporaryAssignmentUnit")]
        public List<NcOrganizationType> PersonTemporaryAssignmentUnit { get; set; }

        /// <summary>
        /// A registration title which has been issued to a person. NIEM reference is j:PersonIssuedItemRegistrationTitle
        /// </summary>
        /// <value>A registration title which has been issued to a person. NIEM reference is j:PersonIssuedItemRegistrationTitle</value>

        [DataMember(Name="personIssuedItemRegistrationTitle")]
        public List<JItemTitleType> PersonIssuedItemRegistrationTitle { get; set; }

        /// <summary>
        /// A title which has been issued to a person. NIEM reference is j:PersonIssuedItemTitle
        /// </summary>
        /// <value>A title which has been issued to a person. NIEM reference is j:PersonIssuedItemTitle</value>

        [DataMember(Name="personIssuedItemTitle")]
        public List<JItemTitleType> PersonIssuedItemTitle { get; set; }

        /// <summary>
        /// An assigned identification to identify a vendor. NIEM reference is j:PersonVendorIdentification
        /// </summary>
        /// <value>An assigned identification to identify a vendor. NIEM reference is j:PersonVendorIdentification</value>

        [DataMember(Name="personVendorIdentification")]
        public List<NcIdentificationType> PersonVendorIdentification { get; set; }

        /// <summary>
        /// A work address or structure of a person. NIEM reference is j:PersonWorkLocationStructure
        /// </summary>
        /// <value>A work address or structure of a person. NIEM reference is j:PersonWorkLocationStructure</value>

        [DataMember(Name="personWorkLocationStructure")]
        public List<NcFacilityType> PersonWorkLocationStructure { get; set; }

        /// <summary>
        /// A cautionary piece of information about a person. NIEM reference is j:PersonCautionInformationCode
        /// </summary>
        /// <value>A cautionary piece of information about a person. NIEM reference is j:PersonCautionInformationCode</value>

        [DataMember(Name="personCautionInformationCode")]
        public List<NcicCMCCodeType> PersonCautionInformationCode { get; set; }

        /// <summary>
        /// A cautionary piece of information about a person. NIEM reference is j:PersonCautionInformationText
        /// </summary>
        /// <value>A cautionary piece of information about a person. NIEM reference is j:PersonCautionInformationText</value>

        [DataMember(Name="personCautionInformation")]
        public List<NcTextType> PersonCautionInformation { get; set; }

        /// <summary>
        /// A finger position code for a finger that is crippled. NIEM reference is j:CrippledFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger that is crippled. NIEM reference is j:CrippledFingerPositionText</value>

        [DataMember(Name="crippledFingerPosition")]
        public List<NcTextType> CrippledFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger that is discolored. NIEM reference is j:DiscoloredFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger that is discolored. NIEM reference is j:DiscoloredFingerPositionText</value>

        [DataMember(Name="discoloredFingerPosition")]
        public List<NcTextType> DiscoloredFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger that is fractured/broken. NIEM reference is j:FracturedFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger that is fractured/broken. NIEM reference is j:FracturedFingerPositionText</value>

        [DataMember(Name="fracturedFingerPosition")]
        public List<NcTextType> FracturedFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger that is healed from a fracture/break. NIEM reference is j:HealedFracturedFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger that is healed from a fracture/break. NIEM reference is j:HealedFracturedFingerPositionText</value>

        [DataMember(Name="healedFracturedFingerPosition")]
        public List<NcTextType> HealedFracturedFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a missing/amputated finger. NIEM reference is j:MissingFingerPositionText
        /// </summary>
        /// <value>A finger position code for a missing/amputated finger. NIEM reference is j:MissingFingerPositionText</value>

        [DataMember(Name="missingFingerPosition")]
        public List<NcTextType> MissingFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger with a needle mark(s) on it. NIEM reference is j:NeedleMarkFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger with a needle mark(s) on it. NIEM reference is j:NeedleMarkFingerPositionText</value>

        [DataMember(Name="needleMarkFingerPosition")]
        public List<NcTextType> NeedleMarkFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger with a mole on it. NIEM reference is j:MoleFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger with a mole on it. NIEM reference is j:MoleFingerPositionText</value>

        [DataMember(Name="moleFingerPosition")]
        public List<NcTextType> MoleFingerPosition { get; set; }

        /// <summary>
        /// A state or country of a person&#x27;s birth. NIEM reference is j:PersonBirthplaceCode
        /// </summary>
        /// <value>A state or country of a person&#x27;s birth. NIEM reference is j:PersonBirthplaceCode</value>

        [DataMember(Name="personBirthplaceCode")]
        public List<NcicCountryCodeType> PersonBirthplaceCode { get; set; }

        /// <summary>
        /// A hand with which a person is more adept using. NIEM reference is j:PersonHandednessCode
        /// </summary>
        /// <value>A hand with which a person is more adept using. NIEM reference is j:PersonHandednessCode</value>

        [DataMember(Name="personHandednessCode")]
        public List<NdexPersonHandedCodeType> PersonHandednessCode { get; set; }

        /// <summary>
        /// A hand with which a person is more adept using. NIEM reference is nc:PersonHandednessText
        /// </summary>
        /// <value>A hand with which a person is more adept using. NIEM reference is nc:PersonHandednessText</value>

        [DataMember(Name="personHandedness")]
        public List<NcTextType> PersonHandedness { get; set; }

        /// <summary>
        /// A result of a NCIC Hit and the general disposition of the record. NIEM reference is j:PersonHitResultsText
        /// </summary>
        /// <value>A result of a NCIC Hit and the general disposition of the record. NIEM reference is j:PersonHitResultsText</value>

        [DataMember(Name="personHitResults")]
        public List<NcTextType> PersonHitResults { get; set; }

        /// <summary>
        /// A description of any impediments that can affect the speech of a person. NIEM reference is j:PersonSpeechDescriptionCode
        /// </summary>
        /// <value>A description of any impediments that can affect the speech of a person. NIEM reference is j:PersonSpeechDescriptionCode</value>

        [DataMember(Name="personSpeechDescriptionCode")]
        public List<NdexPersonSpeechCodeType> PersonSpeechDescriptionCode { get; set; }

        /// <summary>
        /// A target gender of the sexual interest of a person. NIEM reference is hs:PersonSexualOrientationCode
        /// </summary>
        /// <value>A target gender of the sexual interest of a person. NIEM reference is hs:PersonSexualOrientationCode</value>

        [DataMember(Name="hsPersonSexualOrientationCode")]
        public List<HsPersonSexualOrientationCodeType> HsPersonSexualOrientationCode { get; set; }

        /// <summary>
        /// A target gender of the sexual interest of a person. NIEM reference is j:PersonSexualOrientationCode
        /// </summary>
        /// <value>A target gender of the sexual interest of a person. NIEM reference is j:PersonSexualOrientationCode</value>

        [DataMember(Name="jPersonSexualOrientationCode")]
        public List<NdexPersonSexualOrientationCodeType> JPersonSexualOrientationCode { get; set; }

        /// <summary>
        /// A finger position code for a finger with a scar(s) on it. NIEM reference is j:ScarFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger with a scar(s) on it. NIEM reference is j:ScarFingerPositionText</value>

        [DataMember(Name="scarFingerPosition")]
        public List<NcTextType> ScarFingerPosition { get; set; }

        /// <summary>
        /// A finger position code for a finger with a tattoo(s) on it. NIEM reference is j:TattooFingerPositionText
        /// </summary>
        /// <value>A finger position code for a finger with a tattoo(s) on it. NIEM reference is j:TattooFingerPositionText</value>

        [DataMember(Name="tattooFingerPosition")]
        public List<NcTextType> TattooFingerPosition { get; set; }

        /// <summary>
        /// A set of details about a person&#x27;s death. NIEM reference is j:PersonDeath
        /// </summary>
        /// <value>A set of details about a person&#x27;s death. NIEM reference is j:PersonDeath</value>

        [DataMember(Name="personDeath")]
        public List<JPersonDeathType> PersonDeath { get; set; }

        /// <summary>
        /// jPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>jPersonAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPersonAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jPersonAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPersonAugmentationTypeContext.jsonld")]
            JSONLDContextsjPersonAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>jPersonAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPersonAugmentationType {\n");
            sb.Append("  PersonDrugAlcoholUseDateRange: ").Append(PersonDrugAlcoholUseDateRange).Append("\n");
            sb.Append("  PersonSignature: ").Append(PersonSignature).Append("\n");
            sb.Append("  PersonInterpolIdentification: ").Append(PersonInterpolIdentification).Append("\n");
            sb.Append("  PersonDrugAlcoholHistory: ").Append(PersonDrugAlcoholHistory).Append("\n");
            sb.Append("  PersonDeaIdentification: ").Append(PersonDeaIdentification).Append("\n");
            sb.Append("  CodisNumber: ").Append(CodisNumber).Append("\n");
            sb.Append("  PersonBopRegisterNumberIdentification: ").Append(PersonBopRegisterNumberIdentification).Append("\n");
            sb.Append("  PersonDrugAlcoholPaymentMethod: ").Append(PersonDrugAlcoholPaymentMethod).Append("\n");
            sb.Append("  PersonDrugAlcoholUseFrequency: ").Append(PersonDrugAlcoholUseFrequency).Append("\n");
            sb.Append("  IsPersonParolee: ").Append(IsPersonParolee).Append("\n");
            sb.Append("  IsPersonHasChildren: ").Append(IsPersonHasChildren).Append("\n");
            sb.Append("  IsPersonIllegalAlien: ").Append(IsPersonIllegalAlien).Append("\n");
            sb.Append("  IsPersonDrugAlcoholUse: ").Append(IsPersonDrugAlcoholUse).Append("\n");
            sb.Append("  IsPersonSuicideAttempt: ").Append(IsPersonSuicideAttempt).Append("\n");
            sb.Append("  PersonUsmsFugitiveIdentification: ").Append(PersonUsmsFugitiveIdentification).Append("\n");
            sb.Append("  PersonDrugAlcoholOfChoice: ").Append(PersonDrugAlcoholOfChoice).Append("\n");
            sb.Append("  IsPersonDevelopmentDisability: ").Append(IsPersonDevelopmentDisability).Append("\n");
            sb.Append("  IsPersonHearingProblem: ").Append(IsPersonHearingProblem).Append("\n");
            sb.Append("  EmployeeOccupationCategory: ").Append(EmployeeOccupationCategory).Append("\n");
            sb.Append("  IsPersonProbationer: ").Append(IsPersonProbationer).Append("\n");
            sb.Append("  DnaCollectionStatus: ").Append(DnaCollectionStatus).Append("\n");
            sb.Append("  DriverLicense: ").Append(DriverLicense).Append("\n");
            sb.Append("  PersonClothing: ").Append(PersonClothing).Append("\n");
            sb.Append("  PersonBirth: ").Append(PersonBirth).Append("\n");
            sb.Append("  PersonRegistryOffenderClassification: ").Append(PersonRegistryOffenderClassification).Append("\n");
            sb.Append("  PersonDexterity: ").Append(PersonDexterity).Append("\n");
            sb.Append("  PersonDisabilityCategory: ").Append(PersonDisabilityCategory).Append("\n");
            sb.Append("  IsPersonHasDisability: ").Append(IsPersonHasDisability).Append("\n");
            sb.Append("  IsPersonIsStudent: ").Append(IsPersonIsStudent).Append("\n");
            sb.Append("  IsPersonMilitaryVeteran: ").Append(IsPersonMilitaryVeteran).Append("\n");
            sb.Append("  IsPersonPregnant: ").Append(IsPersonPregnant).Append("\n");
            sb.Append("  IsPersonRegisteredForSelectiveService: ").Append(IsPersonRegisteredForSelectiveService).Append("\n");
            sb.Append("  PersonLivingSituation: ").Append(PersonLivingSituation).Append("\n");
            sb.Append("  PersonEducationTotalYears: ").Append(PersonEducationTotalYears).Append("\n");
            sb.Append("  PersonMedicalOperation: ").Append(PersonMedicalOperation).Append("\n");
            sb.Append("  PersonNumberOfChildrenQuantity: ").Append(PersonNumberOfChildrenQuantity).Append("\n");
            sb.Append("  PhysicalFeatureAlphaNumeric: ").Append(PhysicalFeatureAlphaNumeric).Append("\n");
            sb.Append("  IsPersonProtectionOrderRespondentInvolved: ").Append(IsPersonProtectionOrderRespondentInvolved).Append("\n");
            sb.Append("  PersonProfessionalCertificate: ").Append(PersonProfessionalCertificate).Append("\n");
            sb.Append("  IsPersonPhysicalDisability: ").Append(IsPersonPhysicalDisability).Append("\n");
            sb.Append("  PersonPhysicalDisabilityAwardedDate: ").Append(PersonPhysicalDisabilityAwardedDate).Append("\n");
            sb.Append("  PersonProtectionOrderConditions: ").Append(PersonProtectionOrderConditions).Append("\n");
            sb.Append("  PhysicalFeatureClass: ").Append(PhysicalFeatureClass).Append("\n");
            sb.Append("  PersonGamblingFrequency: ").Append(PersonGamblingFrequency).Append("\n");
            sb.Append("  PhysicalFeatureSizeDescription: ").Append(PhysicalFeatureSizeDescription).Append("\n");
            sb.Append("  IsPersonForeignNational: ").Append(IsPersonForeignNational).Append("\n");
            sb.Append("  IsPersonEmployment: ").Append(IsPersonEmployment).Append("\n");
            sb.Append("  IsPersonMedicalInsurance: ").Append(IsPersonMedicalInsurance).Append("\n");
            sb.Append("  IsPersonSelfInflictedViolence: ").Append(IsPersonSelfInflictedViolence).Append("\n");
            sb.Append("  IsPersonProtectionOrderRespondent: ").Append(IsPersonProtectionOrderRespondent).Append("\n");
            sb.Append("  IsPersonPsychologicalPsychiatricTreatment: ").Append(IsPersonPsychologicalPsychiatricTreatment).Append("\n");
            sb.Append("  IsPersonSmt: ").Append(IsPersonSmt).Append("\n");
            sb.Append("  IsPersonDrugAlcoholAbuseTreatment: ").Append(IsPersonDrugAlcoholAbuseTreatment).Append("\n");
            sb.Append("  IsPersonGamblingTreatment: ").Append(IsPersonGamblingTreatment).Append("\n");
            sb.Append("  PhysicalFeatureSubClass: ").Append(PhysicalFeatureSubClass).Append("\n");
            sb.Append("  IsPersonForeignBorn: ").Append(IsPersonForeignBorn).Append("\n");
            sb.Append("  IsPersonProtectionOrderPetitioner: ").Append(IsPersonProtectionOrderPetitioner).Append("\n");
            sb.Append("  IsPersonAdult: ").Append(IsPersonAdult).Append("\n");
            sb.Append("  IsDnaCollected: ").Append(IsDnaCollected).Append("\n");
            sb.Append("  IsPersonDeportee: ").Append(IsPersonDeportee).Append("\n");
            sb.Append("  IsPersonDentalRecordsAvailable: ").Append(IsPersonDentalRecordsAvailable).Append("\n");
            sb.Append("  PersonDentalCharacteristicCode: ").Append(PersonDentalCharacteristicCode).Append("\n");
            sb.Append("  PersonDentalCharacteristicNcicCode: ").Append(PersonDentalCharacteristicNcicCode).Append("\n");
            sb.Append("  PersonDentalCharacteristic: ").Append(PersonDentalCharacteristic).Append("\n");
            sb.Append("  PersonConcealedFirearmPermitIdentification: ").Append(PersonConcealedFirearmPermitIdentification).Append("\n");
            sb.Append("  IsPersonCollegeDegree: ").Append(IsPersonCollegeDegree).Append("\n");
            sb.Append("  DriverLicensePermit: ").Append(DriverLicensePermit).Append("\n");
            sb.Append("  PersonAfisIdentification: ").Append(PersonAfisIdentification).Append("\n");
            sb.Append("  PersonBodyParts: ").Append(PersonBodyParts).Append("\n");
            sb.Append("  PersonCharge: ").Append(PersonCharge).Append("\n");
            sb.Append("  IsPersonConcealedFirearmPermitHolder: ").Append(IsPersonConcealedFirearmPermitHolder).Append("\n");
            sb.Append("  PersonDentalCharacteristicGeneral: ").Append(PersonDentalCharacteristicGeneral).Append("\n");
            sb.Append("  PersonDentalCharacteristicRemovableAppliances: ").Append(PersonDentalCharacteristicRemovableAppliances).Append("\n");
            sb.Append("  IsPersonDentalPhotoModelAvailable: ").Append(IsPersonDentalPhotoModelAvailable).Append("\n");
            sb.Append("  IsPersonDentalXRayAvailable: ").Append(IsPersonDentalXRayAvailable).Append("\n");
            sb.Append("  IsPersonSighted: ").Append(IsPersonSighted).Append("\n");
            sb.Append("  PersonDrivingIncident: ").Append(PersonDrivingIncident).Append("\n");
            sb.Append("  PersonDrivingInsuranceCoverageCategory: ").Append(PersonDrivingInsuranceCoverageCategory).Append("\n");
            sb.Append("  PersonDrivingInsuranceStatus: ").Append(PersonDrivingInsuranceStatus).Append("\n");
            sb.Append("  PersonEmancipationDate: ").Append(PersonEmancipationDate).Append("\n");
            sb.Append("  PersonFbiIdentification: ").Append(PersonFbiIdentification).Append("\n");
            sb.Append("  IsPersonFirearmPermitHolder: ").Append(IsPersonFirearmPermitHolder).Append("\n");
            sb.Append("  IsPersonFootPrintAvailable: ").Append(IsPersonFootPrintAvailable).Append("\n");
            sb.Append("  PersonGeneralLedgerIdentification: ").Append(PersonGeneralLedgerIdentification).Append("\n");
            sb.Append("  PersonIntoxication: ").Append(PersonIntoxication).Append("\n");
            sb.Append("  PersonNcicIdentification: ").Append(PersonNcicIdentification).Append("\n");
            sb.Append("  PersonPassword: ").Append(PersonPassword).Append("\n");
            sb.Append("  PersonPrimaryWorker: ").Append(PersonPrimaryWorker).Append("\n");
            sb.Append("  PersonReferralWorker: ").Append(PersonReferralWorker).Append("\n");
            sb.Append("  IsPersonRegisteredOffender: ").Append(IsPersonRegisteredOffender).Append("\n");
            sb.Append("  PersonStateFingerprintIdentification: ").Append(PersonStateFingerprintIdentification).Append("\n");
            sb.Append("  PersonTemporaryAssignmentUnit: ").Append(PersonTemporaryAssignmentUnit).Append("\n");
            sb.Append("  PersonIssuedItemRegistrationTitle: ").Append(PersonIssuedItemRegistrationTitle).Append("\n");
            sb.Append("  PersonIssuedItemTitle: ").Append(PersonIssuedItemTitle).Append("\n");
            sb.Append("  PersonVendorIdentification: ").Append(PersonVendorIdentification).Append("\n");
            sb.Append("  PersonWorkLocationStructure: ").Append(PersonWorkLocationStructure).Append("\n");
            sb.Append("  PersonCautionInformationCode: ").Append(PersonCautionInformationCode).Append("\n");
            sb.Append("  PersonCautionInformation: ").Append(PersonCautionInformation).Append("\n");
            sb.Append("  CrippledFingerPosition: ").Append(CrippledFingerPosition).Append("\n");
            sb.Append("  DiscoloredFingerPosition: ").Append(DiscoloredFingerPosition).Append("\n");
            sb.Append("  FracturedFingerPosition: ").Append(FracturedFingerPosition).Append("\n");
            sb.Append("  HealedFracturedFingerPosition: ").Append(HealedFracturedFingerPosition).Append("\n");
            sb.Append("  MissingFingerPosition: ").Append(MissingFingerPosition).Append("\n");
            sb.Append("  NeedleMarkFingerPosition: ").Append(NeedleMarkFingerPosition).Append("\n");
            sb.Append("  MoleFingerPosition: ").Append(MoleFingerPosition).Append("\n");
            sb.Append("  PersonBirthplaceCode: ").Append(PersonBirthplaceCode).Append("\n");
            sb.Append("  PersonHandednessCode: ").Append(PersonHandednessCode).Append("\n");
            sb.Append("  PersonHandedness: ").Append(PersonHandedness).Append("\n");
            sb.Append("  PersonHitResults: ").Append(PersonHitResults).Append("\n");
            sb.Append("  PersonSpeechDescriptionCode: ").Append(PersonSpeechDescriptionCode).Append("\n");
            sb.Append("  HsPersonSexualOrientationCode: ").Append(HsPersonSexualOrientationCode).Append("\n");
            sb.Append("  JPersonSexualOrientationCode: ").Append(JPersonSexualOrientationCode).Append("\n");
            sb.Append("  ScarFingerPosition: ").Append(ScarFingerPosition).Append("\n");
            sb.Append("  TattooFingerPosition: ").Append(TattooFingerPosition).Append("\n");
            sb.Append("  PersonDeath: ").Append(PersonDeath).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPersonAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JPersonAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPersonAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPersonAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PersonDrugAlcoholUseDateRange == other.PersonDrugAlcoholUseDateRange ||
                    PersonDrugAlcoholUseDateRange != null &&
                    PersonDrugAlcoholUseDateRange.SequenceEqual(other.PersonDrugAlcoholUseDateRange)
                ) && 
                (
                    PersonSignature == other.PersonSignature ||
                    PersonSignature != null &&
                    PersonSignature.SequenceEqual(other.PersonSignature)
                ) && 
                (
                    PersonInterpolIdentification == other.PersonInterpolIdentification ||
                    PersonInterpolIdentification != null &&
                    PersonInterpolIdentification.SequenceEqual(other.PersonInterpolIdentification)
                ) && 
                (
                    PersonDrugAlcoholHistory == other.PersonDrugAlcoholHistory ||
                    PersonDrugAlcoholHistory != null &&
                    PersonDrugAlcoholHistory.SequenceEqual(other.PersonDrugAlcoholHistory)
                ) && 
                (
                    PersonDeaIdentification == other.PersonDeaIdentification ||
                    PersonDeaIdentification != null &&
                    PersonDeaIdentification.SequenceEqual(other.PersonDeaIdentification)
                ) && 
                (
                    CodisNumber == other.CodisNumber ||
                    CodisNumber != null &&
                    CodisNumber.SequenceEqual(other.CodisNumber)
                ) && 
                (
                    PersonBopRegisterNumberIdentification == other.PersonBopRegisterNumberIdentification ||
                    PersonBopRegisterNumberIdentification != null &&
                    PersonBopRegisterNumberIdentification.SequenceEqual(other.PersonBopRegisterNumberIdentification)
                ) && 
                (
                    PersonDrugAlcoholPaymentMethod == other.PersonDrugAlcoholPaymentMethod ||
                    PersonDrugAlcoholPaymentMethod != null &&
                    PersonDrugAlcoholPaymentMethod.SequenceEqual(other.PersonDrugAlcoholPaymentMethod)
                ) && 
                (
                    PersonDrugAlcoholUseFrequency == other.PersonDrugAlcoholUseFrequency ||
                    PersonDrugAlcoholUseFrequency != null &&
                    PersonDrugAlcoholUseFrequency.SequenceEqual(other.PersonDrugAlcoholUseFrequency)
                ) && 
                (
                    IsPersonParolee == other.IsPersonParolee ||
                    IsPersonParolee != null &&
                    IsPersonParolee.SequenceEqual(other.IsPersonParolee)
                ) && 
                (
                    IsPersonHasChildren == other.IsPersonHasChildren ||
                    IsPersonHasChildren != null &&
                    IsPersonHasChildren.SequenceEqual(other.IsPersonHasChildren)
                ) && 
                (
                    IsPersonIllegalAlien == other.IsPersonIllegalAlien ||
                    IsPersonIllegalAlien != null &&
                    IsPersonIllegalAlien.SequenceEqual(other.IsPersonIllegalAlien)
                ) && 
                (
                    IsPersonDrugAlcoholUse == other.IsPersonDrugAlcoholUse ||
                    IsPersonDrugAlcoholUse != null &&
                    IsPersonDrugAlcoholUse.SequenceEqual(other.IsPersonDrugAlcoholUse)
                ) && 
                (
                    IsPersonSuicideAttempt == other.IsPersonSuicideAttempt ||
                    IsPersonSuicideAttempt != null &&
                    IsPersonSuicideAttempt.SequenceEqual(other.IsPersonSuicideAttempt)
                ) && 
                (
                    PersonUsmsFugitiveIdentification == other.PersonUsmsFugitiveIdentification ||
                    PersonUsmsFugitiveIdentification != null &&
                    PersonUsmsFugitiveIdentification.SequenceEqual(other.PersonUsmsFugitiveIdentification)
                ) && 
                (
                    PersonDrugAlcoholOfChoice == other.PersonDrugAlcoholOfChoice ||
                    PersonDrugAlcoholOfChoice != null &&
                    PersonDrugAlcoholOfChoice.SequenceEqual(other.PersonDrugAlcoholOfChoice)
                ) && 
                (
                    IsPersonDevelopmentDisability == other.IsPersonDevelopmentDisability ||
                    IsPersonDevelopmentDisability != null &&
                    IsPersonDevelopmentDisability.SequenceEqual(other.IsPersonDevelopmentDisability)
                ) && 
                (
                    IsPersonHearingProblem == other.IsPersonHearingProblem ||
                    IsPersonHearingProblem != null &&
                    IsPersonHearingProblem.SequenceEqual(other.IsPersonHearingProblem)
                ) && 
                (
                    EmployeeOccupationCategory == other.EmployeeOccupationCategory ||
                    EmployeeOccupationCategory != null &&
                    EmployeeOccupationCategory.SequenceEqual(other.EmployeeOccupationCategory)
                ) && 
                (
                    IsPersonProbationer == other.IsPersonProbationer ||
                    IsPersonProbationer != null &&
                    IsPersonProbationer.SequenceEqual(other.IsPersonProbationer)
                ) && 
                (
                    DnaCollectionStatus == other.DnaCollectionStatus ||
                    DnaCollectionStatus != null &&
                    DnaCollectionStatus.SequenceEqual(other.DnaCollectionStatus)
                ) && 
                (
                    DriverLicense == other.DriverLicense ||
                    DriverLicense != null &&
                    DriverLicense.SequenceEqual(other.DriverLicense)
                ) && 
                (
                    PersonClothing == other.PersonClothing ||
                    PersonClothing != null &&
                    PersonClothing.SequenceEqual(other.PersonClothing)
                ) && 
                (
                    PersonBirth == other.PersonBirth ||
                    PersonBirth != null &&
                    PersonBirth.SequenceEqual(other.PersonBirth)
                ) && 
                (
                    PersonRegistryOffenderClassification == other.PersonRegistryOffenderClassification ||
                    PersonRegistryOffenderClassification != null &&
                    PersonRegistryOffenderClassification.SequenceEqual(other.PersonRegistryOffenderClassification)
                ) && 
                (
                    PersonDexterity == other.PersonDexterity ||
                    PersonDexterity != null &&
                    PersonDexterity.SequenceEqual(other.PersonDexterity)
                ) && 
                (
                    PersonDisabilityCategory == other.PersonDisabilityCategory ||
                    PersonDisabilityCategory != null &&
                    PersonDisabilityCategory.SequenceEqual(other.PersonDisabilityCategory)
                ) && 
                (
                    IsPersonHasDisability == other.IsPersonHasDisability ||
                    IsPersonHasDisability != null &&
                    IsPersonHasDisability.SequenceEqual(other.IsPersonHasDisability)
                ) && 
                (
                    IsPersonIsStudent == other.IsPersonIsStudent ||
                    IsPersonIsStudent != null &&
                    IsPersonIsStudent.SequenceEqual(other.IsPersonIsStudent)
                ) && 
                (
                    IsPersonMilitaryVeteran == other.IsPersonMilitaryVeteran ||
                    IsPersonMilitaryVeteran != null &&
                    IsPersonMilitaryVeteran.SequenceEqual(other.IsPersonMilitaryVeteran)
                ) && 
                (
                    IsPersonPregnant == other.IsPersonPregnant ||
                    IsPersonPregnant != null &&
                    IsPersonPregnant.SequenceEqual(other.IsPersonPregnant)
                ) && 
                (
                    IsPersonRegisteredForSelectiveService == other.IsPersonRegisteredForSelectiveService ||
                    IsPersonRegisteredForSelectiveService != null &&
                    IsPersonRegisteredForSelectiveService.SequenceEqual(other.IsPersonRegisteredForSelectiveService)
                ) && 
                (
                    PersonLivingSituation == other.PersonLivingSituation ||
                    PersonLivingSituation != null &&
                    PersonLivingSituation.SequenceEqual(other.PersonLivingSituation)
                ) && 
                (
                    PersonEducationTotalYears == other.PersonEducationTotalYears ||
                    PersonEducationTotalYears != null &&
                    PersonEducationTotalYears.SequenceEqual(other.PersonEducationTotalYears)
                ) && 
                (
                    PersonMedicalOperation == other.PersonMedicalOperation ||
                    PersonMedicalOperation != null &&
                    PersonMedicalOperation.SequenceEqual(other.PersonMedicalOperation)
                ) && 
                (
                    PersonNumberOfChildrenQuantity == other.PersonNumberOfChildrenQuantity ||
                    PersonNumberOfChildrenQuantity != null &&
                    PersonNumberOfChildrenQuantity.SequenceEqual(other.PersonNumberOfChildrenQuantity)
                ) && 
                (
                    PhysicalFeatureAlphaNumeric == other.PhysicalFeatureAlphaNumeric ||
                    PhysicalFeatureAlphaNumeric != null &&
                    PhysicalFeatureAlphaNumeric.SequenceEqual(other.PhysicalFeatureAlphaNumeric)
                ) && 
                (
                    IsPersonProtectionOrderRespondentInvolved == other.IsPersonProtectionOrderRespondentInvolved ||
                    IsPersonProtectionOrderRespondentInvolved != null &&
                    IsPersonProtectionOrderRespondentInvolved.SequenceEqual(other.IsPersonProtectionOrderRespondentInvolved)
                ) && 
                (
                    PersonProfessionalCertificate == other.PersonProfessionalCertificate ||
                    PersonProfessionalCertificate != null &&
                    PersonProfessionalCertificate.SequenceEqual(other.PersonProfessionalCertificate)
                ) && 
                (
                    IsPersonPhysicalDisability == other.IsPersonPhysicalDisability ||
                    IsPersonPhysicalDisability != null &&
                    IsPersonPhysicalDisability.SequenceEqual(other.IsPersonPhysicalDisability)
                ) && 
                (
                    PersonPhysicalDisabilityAwardedDate == other.PersonPhysicalDisabilityAwardedDate ||
                    PersonPhysicalDisabilityAwardedDate != null &&
                    PersonPhysicalDisabilityAwardedDate.SequenceEqual(other.PersonPhysicalDisabilityAwardedDate)
                ) && 
                (
                    PersonProtectionOrderConditions == other.PersonProtectionOrderConditions ||
                    PersonProtectionOrderConditions != null &&
                    PersonProtectionOrderConditions.SequenceEqual(other.PersonProtectionOrderConditions)
                ) && 
                (
                    PhysicalFeatureClass == other.PhysicalFeatureClass ||
                    PhysicalFeatureClass != null &&
                    PhysicalFeatureClass.SequenceEqual(other.PhysicalFeatureClass)
                ) && 
                (
                    PersonGamblingFrequency == other.PersonGamblingFrequency ||
                    PersonGamblingFrequency != null &&
                    PersonGamblingFrequency.SequenceEqual(other.PersonGamblingFrequency)
                ) && 
                (
                    PhysicalFeatureSizeDescription == other.PhysicalFeatureSizeDescription ||
                    PhysicalFeatureSizeDescription != null &&
                    PhysicalFeatureSizeDescription.SequenceEqual(other.PhysicalFeatureSizeDescription)
                ) && 
                (
                    IsPersonForeignNational == other.IsPersonForeignNational ||
                    IsPersonForeignNational != null &&
                    IsPersonForeignNational.SequenceEqual(other.IsPersonForeignNational)
                ) && 
                (
                    IsPersonEmployment == other.IsPersonEmployment ||
                    IsPersonEmployment != null &&
                    IsPersonEmployment.SequenceEqual(other.IsPersonEmployment)
                ) && 
                (
                    IsPersonMedicalInsurance == other.IsPersonMedicalInsurance ||
                    IsPersonMedicalInsurance != null &&
                    IsPersonMedicalInsurance.SequenceEqual(other.IsPersonMedicalInsurance)
                ) && 
                (
                    IsPersonSelfInflictedViolence == other.IsPersonSelfInflictedViolence ||
                    IsPersonSelfInflictedViolence != null &&
                    IsPersonSelfInflictedViolence.SequenceEqual(other.IsPersonSelfInflictedViolence)
                ) && 
                (
                    IsPersonProtectionOrderRespondent == other.IsPersonProtectionOrderRespondent ||
                    IsPersonProtectionOrderRespondent != null &&
                    IsPersonProtectionOrderRespondent.SequenceEqual(other.IsPersonProtectionOrderRespondent)
                ) && 
                (
                    IsPersonPsychologicalPsychiatricTreatment == other.IsPersonPsychologicalPsychiatricTreatment ||
                    IsPersonPsychologicalPsychiatricTreatment != null &&
                    IsPersonPsychologicalPsychiatricTreatment.SequenceEqual(other.IsPersonPsychologicalPsychiatricTreatment)
                ) && 
                (
                    IsPersonSmt == other.IsPersonSmt ||
                    IsPersonSmt != null &&
                    IsPersonSmt.SequenceEqual(other.IsPersonSmt)
                ) && 
                (
                    IsPersonDrugAlcoholAbuseTreatment == other.IsPersonDrugAlcoholAbuseTreatment ||
                    IsPersonDrugAlcoholAbuseTreatment != null &&
                    IsPersonDrugAlcoholAbuseTreatment.SequenceEqual(other.IsPersonDrugAlcoholAbuseTreatment)
                ) && 
                (
                    IsPersonGamblingTreatment == other.IsPersonGamblingTreatment ||
                    IsPersonGamblingTreatment != null &&
                    IsPersonGamblingTreatment.SequenceEqual(other.IsPersonGamblingTreatment)
                ) && 
                (
                    PhysicalFeatureSubClass == other.PhysicalFeatureSubClass ||
                    PhysicalFeatureSubClass != null &&
                    PhysicalFeatureSubClass.SequenceEqual(other.PhysicalFeatureSubClass)
                ) && 
                (
                    IsPersonForeignBorn == other.IsPersonForeignBorn ||
                    IsPersonForeignBorn != null &&
                    IsPersonForeignBorn.SequenceEqual(other.IsPersonForeignBorn)
                ) && 
                (
                    IsPersonProtectionOrderPetitioner == other.IsPersonProtectionOrderPetitioner ||
                    IsPersonProtectionOrderPetitioner != null &&
                    IsPersonProtectionOrderPetitioner.SequenceEqual(other.IsPersonProtectionOrderPetitioner)
                ) && 
                (
                    IsPersonAdult == other.IsPersonAdult ||
                    IsPersonAdult != null &&
                    IsPersonAdult.SequenceEqual(other.IsPersonAdult)
                ) && 
                (
                    IsDnaCollected == other.IsDnaCollected ||
                    IsDnaCollected != null &&
                    IsDnaCollected.SequenceEqual(other.IsDnaCollected)
                ) && 
                (
                    IsPersonDeportee == other.IsPersonDeportee ||
                    IsPersonDeportee != null &&
                    IsPersonDeportee.SequenceEqual(other.IsPersonDeportee)
                ) && 
                (
                    IsPersonDentalRecordsAvailable == other.IsPersonDentalRecordsAvailable ||
                    IsPersonDentalRecordsAvailable != null &&
                    IsPersonDentalRecordsAvailable.SequenceEqual(other.IsPersonDentalRecordsAvailable)
                ) && 
                (
                    PersonDentalCharacteristicCode == other.PersonDentalCharacteristicCode ||
                    PersonDentalCharacteristicCode != null &&
                    PersonDentalCharacteristicCode.SequenceEqual(other.PersonDentalCharacteristicCode)
                ) && 
                (
                    PersonDentalCharacteristicNcicCode == other.PersonDentalCharacteristicNcicCode ||
                    PersonDentalCharacteristicNcicCode != null &&
                    PersonDentalCharacteristicNcicCode.SequenceEqual(other.PersonDentalCharacteristicNcicCode)
                ) && 
                (
                    PersonDentalCharacteristic == other.PersonDentalCharacteristic ||
                    PersonDentalCharacteristic != null &&
                    PersonDentalCharacteristic.SequenceEqual(other.PersonDentalCharacteristic)
                ) && 
                (
                    PersonConcealedFirearmPermitIdentification == other.PersonConcealedFirearmPermitIdentification ||
                    PersonConcealedFirearmPermitIdentification != null &&
                    PersonConcealedFirearmPermitIdentification.SequenceEqual(other.PersonConcealedFirearmPermitIdentification)
                ) && 
                (
                    IsPersonCollegeDegree == other.IsPersonCollegeDegree ||
                    IsPersonCollegeDegree != null &&
                    IsPersonCollegeDegree.SequenceEqual(other.IsPersonCollegeDegree)
                ) && 
                (
                    DriverLicensePermit == other.DriverLicensePermit ||
                    DriverLicensePermit != null &&
                    DriverLicensePermit.SequenceEqual(other.DriverLicensePermit)
                ) && 
                (
                    PersonAfisIdentification == other.PersonAfisIdentification ||
                    PersonAfisIdentification != null &&
                    PersonAfisIdentification.SequenceEqual(other.PersonAfisIdentification)
                ) && 
                (
                    PersonBodyParts == other.PersonBodyParts ||
                    PersonBodyParts != null &&
                    PersonBodyParts.SequenceEqual(other.PersonBodyParts)
                ) && 
                (
                    PersonCharge == other.PersonCharge ||
                    PersonCharge != null &&
                    PersonCharge.SequenceEqual(other.PersonCharge)
                ) && 
                (
                    IsPersonConcealedFirearmPermitHolder == other.IsPersonConcealedFirearmPermitHolder ||
                    IsPersonConcealedFirearmPermitHolder != null &&
                    IsPersonConcealedFirearmPermitHolder.SequenceEqual(other.IsPersonConcealedFirearmPermitHolder)
                ) && 
                (
                    PersonDentalCharacteristicGeneral == other.PersonDentalCharacteristicGeneral ||
                    PersonDentalCharacteristicGeneral != null &&
                    PersonDentalCharacteristicGeneral.SequenceEqual(other.PersonDentalCharacteristicGeneral)
                ) && 
                (
                    PersonDentalCharacteristicRemovableAppliances == other.PersonDentalCharacteristicRemovableAppliances ||
                    PersonDentalCharacteristicRemovableAppliances != null &&
                    PersonDentalCharacteristicRemovableAppliances.SequenceEqual(other.PersonDentalCharacteristicRemovableAppliances)
                ) && 
                (
                    IsPersonDentalPhotoModelAvailable == other.IsPersonDentalPhotoModelAvailable ||
                    IsPersonDentalPhotoModelAvailable != null &&
                    IsPersonDentalPhotoModelAvailable.SequenceEqual(other.IsPersonDentalPhotoModelAvailable)
                ) && 
                (
                    IsPersonDentalXRayAvailable == other.IsPersonDentalXRayAvailable ||
                    IsPersonDentalXRayAvailable != null &&
                    IsPersonDentalXRayAvailable.SequenceEqual(other.IsPersonDentalXRayAvailable)
                ) && 
                (
                    IsPersonSighted == other.IsPersonSighted ||
                    IsPersonSighted != null &&
                    IsPersonSighted.SequenceEqual(other.IsPersonSighted)
                ) && 
                (
                    PersonDrivingIncident == other.PersonDrivingIncident ||
                    PersonDrivingIncident != null &&
                    PersonDrivingIncident.SequenceEqual(other.PersonDrivingIncident)
                ) && 
                (
                    PersonDrivingInsuranceCoverageCategory == other.PersonDrivingInsuranceCoverageCategory ||
                    PersonDrivingInsuranceCoverageCategory != null &&
                    PersonDrivingInsuranceCoverageCategory.SequenceEqual(other.PersonDrivingInsuranceCoverageCategory)
                ) && 
                (
                    PersonDrivingInsuranceStatus == other.PersonDrivingInsuranceStatus ||
                    PersonDrivingInsuranceStatus != null &&
                    PersonDrivingInsuranceStatus.SequenceEqual(other.PersonDrivingInsuranceStatus)
                ) && 
                (
                    PersonEmancipationDate == other.PersonEmancipationDate ||
                    PersonEmancipationDate != null &&
                    PersonEmancipationDate.SequenceEqual(other.PersonEmancipationDate)
                ) && 
                (
                    PersonFbiIdentification == other.PersonFbiIdentification ||
                    PersonFbiIdentification != null &&
                    PersonFbiIdentification.SequenceEqual(other.PersonFbiIdentification)
                ) && 
                (
                    IsPersonFirearmPermitHolder == other.IsPersonFirearmPermitHolder ||
                    IsPersonFirearmPermitHolder != null &&
                    IsPersonFirearmPermitHolder.SequenceEqual(other.IsPersonFirearmPermitHolder)
                ) && 
                (
                    IsPersonFootPrintAvailable == other.IsPersonFootPrintAvailable ||
                    IsPersonFootPrintAvailable != null &&
                    IsPersonFootPrintAvailable.SequenceEqual(other.IsPersonFootPrintAvailable)
                ) && 
                (
                    PersonGeneralLedgerIdentification == other.PersonGeneralLedgerIdentification ||
                    PersonGeneralLedgerIdentification != null &&
                    PersonGeneralLedgerIdentification.SequenceEqual(other.PersonGeneralLedgerIdentification)
                ) && 
                (
                    PersonIntoxication == other.PersonIntoxication ||
                    PersonIntoxication != null &&
                    PersonIntoxication.SequenceEqual(other.PersonIntoxication)
                ) && 
                (
                    PersonNcicIdentification == other.PersonNcicIdentification ||
                    PersonNcicIdentification != null &&
                    PersonNcicIdentification.SequenceEqual(other.PersonNcicIdentification)
                ) && 
                (
                    PersonPassword == other.PersonPassword ||
                    PersonPassword != null &&
                    PersonPassword.SequenceEqual(other.PersonPassword)
                ) && 
                (
                    PersonPrimaryWorker == other.PersonPrimaryWorker ||
                    PersonPrimaryWorker != null &&
                    PersonPrimaryWorker.SequenceEqual(other.PersonPrimaryWorker)
                ) && 
                (
                    PersonReferralWorker == other.PersonReferralWorker ||
                    PersonReferralWorker != null &&
                    PersonReferralWorker.SequenceEqual(other.PersonReferralWorker)
                ) && 
                (
                    IsPersonRegisteredOffender == other.IsPersonRegisteredOffender ||
                    IsPersonRegisteredOffender != null &&
                    IsPersonRegisteredOffender.SequenceEqual(other.IsPersonRegisteredOffender)
                ) && 
                (
                    PersonStateFingerprintIdentification == other.PersonStateFingerprintIdentification ||
                    PersonStateFingerprintIdentification != null &&
                    PersonStateFingerprintIdentification.SequenceEqual(other.PersonStateFingerprintIdentification)
                ) && 
                (
                    PersonTemporaryAssignmentUnit == other.PersonTemporaryAssignmentUnit ||
                    PersonTemporaryAssignmentUnit != null &&
                    PersonTemporaryAssignmentUnit.SequenceEqual(other.PersonTemporaryAssignmentUnit)
                ) && 
                (
                    PersonIssuedItemRegistrationTitle == other.PersonIssuedItemRegistrationTitle ||
                    PersonIssuedItemRegistrationTitle != null &&
                    PersonIssuedItemRegistrationTitle.SequenceEqual(other.PersonIssuedItemRegistrationTitle)
                ) && 
                (
                    PersonIssuedItemTitle == other.PersonIssuedItemTitle ||
                    PersonIssuedItemTitle != null &&
                    PersonIssuedItemTitle.SequenceEqual(other.PersonIssuedItemTitle)
                ) && 
                (
                    PersonVendorIdentification == other.PersonVendorIdentification ||
                    PersonVendorIdentification != null &&
                    PersonVendorIdentification.SequenceEqual(other.PersonVendorIdentification)
                ) && 
                (
                    PersonWorkLocationStructure == other.PersonWorkLocationStructure ||
                    PersonWorkLocationStructure != null &&
                    PersonWorkLocationStructure.SequenceEqual(other.PersonWorkLocationStructure)
                ) && 
                (
                    PersonCautionInformationCode == other.PersonCautionInformationCode ||
                    PersonCautionInformationCode != null &&
                    PersonCautionInformationCode.SequenceEqual(other.PersonCautionInformationCode)
                ) && 
                (
                    PersonCautionInformation == other.PersonCautionInformation ||
                    PersonCautionInformation != null &&
                    PersonCautionInformation.SequenceEqual(other.PersonCautionInformation)
                ) && 
                (
                    CrippledFingerPosition == other.CrippledFingerPosition ||
                    CrippledFingerPosition != null &&
                    CrippledFingerPosition.SequenceEqual(other.CrippledFingerPosition)
                ) && 
                (
                    DiscoloredFingerPosition == other.DiscoloredFingerPosition ||
                    DiscoloredFingerPosition != null &&
                    DiscoloredFingerPosition.SequenceEqual(other.DiscoloredFingerPosition)
                ) && 
                (
                    FracturedFingerPosition == other.FracturedFingerPosition ||
                    FracturedFingerPosition != null &&
                    FracturedFingerPosition.SequenceEqual(other.FracturedFingerPosition)
                ) && 
                (
                    HealedFracturedFingerPosition == other.HealedFracturedFingerPosition ||
                    HealedFracturedFingerPosition != null &&
                    HealedFracturedFingerPosition.SequenceEqual(other.HealedFracturedFingerPosition)
                ) && 
                (
                    MissingFingerPosition == other.MissingFingerPosition ||
                    MissingFingerPosition != null &&
                    MissingFingerPosition.SequenceEqual(other.MissingFingerPosition)
                ) && 
                (
                    NeedleMarkFingerPosition == other.NeedleMarkFingerPosition ||
                    NeedleMarkFingerPosition != null &&
                    NeedleMarkFingerPosition.SequenceEqual(other.NeedleMarkFingerPosition)
                ) && 
                (
                    MoleFingerPosition == other.MoleFingerPosition ||
                    MoleFingerPosition != null &&
                    MoleFingerPosition.SequenceEqual(other.MoleFingerPosition)
                ) && 
                (
                    PersonBirthplaceCode == other.PersonBirthplaceCode ||
                    PersonBirthplaceCode != null &&
                    PersonBirthplaceCode.SequenceEqual(other.PersonBirthplaceCode)
                ) && 
                (
                    PersonHandednessCode == other.PersonHandednessCode ||
                    PersonHandednessCode != null &&
                    PersonHandednessCode.SequenceEqual(other.PersonHandednessCode)
                ) && 
                (
                    PersonHandedness == other.PersonHandedness ||
                    PersonHandedness != null &&
                    PersonHandedness.SequenceEqual(other.PersonHandedness)
                ) && 
                (
                    PersonHitResults == other.PersonHitResults ||
                    PersonHitResults != null &&
                    PersonHitResults.SequenceEqual(other.PersonHitResults)
                ) && 
                (
                    PersonSpeechDescriptionCode == other.PersonSpeechDescriptionCode ||
                    PersonSpeechDescriptionCode != null &&
                    PersonSpeechDescriptionCode.SequenceEqual(other.PersonSpeechDescriptionCode)
                ) && 
                (
                    HsPersonSexualOrientationCode == other.HsPersonSexualOrientationCode ||
                    HsPersonSexualOrientationCode != null &&
                    HsPersonSexualOrientationCode.SequenceEqual(other.HsPersonSexualOrientationCode)
                ) && 
                (
                    JPersonSexualOrientationCode == other.JPersonSexualOrientationCode ||
                    JPersonSexualOrientationCode != null &&
                    JPersonSexualOrientationCode.SequenceEqual(other.JPersonSexualOrientationCode)
                ) && 
                (
                    ScarFingerPosition == other.ScarFingerPosition ||
                    ScarFingerPosition != null &&
                    ScarFingerPosition.SequenceEqual(other.ScarFingerPosition)
                ) && 
                (
                    TattooFingerPosition == other.TattooFingerPosition ||
                    TattooFingerPosition != null &&
                    TattooFingerPosition.SequenceEqual(other.TattooFingerPosition)
                ) && 
                (
                    PersonDeath == other.PersonDeath ||
                    PersonDeath != null &&
                    PersonDeath.SequenceEqual(other.PersonDeath)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PersonDrugAlcoholUseDateRange != null)
                    hashCode = hashCode * 59 + PersonDrugAlcoholUseDateRange.GetHashCode();
                    if (PersonSignature != null)
                    hashCode = hashCode * 59 + PersonSignature.GetHashCode();
                    if (PersonInterpolIdentification != null)
                    hashCode = hashCode * 59 + PersonInterpolIdentification.GetHashCode();
                    if (PersonDrugAlcoholHistory != null)
                    hashCode = hashCode * 59 + PersonDrugAlcoholHistory.GetHashCode();
                    if (PersonDeaIdentification != null)
                    hashCode = hashCode * 59 + PersonDeaIdentification.GetHashCode();
                    if (CodisNumber != null)
                    hashCode = hashCode * 59 + CodisNumber.GetHashCode();
                    if (PersonBopRegisterNumberIdentification != null)
                    hashCode = hashCode * 59 + PersonBopRegisterNumberIdentification.GetHashCode();
                    if (PersonDrugAlcoholPaymentMethod != null)
                    hashCode = hashCode * 59 + PersonDrugAlcoholPaymentMethod.GetHashCode();
                    if (PersonDrugAlcoholUseFrequency != null)
                    hashCode = hashCode * 59 + PersonDrugAlcoholUseFrequency.GetHashCode();
                    if (IsPersonParolee != null)
                    hashCode = hashCode * 59 + IsPersonParolee.GetHashCode();
                    if (IsPersonHasChildren != null)
                    hashCode = hashCode * 59 + IsPersonHasChildren.GetHashCode();
                    if (IsPersonIllegalAlien != null)
                    hashCode = hashCode * 59 + IsPersonIllegalAlien.GetHashCode();
                    if (IsPersonDrugAlcoholUse != null)
                    hashCode = hashCode * 59 + IsPersonDrugAlcoholUse.GetHashCode();
                    if (IsPersonSuicideAttempt != null)
                    hashCode = hashCode * 59 + IsPersonSuicideAttempt.GetHashCode();
                    if (PersonUsmsFugitiveIdentification != null)
                    hashCode = hashCode * 59 + PersonUsmsFugitiveIdentification.GetHashCode();
                    if (PersonDrugAlcoholOfChoice != null)
                    hashCode = hashCode * 59 + PersonDrugAlcoholOfChoice.GetHashCode();
                    if (IsPersonDevelopmentDisability != null)
                    hashCode = hashCode * 59 + IsPersonDevelopmentDisability.GetHashCode();
                    if (IsPersonHearingProblem != null)
                    hashCode = hashCode * 59 + IsPersonHearingProblem.GetHashCode();
                    if (EmployeeOccupationCategory != null)
                    hashCode = hashCode * 59 + EmployeeOccupationCategory.GetHashCode();
                    if (IsPersonProbationer != null)
                    hashCode = hashCode * 59 + IsPersonProbationer.GetHashCode();
                    if (DnaCollectionStatus != null)
                    hashCode = hashCode * 59 + DnaCollectionStatus.GetHashCode();
                    if (DriverLicense != null)
                    hashCode = hashCode * 59 + DriverLicense.GetHashCode();
                    if (PersonClothing != null)
                    hashCode = hashCode * 59 + PersonClothing.GetHashCode();
                    if (PersonBirth != null)
                    hashCode = hashCode * 59 + PersonBirth.GetHashCode();
                    if (PersonRegistryOffenderClassification != null)
                    hashCode = hashCode * 59 + PersonRegistryOffenderClassification.GetHashCode();
                    if (PersonDexterity != null)
                    hashCode = hashCode * 59 + PersonDexterity.GetHashCode();
                    if (PersonDisabilityCategory != null)
                    hashCode = hashCode * 59 + PersonDisabilityCategory.GetHashCode();
                    if (IsPersonHasDisability != null)
                    hashCode = hashCode * 59 + IsPersonHasDisability.GetHashCode();
                    if (IsPersonIsStudent != null)
                    hashCode = hashCode * 59 + IsPersonIsStudent.GetHashCode();
                    if (IsPersonMilitaryVeteran != null)
                    hashCode = hashCode * 59 + IsPersonMilitaryVeteran.GetHashCode();
                    if (IsPersonPregnant != null)
                    hashCode = hashCode * 59 + IsPersonPregnant.GetHashCode();
                    if (IsPersonRegisteredForSelectiveService != null)
                    hashCode = hashCode * 59 + IsPersonRegisteredForSelectiveService.GetHashCode();
                    if (PersonLivingSituation != null)
                    hashCode = hashCode * 59 + PersonLivingSituation.GetHashCode();
                    if (PersonEducationTotalYears != null)
                    hashCode = hashCode * 59 + PersonEducationTotalYears.GetHashCode();
                    if (PersonMedicalOperation != null)
                    hashCode = hashCode * 59 + PersonMedicalOperation.GetHashCode();
                    if (PersonNumberOfChildrenQuantity != null)
                    hashCode = hashCode * 59 + PersonNumberOfChildrenQuantity.GetHashCode();
                    if (PhysicalFeatureAlphaNumeric != null)
                    hashCode = hashCode * 59 + PhysicalFeatureAlphaNumeric.GetHashCode();
                    if (IsPersonProtectionOrderRespondentInvolved != null)
                    hashCode = hashCode * 59 + IsPersonProtectionOrderRespondentInvolved.GetHashCode();
                    if (PersonProfessionalCertificate != null)
                    hashCode = hashCode * 59 + PersonProfessionalCertificate.GetHashCode();
                    if (IsPersonPhysicalDisability != null)
                    hashCode = hashCode * 59 + IsPersonPhysicalDisability.GetHashCode();
                    if (PersonPhysicalDisabilityAwardedDate != null)
                    hashCode = hashCode * 59 + PersonPhysicalDisabilityAwardedDate.GetHashCode();
                    if (PersonProtectionOrderConditions != null)
                    hashCode = hashCode * 59 + PersonProtectionOrderConditions.GetHashCode();
                    if (PhysicalFeatureClass != null)
                    hashCode = hashCode * 59 + PhysicalFeatureClass.GetHashCode();
                    if (PersonGamblingFrequency != null)
                    hashCode = hashCode * 59 + PersonGamblingFrequency.GetHashCode();
                    if (PhysicalFeatureSizeDescription != null)
                    hashCode = hashCode * 59 + PhysicalFeatureSizeDescription.GetHashCode();
                    if (IsPersonForeignNational != null)
                    hashCode = hashCode * 59 + IsPersonForeignNational.GetHashCode();
                    if (IsPersonEmployment != null)
                    hashCode = hashCode * 59 + IsPersonEmployment.GetHashCode();
                    if (IsPersonMedicalInsurance != null)
                    hashCode = hashCode * 59 + IsPersonMedicalInsurance.GetHashCode();
                    if (IsPersonSelfInflictedViolence != null)
                    hashCode = hashCode * 59 + IsPersonSelfInflictedViolence.GetHashCode();
                    if (IsPersonProtectionOrderRespondent != null)
                    hashCode = hashCode * 59 + IsPersonProtectionOrderRespondent.GetHashCode();
                    if (IsPersonPsychologicalPsychiatricTreatment != null)
                    hashCode = hashCode * 59 + IsPersonPsychologicalPsychiatricTreatment.GetHashCode();
                    if (IsPersonSmt != null)
                    hashCode = hashCode * 59 + IsPersonSmt.GetHashCode();
                    if (IsPersonDrugAlcoholAbuseTreatment != null)
                    hashCode = hashCode * 59 + IsPersonDrugAlcoholAbuseTreatment.GetHashCode();
                    if (IsPersonGamblingTreatment != null)
                    hashCode = hashCode * 59 + IsPersonGamblingTreatment.GetHashCode();
                    if (PhysicalFeatureSubClass != null)
                    hashCode = hashCode * 59 + PhysicalFeatureSubClass.GetHashCode();
                    if (IsPersonForeignBorn != null)
                    hashCode = hashCode * 59 + IsPersonForeignBorn.GetHashCode();
                    if (IsPersonProtectionOrderPetitioner != null)
                    hashCode = hashCode * 59 + IsPersonProtectionOrderPetitioner.GetHashCode();
                    if (IsPersonAdult != null)
                    hashCode = hashCode * 59 + IsPersonAdult.GetHashCode();
                    if (IsDnaCollected != null)
                    hashCode = hashCode * 59 + IsDnaCollected.GetHashCode();
                    if (IsPersonDeportee != null)
                    hashCode = hashCode * 59 + IsPersonDeportee.GetHashCode();
                    if (IsPersonDentalRecordsAvailable != null)
                    hashCode = hashCode * 59 + IsPersonDentalRecordsAvailable.GetHashCode();
                    if (PersonDentalCharacteristicCode != null)
                    hashCode = hashCode * 59 + PersonDentalCharacteristicCode.GetHashCode();
                    if (PersonDentalCharacteristicNcicCode != null)
                    hashCode = hashCode * 59 + PersonDentalCharacteristicNcicCode.GetHashCode();
                    if (PersonDentalCharacteristic != null)
                    hashCode = hashCode * 59 + PersonDentalCharacteristic.GetHashCode();
                    if (PersonConcealedFirearmPermitIdentification != null)
                    hashCode = hashCode * 59 + PersonConcealedFirearmPermitIdentification.GetHashCode();
                    if (IsPersonCollegeDegree != null)
                    hashCode = hashCode * 59 + IsPersonCollegeDegree.GetHashCode();
                    if (DriverLicensePermit != null)
                    hashCode = hashCode * 59 + DriverLicensePermit.GetHashCode();
                    if (PersonAfisIdentification != null)
                    hashCode = hashCode * 59 + PersonAfisIdentification.GetHashCode();
                    if (PersonBodyParts != null)
                    hashCode = hashCode * 59 + PersonBodyParts.GetHashCode();
                    if (PersonCharge != null)
                    hashCode = hashCode * 59 + PersonCharge.GetHashCode();
                    if (IsPersonConcealedFirearmPermitHolder != null)
                    hashCode = hashCode * 59 + IsPersonConcealedFirearmPermitHolder.GetHashCode();
                    if (PersonDentalCharacteristicGeneral != null)
                    hashCode = hashCode * 59 + PersonDentalCharacteristicGeneral.GetHashCode();
                    if (PersonDentalCharacteristicRemovableAppliances != null)
                    hashCode = hashCode * 59 + PersonDentalCharacteristicRemovableAppliances.GetHashCode();
                    if (IsPersonDentalPhotoModelAvailable != null)
                    hashCode = hashCode * 59 + IsPersonDentalPhotoModelAvailable.GetHashCode();
                    if (IsPersonDentalXRayAvailable != null)
                    hashCode = hashCode * 59 + IsPersonDentalXRayAvailable.GetHashCode();
                    if (IsPersonSighted != null)
                    hashCode = hashCode * 59 + IsPersonSighted.GetHashCode();
                    if (PersonDrivingIncident != null)
                    hashCode = hashCode * 59 + PersonDrivingIncident.GetHashCode();
                    if (PersonDrivingInsuranceCoverageCategory != null)
                    hashCode = hashCode * 59 + PersonDrivingInsuranceCoverageCategory.GetHashCode();
                    if (PersonDrivingInsuranceStatus != null)
                    hashCode = hashCode * 59 + PersonDrivingInsuranceStatus.GetHashCode();
                    if (PersonEmancipationDate != null)
                    hashCode = hashCode * 59 + PersonEmancipationDate.GetHashCode();
                    if (PersonFbiIdentification != null)
                    hashCode = hashCode * 59 + PersonFbiIdentification.GetHashCode();
                    if (IsPersonFirearmPermitHolder != null)
                    hashCode = hashCode * 59 + IsPersonFirearmPermitHolder.GetHashCode();
                    if (IsPersonFootPrintAvailable != null)
                    hashCode = hashCode * 59 + IsPersonFootPrintAvailable.GetHashCode();
                    if (PersonGeneralLedgerIdentification != null)
                    hashCode = hashCode * 59 + PersonGeneralLedgerIdentification.GetHashCode();
                    if (PersonIntoxication != null)
                    hashCode = hashCode * 59 + PersonIntoxication.GetHashCode();
                    if (PersonNcicIdentification != null)
                    hashCode = hashCode * 59 + PersonNcicIdentification.GetHashCode();
                    if (PersonPassword != null)
                    hashCode = hashCode * 59 + PersonPassword.GetHashCode();
                    if (PersonPrimaryWorker != null)
                    hashCode = hashCode * 59 + PersonPrimaryWorker.GetHashCode();
                    if (PersonReferralWorker != null)
                    hashCode = hashCode * 59 + PersonReferralWorker.GetHashCode();
                    if (IsPersonRegisteredOffender != null)
                    hashCode = hashCode * 59 + IsPersonRegisteredOffender.GetHashCode();
                    if (PersonStateFingerprintIdentification != null)
                    hashCode = hashCode * 59 + PersonStateFingerprintIdentification.GetHashCode();
                    if (PersonTemporaryAssignmentUnit != null)
                    hashCode = hashCode * 59 + PersonTemporaryAssignmentUnit.GetHashCode();
                    if (PersonIssuedItemRegistrationTitle != null)
                    hashCode = hashCode * 59 + PersonIssuedItemRegistrationTitle.GetHashCode();
                    if (PersonIssuedItemTitle != null)
                    hashCode = hashCode * 59 + PersonIssuedItemTitle.GetHashCode();
                    if (PersonVendorIdentification != null)
                    hashCode = hashCode * 59 + PersonVendorIdentification.GetHashCode();
                    if (PersonWorkLocationStructure != null)
                    hashCode = hashCode * 59 + PersonWorkLocationStructure.GetHashCode();
                    if (PersonCautionInformationCode != null)
                    hashCode = hashCode * 59 + PersonCautionInformationCode.GetHashCode();
                    if (PersonCautionInformation != null)
                    hashCode = hashCode * 59 + PersonCautionInformation.GetHashCode();
                    if (CrippledFingerPosition != null)
                    hashCode = hashCode * 59 + CrippledFingerPosition.GetHashCode();
                    if (DiscoloredFingerPosition != null)
                    hashCode = hashCode * 59 + DiscoloredFingerPosition.GetHashCode();
                    if (FracturedFingerPosition != null)
                    hashCode = hashCode * 59 + FracturedFingerPosition.GetHashCode();
                    if (HealedFracturedFingerPosition != null)
                    hashCode = hashCode * 59 + HealedFracturedFingerPosition.GetHashCode();
                    if (MissingFingerPosition != null)
                    hashCode = hashCode * 59 + MissingFingerPosition.GetHashCode();
                    if (NeedleMarkFingerPosition != null)
                    hashCode = hashCode * 59 + NeedleMarkFingerPosition.GetHashCode();
                    if (MoleFingerPosition != null)
                    hashCode = hashCode * 59 + MoleFingerPosition.GetHashCode();
                    if (PersonBirthplaceCode != null)
                    hashCode = hashCode * 59 + PersonBirthplaceCode.GetHashCode();
                    if (PersonHandednessCode != null)
                    hashCode = hashCode * 59 + PersonHandednessCode.GetHashCode();
                    if (PersonHandedness != null)
                    hashCode = hashCode * 59 + PersonHandedness.GetHashCode();
                    if (PersonHitResults != null)
                    hashCode = hashCode * 59 + PersonHitResults.GetHashCode();
                    if (PersonSpeechDescriptionCode != null)
                    hashCode = hashCode * 59 + PersonSpeechDescriptionCode.GetHashCode();
                    if (HsPersonSexualOrientationCode != null)
                    hashCode = hashCode * 59 + HsPersonSexualOrientationCode.GetHashCode();
                    if (JPersonSexualOrientationCode != null)
                    hashCode = hashCode * 59 + JPersonSexualOrientationCode.GetHashCode();
                    if (ScarFingerPosition != null)
                    hashCode = hashCode * 59 + ScarFingerPosition.GetHashCode();
                    if (TattooFingerPosition != null)
                    hashCode = hashCode * 59 + TattooFingerPosition.GetHashCode();
                    if (PersonDeath != null)
                    hashCode = hashCode * 59 + PersonDeath.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPersonAugmentationType left, JPersonAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPersonAugmentationType left, JPersonAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
