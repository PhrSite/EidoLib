/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of minutiae definitions to be used for a feature set owner or developer other than the ones specifically defined in this standard
    /// </summary>
    [DataContract]
    public partial class BiomOtherMinutiaeType : IEquatable<BiomOtherMinutiaeType>
    { 
        /// <summary>
        /// A set of information regarding the captured (e.g., scanned) image NIEM reference is biom:ImageCaptureDetail
        /// </summary>
        /// <value>A set of information regarding the captured (e.g., scanned) image NIEM reference is biom:ImageCaptureDetail</value>

        [DataMember(Name="imageCaptureDetail")]
        public List<BiomImageCaptureType> ImageCaptureDetail { get; set; }

        /// <summary>
        /// A name of an editing station or owner or developer of a minutiae processing algorithm NIEM reference is biom:MinutiaeAlgorithmOwnerText
        /// </summary>
        /// <value>A name of an editing station or owner or developer of a minutiae processing algorithm NIEM reference is biom:MinutiaeAlgorithmOwnerText</value>

        [DataMember(Name="minutiaeAlgorithmOwner")]
        public List<NcTextType> MinutiaeAlgorithmOwner { get; set; }

        /// <summary>
        /// An algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithm
        /// </summary>
        /// <value>An algorithm used to capture minutiae NIEM reference is biom:MinutiaeAlgorithm</value>

        [DataMember(Name="minutiaeAlgorithm")]
        public List<BiomMinutiaeAlgorithmType> MinutiaeAlgorithm { get; set; }

        /// <summary>
        /// A data type for a set of information regarding the captured device information NIEM reference is biom:CaptureDevice
        /// </summary>
        /// <value>A data type for a set of information regarding the captured device information NIEM reference is biom:CaptureDevice</value>

        [DataMember(Name="captureDevice")]
        public List<BiomDeviceType> CaptureDevice { get; set; }

        /// <summary>
        /// A description of the contact information. NIEM reference is nc:ContactInformationDescriptionText
        /// </summary>
        /// <value>A description of the contact information. NIEM reference is nc:ContactInformationDescriptionText</value>

        [DataMember(Name="contactInformationDescription")]
        public List<NcTextType> ContactInformationDescription { get; set; }

        /// <summary>
        /// A minutia in a friction ridge image (Obsolete). NIEM reference is biom:FingerRidgeMinutia
        /// </summary>
        /// <value>A minutia in a friction ridge image (Obsolete). NIEM reference is biom:FingerRidgeMinutia</value>

        [DataMember(Name="fingerRidgeMinutia")]
        public List<BiomMinutiaType> FingerRidgeMinutia { get; set; }

        /// <summary>
        /// biomOtherMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomOtherMinutiaeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomOtherMinutiaeTypeContextJsonldEnum for ../JSON-LD_Contexts/biomOtherMinutiaeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomOtherMinutiaeTypeContext.jsonld")]
            JSONLDContextsbiomOtherMinutiaeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomOtherMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomOtherMinutiaeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomOtherMinutiaeType {\n");
            sb.Append("  ImageCaptureDetail: ").Append(ImageCaptureDetail).Append("\n");
            sb.Append("  MinutiaeAlgorithmOwner: ").Append(MinutiaeAlgorithmOwner).Append("\n");
            sb.Append("  MinutiaeAlgorithm: ").Append(MinutiaeAlgorithm).Append("\n");
            sb.Append("  CaptureDevice: ").Append(CaptureDevice).Append("\n");
            sb.Append("  ContactInformationDescription: ").Append(ContactInformationDescription).Append("\n");
            sb.Append("  FingerRidgeMinutia: ").Append(FingerRidgeMinutia).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomOtherMinutiaeType)obj);
        }

        /// <summary>
        /// Returns true if BiomOtherMinutiaeType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomOtherMinutiaeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomOtherMinutiaeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageCaptureDetail == other.ImageCaptureDetail ||
                    ImageCaptureDetail != null &&
                    ImageCaptureDetail.SequenceEqual(other.ImageCaptureDetail)
                ) && 
                (
                    MinutiaeAlgorithmOwner == other.MinutiaeAlgorithmOwner ||
                    MinutiaeAlgorithmOwner != null &&
                    MinutiaeAlgorithmOwner.SequenceEqual(other.MinutiaeAlgorithmOwner)
                ) && 
                (
                    MinutiaeAlgorithm == other.MinutiaeAlgorithm ||
                    MinutiaeAlgorithm != null &&
                    MinutiaeAlgorithm.SequenceEqual(other.MinutiaeAlgorithm)
                ) && 
                (
                    CaptureDevice == other.CaptureDevice ||
                    CaptureDevice != null &&
                    CaptureDevice.SequenceEqual(other.CaptureDevice)
                ) && 
                (
                    ContactInformationDescription == other.ContactInformationDescription ||
                    ContactInformationDescription != null &&
                    ContactInformationDescription.SequenceEqual(other.ContactInformationDescription)
                ) && 
                (
                    FingerRidgeMinutia == other.FingerRidgeMinutia ||
                    FingerRidgeMinutia != null &&
                    FingerRidgeMinutia.SequenceEqual(other.FingerRidgeMinutia)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageCaptureDetail != null)
                    hashCode = hashCode * 59 + ImageCaptureDetail.GetHashCode();
                    if (MinutiaeAlgorithmOwner != null)
                    hashCode = hashCode * 59 + MinutiaeAlgorithmOwner.GetHashCode();
                    if (MinutiaeAlgorithm != null)
                    hashCode = hashCode * 59 + MinutiaeAlgorithm.GetHashCode();
                    if (CaptureDevice != null)
                    hashCode = hashCode * 59 + CaptureDevice.GetHashCode();
                    if (ContactInformationDescription != null)
                    hashCode = hashCode * 59 + ContactInformationDescription.GetHashCode();
                    if (FingerRidgeMinutia != null)
                    hashCode = hashCode * 59 + FingerRidgeMinutia.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomOtherMinutiaeType left, BiomOtherMinutiaeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomOtherMinutiaeType left, BiomOtherMinutiaeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
