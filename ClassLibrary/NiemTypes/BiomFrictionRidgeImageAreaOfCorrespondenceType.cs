/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a portion of a friction ridge image that corresponds to another image
    /// </summary>
    [DataContract]
    public partial class BiomFrictionRidgeImageAreaOfCorrespondenceType : IEquatable<BiomFrictionRidgeImageAreaOfCorrespondenceType>
    { 
        /// <summary>
        /// An identification of a particular record in a transaction. (Obsolete, use ImageReferenceID) NIEM reference is biom:ImageReferenceIdentification
        /// </summary>
        /// <value>An identification of a particular record in a transaction. (Obsolete, use ImageReferenceID) NIEM reference is biom:ImageReferenceIdentification</value>

        [DataMember(Name="imageReferenceIdentification")]
        public List<NcIdentificationType> ImageReferenceIdentification { get; set; }

        /// <summary>
        /// An identifier for denoting (or indexing together) instances of a particular record in a transaction NIEM reference is biom:ImageReferenceID
        /// </summary>
        /// <value>An identifier for denoting (or indexing together) instances of a particular record in a transaction NIEM reference is biom:ImageReferenceID</value>

        [DataMember(Name="imageReferenceId")]
        public List<BiomInteger0to99Type> ImageReferenceId { get; set; }

        /// <summary>
        /// A set of vertices within an image describing a polygon-shaped region NIEM reference is biom:ImageSegmentPolygon
        /// </summary>
        /// <value>A set of vertices within an image describing a polygon-shaped region NIEM reference is biom:ImageSegmentPolygon</value>

        [DataMember(Name="imageSegmentPolygon")]
        public List<BiomImageSegmentPolygonType> ImageSegmentPolygon { get; set; }

        /// <summary>
        /// A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText
        /// </summary>
        /// <value>A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText</value>

        [DataMember(Name="minutiaeComment")]
        public List<NcTextType> MinutiaeComment { get; set; }

        /// <summary>
        /// biomFrictionRidgeImageAreaOfCorrespondenceType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageAreaOfCorrespondenceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFrictionRidgeImageAreaOfCorrespondenceTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFrictionRidgeImageAreaOfCorrespondenceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFrictionRidgeImageAreaOfCorrespondenceTypeContext.jsonld")]
            JSONLDContextsbiomFrictionRidgeImageAreaOfCorrespondenceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFrictionRidgeImageAreaOfCorrespondenceType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageAreaOfCorrespondenceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFrictionRidgeImageAreaOfCorrespondenceType {\n");
            sb.Append("  ImageReferenceIdentification: ").Append(ImageReferenceIdentification).Append("\n");
            sb.Append("  ImageReferenceId: ").Append(ImageReferenceId).Append("\n");
            sb.Append("  ImageSegmentPolygon: ").Append(ImageSegmentPolygon).Append("\n");
            sb.Append("  MinutiaeComment: ").Append(MinutiaeComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFrictionRidgeImageAreaOfCorrespondenceType)obj);
        }

        /// <summary>
        /// Returns true if BiomFrictionRidgeImageAreaOfCorrespondenceType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFrictionRidgeImageAreaOfCorrespondenceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFrictionRidgeImageAreaOfCorrespondenceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageReferenceIdentification == other.ImageReferenceIdentification ||
                    ImageReferenceIdentification != null &&
                    ImageReferenceIdentification.SequenceEqual(other.ImageReferenceIdentification)
                ) && 
                (
                    ImageReferenceId == other.ImageReferenceId ||
                    ImageReferenceId != null &&
                    ImageReferenceId.SequenceEqual(other.ImageReferenceId)
                ) && 
                (
                    ImageSegmentPolygon == other.ImageSegmentPolygon ||
                    ImageSegmentPolygon != null &&
                    ImageSegmentPolygon.SequenceEqual(other.ImageSegmentPolygon)
                ) && 
                (
                    MinutiaeComment == other.MinutiaeComment ||
                    MinutiaeComment != null &&
                    MinutiaeComment.SequenceEqual(other.MinutiaeComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageReferenceIdentification != null)
                    hashCode = hashCode * 59 + ImageReferenceIdentification.GetHashCode();
                    if (ImageReferenceId != null)
                    hashCode = hashCode * 59 + ImageReferenceId.GetHashCode();
                    if (ImageSegmentPolygon != null)
                    hashCode = hashCode * 59 + ImageSegmentPolygon.GetHashCode();
                    if (MinutiaeComment != null)
                    hashCode = hashCode * 59 + MinutiaeComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFrictionRidgeImageAreaOfCorrespondenceType left, BiomFrictionRidgeImageAreaOfCorrespondenceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFrictionRidgeImageAreaOfCorrespondenceType left, BiomFrictionRidgeImageAreaOfCorrespondenceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
