/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a point of entry or a point of exit to a location or structure.
    /// </summary>
    [DataContract]
    public partial class JPassagePointType : NcActivityType, IEquatable<JPassagePointType>
    { 
        /// <summary>
        /// A status of the security system at a passage point. NIEM reference is j:PassagePointSecurityStatusCode
        /// </summary>
        /// <value>A status of the security system at a passage point. NIEM reference is j:PassagePointSecurityStatusCode</value>

        [DataMember(Name="securityStatusCode")]
        public List<NdexSecuritySystemStatusCodeType> SecurityStatusCode { get; set; }

        /// <summary>
        /// A status of the security system at a passage point. NIEM reference is j:PassagePointSecurityStatusText
        /// </summary>
        /// <value>A status of the security system at a passage point. NIEM reference is j:PassagePointSecurityStatusText</value>

        [DataMember(Name="securityStatus")]
        public List<NcTextType> SecurityStatus { get; set; }

        /// <summary>
        /// A description of an entry or exit point. NIEM reference is j:PassagePointDescriptionText
        /// </summary>
        /// <value>A description of an entry or exit point. NIEM reference is j:PassagePointDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A kind of security present at  a passage point. NIEM reference is j:PassagePointSecurityCategoryCode
        /// </summary>
        /// <value>A kind of security present at  a passage point. NIEM reference is j:PassagePointSecurityCategoryCode</value>

        [DataMember(Name="securityCategoryCode")]
        public List<NdexPremiseSecurityCategoryCodeType> SecurityCategoryCode { get; set; }

        /// <summary>
        /// A kind of security present at  a passage point. NIEM reference is j:PassagePointSecurityCategoryText
        /// </summary>
        /// <value>A kind of security present at  a passage point. NIEM reference is j:PassagePointSecurityCategoryText</value>

        [DataMember(Name="securityCategory")]
        public List<NcTextType> SecurityCategory { get; set; }

        /// <summary>
        /// A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodCode
        /// </summary>
        /// <value>A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodCode</value>

        [DataMember(Name="methodCode")]
        public List<UcrMethodOfEntryCodeType> MethodCode { get; set; }

        /// <summary>
        /// A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodNDExCode
        /// </summary>
        /// <value>A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodNDExCode</value>

        [DataMember(Name="methodNdExCode")]
        public List<JPassagePointMethodCodeType> MethodNdExCode { get; set; }

        /// <summary>
        /// A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodOfAccessCode
        /// </summary>
        /// <value>A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodOfAccessCode</value>

        [DataMember(Name="methodOfAccessCode")]
        public List<NdexMethodOfAccessCodeType> MethodOfAccessCode { get; set; }

        /// <summary>
        /// A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodOfAccessText
        /// </summary>
        /// <value>A method used to enter or exit through a passage point. NIEM reference is j:PassagePointMethodOfAccessText</value>

        [DataMember(Name="methodOfAccess")]
        public List<NcTextType> MethodOfAccess { get; set; }

        /// <summary>
        /// A point of entry or exit to a location or structure. NIEM reference is j:PassagePointText
        /// </summary>
        /// <value>A point of entry or exit to a location or structure. NIEM reference is j:PassagePointText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A kind of entry or exit point to a location or structure. NIEM reference is j:PassagePointCategoryText
        /// </summary>
        /// <value>A kind of entry or exit point to a location or structure. NIEM reference is j:PassagePointCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A point of entry or exit to a location or structure. NIEM reference is j:PassagePoint
        /// </summary>
        /// <value>A point of entry or exit to a location or structure. NIEM reference is j:PassagePoint</value>

        [DataMember(Name="passagePoint")]
        public List<JPassagePointType> PassagePoint { get; set; }

        /// <summary>
        /// jPassagePointType JSON-LD context
        /// </summary>
        /// <value>jPassagePointType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPassagePointTypeContextJsonldEnum for ../JSON-LD_Contexts/jPassagePointTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPassagePointTypeContext.jsonld")]
            JSONLDContextsjPassagePointTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPassagePointType JSON-LD context
        /// </summary>
        /// <value>jPassagePointType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPassagePointType {\n");
            sb.Append("  SecurityStatusCode: ").Append(SecurityStatusCode).Append("\n");
            sb.Append("  SecurityStatus: ").Append(SecurityStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SecurityCategoryCode: ").Append(SecurityCategoryCode).Append("\n");
            sb.Append("  SecurityCategory: ").Append(SecurityCategory).Append("\n");
            sb.Append("  MethodCode: ").Append(MethodCode).Append("\n");
            sb.Append("  MethodNdExCode: ").Append(MethodNdExCode).Append("\n");
            sb.Append("  MethodOfAccessCode: ").Append(MethodOfAccessCode).Append("\n");
            sb.Append("  MethodOfAccess: ").Append(MethodOfAccess).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  PassagePoint: ").Append(PassagePoint).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPassagePointType)obj);
        }

        /// <summary>
        /// Returns true if JPassagePointType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPassagePointType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPassagePointType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SecurityStatusCode == other.SecurityStatusCode ||
                    SecurityStatusCode != null &&
                    SecurityStatusCode.SequenceEqual(other.SecurityStatusCode)
                ) && 
                (
                    SecurityStatus == other.SecurityStatus ||
                    SecurityStatus != null &&
                    SecurityStatus.SequenceEqual(other.SecurityStatus)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    SecurityCategoryCode == other.SecurityCategoryCode ||
                    SecurityCategoryCode != null &&
                    SecurityCategoryCode.SequenceEqual(other.SecurityCategoryCode)
                ) && 
                (
                    SecurityCategory == other.SecurityCategory ||
                    SecurityCategory != null &&
                    SecurityCategory.SequenceEqual(other.SecurityCategory)
                ) && 
                (
                    MethodCode == other.MethodCode ||
                    MethodCode != null &&
                    MethodCode.SequenceEqual(other.MethodCode)
                ) && 
                (
                    MethodNdExCode == other.MethodNdExCode ||
                    MethodNdExCode != null &&
                    MethodNdExCode.SequenceEqual(other.MethodNdExCode)
                ) && 
                (
                    MethodOfAccessCode == other.MethodOfAccessCode ||
                    MethodOfAccessCode != null &&
                    MethodOfAccessCode.SequenceEqual(other.MethodOfAccessCode)
                ) && 
                (
                    MethodOfAccess == other.MethodOfAccess ||
                    MethodOfAccess != null &&
                    MethodOfAccess.SequenceEqual(other.MethodOfAccess)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    PassagePoint == other.PassagePoint ||
                    PassagePoint != null &&
                    PassagePoint.SequenceEqual(other.PassagePoint)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SecurityStatusCode != null)
                    hashCode = hashCode * 59 + SecurityStatusCode.GetHashCode();
                    if (SecurityStatus != null)
                    hashCode = hashCode * 59 + SecurityStatus.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (SecurityCategoryCode != null)
                    hashCode = hashCode * 59 + SecurityCategoryCode.GetHashCode();
                    if (SecurityCategory != null)
                    hashCode = hashCode * 59 + SecurityCategory.GetHashCode();
                    if (MethodCode != null)
                    hashCode = hashCode * 59 + MethodCode.GetHashCode();
                    if (MethodNdExCode != null)
                    hashCode = hashCode * 59 + MethodNdExCode.GetHashCode();
                    if (MethodOfAccessCode != null)
                    hashCode = hashCode * 59 + MethodOfAccessCode.GetHashCode();
                    if (MethodOfAccess != null)
                    hashCode = hashCode * 59 + MethodOfAccess.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (PassagePoint != null)
                    hashCode = hashCode * 59 + PassagePoint.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPassagePointType left, JPassagePointType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPassagePointType left, JPassagePointType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
