/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a treatment.
    /// </summary>
    [DataContract]
    public partial class HsTreatmentAugmentationType : IEquatable<HsTreatmentAugmentationType>
    { 
        /// <summary>
        /// A role of a juvenile, played by a person defined as a juvenile rather than an adult under the law. NIEM reference is hs:Juvenile
        /// </summary>
        /// <value>A role of a juvenile, played by a person defined as a juvenile rather than an adult under the law. NIEM reference is hs:Juvenile</value>

        [DataMember(Name="juvenile")]
        public List<HsJuvenileType> Juvenile { get; set; }

        /// <summary>
        /// An estimated length of a treatment program. NIEM reference is hs:TreatmentApproximateLengthText
        /// </summary>
        /// <value>An estimated length of a treatment program. NIEM reference is hs:TreatmentApproximateLengthText</value>

        [DataMember(Name="treatmentApproximateLength")]
        public List<NcTextType> TreatmentApproximateLength { get; set; }

        /// <summary>
        /// An assessment of a treatment program. NIEM reference is hs:TreatmentAssessment
        /// </summary>
        /// <value>An assessment of a treatment program. NIEM reference is hs:TreatmentAssessment</value>

        [DataMember(Name="treatmentAssessment")]
        public List<HsJuvenileAssessmentType> TreatmentAssessment { get; set; }

        /// <summary>
        /// A description of the focus of the treatment program. NIEM reference is hs:TreatmentFocusText
        /// </summary>
        /// <value>A description of the focus of the treatment program. NIEM reference is hs:TreatmentFocusText</value>

        [DataMember(Name="treatmentFocus")]
        public List<NcTextType> TreatmentFocus { get; set; }

        /// <summary>
        /// A person who provides therapy services. NIEM reference is hs:Therapist
        /// </summary>
        /// <value>A person who provides therapy services. NIEM reference is hs:Therapist</value>

        [DataMember(Name="therapist")]
        public List<NcPersonType> Therapist { get; set; }

        /// <summary>
        /// A description of a goal of a treatment program. NIEM reference is hs:TreatmentGoalDescriptionText
        /// </summary>
        /// <value>A description of a goal of a treatment program. NIEM reference is hs:TreatmentGoalDescriptionText</value>

        [DataMember(Name="treatmentGoalDescription")]
        public List<NcTextType> TreatmentGoalDescription { get; set; }

        /// <summary>
        /// A treatment program. NIEM reference is hs:TreatmentProgram
        /// </summary>
        /// <value>A treatment program. NIEM reference is hs:TreatmentProgram</value>

        [DataMember(Name="treatmentProgram")]
        public List<NcProgramType> TreatmentProgram { get; set; }

        /// <summary>
        /// A set of details about the progress made within a treatment program. NIEM reference is hs:TreatmentProgress
        /// </summary>
        /// <value>A set of details about the progress made within a treatment program. NIEM reference is hs:TreatmentProgress</value>

        [DataMember(Name="treatmentProgress")]
        public List<NcProgressType> TreatmentProgress { get; set; }

        /// <summary>
        /// A description of recommended treatment or services for a juvenile. NIEM reference is hs:TreatmentRecommendationDescriptionText
        /// </summary>
        /// <value>A description of recommended treatment or services for a juvenile. NIEM reference is hs:TreatmentRecommendationDescriptionText</value>

        [DataMember(Name="treatmentRecommendationDescription")]
        public List<NcTextType> TreatmentRecommendationDescription { get; set; }

        /// <summary>
        /// A referral to a treatment program. NIEM reference is hs:TreatmentReferral
        /// </summary>
        /// <value>A referral to a treatment program. NIEM reference is hs:TreatmentReferral</value>

        [DataMember(Name="treatmentReferral")]
        public List<NcReferralType> TreatmentReferral { get; set; }

        /// <summary>
        /// An entity supervising a treatment program. NIEM reference is hs:TreatmentSupervisorEntity
        /// </summary>
        /// <value>An entity supervising a treatment program. NIEM reference is hs:TreatmentSupervisorEntity</value>

        [DataMember(Name="treatmentSupervisorEntity")]
        public List<NcEntityType> TreatmentSupervisorEntity { get; set; }

        /// <summary>
        /// hsTreatmentAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsTreatmentAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsTreatmentAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/hsTreatmentAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsTreatmentAugmentationTypeContext.jsonld")]
            JSONLDContextshsTreatmentAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsTreatmentAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsTreatmentAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsTreatmentAugmentationType {\n");
            sb.Append("  Juvenile: ").Append(Juvenile).Append("\n");
            sb.Append("  TreatmentApproximateLength: ").Append(TreatmentApproximateLength).Append("\n");
            sb.Append("  TreatmentAssessment: ").Append(TreatmentAssessment).Append("\n");
            sb.Append("  TreatmentFocus: ").Append(TreatmentFocus).Append("\n");
            sb.Append("  Therapist: ").Append(Therapist).Append("\n");
            sb.Append("  TreatmentGoalDescription: ").Append(TreatmentGoalDescription).Append("\n");
            sb.Append("  TreatmentProgram: ").Append(TreatmentProgram).Append("\n");
            sb.Append("  TreatmentProgress: ").Append(TreatmentProgress).Append("\n");
            sb.Append("  TreatmentRecommendationDescription: ").Append(TreatmentRecommendationDescription).Append("\n");
            sb.Append("  TreatmentReferral: ").Append(TreatmentReferral).Append("\n");
            sb.Append("  TreatmentSupervisorEntity: ").Append(TreatmentSupervisorEntity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsTreatmentAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if HsTreatmentAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsTreatmentAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsTreatmentAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Juvenile == other.Juvenile ||
                    Juvenile != null &&
                    Juvenile.SequenceEqual(other.Juvenile)
                ) && 
                (
                    TreatmentApproximateLength == other.TreatmentApproximateLength ||
                    TreatmentApproximateLength != null &&
                    TreatmentApproximateLength.SequenceEqual(other.TreatmentApproximateLength)
                ) && 
                (
                    TreatmentAssessment == other.TreatmentAssessment ||
                    TreatmentAssessment != null &&
                    TreatmentAssessment.SequenceEqual(other.TreatmentAssessment)
                ) && 
                (
                    TreatmentFocus == other.TreatmentFocus ||
                    TreatmentFocus != null &&
                    TreatmentFocus.SequenceEqual(other.TreatmentFocus)
                ) && 
                (
                    Therapist == other.Therapist ||
                    Therapist != null &&
                    Therapist.SequenceEqual(other.Therapist)
                ) && 
                (
                    TreatmentGoalDescription == other.TreatmentGoalDescription ||
                    TreatmentGoalDescription != null &&
                    TreatmentGoalDescription.SequenceEqual(other.TreatmentGoalDescription)
                ) && 
                (
                    TreatmentProgram == other.TreatmentProgram ||
                    TreatmentProgram != null &&
                    TreatmentProgram.SequenceEqual(other.TreatmentProgram)
                ) && 
                (
                    TreatmentProgress == other.TreatmentProgress ||
                    TreatmentProgress != null &&
                    TreatmentProgress.SequenceEqual(other.TreatmentProgress)
                ) && 
                (
                    TreatmentRecommendationDescription == other.TreatmentRecommendationDescription ||
                    TreatmentRecommendationDescription != null &&
                    TreatmentRecommendationDescription.SequenceEqual(other.TreatmentRecommendationDescription)
                ) && 
                (
                    TreatmentReferral == other.TreatmentReferral ||
                    TreatmentReferral != null &&
                    TreatmentReferral.SequenceEqual(other.TreatmentReferral)
                ) && 
                (
                    TreatmentSupervisorEntity == other.TreatmentSupervisorEntity ||
                    TreatmentSupervisorEntity != null &&
                    TreatmentSupervisorEntity.SequenceEqual(other.TreatmentSupervisorEntity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Juvenile != null)
                    hashCode = hashCode * 59 + Juvenile.GetHashCode();
                    if (TreatmentApproximateLength != null)
                    hashCode = hashCode * 59 + TreatmentApproximateLength.GetHashCode();
                    if (TreatmentAssessment != null)
                    hashCode = hashCode * 59 + TreatmentAssessment.GetHashCode();
                    if (TreatmentFocus != null)
                    hashCode = hashCode * 59 + TreatmentFocus.GetHashCode();
                    if (Therapist != null)
                    hashCode = hashCode * 59 + Therapist.GetHashCode();
                    if (TreatmentGoalDescription != null)
                    hashCode = hashCode * 59 + TreatmentGoalDescription.GetHashCode();
                    if (TreatmentProgram != null)
                    hashCode = hashCode * 59 + TreatmentProgram.GetHashCode();
                    if (TreatmentProgress != null)
                    hashCode = hashCode * 59 + TreatmentProgress.GetHashCode();
                    if (TreatmentRecommendationDescription != null)
                    hashCode = hashCode * 59 + TreatmentRecommendationDescription.GetHashCode();
                    if (TreatmentReferral != null)
                    hashCode = hashCode * 59 + TreatmentReferral.GetHashCode();
                    if (TreatmentSupervisorEntity != null)
                    hashCode = hashCode * 59 + TreatmentSupervisorEntity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsTreatmentAugmentationType left, HsTreatmentAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsTreatmentAugmentationType left, HsTreatmentAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
