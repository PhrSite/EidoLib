/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a classification of Information that cannot be shared with the public or the subject of the information.
    /// </summary>
    [DataContract]
    public partial class JConfidentialInformationType : IEquatable<JConfidentialInformationType>
    { 
        /// <summary>
        /// A person or entity who supplied the confidential information. NIEM reference is j:ConfidentialInformationSource
        /// </summary>
        /// <value>A person or entity who supplied the confidential information. NIEM reference is j:ConfidentialInformationSource</value>

        [DataMember(Name="source")]
        public List<NcEntityType> Source { get; set; }

        /// <summary>
        /// A discussion of what was learned through the disclosure of this confidential information. NIEM reference is j:ConfidentialSubjectInfoKnowledgeText
        /// </summary>
        /// <value>A discussion of what was learned through the disclosure of this confidential information. NIEM reference is j:ConfidentialSubjectInfoKnowledgeText</value>

        [DataMember(Name="confidentialSubjectInfoKnowledge")]
        public List<NcTextType> ConfidentialSubjectInfoKnowledge { get; set; }

        /// <summary>
        /// A collection of artifacts, documents or other items related to a subject&#x27;s confidentiality. NIEM reference is j:ConfidentialityMaterial
        /// </summary>
        /// <value>A collection of artifacts, documents or other items related to a subject&#x27;s confidentiality. NIEM reference is j:ConfidentialityMaterial</value>

        [DataMember(Name="confidentialityMaterial")]
        public List<JConfidentialityMaterialType> ConfidentialityMaterial { get; set; }

        /// <summary>
        /// A document declaring a person or entity&#x27;s protection of confidentiality. NIEM reference is j:ConfidentialityDocument
        /// </summary>
        /// <value>A document declaring a person or entity&#x27;s protection of confidentiality. NIEM reference is j:ConfidentialityDocument</value>

        [DataMember(Name="confidentialityDocument")]
        public List<NcDocumentType> ConfidentialityDocument { get; set; }

        /// <summary>
        /// A date the confidential information was disclosed. NIEM reference is j:ConfidentialInformationRecordedDate
        /// </summary>
        /// <value>A date the confidential information was disclosed. NIEM reference is j:ConfidentialInformationRecordedDate</value>

        [DataMember(Name="recordedDate")]
        public List<NcDateType> RecordedDate { get; set; }

        /// <summary>
        /// A document containing confidential information. NIEM reference is j:ConfidentialInformationDocument
        /// </summary>
        /// <value>A document containing confidential information. NIEM reference is j:ConfidentialInformationDocument</value>

        [DataMember(Name="document")]
        public List<NcDocumentType> Document { get; set; }

        /// <summary>
        /// A name of a staff member associated with an instance of confidential information. NIEM reference is j:ConfidentialInformationAssociatedStaffMember
        /// </summary>
        /// <value>A name of a staff member associated with an instance of confidential information. NIEM reference is j:ConfidentialInformationAssociatedStaffMember</value>

        [DataMember(Name="associatedStaffMember")]
        public List<JStaffMemberType> AssociatedStaffMember { get; set; }

        /// <summary>
        /// A total amount of pages of a Confidentiality Information Listing. NIEM reference is j:ConfidentialityInformationListingPagesNumber
        /// </summary>
        /// <value>A total amount of pages of a Confidentiality Information Listing. NIEM reference is j:ConfidentialityInformationListingPagesNumber</value>

        [DataMember(Name="confidentialityInformationListingPagesNumber")]
        public List<NcAmountType> ConfidentialityInformationListingPagesNumber { get; set; }

        /// <summary>
        /// jConfidentialInformationType JSON-LD context
        /// </summary>
        /// <value>jConfidentialInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjConfidentialInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/jConfidentialInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jConfidentialInformationTypeContext.jsonld")]
            JSONLDContextsjConfidentialInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jConfidentialInformationType JSON-LD context
        /// </summary>
        /// <value>jConfidentialInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JConfidentialInformationType {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ConfidentialSubjectInfoKnowledge: ").Append(ConfidentialSubjectInfoKnowledge).Append("\n");
            sb.Append("  ConfidentialityMaterial: ").Append(ConfidentialityMaterial).Append("\n");
            sb.Append("  ConfidentialityDocument: ").Append(ConfidentialityDocument).Append("\n");
            sb.Append("  RecordedDate: ").Append(RecordedDate).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  AssociatedStaffMember: ").Append(AssociatedStaffMember).Append("\n");
            sb.Append("  ConfidentialityInformationListingPagesNumber: ").Append(ConfidentialityInformationListingPagesNumber).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JConfidentialInformationType)obj);
        }

        /// <summary>
        /// Returns true if JConfidentialInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JConfidentialInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JConfidentialInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.SequenceEqual(other.Source)
                ) && 
                (
                    ConfidentialSubjectInfoKnowledge == other.ConfidentialSubjectInfoKnowledge ||
                    ConfidentialSubjectInfoKnowledge != null &&
                    ConfidentialSubjectInfoKnowledge.SequenceEqual(other.ConfidentialSubjectInfoKnowledge)
                ) && 
                (
                    ConfidentialityMaterial == other.ConfidentialityMaterial ||
                    ConfidentialityMaterial != null &&
                    ConfidentialityMaterial.SequenceEqual(other.ConfidentialityMaterial)
                ) && 
                (
                    ConfidentialityDocument == other.ConfidentialityDocument ||
                    ConfidentialityDocument != null &&
                    ConfidentialityDocument.SequenceEqual(other.ConfidentialityDocument)
                ) && 
                (
                    RecordedDate == other.RecordedDate ||
                    RecordedDate != null &&
                    RecordedDate.SequenceEqual(other.RecordedDate)
                ) && 
                (
                    Document == other.Document ||
                    Document != null &&
                    Document.SequenceEqual(other.Document)
                ) && 
                (
                    AssociatedStaffMember == other.AssociatedStaffMember ||
                    AssociatedStaffMember != null &&
                    AssociatedStaffMember.SequenceEqual(other.AssociatedStaffMember)
                ) && 
                (
                    ConfidentialityInformationListingPagesNumber == other.ConfidentialityInformationListingPagesNumber ||
                    ConfidentialityInformationListingPagesNumber != null &&
                    ConfidentialityInformationListingPagesNumber.SequenceEqual(other.ConfidentialityInformationListingPagesNumber)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (ConfidentialSubjectInfoKnowledge != null)
                    hashCode = hashCode * 59 + ConfidentialSubjectInfoKnowledge.GetHashCode();
                    if (ConfidentialityMaterial != null)
                    hashCode = hashCode * 59 + ConfidentialityMaterial.GetHashCode();
                    if (ConfidentialityDocument != null)
                    hashCode = hashCode * 59 + ConfidentialityDocument.GetHashCode();
                    if (RecordedDate != null)
                    hashCode = hashCode * 59 + RecordedDate.GetHashCode();
                    if (Document != null)
                    hashCode = hashCode * 59 + Document.GetHashCode();
                    if (AssociatedStaffMember != null)
                    hashCode = hashCode * 59 + AssociatedStaffMember.GetHashCode();
                    if (ConfidentialityInformationListingPagesNumber != null)
                    hashCode = hashCode * 59 + ConfidentialityInformationListingPagesNumber.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JConfidentialInformationType left, JConfidentialInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JConfidentialInformationType left, JConfidentialInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
