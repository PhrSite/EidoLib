/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an image.
    /// </summary>
    [DataContract]
    public partial class JImageAugmentationType : IEquatable<JImageAugmentationType>
    { 
        /// <summary>
        /// A facial adornment or hair piece that appears in an image. NIEM reference is j:ImageFacialText
        /// </summary>
        /// <value>A facial adornment or hair piece that appears in an image. NIEM reference is j:ImageFacialText</value>

        [DataMember(Name="imageFacial")]
        public List<NcTextType> ImageFacial { get; set; }

        /// <summary>
        /// True if an image is of a juvenile; false otherwise. NIEM reference is j:ImageJuvenileIndicator
        /// </summary>
        /// <value>True if an image is of a juvenile; false otherwise. NIEM reference is j:ImageJuvenileIndicator</value>

        [DataMember(Name="isImageJuvenile")]
        public List<NiemXsboolean> IsImageJuvenile { get; set; }

        /// <summary>
        /// A unique identification assigned to an Image by the FBI National Crime Information Center. NIEM reference is j:ImageNCICIdentification
        /// </summary>
        /// <value>A unique identification assigned to an Image by the FBI National Crime Information Center. NIEM reference is j:ImageNCICIdentification</value>

        [DataMember(Name="imageNcicIdentification")]
        public List<NcIdentificationType> ImageNcicIdentification { get; set; }

        /// <summary>
        /// An angle of a person&#x27;s face in a photograph. NIEM reference is j:ImagePoseCode
        /// </summary>
        /// <value>An angle of a person&#x27;s face in a photograph. NIEM reference is j:ImagePoseCode</value>

        [DataMember(Name="imagePoseCode")]
        public List<NcImagePoseCodeType> ImagePoseCode { get; set; }

        /// <summary>
        /// An angle of a person&#x27;s face in a photograph. NIEM reference is j:ImagePoseText
        /// </summary>
        /// <value>An angle of a person&#x27;s face in a photograph. NIEM reference is j:ImagePoseText</value>

        [DataMember(Name="imagePose")]
        public List<NcTextType> ImagePose { get; set; }

        /// <summary>
        /// A kind of image that that has been taken. NIEM reference is j:ImageCategoryCode
        /// </summary>
        /// <value>A kind of image that that has been taken. NIEM reference is j:ImageCategoryCode</value>

        [DataMember(Name="imageCategoryCode")]
        public List<NcicIMTCodeType> ImageCategoryCode { get; set; }

        /// <summary>
        /// jImageAugmentationType JSON-LD context
        /// </summary>
        /// <value>jImageAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjImageAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jImageAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jImageAugmentationTypeContext.jsonld")]
            JSONLDContextsjImageAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jImageAugmentationType JSON-LD context
        /// </summary>
        /// <value>jImageAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JImageAugmentationType {\n");
            sb.Append("  ImageFacial: ").Append(ImageFacial).Append("\n");
            sb.Append("  IsImageJuvenile: ").Append(IsImageJuvenile).Append("\n");
            sb.Append("  ImageNcicIdentification: ").Append(ImageNcicIdentification).Append("\n");
            sb.Append("  ImagePoseCode: ").Append(ImagePoseCode).Append("\n");
            sb.Append("  ImagePose: ").Append(ImagePose).Append("\n");
            sb.Append("  ImageCategoryCode: ").Append(ImageCategoryCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JImageAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JImageAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JImageAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JImageAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageFacial == other.ImageFacial ||
                    ImageFacial != null &&
                    ImageFacial.SequenceEqual(other.ImageFacial)
                ) && 
                (
                    IsImageJuvenile == other.IsImageJuvenile ||
                    IsImageJuvenile != null &&
                    IsImageJuvenile.SequenceEqual(other.IsImageJuvenile)
                ) && 
                (
                    ImageNcicIdentification == other.ImageNcicIdentification ||
                    ImageNcicIdentification != null &&
                    ImageNcicIdentification.SequenceEqual(other.ImageNcicIdentification)
                ) && 
                (
                    ImagePoseCode == other.ImagePoseCode ||
                    ImagePoseCode != null &&
                    ImagePoseCode.SequenceEqual(other.ImagePoseCode)
                ) && 
                (
                    ImagePose == other.ImagePose ||
                    ImagePose != null &&
                    ImagePose.SequenceEqual(other.ImagePose)
                ) && 
                (
                    ImageCategoryCode == other.ImageCategoryCode ||
                    ImageCategoryCode != null &&
                    ImageCategoryCode.SequenceEqual(other.ImageCategoryCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageFacial != null)
                    hashCode = hashCode * 59 + ImageFacial.GetHashCode();
                    if (IsImageJuvenile != null)
                    hashCode = hashCode * 59 + IsImageJuvenile.GetHashCode();
                    if (ImageNcicIdentification != null)
                    hashCode = hashCode * 59 + ImageNcicIdentification.GetHashCode();
                    if (ImagePoseCode != null)
                    hashCode = hashCode * 59 + ImagePoseCode.GetHashCode();
                    if (ImagePose != null)
                    hashCode = hashCode * 59 + ImagePose.GetHashCode();
                    if (ImageCategoryCode != null)
                    hashCode = hashCode * 59 + ImageCategoryCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JImageAugmentationType left, JImageAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JImageAugmentationType left, JImageAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
