/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of minutiae definitions conforming to Section 5 of ANSI INCITS 378-2004 Standard
    /// </summary>
    [DataContract]
    public partial class BiomINCITSMinutiaeType : IEquatable<BiomINCITSMinutiaeType>
    { 
        /// <summary>
        /// A unique registered identifier of minutiae encoding equipment; 9.126c PID NIEM reference is biom:CBEFFProductID
        /// </summary>
        /// <value>A unique registered identifier of minutiae encoding equipment; 9.126c PID NIEM reference is biom:CBEFFProductID</value>

        [DataMember(Name="cbeffProductId")]
        public List<NiemXshexBinary> CbeffProductId { get; set; }

        /// <summary>
        /// A certification level achieved for a fingerprint capture device NIEM reference is biom:DeviceCertificationCode
        /// </summary>
        /// <value>A certification level achieved for a fingerprint capture device NIEM reference is biom:DeviceCertificationCode</value>

        [DataMember(Name="deviceCertificationCode")]
        public List<BiomDeviceCertificationCodeType> DeviceCertificationCode { get; set; }

        /// <summary>
        /// An identifier for a capture device NIEM reference is biom:DeviceID
        /// </summary>
        /// <value>An identifier for a capture device NIEM reference is biom:DeviceID</value>

        [DataMember(Name="deviceId")]
        public List<NcTextType> DeviceId { get; set; }

        /// <summary>
        /// A number of pixels on a single horizontal line of a variable-resolution image NIEM reference is biom:HorizontalLineLengthPixelQuantity
        /// </summary>
        /// <value>A number of pixels on a single horizontal line of a variable-resolution image NIEM reference is biom:HorizontalLineLengthPixelQuantity</value>

        [DataMember(Name="horizontalLineLengthPixelQuantity")]
        public List<BiomLargeLineLengthPixelQuantityType> HorizontalLineLengthPixelQuantity { get; set; }

        /// <summary>
        /// A number of pixels on a single vertical line of an image NIEM reference is biom:VerticalLineLengthPixelQuantity
        /// </summary>
        /// <value>A number of pixels on a single vertical line of an image NIEM reference is biom:VerticalLineLengthPixelQuantity</value>

        [DataMember(Name="verticalLineLengthPixelQuantity")]
        public List<BiomLargeLineLengthPixelQuantityType> VerticalLineLengthPixelQuantity { get; set; }

        /// <summary>
        /// A sampling frequency unit designator, pixels per inch, or pixels per centimeter NIEM reference is biom:ImageScaleUnitsCode
        /// </summary>
        /// <value>A sampling frequency unit designator, pixels per inch, or pixels per centimeter NIEM reference is biom:ImageScaleUnitsCode</value>

        [DataMember(Name="imageScaleUnitsCode")]
        public List<BiomScaleUnitsCodeType> ImageScaleUnitsCode { get; set; }

        /// <summary>
        /// A transmitted pixel density in horizontal direction NIEM reference is biom:ImageHorizontalPixelDensityValue
        /// </summary>
        /// <value>A transmitted pixel density in horizontal direction NIEM reference is biom:ImageHorizontalPixelDensityValue</value>

        [DataMember(Name="imageHorizontalPixelDensityValue")]
        public List<NiemXspositiveInteger> ImageHorizontalPixelDensityValue { get; set; }

        /// <summary>
        /// A transmitted pixel density in the vertical direction NIEM reference is biom:ImageVerticalPixelDensityValue
        /// </summary>
        /// <value>A transmitted pixel density in the vertical direction NIEM reference is biom:ImageVerticalPixelDensityValue</value>

        [DataMember(Name="imageVerticalPixelDensityValue")]
        public List<NiemXspositiveInteger> ImageVerticalPixelDensityValue { get; set; }

        /// <summary>
        /// A view number of a finger associated with minutiae data NIEM reference is biom:FingerViewNumeric
        /// </summary>
        /// <value>A view number of a finger associated with minutiae data NIEM reference is biom:FingerViewNumeric</value>

        [DataMember(Name="fingerViewNumeric")]
        public List<BiomFingerViewNumericType> FingerViewNumeric { get; set; }

        /// <summary>
        /// A finger position code NIEM reference is biom:FingerPositionCode
        /// </summary>
        /// <value>A finger position code NIEM reference is biom:FingerPositionCode</value>

        [DataMember(Name="fingerPositionCode")]
        public List<BiomFingerPositionCodeType> FingerPositionCode { get; set; }

        /// <summary>
        /// A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality
        /// </summary>
        /// <value>A quality of minutiae data in a record NIEM reference is biom:MinutiaeQuality</value>

        [DataMember(Name="minutiaeQuality")]
        public List<BiomImageQualityType> MinutiaeQuality { get; set; }

        /// <summary>
        /// A number of minutiae recorded in a record NIEM reference is biom:MinutiaeQuantity
        /// </summary>
        /// <value>A number of minutiae recorded in a record NIEM reference is biom:MinutiaeQuantity</value>

        [DataMember(Name="minutiaeQuantity")]
        public List<NiemXspositiveInteger> MinutiaeQuantity { get; set; }

        /// <summary>
        /// A single minutia, as defined by the ANSI INCITS 378-2004 Standard NIEM reference is biom:INCITSMinutia
        /// </summary>
        /// <value>A single minutia, as defined by the ANSI INCITS 378-2004 Standard NIEM reference is biom:INCITSMinutia</value>

        [DataMember(Name="incitsMinutia")]
        public List<BiomINCITSMinutiaType> IncitsMinutia { get; set; }

        /// <summary>
        /// A set of measurements of the distance between pairs of minutiae NIEM reference is biom:MinutiaeRidgeCountDetail
        /// </summary>
        /// <value>A set of measurements of the distance between pairs of minutiae NIEM reference is biom:MinutiaeRidgeCountDetail</value>

        [DataMember(Name="minutiaeRidgeCountDetail")]
        public List<BiomMinutiaeRidgeCountType> MinutiaeRidgeCountDetail { get; set; }

        /// <summary>
        /// A location of a fingerprint pattern&#x27;s core in a fingerprint image NIEM reference is biom:FingerprintPatternCoreLocation
        /// </summary>
        /// <value>A location of a fingerprint pattern&#x27;s core in a fingerprint image NIEM reference is biom:FingerprintPatternCoreLocation</value>

        [DataMember(Name="fingerprintPatternCoreLocation")]
        public List<BiomFingerprintFeatureLocationType> FingerprintPatternCoreLocation { get; set; }

        /// <summary>
        /// A location of a fingerprint pattern&#x27;s delta in a fingerprint image NIEM reference is biom:FingerprintPatternDeltaLocation
        /// </summary>
        /// <value>A location of a fingerprint pattern&#x27;s delta in a fingerprint image NIEM reference is biom:FingerprintPatternDeltaLocation</value>

        [DataMember(Name="fingerprintPatternDeltaLocation")]
        public List<BiomFingerprintDeltaLocationType> FingerprintPatternDeltaLocation { get; set; }

        /// <summary>
        /// biomINCITSMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomINCITSMinutiaeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomINCITSMinutiaeTypeContextJsonldEnum for ../JSON-LD_Contexts/biomINCITSMinutiaeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomINCITSMinutiaeTypeContext.jsonld")]
            JSONLDContextsbiomINCITSMinutiaeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomINCITSMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomINCITSMinutiaeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomINCITSMinutiaeType {\n");
            sb.Append("  CbeffProductId: ").Append(CbeffProductId).Append("\n");
            sb.Append("  DeviceCertificationCode: ").Append(DeviceCertificationCode).Append("\n");
            sb.Append("  DeviceId: ").Append(DeviceId).Append("\n");
            sb.Append("  HorizontalLineLengthPixelQuantity: ").Append(HorizontalLineLengthPixelQuantity).Append("\n");
            sb.Append("  VerticalLineLengthPixelQuantity: ").Append(VerticalLineLengthPixelQuantity).Append("\n");
            sb.Append("  ImageScaleUnitsCode: ").Append(ImageScaleUnitsCode).Append("\n");
            sb.Append("  ImageHorizontalPixelDensityValue: ").Append(ImageHorizontalPixelDensityValue).Append("\n");
            sb.Append("  ImageVerticalPixelDensityValue: ").Append(ImageVerticalPixelDensityValue).Append("\n");
            sb.Append("  FingerViewNumeric: ").Append(FingerViewNumeric).Append("\n");
            sb.Append("  FingerPositionCode: ").Append(FingerPositionCode).Append("\n");
            sb.Append("  MinutiaeQuality: ").Append(MinutiaeQuality).Append("\n");
            sb.Append("  MinutiaeQuantity: ").Append(MinutiaeQuantity).Append("\n");
            sb.Append("  IncitsMinutia: ").Append(IncitsMinutia).Append("\n");
            sb.Append("  MinutiaeRidgeCountDetail: ").Append(MinutiaeRidgeCountDetail).Append("\n");
            sb.Append("  FingerprintPatternCoreLocation: ").Append(FingerprintPatternCoreLocation).Append("\n");
            sb.Append("  FingerprintPatternDeltaLocation: ").Append(FingerprintPatternDeltaLocation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomINCITSMinutiaeType)obj);
        }

        /// <summary>
        /// Returns true if BiomINCITSMinutiaeType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomINCITSMinutiaeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomINCITSMinutiaeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CbeffProductId == other.CbeffProductId ||
                    CbeffProductId != null &&
                    CbeffProductId.SequenceEqual(other.CbeffProductId)
                ) && 
                (
                    DeviceCertificationCode == other.DeviceCertificationCode ||
                    DeviceCertificationCode != null &&
                    DeviceCertificationCode.SequenceEqual(other.DeviceCertificationCode)
                ) && 
                (
                    DeviceId == other.DeviceId ||
                    DeviceId != null &&
                    DeviceId.SequenceEqual(other.DeviceId)
                ) && 
                (
                    HorizontalLineLengthPixelQuantity == other.HorizontalLineLengthPixelQuantity ||
                    HorizontalLineLengthPixelQuantity != null &&
                    HorizontalLineLengthPixelQuantity.SequenceEqual(other.HorizontalLineLengthPixelQuantity)
                ) && 
                (
                    VerticalLineLengthPixelQuantity == other.VerticalLineLengthPixelQuantity ||
                    VerticalLineLengthPixelQuantity != null &&
                    VerticalLineLengthPixelQuantity.SequenceEqual(other.VerticalLineLengthPixelQuantity)
                ) && 
                (
                    ImageScaleUnitsCode == other.ImageScaleUnitsCode ||
                    ImageScaleUnitsCode != null &&
                    ImageScaleUnitsCode.SequenceEqual(other.ImageScaleUnitsCode)
                ) && 
                (
                    ImageHorizontalPixelDensityValue == other.ImageHorizontalPixelDensityValue ||
                    ImageHorizontalPixelDensityValue != null &&
                    ImageHorizontalPixelDensityValue.SequenceEqual(other.ImageHorizontalPixelDensityValue)
                ) && 
                (
                    ImageVerticalPixelDensityValue == other.ImageVerticalPixelDensityValue ||
                    ImageVerticalPixelDensityValue != null &&
                    ImageVerticalPixelDensityValue.SequenceEqual(other.ImageVerticalPixelDensityValue)
                ) && 
                (
                    FingerViewNumeric == other.FingerViewNumeric ||
                    FingerViewNumeric != null &&
                    FingerViewNumeric.SequenceEqual(other.FingerViewNumeric)
                ) && 
                (
                    FingerPositionCode == other.FingerPositionCode ||
                    FingerPositionCode != null &&
                    FingerPositionCode.SequenceEqual(other.FingerPositionCode)
                ) && 
                (
                    MinutiaeQuality == other.MinutiaeQuality ||
                    MinutiaeQuality != null &&
                    MinutiaeQuality.SequenceEqual(other.MinutiaeQuality)
                ) && 
                (
                    MinutiaeQuantity == other.MinutiaeQuantity ||
                    MinutiaeQuantity != null &&
                    MinutiaeQuantity.SequenceEqual(other.MinutiaeQuantity)
                ) && 
                (
                    IncitsMinutia == other.IncitsMinutia ||
                    IncitsMinutia != null &&
                    IncitsMinutia.SequenceEqual(other.IncitsMinutia)
                ) && 
                (
                    MinutiaeRidgeCountDetail == other.MinutiaeRidgeCountDetail ||
                    MinutiaeRidgeCountDetail != null &&
                    MinutiaeRidgeCountDetail.SequenceEqual(other.MinutiaeRidgeCountDetail)
                ) && 
                (
                    FingerprintPatternCoreLocation == other.FingerprintPatternCoreLocation ||
                    FingerprintPatternCoreLocation != null &&
                    FingerprintPatternCoreLocation.SequenceEqual(other.FingerprintPatternCoreLocation)
                ) && 
                (
                    FingerprintPatternDeltaLocation == other.FingerprintPatternDeltaLocation ||
                    FingerprintPatternDeltaLocation != null &&
                    FingerprintPatternDeltaLocation.SequenceEqual(other.FingerprintPatternDeltaLocation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CbeffProductId != null)
                    hashCode = hashCode * 59 + CbeffProductId.GetHashCode();
                    if (DeviceCertificationCode != null)
                    hashCode = hashCode * 59 + DeviceCertificationCode.GetHashCode();
                    if (DeviceId != null)
                    hashCode = hashCode * 59 + DeviceId.GetHashCode();
                    if (HorizontalLineLengthPixelQuantity != null)
                    hashCode = hashCode * 59 + HorizontalLineLengthPixelQuantity.GetHashCode();
                    if (VerticalLineLengthPixelQuantity != null)
                    hashCode = hashCode * 59 + VerticalLineLengthPixelQuantity.GetHashCode();
                    if (ImageScaleUnitsCode != null)
                    hashCode = hashCode * 59 + ImageScaleUnitsCode.GetHashCode();
                    if (ImageHorizontalPixelDensityValue != null)
                    hashCode = hashCode * 59 + ImageHorizontalPixelDensityValue.GetHashCode();
                    if (ImageVerticalPixelDensityValue != null)
                    hashCode = hashCode * 59 + ImageVerticalPixelDensityValue.GetHashCode();
                    if (FingerViewNumeric != null)
                    hashCode = hashCode * 59 + FingerViewNumeric.GetHashCode();
                    if (FingerPositionCode != null)
                    hashCode = hashCode * 59 + FingerPositionCode.GetHashCode();
                    if (MinutiaeQuality != null)
                    hashCode = hashCode * 59 + MinutiaeQuality.GetHashCode();
                    if (MinutiaeQuantity != null)
                    hashCode = hashCode * 59 + MinutiaeQuantity.GetHashCode();
                    if (IncitsMinutia != null)
                    hashCode = hashCode * 59 + IncitsMinutia.GetHashCode();
                    if (MinutiaeRidgeCountDetail != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeCountDetail.GetHashCode();
                    if (FingerprintPatternCoreLocation != null)
                    hashCode = hashCode * 59 + FingerprintPatternCoreLocation.GetHashCode();
                    if (FingerprintPatternDeltaLocation != null)
                    hashCode = hashCode * 59 + FingerprintPatternDeltaLocation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomINCITSMinutiaeType left, BiomINCITSMinutiaeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomINCITSMinutiaeType left, BiomINCITSMinutiaeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
