/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a treatment.
    /// </summary>
    [DataContract]
    public partial class JTreatmentAugmentationType : IEquatable<JTreatmentAugmentationType>
    { 
        /// <summary>
        /// A name of a Person&#x27;s prescribed medication NIEM reference is j:PrescribedMedicationName
        /// </summary>
        /// <value>A name of a Person&#x27;s prescribed medication NIEM reference is j:PrescribedMedicationName</value>

        [DataMember(Name="prescribedMedicationName")]
        public List<NcTextType> PrescribedMedicationName { get; set; }

        /// <summary>
        /// A reason provided for an person&#x27;s prescribed medication NIEM reference is j:PrescribedMedicationReasonText
        /// </summary>
        /// <value>A reason provided for an person&#x27;s prescribed medication NIEM reference is j:PrescribedMedicationReasonText</value>

        [DataMember(Name="prescribedMedicationReason")]
        public List<NcTextType> PrescribedMedicationReason { get; set; }

        /// <summary>
        /// True if a Person has been taking medication as prescribed; false otherwise. NIEM reference is j:PrescriptionOrderFollowedIndicator
        /// </summary>
        /// <value>True if a Person has been taking medication as prescribed; false otherwise. NIEM reference is j:PrescriptionOrderFollowedIndicator</value>

        [DataMember(Name="isPrescriptionOrderFollowed")]
        public List<NiemXsboolean> IsPrescriptionOrderFollowed { get; set; }

        /// <summary>
        /// True if a Person has been diagnosed with a Psychiatric Disorder; false otherwise. NIEM reference is j:PsychiatricDisorderIndicator
        /// </summary>
        /// <value>True if a Person has been diagnosed with a Psychiatric Disorder; false otherwise. NIEM reference is j:PsychiatricDisorderIndicator</value>

        [DataMember(Name="isPsychiatricDisorder")]
        public List<NiemXsboolean> IsPsychiatricDisorder { get; set; }

        /// <summary>
        /// True if a Person has been diagnosed with a   Psychological Disorder; false otherwise. NIEM reference is   j:PsychologicalDisorderIndicator 
        /// </summary>
        /// <value>True if a Person has been diagnosed with a   Psychological Disorder; false otherwise. NIEM reference is   j:PsychologicalDisorderIndicator </value>

        [DataMember(Name="isPsychologicalDisorder")]
        public List<NiemXsboolean> IsPsychologicalDisorder { get; set; }

        /// <summary>
        /// True if a Person has been diagnosed with a Physiological Disorder; false otherwise. NIEM reference is j:PhysiologicalDisorderIndicator
        /// </summary>
        /// <value>True if a Person has been diagnosed with a Physiological Disorder; false otherwise. NIEM reference is j:PhysiologicalDisorderIndicator</value>

        [DataMember(Name="isPhysiologicalDisorder")]
        public List<NiemXsboolean> IsPhysiologicalDisorder { get; set; }

        /// <summary>
        /// A  determining or analysis of the manner in which to treat the cause or nature of a problem NIEM reference is j:TreatmentDiagnosisText
        /// </summary>
        /// <value>A  determining or analysis of the manner in which to treat the cause or nature of a problem NIEM reference is j:TreatmentDiagnosisText</value>

        [DataMember(Name="treatmentDiagnosis")]
        public List<NcTextType> TreatmentDiagnosis { get; set; }

        /// <summary>
        /// A monetary fee associated with a treatment NIEM reference is j:PersonTreatmentFee
        /// </summary>
        /// <value>A monetary fee associated with a treatment NIEM reference is j:PersonTreatmentFee</value>

        [DataMember(Name="personTreatmentFee")]
        public List<NcObligationType> PersonTreatmentFee { get; set; }

        /// <summary>
        /// True if a Person has or is currently undergoing treatment; false otherwise. NIEM reference is j:TreatmentIndicator
        /// </summary>
        /// <value>True if a Person has or is currently undergoing treatment; false otherwise. NIEM reference is j:TreatmentIndicator</value>

        [DataMember(Name="isTreatment")]
        public List<NiemXsboolean> IsTreatment { get; set; }

        /// <summary>
        /// jTreatmentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jTreatmentAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjTreatmentAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jTreatmentAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jTreatmentAugmentationTypeContext.jsonld")]
            JSONLDContextsjTreatmentAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jTreatmentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jTreatmentAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JTreatmentAugmentationType {\n");
            sb.Append("  PrescribedMedicationName: ").Append(PrescribedMedicationName).Append("\n");
            sb.Append("  PrescribedMedicationReason: ").Append(PrescribedMedicationReason).Append("\n");
            sb.Append("  IsPrescriptionOrderFollowed: ").Append(IsPrescriptionOrderFollowed).Append("\n");
            sb.Append("  IsPsychiatricDisorder: ").Append(IsPsychiatricDisorder).Append("\n");
            sb.Append("  IsPsychologicalDisorder: ").Append(IsPsychologicalDisorder).Append("\n");
            sb.Append("  IsPhysiologicalDisorder: ").Append(IsPhysiologicalDisorder).Append("\n");
            sb.Append("  TreatmentDiagnosis: ").Append(TreatmentDiagnosis).Append("\n");
            sb.Append("  PersonTreatmentFee: ").Append(PersonTreatmentFee).Append("\n");
            sb.Append("  IsTreatment: ").Append(IsTreatment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JTreatmentAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JTreatmentAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JTreatmentAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JTreatmentAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PrescribedMedicationName == other.PrescribedMedicationName ||
                    PrescribedMedicationName != null &&
                    PrescribedMedicationName.SequenceEqual(other.PrescribedMedicationName)
                ) && 
                (
                    PrescribedMedicationReason == other.PrescribedMedicationReason ||
                    PrescribedMedicationReason != null &&
                    PrescribedMedicationReason.SequenceEqual(other.PrescribedMedicationReason)
                ) && 
                (
                    IsPrescriptionOrderFollowed == other.IsPrescriptionOrderFollowed ||
                    IsPrescriptionOrderFollowed != null &&
                    IsPrescriptionOrderFollowed.SequenceEqual(other.IsPrescriptionOrderFollowed)
                ) && 
                (
                    IsPsychiatricDisorder == other.IsPsychiatricDisorder ||
                    IsPsychiatricDisorder != null &&
                    IsPsychiatricDisorder.SequenceEqual(other.IsPsychiatricDisorder)
                ) && 
                (
                    IsPsychologicalDisorder == other.IsPsychologicalDisorder ||
                    IsPsychologicalDisorder != null &&
                    IsPsychologicalDisorder.SequenceEqual(other.IsPsychologicalDisorder)
                ) && 
                (
                    IsPhysiologicalDisorder == other.IsPhysiologicalDisorder ||
                    IsPhysiologicalDisorder != null &&
                    IsPhysiologicalDisorder.SequenceEqual(other.IsPhysiologicalDisorder)
                ) && 
                (
                    TreatmentDiagnosis == other.TreatmentDiagnosis ||
                    TreatmentDiagnosis != null &&
                    TreatmentDiagnosis.SequenceEqual(other.TreatmentDiagnosis)
                ) && 
                (
                    PersonTreatmentFee == other.PersonTreatmentFee ||
                    PersonTreatmentFee != null &&
                    PersonTreatmentFee.SequenceEqual(other.PersonTreatmentFee)
                ) && 
                (
                    IsTreatment == other.IsTreatment ||
                    IsTreatment != null &&
                    IsTreatment.SequenceEqual(other.IsTreatment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PrescribedMedicationName != null)
                    hashCode = hashCode * 59 + PrescribedMedicationName.GetHashCode();
                    if (PrescribedMedicationReason != null)
                    hashCode = hashCode * 59 + PrescribedMedicationReason.GetHashCode();
                    if (IsPrescriptionOrderFollowed != null)
                    hashCode = hashCode * 59 + IsPrescriptionOrderFollowed.GetHashCode();
                    if (IsPsychiatricDisorder != null)
                    hashCode = hashCode * 59 + IsPsychiatricDisorder.GetHashCode();
                    if (IsPsychologicalDisorder != null)
                    hashCode = hashCode * 59 + IsPsychologicalDisorder.GetHashCode();
                    if (IsPhysiologicalDisorder != null)
                    hashCode = hashCode * 59 + IsPhysiologicalDisorder.GetHashCode();
                    if (TreatmentDiagnosis != null)
                    hashCode = hashCode * 59 + TreatmentDiagnosis.GetHashCode();
                    if (PersonTreatmentFee != null)
                    hashCode = hashCode * 59 + PersonTreatmentFee.GetHashCode();
                    if (IsTreatment != null)
                    hashCode = hashCode * 59 + IsTreatment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JTreatmentAugmentationType left, JTreatmentAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JTreatmentAugmentationType left, JTreatmentAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
