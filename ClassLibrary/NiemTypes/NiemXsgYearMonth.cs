/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a specific gregorian month in a specific gregorian year.
    /// </summary>
    [DataContract]
    public partial class NiemXsgYearMonth : IEquatable<NiemXsgYearMonth>
    { 
        /// <summary>
        /// Gets or Sets Value
        /// </summary>

        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// niem-xsgYearMonth JSON-LD context
        /// </summary>
        /// <value>niem-xsgYearMonth JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsniemXsgYearMonthContextJsonldEnum for ../JSON-LD_Contexts/niem-xsgYearMonthContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/niem-xsgYearMonthContext.jsonld")]
            JSONLDContextsniemXsgYearMonthContextJsonldEnum = 0        }

        /// <summary>
        /// niem-xsgYearMonth JSON-LD context
        /// </summary>
        /// <value>niem-xsgYearMonth JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NiemXsgYearMonth {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NiemXsgYearMonth)obj);
        }

        /// <summary>
        /// Returns true if NiemXsgYearMonth instances are equal
        /// </summary>
        /// <param name="other">Instance of NiemXsgYearMonth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NiemXsgYearMonth other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NiemXsgYearMonth left, NiemXsgYearMonth right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NiemXsgYearMonth left, NiemXsgYearMonth right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
