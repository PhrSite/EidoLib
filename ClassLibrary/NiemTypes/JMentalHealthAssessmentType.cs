/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an activity of reviewing and assessing a subject&#x27;s mental health condition.
    /// </summary>
    [DataContract]
    public partial class JMentalHealthAssessmentType : NcAssessmentType, IEquatable<JMentalHealthAssessmentType>
    { 
        /// <summary>
        /// A symptom or measurement of mental health. NIEM reference is j:MentalHealthAssessmentFactor
        /// </summary>
        /// <value>A symptom or measurement of mental health. NIEM reference is j:MentalHealthAssessmentFactor</value>

        [DataMember(Name="factor")]
        public List<JMentalHealthAssessmentFactorType> Factor { get; set; }

        /// <summary>
        /// A staff member that screened the subject during a mental health assessment. NIEM reference is j:MentalHealthAssessmentScreeningStaffMember
        /// </summary>
        /// <value>A staff member that screened the subject during a mental health assessment. NIEM reference is j:MentalHealthAssessmentScreeningStaffMember</value>

        [DataMember(Name="screeningStaffMember")]
        public List<JStaffMemberType> ScreeningStaffMember { get; set; }

        /// <summary>
        /// An order for a subject to undergo a mental health assessment. NIEM reference is j:MentalHealthAssessmentReferral
        /// </summary>
        /// <value>An order for a subject to undergo a mental health assessment. NIEM reference is j:MentalHealthAssessmentReferral</value>

        [DataMember(Name="referral")]
        public List<NcReferralType> Referral { get; set; }

        /// <summary>
        /// True if a corrections facility psychiatric report was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentPsychiatricReportReviewedIndicator
        /// </summary>
        /// <value>True if a corrections facility psychiatric report was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentPsychiatricReportReviewedIndicator</value>

        [DataMember(Name="isPsychiatricReportReviewed")]
        public List<NiemXsboolean> IsPsychiatricReportReviewed { get; set; }

        /// <summary>
        /// A date of the corrections facility psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentPsychiatricReportDate
        /// </summary>
        /// <value>A date of the corrections facility psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentPsychiatricReportDate</value>

        [DataMember(Name="psychiatricReportDate")]
        public List<NcDateType> PsychiatricReportDate { get; set; }

        /// <summary>
        /// An author of the corrections facility psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentPsychiatricReportAuthorText
        /// </summary>
        /// <value>An author of the corrections facility psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentPsychiatricReportAuthorText</value>

        [DataMember(Name="psychiatricReportAuthor")]
        public List<NcTextType> PsychiatricReportAuthor { get; set; }

        /// <summary>
        /// True if the subject is cleared for general population; false otherwise. NIEM reference is j:MentalHealthSubjectClearedIndicator
        /// </summary>
        /// <value>True if the subject is cleared for general population; false otherwise. NIEM reference is j:MentalHealthSubjectClearedIndicator</value>

        [DataMember(Name="isMentalHealthSubjectCleared")]
        public List<NiemXsboolean> IsMentalHealthSubjectCleared { get; set; }

        /// <summary>
        /// True if the subject is in a mentally disordered offender (MDO) unit for severely mentally ill prisoners; false otherwise. NIEM reference is j:MentalHealthAssessmentMentallyDisorderedOffenderIndicator
        /// </summary>
        /// <value>True if the subject is in a mentally disordered offender (MDO) unit for severely mentally ill prisoners; false otherwise. NIEM reference is j:MentalHealthAssessmentMentallyDisorderedOffenderIndicator</value>

        [DataMember(Name="isMentallyDisorderedOffender")]
        public List<NiemXsboolean> IsMentallyDisorderedOffender { get; set; }

        /// <summary>
        /// True if the legal status summary was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentLegalStatusSummaryReviewedIndicator
        /// </summary>
        /// <value>True if the legal status summary was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentLegalStatusSummaryReviewedIndicator</value>

        [DataMember(Name="isLegalStatusSummaryReviewed")]
        public List<NiemXsboolean> IsLegalStatusSummaryReviewed { get; set; }

        /// <summary>
        /// True if a DMH psychiatric report was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportReviewedIndicator
        /// </summary>
        /// <value>True if a DMH psychiatric report was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportReviewedIndicator</value>

        [DataMember(Name="isDmhPsychiatricReportReviewed")]
        public List<NiemXsboolean> IsDmhPsychiatricReportReviewed { get; set; }

        /// <summary>
        /// True if the subject of a mental health assessment is due to a conviction for a violent sexual crime; false otherwise. NIEM reference is j:MentalHealthAssessmentReferralSexualViolentPredatorIndicator
        /// </summary>
        /// <value>True if the subject of a mental health assessment is due to a conviction for a violent sexual crime; false otherwise. NIEM reference is j:MentalHealthAssessmentReferralSexualViolentPredatorIndicator</value>

        [DataMember(Name="isReferralSexualViolentPredator")]
        public List<NiemXsboolean> IsReferralSexualViolentPredator { get; set; }

        /// <summary>
        /// A kind of mental health assessment services received. NIEM reference is j:MentalHealthAssessmentServicesReceivedText
        /// </summary>
        /// <value>A kind of mental health assessment services received. NIEM reference is j:MentalHealthAssessmentServicesReceivedText</value>

        [DataMember(Name="servicesReceived")]
        public List<NcTextType> ServicesReceived { get; set; }

        /// <summary>
        /// A date on which the Correctional Counselor screened the subject. NIEM reference is j:MentalHealthAssessmentCorrectionalCounselorIReviewDate
        /// </summary>
        /// <value>A date on which the Correctional Counselor screened the subject. NIEM reference is j:MentalHealthAssessmentCorrectionalCounselorIReviewDate</value>

        [DataMember(Name="correctionalCounselorIReviewDate")]
        public List<NcDateType> CorrectionalCounselorIReviewDate { get; set; }

        /// <summary>
        /// A name of the author of the DMH psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportAuthorText
        /// </summary>
        /// <value>A name of the author of the DMH psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportAuthorText</value>

        [DataMember(Name="dmhPsychiatricReportAuthor")]
        public List<NcTextType> DmhPsychiatricReportAuthor { get; set; }

        /// <summary>
        /// True if the subject was unable or unwilling to participate in the screening; false otherwise. NIEM reference is j:MentalHealthAssessmentSubjectParticipatedIndicator
        /// </summary>
        /// <value>True if the subject was unable or unwilling to participate in the screening; false otherwise. NIEM reference is j:MentalHealthAssessmentSubjectParticipatedIndicator</value>

        [DataMember(Name="isSubjectParticipated")]
        public List<NiemXsboolean> IsSubjectParticipated { get; set; }

        /// <summary>
        /// True if the subject has other uncodified mental health issue(s); false otherwise. NIEM reference is j:MentalHealthOtherIndicator
        /// </summary>
        /// <value>True if the subject has other uncodified mental health issue(s); false otherwise. NIEM reference is j:MentalHealthOtherIndicator</value>

        [DataMember(Name="isMentalHealthOther")]
        public List<NiemXsboolean> IsMentalHealthOther { get; set; }

        /// <summary>
        /// A date of the DMH psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportReviewDate
        /// </summary>
        /// <value>A date of the DMH psychiatric report that was reviewed. NIEM reference is j:MentalHealthAssessmentDMHPsychiatricReportReviewDate</value>

        [DataMember(Name="dmhPsychiatricReportReviewDate")]
        public List<NcDateType> DmhPsychiatricReportReviewDate { get; set; }

        /// <summary>
        /// True if an abstract of judgment was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentAbstractOfJudgmentReviewedIndicator
        /// </summary>
        /// <value>True if an abstract of judgment was reviewed; false otherwise. NIEM reference is j:MentalHealthAssessmentAbstractOfJudgmentReviewedIndicator</value>

        [DataMember(Name="isAbstractOfJudgmentReviewed")]
        public List<NiemXsboolean> IsAbstractOfJudgmentReviewed { get; set; }

        /// <summary>
        /// True if the parolee requests independent evaluations to determine if the parolee meets the requirements of the Mentally Disordered Offender law; false otherwise. NIEM reference is j:MentalHeathAssessmentIndependentEvaluationRequestedIndicator
        /// </summary>
        /// <value>True if the parolee requests independent evaluations to determine if the parolee meets the requirements of the Mentally Disordered Offender law; false otherwise. NIEM reference is j:MentalHeathAssessmentIndependentEvaluationRequestedIndicator</value>

        [DataMember(Name="isMentalHeathAssessmentIndependentEvaluationRequested")]
        public List<NiemXsboolean> IsMentalHeathAssessmentIndependentEvaluationRequested { get; set; }

        /// <summary>
        /// A date on which the subject / parolee or the attorney of the offender acknowledged the decision to request or not request testing by two doctors. NIEM reference is j:MentalHealthAssessmentDate
        /// </summary>
        /// <value>A date on which the subject / parolee or the attorney of the offender acknowledged the decision to request or not request testing by two doctors. NIEM reference is j:MentalHealthAssessmentDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// A kind of mental health status. NIEM reference is j:MentalHealthStatusText
        /// </summary>
        /// <value>A kind of mental health status. NIEM reference is j:MentalHealthStatusText</value>

        [DataMember(Name="mentalHealthStatus")]
        public List<NcTextType> MentalHealthStatus { get; set; }

        /// <summary>
        /// An official pronouncement of the status of the mental health of subject, through the testimony of medical professionals and/or declared by a court of law. NIEM reference is j:MentalHealthCertification
        /// </summary>
        /// <value>An official pronouncement of the status of the mental health of subject, through the testimony of medical professionals and/or declared by a court of law. NIEM reference is j:MentalHealthCertification</value>

        [DataMember(Name="mentalHealthCertification")]
        public List<JCertificationType> MentalHealthCertification { get; set; }

        /// <summary>
        /// A level of care an subject is receiving or that is appropriate to receive in the Mental Health Services Delivery System (MHSDS). NIEM reference is j:MentalHealthCareLevelText
        /// </summary>
        /// <value>A level of care an subject is receiving or that is appropriate to receive in the Mental Health Services Delivery System (MHSDS). NIEM reference is j:MentalHealthCareLevelText</value>

        [DataMember(Name="mentalHealthCareLevel")]
        public List<NcTextType> MentalHealthCareLevel { get; set; }

        /// <summary>
        /// True if mental health assessment testing is required for the subject; false otherwise. NIEM reference is j:MentalHealthAssessmentTestingRequiredIndicator
        /// </summary>
        /// <value>True if mental health assessment testing is required for the subject; false otherwise. NIEM reference is j:MentalHealthAssessmentTestingRequiredIndicator</value>

        [DataMember(Name="isTestingRequired")]
        public List<NiemXsboolean> IsTestingRequired { get; set; }

        /// <summary>
        /// A date of the abstract of judgment that was reviewed. NIEM reference is j:MentalHealthAssessmentAbstractOfJudgmentDate
        /// </summary>
        /// <value>A date of the abstract of judgment that was reviewed. NIEM reference is j:MentalHealthAssessmentAbstractOfJudgmentDate</value>

        [DataMember(Name="abstractOfJudgmentDate")]
        public List<NcDateType> AbstractOfJudgmentDate { get; set; }

        /// <summary>
        /// jMentalHealthAssessmentType JSON-LD context
        /// </summary>
        /// <value>jMentalHealthAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjMentalHealthAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jMentalHealthAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jMentalHealthAssessmentTypeContext.jsonld")]
            JSONLDContextsjMentalHealthAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jMentalHealthAssessmentType JSON-LD context
        /// </summary>
        /// <value>jMentalHealthAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JMentalHealthAssessmentType {\n");
            sb.Append("  Factor: ").Append(Factor).Append("\n");
            sb.Append("  ScreeningStaffMember: ").Append(ScreeningStaffMember).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  IsPsychiatricReportReviewed: ").Append(IsPsychiatricReportReviewed).Append("\n");
            sb.Append("  PsychiatricReportDate: ").Append(PsychiatricReportDate).Append("\n");
            sb.Append("  PsychiatricReportAuthor: ").Append(PsychiatricReportAuthor).Append("\n");
            sb.Append("  IsMentalHealthSubjectCleared: ").Append(IsMentalHealthSubjectCleared).Append("\n");
            sb.Append("  IsMentallyDisorderedOffender: ").Append(IsMentallyDisorderedOffender).Append("\n");
            sb.Append("  IsLegalStatusSummaryReviewed: ").Append(IsLegalStatusSummaryReviewed).Append("\n");
            sb.Append("  IsDmhPsychiatricReportReviewed: ").Append(IsDmhPsychiatricReportReviewed).Append("\n");
            sb.Append("  IsReferralSexualViolentPredator: ").Append(IsReferralSexualViolentPredator).Append("\n");
            sb.Append("  ServicesReceived: ").Append(ServicesReceived).Append("\n");
            sb.Append("  CorrectionalCounselorIReviewDate: ").Append(CorrectionalCounselorIReviewDate).Append("\n");
            sb.Append("  DmhPsychiatricReportAuthor: ").Append(DmhPsychiatricReportAuthor).Append("\n");
            sb.Append("  IsSubjectParticipated: ").Append(IsSubjectParticipated).Append("\n");
            sb.Append("  IsMentalHealthOther: ").Append(IsMentalHealthOther).Append("\n");
            sb.Append("  DmhPsychiatricReportReviewDate: ").Append(DmhPsychiatricReportReviewDate).Append("\n");
            sb.Append("  IsAbstractOfJudgmentReviewed: ").Append(IsAbstractOfJudgmentReviewed).Append("\n");
            sb.Append("  IsMentalHeathAssessmentIndependentEvaluationRequested: ").Append(IsMentalHeathAssessmentIndependentEvaluationRequested).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  MentalHealthStatus: ").Append(MentalHealthStatus).Append("\n");
            sb.Append("  MentalHealthCertification: ").Append(MentalHealthCertification).Append("\n");
            sb.Append("  MentalHealthCareLevel: ").Append(MentalHealthCareLevel).Append("\n");
            sb.Append("  IsTestingRequired: ").Append(IsTestingRequired).Append("\n");
            sb.Append("  AbstractOfJudgmentDate: ").Append(AbstractOfJudgmentDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JMentalHealthAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JMentalHealthAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JMentalHealthAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JMentalHealthAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Factor == other.Factor ||
                    Factor != null &&
                    Factor.SequenceEqual(other.Factor)
                ) && 
                (
                    ScreeningStaffMember == other.ScreeningStaffMember ||
                    ScreeningStaffMember != null &&
                    ScreeningStaffMember.SequenceEqual(other.ScreeningStaffMember)
                ) && 
                (
                    Referral == other.Referral ||
                    Referral != null &&
                    Referral.SequenceEqual(other.Referral)
                ) && 
                (
                    IsPsychiatricReportReviewed == other.IsPsychiatricReportReviewed ||
                    IsPsychiatricReportReviewed != null &&
                    IsPsychiatricReportReviewed.SequenceEqual(other.IsPsychiatricReportReviewed)
                ) && 
                (
                    PsychiatricReportDate == other.PsychiatricReportDate ||
                    PsychiatricReportDate != null &&
                    PsychiatricReportDate.SequenceEqual(other.PsychiatricReportDate)
                ) && 
                (
                    PsychiatricReportAuthor == other.PsychiatricReportAuthor ||
                    PsychiatricReportAuthor != null &&
                    PsychiatricReportAuthor.SequenceEqual(other.PsychiatricReportAuthor)
                ) && 
                (
                    IsMentalHealthSubjectCleared == other.IsMentalHealthSubjectCleared ||
                    IsMentalHealthSubjectCleared != null &&
                    IsMentalHealthSubjectCleared.SequenceEqual(other.IsMentalHealthSubjectCleared)
                ) && 
                (
                    IsMentallyDisorderedOffender == other.IsMentallyDisorderedOffender ||
                    IsMentallyDisorderedOffender != null &&
                    IsMentallyDisorderedOffender.SequenceEqual(other.IsMentallyDisorderedOffender)
                ) && 
                (
                    IsLegalStatusSummaryReviewed == other.IsLegalStatusSummaryReviewed ||
                    IsLegalStatusSummaryReviewed != null &&
                    IsLegalStatusSummaryReviewed.SequenceEqual(other.IsLegalStatusSummaryReviewed)
                ) && 
                (
                    IsDmhPsychiatricReportReviewed == other.IsDmhPsychiatricReportReviewed ||
                    IsDmhPsychiatricReportReviewed != null &&
                    IsDmhPsychiatricReportReviewed.SequenceEqual(other.IsDmhPsychiatricReportReviewed)
                ) && 
                (
                    IsReferralSexualViolentPredator == other.IsReferralSexualViolentPredator ||
                    IsReferralSexualViolentPredator != null &&
                    IsReferralSexualViolentPredator.SequenceEqual(other.IsReferralSexualViolentPredator)
                ) && 
                (
                    ServicesReceived == other.ServicesReceived ||
                    ServicesReceived != null &&
                    ServicesReceived.SequenceEqual(other.ServicesReceived)
                ) && 
                (
                    CorrectionalCounselorIReviewDate == other.CorrectionalCounselorIReviewDate ||
                    CorrectionalCounselorIReviewDate != null &&
                    CorrectionalCounselorIReviewDate.SequenceEqual(other.CorrectionalCounselorIReviewDate)
                ) && 
                (
                    DmhPsychiatricReportAuthor == other.DmhPsychiatricReportAuthor ||
                    DmhPsychiatricReportAuthor != null &&
                    DmhPsychiatricReportAuthor.SequenceEqual(other.DmhPsychiatricReportAuthor)
                ) && 
                (
                    IsSubjectParticipated == other.IsSubjectParticipated ||
                    IsSubjectParticipated != null &&
                    IsSubjectParticipated.SequenceEqual(other.IsSubjectParticipated)
                ) && 
                (
                    IsMentalHealthOther == other.IsMentalHealthOther ||
                    IsMentalHealthOther != null &&
                    IsMentalHealthOther.SequenceEqual(other.IsMentalHealthOther)
                ) && 
                (
                    DmhPsychiatricReportReviewDate == other.DmhPsychiatricReportReviewDate ||
                    DmhPsychiatricReportReviewDate != null &&
                    DmhPsychiatricReportReviewDate.SequenceEqual(other.DmhPsychiatricReportReviewDate)
                ) && 
                (
                    IsAbstractOfJudgmentReviewed == other.IsAbstractOfJudgmentReviewed ||
                    IsAbstractOfJudgmentReviewed != null &&
                    IsAbstractOfJudgmentReviewed.SequenceEqual(other.IsAbstractOfJudgmentReviewed)
                ) && 
                (
                    IsMentalHeathAssessmentIndependentEvaluationRequested == other.IsMentalHeathAssessmentIndependentEvaluationRequested ||
                    IsMentalHeathAssessmentIndependentEvaluationRequested != null &&
                    IsMentalHeathAssessmentIndependentEvaluationRequested.SequenceEqual(other.IsMentalHeathAssessmentIndependentEvaluationRequested)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    MentalHealthStatus == other.MentalHealthStatus ||
                    MentalHealthStatus != null &&
                    MentalHealthStatus.SequenceEqual(other.MentalHealthStatus)
                ) && 
                (
                    MentalHealthCertification == other.MentalHealthCertification ||
                    MentalHealthCertification != null &&
                    MentalHealthCertification.SequenceEqual(other.MentalHealthCertification)
                ) && 
                (
                    MentalHealthCareLevel == other.MentalHealthCareLevel ||
                    MentalHealthCareLevel != null &&
                    MentalHealthCareLevel.SequenceEqual(other.MentalHealthCareLevel)
                ) && 
                (
                    IsTestingRequired == other.IsTestingRequired ||
                    IsTestingRequired != null &&
                    IsTestingRequired.SequenceEqual(other.IsTestingRequired)
                ) && 
                (
                    AbstractOfJudgmentDate == other.AbstractOfJudgmentDate ||
                    AbstractOfJudgmentDate != null &&
                    AbstractOfJudgmentDate.SequenceEqual(other.AbstractOfJudgmentDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Factor != null)
                    hashCode = hashCode * 59 + Factor.GetHashCode();
                    if (ScreeningStaffMember != null)
                    hashCode = hashCode * 59 + ScreeningStaffMember.GetHashCode();
                    if (Referral != null)
                    hashCode = hashCode * 59 + Referral.GetHashCode();
                    if (IsPsychiatricReportReviewed != null)
                    hashCode = hashCode * 59 + IsPsychiatricReportReviewed.GetHashCode();
                    if (PsychiatricReportDate != null)
                    hashCode = hashCode * 59 + PsychiatricReportDate.GetHashCode();
                    if (PsychiatricReportAuthor != null)
                    hashCode = hashCode * 59 + PsychiatricReportAuthor.GetHashCode();
                    if (IsMentalHealthSubjectCleared != null)
                    hashCode = hashCode * 59 + IsMentalHealthSubjectCleared.GetHashCode();
                    if (IsMentallyDisorderedOffender != null)
                    hashCode = hashCode * 59 + IsMentallyDisorderedOffender.GetHashCode();
                    if (IsLegalStatusSummaryReviewed != null)
                    hashCode = hashCode * 59 + IsLegalStatusSummaryReviewed.GetHashCode();
                    if (IsDmhPsychiatricReportReviewed != null)
                    hashCode = hashCode * 59 + IsDmhPsychiatricReportReviewed.GetHashCode();
                    if (IsReferralSexualViolentPredator != null)
                    hashCode = hashCode * 59 + IsReferralSexualViolentPredator.GetHashCode();
                    if (ServicesReceived != null)
                    hashCode = hashCode * 59 + ServicesReceived.GetHashCode();
                    if (CorrectionalCounselorIReviewDate != null)
                    hashCode = hashCode * 59 + CorrectionalCounselorIReviewDate.GetHashCode();
                    if (DmhPsychiatricReportAuthor != null)
                    hashCode = hashCode * 59 + DmhPsychiatricReportAuthor.GetHashCode();
                    if (IsSubjectParticipated != null)
                    hashCode = hashCode * 59 + IsSubjectParticipated.GetHashCode();
                    if (IsMentalHealthOther != null)
                    hashCode = hashCode * 59 + IsMentalHealthOther.GetHashCode();
                    if (DmhPsychiatricReportReviewDate != null)
                    hashCode = hashCode * 59 + DmhPsychiatricReportReviewDate.GetHashCode();
                    if (IsAbstractOfJudgmentReviewed != null)
                    hashCode = hashCode * 59 + IsAbstractOfJudgmentReviewed.GetHashCode();
                    if (IsMentalHeathAssessmentIndependentEvaluationRequested != null)
                    hashCode = hashCode * 59 + IsMentalHeathAssessmentIndependentEvaluationRequested.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (MentalHealthStatus != null)
                    hashCode = hashCode * 59 + MentalHealthStatus.GetHashCode();
                    if (MentalHealthCertification != null)
                    hashCode = hashCode * 59 + MentalHealthCertification.GetHashCode();
                    if (MentalHealthCareLevel != null)
                    hashCode = hashCode * 59 + MentalHealthCareLevel.GetHashCode();
                    if (IsTestingRequired != null)
                    hashCode = hashCode * 59 + IsTestingRequired.GetHashCode();
                    if (AbstractOfJudgmentDate != null)
                    hashCode = hashCode * 59 + AbstractOfJudgmentDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JMentalHealthAssessmentType left, JMentalHealthAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JMentalHealthAssessmentType left, JMentalHealthAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
