/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a judgement that a defendant is guilty.
    /// </summary>
    [DataContract]
    public partial class JConvictionType : NcActivityType, IEquatable<JConvictionType>
    { 
        /// <summary>
        /// True if a conviction was delivered by a jury; false otherwise. NIEM reference is j:ConvictionConvictedByJuryIndicator
        /// </summary>
        /// <value>True if a conviction was delivered by a jury; false otherwise. NIEM reference is j:ConvictionConvictedByJuryIndicator</value>

        [DataMember(Name="isConvictedByJury")]
        public List<NiemXsboolean> IsConvictedByJury { get; set; }

        /// <summary>
        /// A number of counts that were stayed. NIEM reference is j:ConvictionStayedCountQuantity
        /// </summary>
        /// <value>A number of counts that were stayed. NIEM reference is j:ConvictionStayedCountQuantity</value>

        [DataMember(Name="stayedCountQuantity")]
        public List<NcQuantityType> StayedCountQuantity { get; set; }

        /// <summary>
        /// A charge for which a person was convicted. NIEM reference is j:ConvictionCharge
        /// </summary>
        /// <value>A charge for which a person was convicted. NIEM reference is j:ConvictionCharge</value>

        [DataMember(Name="charge")]
        public List<JChargeType> Charge { get; set; }

        /// <summary>
        /// A total number of charges a person has been found guilty of with reference to charging document. NIEM reference is j:ConvictionChargeCountQuantity
        /// </summary>
        /// <value>A total number of charges a person has been found guilty of with reference to charging document. NIEM reference is j:ConvictionChargeCountQuantity</value>

        [DataMember(Name="chargeCountQuantity")]
        public List<NiemXsnonNegativeInteger> ChargeCountQuantity { get; set; }

        /// <summary>
        /// A court in which a conviction was issued. NIEM reference is j:ConvictionCourt
        /// </summary>
        /// <value>A court in which a conviction was issued. NIEM reference is j:ConvictionCourt</value>

        [DataMember(Name="court")]
        public List<JCourtType> Court { get; set; }

        /// <summary>
        /// A reference identification number for the organization that keeps the conviction records. NIEM reference is j:ConvictionLocatorReferenceIdentification
        /// </summary>
        /// <value>A reference identification number for the organization that keeps the conviction records. NIEM reference is j:ConvictionLocatorReferenceIdentification</value>

        [DataMember(Name="locatorReferenceIdentification")]
        public List<NcIdentificationType> LocatorReferenceIdentification { get; set; }

        /// <summary>
        /// An offense that a person has been found guilty of committing. NIEM reference is j:ConvictionOffense
        /// </summary>
        /// <value>An offense that a person has been found guilty of committing. NIEM reference is j:ConvictionOffense</value>

        [DataMember(Name="offense")]
        public List<JOffenseType> Offense { get; set; }

        /// <summary>
        /// A final plea a person offered in response to the charges filed. NIEM reference is j:ConvictionPlea
        /// </summary>
        /// <value>A final plea a person offered in response to the charges filed. NIEM reference is j:ConvictionPlea</value>

        [DataMember(Name="plea")]
        public List<JPleaType> Plea { get; set; }

        /// <summary>
        /// A penalty imposed upon a person having been found guilty of a crime. NIEM reference is j:ConvictionSanction
        /// </summary>
        /// <value>A penalty imposed upon a person having been found guilty of a crime. NIEM reference is j:ConvictionSanction</value>

        [DataMember(Name="sanction")]
        public List<JSanctionType> Sanction { get; set; }

        /// <summary>
        /// A sentence imposed upon a person having been found guilty of a crime. NIEM reference is j:ConvictionSentence
        /// </summary>
        /// <value>A sentence imposed upon a person having been found guilty of a crime. NIEM reference is j:ConvictionSentence</value>

        [DataMember(Name="sentence")]
        public List<JSentenceType> Sentence { get; set; }

        /// <summary>
        /// A person who was found guilty of a crime. NIEM reference is j:ConvictionSubject
        /// </summary>
        /// <value>A person who was found guilty of a crime. NIEM reference is j:ConvictionSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// A guilty verdict of a judge or jury. NIEM reference is j:ConvictionVerdict
        /// </summary>
        /// <value>A guilty verdict of a judge or jury. NIEM reference is j:ConvictionVerdict</value>

        [DataMember(Name="verdict")]
        public List<JVerdictType> Verdict { get; set; }

        /// <summary>
        /// jConvictionType JSON-LD context
        /// </summary>
        /// <value>jConvictionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjConvictionTypeContextJsonldEnum for ../JSON-LD_Contexts/jConvictionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jConvictionTypeContext.jsonld")]
            JSONLDContextsjConvictionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jConvictionType JSON-LD context
        /// </summary>
        /// <value>jConvictionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JConvictionType {\n");
            sb.Append("  IsConvictedByJury: ").Append(IsConvictedByJury).Append("\n");
            sb.Append("  StayedCountQuantity: ").Append(StayedCountQuantity).Append("\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  ChargeCountQuantity: ").Append(ChargeCountQuantity).Append("\n");
            sb.Append("  Court: ").Append(Court).Append("\n");
            sb.Append("  LocatorReferenceIdentification: ").Append(LocatorReferenceIdentification).Append("\n");
            sb.Append("  Offense: ").Append(Offense).Append("\n");
            sb.Append("  Plea: ").Append(Plea).Append("\n");
            sb.Append("  Sanction: ").Append(Sanction).Append("\n");
            sb.Append("  Sentence: ").Append(Sentence).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Verdict: ").Append(Verdict).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JConvictionType)obj);
        }

        /// <summary>
        /// Returns true if JConvictionType instances are equal
        /// </summary>
        /// <param name="other">Instance of JConvictionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JConvictionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsConvictedByJury == other.IsConvictedByJury ||
                    IsConvictedByJury != null &&
                    IsConvictedByJury.SequenceEqual(other.IsConvictedByJury)
                ) && 
                (
                    StayedCountQuantity == other.StayedCountQuantity ||
                    StayedCountQuantity != null &&
                    StayedCountQuantity.SequenceEqual(other.StayedCountQuantity)
                ) && 
                (
                    Charge == other.Charge ||
                    Charge != null &&
                    Charge.SequenceEqual(other.Charge)
                ) && 
                (
                    ChargeCountQuantity == other.ChargeCountQuantity ||
                    ChargeCountQuantity != null &&
                    ChargeCountQuantity.SequenceEqual(other.ChargeCountQuantity)
                ) && 
                (
                    Court == other.Court ||
                    Court != null &&
                    Court.SequenceEqual(other.Court)
                ) && 
                (
                    LocatorReferenceIdentification == other.LocatorReferenceIdentification ||
                    LocatorReferenceIdentification != null &&
                    LocatorReferenceIdentification.SequenceEqual(other.LocatorReferenceIdentification)
                ) && 
                (
                    Offense == other.Offense ||
                    Offense != null &&
                    Offense.SequenceEqual(other.Offense)
                ) && 
                (
                    Plea == other.Plea ||
                    Plea != null &&
                    Plea.SequenceEqual(other.Plea)
                ) && 
                (
                    Sanction == other.Sanction ||
                    Sanction != null &&
                    Sanction.SequenceEqual(other.Sanction)
                ) && 
                (
                    Sentence == other.Sentence ||
                    Sentence != null &&
                    Sentence.SequenceEqual(other.Sentence)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    Verdict == other.Verdict ||
                    Verdict != null &&
                    Verdict.SequenceEqual(other.Verdict)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsConvictedByJury != null)
                    hashCode = hashCode * 59 + IsConvictedByJury.GetHashCode();
                    if (StayedCountQuantity != null)
                    hashCode = hashCode * 59 + StayedCountQuantity.GetHashCode();
                    if (Charge != null)
                    hashCode = hashCode * 59 + Charge.GetHashCode();
                    if (ChargeCountQuantity != null)
                    hashCode = hashCode * 59 + ChargeCountQuantity.GetHashCode();
                    if (Court != null)
                    hashCode = hashCode * 59 + Court.GetHashCode();
                    if (LocatorReferenceIdentification != null)
                    hashCode = hashCode * 59 + LocatorReferenceIdentification.GetHashCode();
                    if (Offense != null)
                    hashCode = hashCode * 59 + Offense.GetHashCode();
                    if (Plea != null)
                    hashCode = hashCode * 59 + Plea.GetHashCode();
                    if (Sanction != null)
                    hashCode = hashCode * 59 + Sanction.GetHashCode();
                    if (Sentence != null)
                    hashCode = hashCode * 59 + Sentence.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Verdict != null)
                    hashCode = hashCode * 59 + Verdict.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JConvictionType left, JConvictionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JConvictionType left, JConvictionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
