/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an entity which has a contract to use a vehicle.
    /// </summary>
    [DataContract]
    public partial class JLesseeType : IEquatable<JLesseeType>
    { 
        /// <summary>
        /// An authority that has jurisdiction over a lease. NIEM reference is j:LesseeJurisdictionAuthorityCode
        /// </summary>
        /// <value>An authority that has jurisdiction over a lease. NIEM reference is j:LesseeJurisdictionAuthorityCode</value>

        [DataMember(Name="jurisdictionAuthorityCode")]
        public List<AamvaD20JurisdictionAuthorityCodeType> JurisdictionAuthorityCode { get; set; }

        /// <summary>
        /// An authority that has jurisdiction over a lease. NIEM reference is j:LesseeJurisdictionAuthorityText
        /// </summary>
        /// <value>An authority that has jurisdiction over a lease. NIEM reference is j:LesseeJurisdictionAuthorityText</value>

        [DataMember(Name="jurisdictionAuthority")]
        public List<NcTextType> JurisdictionAuthority { get; set; }

        /// <summary>
        /// A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode
        /// </summary>
        /// <value>A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode</value>

        [DataMember(Name="locationCountyCode")]
        public List<CensusUSCountyCodeType> LocationCountyCode { get; set; }

        /// <summary>
        /// A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName
        /// </summary>
        /// <value>A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName</value>

        [DataMember(Name="locationCountyName")]
        public List<NcProperNameTextType> LocationCountyName { get; set; }

        /// <summary>
        /// An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization
        /// </summary>
        /// <value>An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization</value>

        [DataMember(Name="roleOfOrganization")]
        public List<NcOrganizationType> RoleOfOrganization { get; set; }

        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// jLesseeType JSON-LD context
        /// </summary>
        /// <value>jLesseeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjLesseeTypeContextJsonldEnum for ../JSON-LD_Contexts/jLesseeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jLesseeTypeContext.jsonld")]
            JSONLDContextsjLesseeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jLesseeType JSON-LD context
        /// </summary>
        /// <value>jLesseeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JLesseeType {\n");
            sb.Append("  JurisdictionAuthorityCode: ").Append(JurisdictionAuthorityCode).Append("\n");
            sb.Append("  JurisdictionAuthority: ").Append(JurisdictionAuthority).Append("\n");
            sb.Append("  LocationCountyCode: ").Append(LocationCountyCode).Append("\n");
            sb.Append("  LocationCountyName: ").Append(LocationCountyName).Append("\n");
            sb.Append("  RoleOfOrganization: ").Append(RoleOfOrganization).Append("\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JLesseeType)obj);
        }

        /// <summary>
        /// Returns true if JLesseeType instances are equal
        /// </summary>
        /// <param name="other">Instance of JLesseeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JLesseeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JurisdictionAuthorityCode == other.JurisdictionAuthorityCode ||
                    JurisdictionAuthorityCode != null &&
                    JurisdictionAuthorityCode.SequenceEqual(other.JurisdictionAuthorityCode)
                ) && 
                (
                    JurisdictionAuthority == other.JurisdictionAuthority ||
                    JurisdictionAuthority != null &&
                    JurisdictionAuthority.SequenceEqual(other.JurisdictionAuthority)
                ) && 
                (
                    LocationCountyCode == other.LocationCountyCode ||
                    LocationCountyCode != null &&
                    LocationCountyCode.SequenceEqual(other.LocationCountyCode)
                ) && 
                (
                    LocationCountyName == other.LocationCountyName ||
                    LocationCountyName != null &&
                    LocationCountyName.SequenceEqual(other.LocationCountyName)
                ) && 
                (
                    RoleOfOrganization == other.RoleOfOrganization ||
                    RoleOfOrganization != null &&
                    RoleOfOrganization.SequenceEqual(other.RoleOfOrganization)
                ) && 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (JurisdictionAuthorityCode != null)
                    hashCode = hashCode * 59 + JurisdictionAuthorityCode.GetHashCode();
                    if (JurisdictionAuthority != null)
                    hashCode = hashCode * 59 + JurisdictionAuthority.GetHashCode();
                    if (LocationCountyCode != null)
                    hashCode = hashCode * 59 + LocationCountyCode.GetHashCode();
                    if (LocationCountyName != null)
                    hashCode = hashCode * 59 + LocationCountyName.GetHashCode();
                    if (RoleOfOrganization != null)
                    hashCode = hashCode * 59 + RoleOfOrganization.GetHashCode();
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JLesseeType left, JLesseeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JLesseeType left, JLesseeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
