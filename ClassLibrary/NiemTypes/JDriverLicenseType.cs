/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a license issued to a person granting driving privileges.
    /// </summary>
    [DataContract]
    public partial class JDriverLicenseType : JDriverLicenseBaseType, IEquatable<JDriverLicenseType>
    { 
        /// <summary>
        /// True if a driver license is an Enhanced Driver License in accordance with US Department of Homeland Security criteria; false otherwise. NIEM reference is j:DriverLicenseEnhancedIndicator
        /// </summary>
        /// <value>True if a driver license is an Enhanced Driver License in accordance with US Department of Homeland Security criteria; false otherwise. NIEM reference is j:DriverLicenseEnhancedIndicator</value>

        [DataMember(Name="isEnhanced")]
        public List<NiemXsboolean> IsEnhanced { get; set; }

        /// <summary>
        /// A kind of commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseCommercialClassCode
        /// </summary>
        /// <value>A kind of commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseCommercialClassCode</value>

        [DataMember(Name="commercialClassCode")]
        public List<AamvaD20DriverLicenseClassCodeType> CommercialClassCode { get; set; }

        /// <summary>
        /// A kind of commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseCommercialClassText
        /// </summary>
        /// <value>A kind of commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseCommercialClassText</value>

        [DataMember(Name="commercialClass")]
        public List<NcTextType> CommercialClass { get; set; }

        /// <summary>
        /// A current status of an individual&#x27;s Commercial privilege type. NIEM reference is j:DriverLicenseCommercialStatusCode
        /// </summary>
        /// <value>A current status of an individual&#x27;s Commercial privilege type. NIEM reference is j:DriverLicenseCommercialStatusCode</value>

        [DataMember(Name="commercialStatusCode")]
        public List<AamvaD20DrivingStatusCodeType> CommercialStatusCode { get; set; }

        /// <summary>
        /// A current status of an individual&#x27;s Commercial privilege type. NIEM reference is j:DriverLicenseCommercialStatusText
        /// </summary>
        /// <value>A current status of an individual&#x27;s Commercial privilege type. NIEM reference is j:DriverLicenseCommercialStatusText</value>

        [DataMember(Name="commercialStatus")]
        public List<NcTextType> CommercialStatus { get; set; }

        /// <summary>
        /// A kind of non-commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseNonCommercialClassText
        /// </summary>
        /// <value>A kind of non-commercial vehicle that a licensed driver has been examined on and approved to operate. NIEM reference is j:DriverLicenseNonCommercialClassText</value>

        [DataMember(Name="nonCommercialClass")]
        public List<NcTextType> NonCommercialClass { get; set; }

        /// <summary>
        /// A current status of an individual&#x27;s non-commercial privilege (base) type. NIEM reference is j:DriverLicenseNonCommercialStatusCode
        /// </summary>
        /// <value>A current status of an individual&#x27;s non-commercial privilege (base) type. NIEM reference is j:DriverLicenseNonCommercialStatusCode</value>

        [DataMember(Name="nonCommercialStatusCode")]
        public List<AamvaD20DrivingStatusCodeType> NonCommercialStatusCode { get; set; }

        /// <summary>
        /// A current status of an individual&#x27;s non-commercial privilege (base) type. NIEM reference is j:DriverLicenseNonCommercialStatusText
        /// </summary>
        /// <value>A current status of an individual&#x27;s non-commercial privilege (base) type. NIEM reference is j:DriverLicenseNonCommercialStatusText</value>

        [DataMember(Name="nonCommercialStatus")]
        public List<NcTextType> NonCommercialStatus { get; set; }

        /// <summary>
        /// A driver license permit issued to a driver granting conditional or limited driving privileges. NIEM reference is j:DriverLicensePermit
        /// </summary>
        /// <value>A driver license permit issued to a driver granting conditional or limited driving privileges. NIEM reference is j:DriverLicensePermit</value>

        [DataMember(Name="permit")]
        public List<JDriverLicensePermitType> Permit { get; set; }

        /// <summary>
        /// A number of driver permits issued on a license. NIEM reference is j:DriverLicensePermitQuantity
        /// </summary>
        /// <value>A number of driver permits issued on a license. NIEM reference is j:DriverLicensePermitQuantity</value>

        [DataMember(Name="permitQuantity")]
        public List<NiemXsnonNegativeInteger> PermitQuantity { get; set; }

        /// <summary>
        /// A driver license withdrawal. NIEM reference is j:DriverLicenseWithdrawal
        /// </summary>
        /// <value>A driver license withdrawal. NIEM reference is j:DriverLicenseWithdrawal</value>

        [DataMember(Name="withdrawal")]
        public List<JDriverLicenseWithdrawalType> Withdrawal { get; set; }

        /// <summary>
        /// True if a current licensing jurisdiction has an action pending that, if carried to completion, will cause a withdrawal of a specified driver privilege type; false otherwise. NIEM reference is j:DriverLicenseWithdrawalPendingIndicator
        /// </summary>
        /// <value>True if a current licensing jurisdiction has an action pending that, if carried to completion, will cause a withdrawal of a specified driver privilege type; false otherwise. NIEM reference is j:DriverLicenseWithdrawalPendingIndicator</value>

        [DataMember(Name="isWithdrawalPending")]
        public List<NiemXsboolean> IsWithdrawalPending { get; set; }

        /// <summary>
        /// An identification that is affixed to the raw materials (card stock, laminate, etc.) used in producing driver licenses and ID cards. The numbers are issued by the material&#x27;s manufacturer and provide a unique reference to a card within a jurisdiction. NIEM reference is j:DriverLicenseCardIdentification
        /// </summary>
        /// <value>An identification that is affixed to the raw materials (card stock, laminate, etc.) used in producing driver licenses and ID cards. The numbers are issued by the material&#x27;s manufacturer and provide a unique reference to a card within a jurisdiction. NIEM reference is j:DriverLicenseCardIdentification</value>

        [DataMember(Name="cardIdentification")]
        public List<NcIdentificationType> CardIdentification { get; set; }

        /// <summary>
        /// A restriction on a driver license. NIEM reference is j:DriverLicenseRestriction
        /// </summary>
        /// <value>A restriction on a driver license. NIEM reference is j:DriverLicenseRestriction</value>

        [DataMember(Name="restriction")]
        public List<JDriverLicenseRestrictionType> Restriction { get; set; }

        /// <summary>
        /// An endorsement on a driver license or driver license permit which authorizes the operation of specified types of vehicles carrying specified loads. NIEM reference is j:DriverLicenseEndorsement
        /// </summary>
        /// <value>An endorsement on a driver license or driver license permit which authorizes the operation of specified types of vehicles carrying specified loads. NIEM reference is j:DriverLicenseEndorsement</value>

        [DataMember(Name="endorsement")]
        public List<JDriverLicenseEndorsementType> Endorsement { get; set; }

        /// <summary>
        /// jDriverLicenseType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDriverLicenseTypeContextJsonldEnum for ../JSON-LD_Contexts/jDriverLicenseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDriverLicenseTypeContext.jsonld")]
            JSONLDContextsjDriverLicenseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDriverLicenseType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDriverLicenseType {\n");
            sb.Append("  IsEnhanced: ").Append(IsEnhanced).Append("\n");
            sb.Append("  CommercialClassCode: ").Append(CommercialClassCode).Append("\n");
            sb.Append("  CommercialClass: ").Append(CommercialClass).Append("\n");
            sb.Append("  CommercialStatusCode: ").Append(CommercialStatusCode).Append("\n");
            sb.Append("  CommercialStatus: ").Append(CommercialStatus).Append("\n");
            sb.Append("  NonCommercialClass: ").Append(NonCommercialClass).Append("\n");
            sb.Append("  NonCommercialStatusCode: ").Append(NonCommercialStatusCode).Append("\n");
            sb.Append("  NonCommercialStatus: ").Append(NonCommercialStatus).Append("\n");
            sb.Append("  Permit: ").Append(Permit).Append("\n");
            sb.Append("  PermitQuantity: ").Append(PermitQuantity).Append("\n");
            sb.Append("  Withdrawal: ").Append(Withdrawal).Append("\n");
            sb.Append("  IsWithdrawalPending: ").Append(IsWithdrawalPending).Append("\n");
            sb.Append("  CardIdentification: ").Append(CardIdentification).Append("\n");
            sb.Append("  Restriction: ").Append(Restriction).Append("\n");
            sb.Append("  Endorsement: ").Append(Endorsement).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDriverLicenseType)obj);
        }

        /// <summary>
        /// Returns true if JDriverLicenseType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDriverLicenseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDriverLicenseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsEnhanced == other.IsEnhanced ||
                    IsEnhanced != null &&
                    IsEnhanced.SequenceEqual(other.IsEnhanced)
                ) && 
                (
                    CommercialClassCode == other.CommercialClassCode ||
                    CommercialClassCode != null &&
                    CommercialClassCode.SequenceEqual(other.CommercialClassCode)
                ) && 
                (
                    CommercialClass == other.CommercialClass ||
                    CommercialClass != null &&
                    CommercialClass.SequenceEqual(other.CommercialClass)
                ) && 
                (
                    CommercialStatusCode == other.CommercialStatusCode ||
                    CommercialStatusCode != null &&
                    CommercialStatusCode.SequenceEqual(other.CommercialStatusCode)
                ) && 
                (
                    CommercialStatus == other.CommercialStatus ||
                    CommercialStatus != null &&
                    CommercialStatus.SequenceEqual(other.CommercialStatus)
                ) && 
                (
                    NonCommercialClass == other.NonCommercialClass ||
                    NonCommercialClass != null &&
                    NonCommercialClass.SequenceEqual(other.NonCommercialClass)
                ) && 
                (
                    NonCommercialStatusCode == other.NonCommercialStatusCode ||
                    NonCommercialStatusCode != null &&
                    NonCommercialStatusCode.SequenceEqual(other.NonCommercialStatusCode)
                ) && 
                (
                    NonCommercialStatus == other.NonCommercialStatus ||
                    NonCommercialStatus != null &&
                    NonCommercialStatus.SequenceEqual(other.NonCommercialStatus)
                ) && 
                (
                    Permit == other.Permit ||
                    Permit != null &&
                    Permit.SequenceEqual(other.Permit)
                ) && 
                (
                    PermitQuantity == other.PermitQuantity ||
                    PermitQuantity != null &&
                    PermitQuantity.SequenceEqual(other.PermitQuantity)
                ) && 
                (
                    Withdrawal == other.Withdrawal ||
                    Withdrawal != null &&
                    Withdrawal.SequenceEqual(other.Withdrawal)
                ) && 
                (
                    IsWithdrawalPending == other.IsWithdrawalPending ||
                    IsWithdrawalPending != null &&
                    IsWithdrawalPending.SequenceEqual(other.IsWithdrawalPending)
                ) && 
                (
                    CardIdentification == other.CardIdentification ||
                    CardIdentification != null &&
                    CardIdentification.SequenceEqual(other.CardIdentification)
                ) && 
                (
                    Restriction == other.Restriction ||
                    Restriction != null &&
                    Restriction.SequenceEqual(other.Restriction)
                ) && 
                (
                    Endorsement == other.Endorsement ||
                    Endorsement != null &&
                    Endorsement.SequenceEqual(other.Endorsement)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsEnhanced != null)
                    hashCode = hashCode * 59 + IsEnhanced.GetHashCode();
                    if (CommercialClassCode != null)
                    hashCode = hashCode * 59 + CommercialClassCode.GetHashCode();
                    if (CommercialClass != null)
                    hashCode = hashCode * 59 + CommercialClass.GetHashCode();
                    if (CommercialStatusCode != null)
                    hashCode = hashCode * 59 + CommercialStatusCode.GetHashCode();
                    if (CommercialStatus != null)
                    hashCode = hashCode * 59 + CommercialStatus.GetHashCode();
                    if (NonCommercialClass != null)
                    hashCode = hashCode * 59 + NonCommercialClass.GetHashCode();
                    if (NonCommercialStatusCode != null)
                    hashCode = hashCode * 59 + NonCommercialStatusCode.GetHashCode();
                    if (NonCommercialStatus != null)
                    hashCode = hashCode * 59 + NonCommercialStatus.GetHashCode();
                    if (Permit != null)
                    hashCode = hashCode * 59 + Permit.GetHashCode();
                    if (PermitQuantity != null)
                    hashCode = hashCode * 59 + PermitQuantity.GetHashCode();
                    if (Withdrawal != null)
                    hashCode = hashCode * 59 + Withdrawal.GetHashCode();
                    if (IsWithdrawalPending != null)
                    hashCode = hashCode * 59 + IsWithdrawalPending.GetHashCode();
                    if (CardIdentification != null)
                    hashCode = hashCode * 59 + CardIdentification.GetHashCode();
                    if (Restriction != null)
                    hashCode = hashCode * 59 + Restriction.GetHashCode();
                    if (Endorsement != null)
                    hashCode = hashCode * 59 + Endorsement.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDriverLicenseType left, JDriverLicenseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDriverLicenseType left, JDriverLicenseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
