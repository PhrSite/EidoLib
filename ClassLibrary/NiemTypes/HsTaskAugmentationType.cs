/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a task.
    /// </summary>
    [DataContract]
    public partial class HsTaskAugmentationType : IEquatable<HsTaskAugmentationType>
    { 
        /// <summary>
        /// An association between a person and an activity in which a person was or may have been involved. NIEM reference is nc:ActivityPersonAssociation
        /// </summary>
        /// <value>An association between a person and an activity in which a person was or may have been involved. NIEM reference is nc:ActivityPersonAssociation</value>

        [DataMember(Name="activityPersonAssociation")]
        public List<NcActivityPersonAssociationType> ActivityPersonAssociation { get; set; }

        /// <summary>
        /// A description of what needs to be done to successfully complete a task. NIEM reference is nc:TaskCriteriaForSuccessText
        /// </summary>
        /// <value>A description of what needs to be done to successfully complete a task. NIEM reference is nc:TaskCriteriaForSuccessText</value>

        [DataMember(Name="taskCriteriaForSuccess")]
        public List<NcTextType> TaskCriteriaForSuccess { get; set; }

        /// <summary>
        /// A status of the progress toward accomplishment of this task. NIEM reference is nc:TaskCurrentStatus
        /// </summary>
        /// <value>A status of the progress toward accomplishment of this task. NIEM reference is nc:TaskCurrentStatus</value>

        [DataMember(Name="taskCurrentStatus")]
        public List<NcStatusType> TaskCurrentStatus { get; set; }

        /// <summary>
        /// A description of the date range for the completion of a task. NIEM reference is hs:TaskTimeframeDescriptionText
        /// </summary>
        /// <value>A description of the date range for the completion of a task. NIEM reference is hs:TaskTimeframeDescriptionText</value>

        [DataMember(Name="taskTimeframeDescription")]
        public List<NcTextType> TaskTimeframeDescription { get; set; }

        /// <summary>
        /// A service  that will be made available by the agency. NIEM reference is hs:Service
        /// </summary>
        /// <value>A service  that will be made available by the agency. NIEM reference is hs:Service</value>

        [DataMember(Name="service")]
        public List<HsServiceType> Service { get; set; }

        /// <summary>
        /// hsTaskAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsTaskAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsTaskAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/hsTaskAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsTaskAugmentationTypeContext.jsonld")]
            JSONLDContextshsTaskAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsTaskAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsTaskAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsTaskAugmentationType {\n");
            sb.Append("  ActivityPersonAssociation: ").Append(ActivityPersonAssociation).Append("\n");
            sb.Append("  TaskCriteriaForSuccess: ").Append(TaskCriteriaForSuccess).Append("\n");
            sb.Append("  TaskCurrentStatus: ").Append(TaskCurrentStatus).Append("\n");
            sb.Append("  TaskTimeframeDescription: ").Append(TaskTimeframeDescription).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsTaskAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if HsTaskAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsTaskAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsTaskAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActivityPersonAssociation == other.ActivityPersonAssociation ||
                    ActivityPersonAssociation != null &&
                    ActivityPersonAssociation.SequenceEqual(other.ActivityPersonAssociation)
                ) && 
                (
                    TaskCriteriaForSuccess == other.TaskCriteriaForSuccess ||
                    TaskCriteriaForSuccess != null &&
                    TaskCriteriaForSuccess.SequenceEqual(other.TaskCriteriaForSuccess)
                ) && 
                (
                    TaskCurrentStatus == other.TaskCurrentStatus ||
                    TaskCurrentStatus != null &&
                    TaskCurrentStatus.SequenceEqual(other.TaskCurrentStatus)
                ) && 
                (
                    TaskTimeframeDescription == other.TaskTimeframeDescription ||
                    TaskTimeframeDescription != null &&
                    TaskTimeframeDescription.SequenceEqual(other.TaskTimeframeDescription)
                ) && 
                (
                    Service == other.Service ||
                    Service != null &&
                    Service.SequenceEqual(other.Service)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActivityPersonAssociation != null)
                    hashCode = hashCode * 59 + ActivityPersonAssociation.GetHashCode();
                    if (TaskCriteriaForSuccess != null)
                    hashCode = hashCode * 59 + TaskCriteriaForSuccess.GetHashCode();
                    if (TaskCurrentStatus != null)
                    hashCode = hashCode * 59 + TaskCurrentStatus.GetHashCode();
                    if (TaskTimeframeDescription != null)
                    hashCode = hashCode * 59 + TaskTimeframeDescription.GetHashCode();
                    if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsTaskAugmentationType left, HsTaskAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsTaskAugmentationType left, HsTaskAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
