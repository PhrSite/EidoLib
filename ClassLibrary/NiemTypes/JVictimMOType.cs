/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details pertaining to facts attained from an actual crime scene, giving investigators insights into behaviors of a victim or concerning the treatment of a victim as related to subject MO.
    /// </summary>
    [DataContract]
    public partial class JVictimMOType : IEquatable<JVictimMOType>
    { 
        /// <summary>
        /// An action of the victim at time of incident. NIEM reference is j:VictimMOActionCode
        /// </summary>
        /// <value>An action of the victim at time of incident. NIEM reference is j:VictimMOActionCode</value>

        [DataMember(Name="actionCode")]
        public List<NdexVictimMOWasCodeType> ActionCode { get; set; }

        /// <summary>
        /// An action of the victim at time of incident. NIEM reference is j:VictimMOActionText
        /// </summary>
        /// <value>An action of the victim at time of incident. NIEM reference is j:VictimMOActionText</value>

        [DataMember(Name="action")]
        public List<NcTextType> Action { get; set; }

        /// <summary>
        /// A manner of disposal of the body of the victim. NIEM reference is j:VictimMOReleaseDisposalCode
        /// </summary>
        /// <value>A manner of disposal of the body of the victim. NIEM reference is j:VictimMOReleaseDisposalCode</value>

        [DataMember(Name="releaseDisposalCode")]
        public List<NdexVictimMODisposalCodeType> ReleaseDisposalCode { get; set; }

        /// <summary>
        /// A manner of disposal of the body of the victim. NIEM reference is j:VictimMOReleaseDisposalText
        /// </summary>
        /// <value>A manner of disposal of the body of the victim. NIEM reference is j:VictimMOReleaseDisposalText</value>

        [DataMember(Name="releaseDisposal")]
        public List<NcTextType> ReleaseDisposal { get; set; }

        /// <summary>
        /// An approach taken toward the victim by the subject. NIEM reference is j:VictimMOApproachedCode
        /// </summary>
        /// <value>An approach taken toward the victim by the subject. NIEM reference is j:VictimMOApproachedCode</value>

        [DataMember(Name="approachedCode")]
        public List<NdexVictimMOApproachedCodeType> ApproachedCode { get; set; }

        /// <summary>
        /// An approach taken toward the victim by the subject. NIEM reference is j:VictimMOApproachedText
        /// </summary>
        /// <value>An approach taken toward the victim by the subject. NIEM reference is j:VictimMOApproachedText</value>

        [DataMember(Name="approached")]
        public List<NcTextType> Approached { get; set; }

        /// <summary>
        /// A clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedCode
        /// </summary>
        /// <value>A clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedCode</value>

        [DataMember(Name="foundClothedCode")]
        public List<NdexVictimMOFoundClothedCodeType> FoundClothedCode { get; set; }

        /// <summary>
        /// A clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedText
        /// </summary>
        /// <value>A clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedText</value>

        [DataMember(Name="foundClothed")]
        public List<NcTextType> FoundClothed { get; set; }

        /// <summary>
        /// A description of the clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedDescriptionText
        /// </summary>
        /// <value>A description of the clothed condition of the victim. NIEM reference is j:VictimMOFoundClothedDescriptionText</value>

        [DataMember(Name="foundClothedDescription")]
        public List<NcTextType> FoundClothedDescription { get; set; }

        /// <summary>
        /// A lifestyle characteristic for a victim. NIEM reference is j:VictimMOGeneralLifestyleCode
        /// </summary>
        /// <value>A lifestyle characteristic for a victim. NIEM reference is j:VictimMOGeneralLifestyleCode</value>

        [DataMember(Name="generalLifestyleCode")]
        public List<NdexVictimMOGeneralLifestyleCodeType> GeneralLifestyleCode { get; set; }

        /// <summary>
        /// A lifestyle characteristic for a victim. NIEM reference is j:VictimMOGeneralLifestyleText
        /// </summary>
        /// <value>A lifestyle characteristic for a victim. NIEM reference is j:VictimMOGeneralLifestyleText</value>

        [DataMember(Name="generalLifestyle")]
        public List<NcTextType> GeneralLifestyle { get; set; }

        /// <summary>
        /// A condition of the victim upon recovery. NIEM reference is j:VictimMORecoveryCode
        /// </summary>
        /// <value>A condition of the victim upon recovery. NIEM reference is j:VictimMORecoveryCode</value>

        [DataMember(Name="recoveryCode")]
        public List<NdexVictimMORecoveryCodeType> RecoveryCode { get; set; }

        /// <summary>
        /// A condition of the victim upon recovery. NIEM reference is j:VictimMORecoveryText
        /// </summary>
        /// <value>A condition of the victim upon recovery. NIEM reference is j:VictimMORecoveryText</value>

        [DataMember(Name="recovery")]
        public List<NcTextType> Recovery { get; set; }

        /// <summary>
        /// An indication of how the victim to subject contact ended. NIEM reference is j:VictimMOSubjectContactConclusionCode
        /// </summary>
        /// <value>An indication of how the victim to subject contact ended. NIEM reference is j:VictimMOSubjectContactConclusionCode</value>

        [DataMember(Name="subjectContactConclusionCode")]
        public List<NdexVictimMOSubjectContactConclusionCodeType> SubjectContactConclusionCode { get; set; }

        /// <summary>
        /// An indication of how the victim to subject contact ended. NIEM reference is j:VictimMOSubjectContactConclusionText
        /// </summary>
        /// <value>An indication of how the victim to subject contact ended. NIEM reference is j:VictimMOSubjectContactConclusionText</value>

        [DataMember(Name="subjectContactConclusion")]
        public List<NcTextType> SubjectContactConclusion { get; set; }

        /// <summary>
        /// A type of article used by the subject at the crime scene to bind a victim. NIEM reference is j:VictimMOBindingsCode
        /// </summary>
        /// <value>A type of article used by the subject at the crime scene to bind a victim. NIEM reference is j:VictimMOBindingsCode</value>

        [DataMember(Name="bindingsCode")]
        public List<NdexVictimMOBindingsCodeType> BindingsCode { get; set; }

        /// <summary>
        /// A type of article used by the subject at the crime scene to bind a victim. NIEM reference is j:VictimMOBindingsText
        /// </summary>
        /// <value>A type of article used by the subject at the crime scene to bind a victim. NIEM reference is j:VictimMOBindingsText</value>

        [DataMember(Name="bindings")]
        public List<NcTextType> Bindings { get; set; }

        /// <summary>
        /// A description of a recovery of the victim. NIEM reference is j:VictimMORecoveryDescriptionText
        /// </summary>
        /// <value>A description of a recovery of the victim. NIEM reference is j:VictimMORecoveryDescriptionText</value>

        [DataMember(Name="recoveryDescription")]
        public List<NcTextType> RecoveryDescription { get; set; }

        /// <summary>
        /// jVictimMOType JSON-LD context
        /// </summary>
        /// <value>jVictimMOType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjVictimMOTypeContextJsonldEnum for ../JSON-LD_Contexts/jVictimMOTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jVictimMOTypeContext.jsonld")]
            JSONLDContextsjVictimMOTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jVictimMOType JSON-LD context
        /// </summary>
        /// <value>jVictimMOType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JVictimMOType {\n");
            sb.Append("  ActionCode: ").Append(ActionCode).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  ReleaseDisposalCode: ").Append(ReleaseDisposalCode).Append("\n");
            sb.Append("  ReleaseDisposal: ").Append(ReleaseDisposal).Append("\n");
            sb.Append("  ApproachedCode: ").Append(ApproachedCode).Append("\n");
            sb.Append("  Approached: ").Append(Approached).Append("\n");
            sb.Append("  FoundClothedCode: ").Append(FoundClothedCode).Append("\n");
            sb.Append("  FoundClothed: ").Append(FoundClothed).Append("\n");
            sb.Append("  FoundClothedDescription: ").Append(FoundClothedDescription).Append("\n");
            sb.Append("  GeneralLifestyleCode: ").Append(GeneralLifestyleCode).Append("\n");
            sb.Append("  GeneralLifestyle: ").Append(GeneralLifestyle).Append("\n");
            sb.Append("  RecoveryCode: ").Append(RecoveryCode).Append("\n");
            sb.Append("  Recovery: ").Append(Recovery).Append("\n");
            sb.Append("  SubjectContactConclusionCode: ").Append(SubjectContactConclusionCode).Append("\n");
            sb.Append("  SubjectContactConclusion: ").Append(SubjectContactConclusion).Append("\n");
            sb.Append("  BindingsCode: ").Append(BindingsCode).Append("\n");
            sb.Append("  Bindings: ").Append(Bindings).Append("\n");
            sb.Append("  RecoveryDescription: ").Append(RecoveryDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JVictimMOType)obj);
        }

        /// <summary>
        /// Returns true if JVictimMOType instances are equal
        /// </summary>
        /// <param name="other">Instance of JVictimMOType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JVictimMOType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActionCode == other.ActionCode ||
                    ActionCode != null &&
                    ActionCode.SequenceEqual(other.ActionCode)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.SequenceEqual(other.Action)
                ) && 
                (
                    ReleaseDisposalCode == other.ReleaseDisposalCode ||
                    ReleaseDisposalCode != null &&
                    ReleaseDisposalCode.SequenceEqual(other.ReleaseDisposalCode)
                ) && 
                (
                    ReleaseDisposal == other.ReleaseDisposal ||
                    ReleaseDisposal != null &&
                    ReleaseDisposal.SequenceEqual(other.ReleaseDisposal)
                ) && 
                (
                    ApproachedCode == other.ApproachedCode ||
                    ApproachedCode != null &&
                    ApproachedCode.SequenceEqual(other.ApproachedCode)
                ) && 
                (
                    Approached == other.Approached ||
                    Approached != null &&
                    Approached.SequenceEqual(other.Approached)
                ) && 
                (
                    FoundClothedCode == other.FoundClothedCode ||
                    FoundClothedCode != null &&
                    FoundClothedCode.SequenceEqual(other.FoundClothedCode)
                ) && 
                (
                    FoundClothed == other.FoundClothed ||
                    FoundClothed != null &&
                    FoundClothed.SequenceEqual(other.FoundClothed)
                ) && 
                (
                    FoundClothedDescription == other.FoundClothedDescription ||
                    FoundClothedDescription != null &&
                    FoundClothedDescription.SequenceEqual(other.FoundClothedDescription)
                ) && 
                (
                    GeneralLifestyleCode == other.GeneralLifestyleCode ||
                    GeneralLifestyleCode != null &&
                    GeneralLifestyleCode.SequenceEqual(other.GeneralLifestyleCode)
                ) && 
                (
                    GeneralLifestyle == other.GeneralLifestyle ||
                    GeneralLifestyle != null &&
                    GeneralLifestyle.SequenceEqual(other.GeneralLifestyle)
                ) && 
                (
                    RecoveryCode == other.RecoveryCode ||
                    RecoveryCode != null &&
                    RecoveryCode.SequenceEqual(other.RecoveryCode)
                ) && 
                (
                    Recovery == other.Recovery ||
                    Recovery != null &&
                    Recovery.SequenceEqual(other.Recovery)
                ) && 
                (
                    SubjectContactConclusionCode == other.SubjectContactConclusionCode ||
                    SubjectContactConclusionCode != null &&
                    SubjectContactConclusionCode.SequenceEqual(other.SubjectContactConclusionCode)
                ) && 
                (
                    SubjectContactConclusion == other.SubjectContactConclusion ||
                    SubjectContactConclusion != null &&
                    SubjectContactConclusion.SequenceEqual(other.SubjectContactConclusion)
                ) && 
                (
                    BindingsCode == other.BindingsCode ||
                    BindingsCode != null &&
                    BindingsCode.SequenceEqual(other.BindingsCode)
                ) && 
                (
                    Bindings == other.Bindings ||
                    Bindings != null &&
                    Bindings.SequenceEqual(other.Bindings)
                ) && 
                (
                    RecoveryDescription == other.RecoveryDescription ||
                    RecoveryDescription != null &&
                    RecoveryDescription.SequenceEqual(other.RecoveryDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActionCode != null)
                    hashCode = hashCode * 59 + ActionCode.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (ReleaseDisposalCode != null)
                    hashCode = hashCode * 59 + ReleaseDisposalCode.GetHashCode();
                    if (ReleaseDisposal != null)
                    hashCode = hashCode * 59 + ReleaseDisposal.GetHashCode();
                    if (ApproachedCode != null)
                    hashCode = hashCode * 59 + ApproachedCode.GetHashCode();
                    if (Approached != null)
                    hashCode = hashCode * 59 + Approached.GetHashCode();
                    if (FoundClothedCode != null)
                    hashCode = hashCode * 59 + FoundClothedCode.GetHashCode();
                    if (FoundClothed != null)
                    hashCode = hashCode * 59 + FoundClothed.GetHashCode();
                    if (FoundClothedDescription != null)
                    hashCode = hashCode * 59 + FoundClothedDescription.GetHashCode();
                    if (GeneralLifestyleCode != null)
                    hashCode = hashCode * 59 + GeneralLifestyleCode.GetHashCode();
                    if (GeneralLifestyle != null)
                    hashCode = hashCode * 59 + GeneralLifestyle.GetHashCode();
                    if (RecoveryCode != null)
                    hashCode = hashCode * 59 + RecoveryCode.GetHashCode();
                    if (Recovery != null)
                    hashCode = hashCode * 59 + Recovery.GetHashCode();
                    if (SubjectContactConclusionCode != null)
                    hashCode = hashCode * 59 + SubjectContactConclusionCode.GetHashCode();
                    if (SubjectContactConclusion != null)
                    hashCode = hashCode * 59 + SubjectContactConclusion.GetHashCode();
                    if (BindingsCode != null)
                    hashCode = hashCode * 59 + BindingsCode.GetHashCode();
                    if (Bindings != null)
                    hashCode = hashCode * 59 + Bindings.GetHashCode();
                    if (RecoveryDescription != null)
                    hashCode = hashCode * 59 + RecoveryDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JVictimMOType left, JVictimMOType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JVictimMOType left, JVictimMOType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
