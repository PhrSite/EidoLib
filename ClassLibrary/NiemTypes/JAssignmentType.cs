/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a location and environment into which a person is placed, such as an office, dormitory, barracks, etc.
    /// </summary>
    [DataContract]
    public partial class JAssignmentType : NcActivityType, IEquatable<JAssignmentType>
    { 
        /// <summary>
        /// A specific location into which a person is placed, such as an office, dormitory, barracks, etc. NIEM reference is j:AssignmentLocationDetail
        /// </summary>
        /// <value>A specific location into which a person is placed, such as an office, dormitory, barracks, etc. NIEM reference is j:AssignmentLocationDetail</value>

        [DataMember(Name="locationDetail")]
        public List<JAssignmentLocationDetailType> LocationDetail { get; set; }

        /// <summary>
        /// An informal comment or observation. NIEM reference is j:Remark
        /// </summary>
        /// <value>An informal comment or observation. NIEM reference is j:Remark</value>

        [DataMember(Name="remark")]
        public List<NcCommentType> Remark { get; set; }

        /// <summary>
        /// A reason for an assignment. NIEM reference is j:AssignmentReasonText
        /// </summary>
        /// <value>A reason for an assignment. NIEM reference is j:AssignmentReasonText</value>

        [DataMember(Name="reason")]
        public List<NcTextType> Reason { get; set; }

        /// <summary>
        /// A description of a security classification given to a location and/or environment into which a subject is placed. NIEM reference is j:AssignmentSecurityClassificationDescriptionText
        /// </summary>
        /// <value>A description of a security classification given to a location and/or environment into which a subject is placed. NIEM reference is j:AssignmentSecurityClassificationDescriptionText</value>

        [DataMember(Name="securityClassificationDescription")]
        public List<NcTextType> SecurityClassificationDescription { get; set; }

        /// <summary>
        /// True if subject assignment was based in whole/part upon belief he/she was a hazard to self, includes suicidal; false otherwise. NIEM reference is j:SelfHarmIndicator
        /// </summary>
        /// <value>True if subject assignment was based in whole/part upon belief he/she was a hazard to self, includes suicidal; false otherwise. NIEM reference is j:SelfHarmIndicator</value>

        [DataMember(Name="isSelfHarm")]
        public List<NiemXsboolean> IsSelfHarm { get; set; }

        /// <summary>
        /// jAssignmentType JSON-LD context
        /// </summary>
        /// <value>jAssignmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjAssignmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jAssignmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jAssignmentTypeContext.jsonld")]
            JSONLDContextsjAssignmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jAssignmentType JSON-LD context
        /// </summary>
        /// <value>jAssignmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JAssignmentType {\n");
            sb.Append("  LocationDetail: ").Append(LocationDetail).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SecurityClassificationDescription: ").Append(SecurityClassificationDescription).Append("\n");
            sb.Append("  IsSelfHarm: ").Append(IsSelfHarm).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JAssignmentType)obj);
        }

        /// <summary>
        /// Returns true if JAssignmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JAssignmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JAssignmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationDetail == other.LocationDetail ||
                    LocationDetail != null &&
                    LocationDetail.SequenceEqual(other.LocationDetail)
                ) && 
                (
                    Remark == other.Remark ||
                    Remark != null &&
                    Remark.SequenceEqual(other.Remark)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.SequenceEqual(other.Reason)
                ) && 
                (
                    SecurityClassificationDescription == other.SecurityClassificationDescription ||
                    SecurityClassificationDescription != null &&
                    SecurityClassificationDescription.SequenceEqual(other.SecurityClassificationDescription)
                ) && 
                (
                    IsSelfHarm == other.IsSelfHarm ||
                    IsSelfHarm != null &&
                    IsSelfHarm.SequenceEqual(other.IsSelfHarm)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationDetail != null)
                    hashCode = hashCode * 59 + LocationDetail.GetHashCode();
                    if (Remark != null)
                    hashCode = hashCode * 59 + Remark.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (SecurityClassificationDescription != null)
                    hashCode = hashCode * 59 + SecurityClassificationDescription.GetHashCode();
                    if (IsSelfHarm != null)
                    hashCode = hashCode * 59 + IsSelfHarm.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JAssignmentType left, JAssignmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JAssignmentType left, JAssignmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
