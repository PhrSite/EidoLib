/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a legal or illegal substance that can be used as a medicine or a narcotic.
    /// </summary>
    [DataContract]
    public partial class NcDrugType : NcSubstanceType, IEquatable<NcDrugType>
    { 
        /// <summary>
        /// A number of days a quantity of the drug will cover if used as directed or intended. NIEM reference is nc:DrugDaysSupplyQuantity
        /// </summary>
        /// <value>A number of days a quantity of the drug will cover if used as directed or intended. NIEM reference is nc:DrugDaysSupplyQuantity</value>

        [DataMember(Name="daysSupplyQuantity")]
        public List<NcQuantityType> DaysSupplyQuantity { get; set; }

        /// <summary>
        /// A level of potency of a drug. NIEM reference is nc:DrugStrengthText
        /// </summary>
        /// <value>A level of potency of a drug. NIEM reference is nc:DrugStrengthText</value>

        [DataMember(Name="strength")]
        public List<NcTextType> Strength { get; set; }

        /// <summary>
        /// A class to which the Drug Enforcement Agency (DEA) has assigned the product under the Controlled Substances Act of 1970. NIEM reference is nc:DEAClassScheduleCode
        /// </summary>
        /// <value>A class to which the Drug Enforcement Agency (DEA) has assigned the product under the Controlled Substances Act of 1970. NIEM reference is nc:DEAClassScheduleCode</value>

        [DataMember(Name="deaClassScheduleCode")]
        public List<DeaDEAClassScheduleCodeCodeType> DeaClassScheduleCode { get; set; }

        /// <summary>
        /// A class to which the Drug Enforcement Agency (DEA) has assigned the product under the Controlled Substances Act of 1970. NIEM reference is nc:DEAClassScheduleText
        /// </summary>
        /// <value>A class to which the Drug Enforcement Agency (DEA) has assigned the product under the Controlled Substances Act of 1970. NIEM reference is nc:DEAClassScheduleText</value>

        [DataMember(Name="deaClassSchedule")]
        public List<NcTextType> DeaClassSchedule { get; set; }

        /// <summary>
        /// A reason why a drug may be excluded from coverage by certain third-party programs. NIEM reference is nc:DrugCoverageExceptionReasonText
        /// </summary>
        /// <value>A reason why a drug may be excluded from coverage by certain third-party programs. NIEM reference is nc:DrugCoverageExceptionReasonText</value>

        [DataMember(Name="coverageExceptionReason")]
        public List<NcTextType> CoverageExceptionReason { get; set; }

        /// <summary>
        /// Additional information about a drug. NIEM reference is j:DrugAugmentation
        /// </summary>
        /// <value>Additional information about a drug. NIEM reference is j:DrugAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JDrugAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncDrugType JSON-LD context
        /// </summary>
        /// <value>ncDrugType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncDrugTypeContextJsonldEnum for ../JSON-LD_Contexts/ncDrugTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncDrugTypeContext.jsonld")]
            JSONLDContextsncDrugTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncDrugType JSON-LD context
        /// </summary>
        /// <value>ncDrugType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcDrugType {\n");
            sb.Append("  DaysSupplyQuantity: ").Append(DaysSupplyQuantity).Append("\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("  DeaClassScheduleCode: ").Append(DeaClassScheduleCode).Append("\n");
            sb.Append("  DeaClassSchedule: ").Append(DeaClassSchedule).Append("\n");
            sb.Append("  CoverageExceptionReason: ").Append(CoverageExceptionReason).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcDrugType)obj);
        }

        /// <summary>
        /// Returns true if NcDrugType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcDrugType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcDrugType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DaysSupplyQuantity == other.DaysSupplyQuantity ||
                    DaysSupplyQuantity != null &&
                    DaysSupplyQuantity.SequenceEqual(other.DaysSupplyQuantity)
                ) && 
                (
                    Strength == other.Strength ||
                    Strength != null &&
                    Strength.SequenceEqual(other.Strength)
                ) && 
                (
                    DeaClassScheduleCode == other.DeaClassScheduleCode ||
                    DeaClassScheduleCode != null &&
                    DeaClassScheduleCode.SequenceEqual(other.DeaClassScheduleCode)
                ) && 
                (
                    DeaClassSchedule == other.DeaClassSchedule ||
                    DeaClassSchedule != null &&
                    DeaClassSchedule.SequenceEqual(other.DeaClassSchedule)
                ) && 
                (
                    CoverageExceptionReason == other.CoverageExceptionReason ||
                    CoverageExceptionReason != null &&
                    CoverageExceptionReason.SequenceEqual(other.CoverageExceptionReason)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DaysSupplyQuantity != null)
                    hashCode = hashCode * 59 + DaysSupplyQuantity.GetHashCode();
                    if (Strength != null)
                    hashCode = hashCode * 59 + Strength.GetHashCode();
                    if (DeaClassScheduleCode != null)
                    hashCode = hashCode * 59 + DeaClassScheduleCode.GetHashCode();
                    if (DeaClassSchedule != null)
                    hashCode = hashCode * 59 + DeaClassSchedule.GetHashCode();
                    if (CoverageExceptionReason != null)
                    hashCode = hashCode * 59 + CoverageExceptionReason.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcDrugType left, NcDrugType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcDrugType left, NcDrugType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
