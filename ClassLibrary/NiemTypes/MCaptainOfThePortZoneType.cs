/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a geographical area or zone where a Coast Guard Captain of the Port (COTP) enforces port safety and security.
    /// </summary>
    [DataContract]
    public partial class MCaptainOfThePortZoneType : IEquatable<MCaptainOfThePortZoneType>
    { 
        /// <summary>
        /// A Captain of the Port (COTP) zone code. NIEM reference is m:COTPZoneRegionCode
        /// </summary>
        /// <value>A Captain of the Port (COTP) zone code. NIEM reference is m:COTPZoneRegionCode</value>

        [DataMember(Name="cotpZoneRegionCode")]
        public List<MCOTPRegionCodeType> CotpZoneRegionCode { get; set; }

        /// <summary>
        /// A region of a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneRegionText
        /// </summary>
        /// <value>A region of a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneRegionText</value>

        [DataMember(Name="cotpZoneRegion")]
        public List<NcTextType> CotpZoneRegion { get; set; }

        /// <summary>
        /// A point of contact (POC) for a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneContactInformation
        /// </summary>
        /// <value>A point of contact (POC) for a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneContactInformation</value>

        [DataMember(Name="cotpZoneContactInformation")]
        public List<NcContactInformationType> CotpZoneContactInformation { get; set; }

        /// <summary>
        /// An organization that is responsible for a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneGoverningEntity
        /// </summary>
        /// <value>An organization that is responsible for a Captain of the Port (COTP) zone. NIEM reference is m:COTPZoneGoverningEntity</value>

        [DataMember(Name="cotpZoneGoverningEntity")]
        public List<NcEntityType> CotpZoneGoverningEntity { get; set; }

        /// <summary>
        /// mCaptainOfThePortZoneType JSON-LD context
        /// </summary>
        /// <value>mCaptainOfThePortZoneType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmCaptainOfThePortZoneTypeContextJsonldEnum for ../JSON-LD_Contexts/mCaptainOfThePortZoneTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mCaptainOfThePortZoneTypeContext.jsonld")]
            JSONLDContextsmCaptainOfThePortZoneTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mCaptainOfThePortZoneType JSON-LD context
        /// </summary>
        /// <value>mCaptainOfThePortZoneType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MCaptainOfThePortZoneType {\n");
            sb.Append("  CotpZoneRegionCode: ").Append(CotpZoneRegionCode).Append("\n");
            sb.Append("  CotpZoneRegion: ").Append(CotpZoneRegion).Append("\n");
            sb.Append("  CotpZoneContactInformation: ").Append(CotpZoneContactInformation).Append("\n");
            sb.Append("  CotpZoneGoverningEntity: ").Append(CotpZoneGoverningEntity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MCaptainOfThePortZoneType)obj);
        }

        /// <summary>
        /// Returns true if MCaptainOfThePortZoneType instances are equal
        /// </summary>
        /// <param name="other">Instance of MCaptainOfThePortZoneType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MCaptainOfThePortZoneType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CotpZoneRegionCode == other.CotpZoneRegionCode ||
                    CotpZoneRegionCode != null &&
                    CotpZoneRegionCode.SequenceEqual(other.CotpZoneRegionCode)
                ) && 
                (
                    CotpZoneRegion == other.CotpZoneRegion ||
                    CotpZoneRegion != null &&
                    CotpZoneRegion.SequenceEqual(other.CotpZoneRegion)
                ) && 
                (
                    CotpZoneContactInformation == other.CotpZoneContactInformation ||
                    CotpZoneContactInformation != null &&
                    CotpZoneContactInformation.SequenceEqual(other.CotpZoneContactInformation)
                ) && 
                (
                    CotpZoneGoverningEntity == other.CotpZoneGoverningEntity ||
                    CotpZoneGoverningEntity != null &&
                    CotpZoneGoverningEntity.SequenceEqual(other.CotpZoneGoverningEntity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CotpZoneRegionCode != null)
                    hashCode = hashCode * 59 + CotpZoneRegionCode.GetHashCode();
                    if (CotpZoneRegion != null)
                    hashCode = hashCode * 59 + CotpZoneRegion.GetHashCode();
                    if (CotpZoneContactInformation != null)
                    hashCode = hashCode * 59 + CotpZoneContactInformation.GetHashCode();
                    if (CotpZoneGoverningEntity != null)
                    hashCode = hashCode * 59 + CotpZoneGoverningEntity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MCaptainOfThePortZoneType left, MCaptainOfThePortZoneType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MCaptainOfThePortZoneType left, MCaptainOfThePortZoneType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
