/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a brand issued to a vehicle.
    /// </summary>
    [DataContract]
    public partial class JVehicleBrandType : IEquatable<JVehicleBrandType>
    { 
        /// <summary>
        /// An indicator of whether the Percentage of Damage is the actual value applied to a specific vehicle or is the threshold level applied by a state. NIEM reference is j:VehicleBrandDamagePercentageCategoryCode
        /// </summary>
        /// <value>An indicator of whether the Percentage of Damage is the actual value applied to a specific vehicle or is the threshold level applied by a state. NIEM reference is j:VehicleBrandDamagePercentageCategoryCode</value>

        [DataMember(Name="damagePercentageCategoryCode")]
        public List<AamvaD20BrandDamagePercentageCategoryCodeType> DamagePercentageCategoryCode { get; set; }

        /// <summary>
        /// A kind of indication of whether the Percentage of Damage is the actual value applied to a specific vehicle or is the threshold level applied by a state. NIEM reference is j:VehicleBrandDamagePercentageCategoryText
        /// </summary>
        /// <value>A kind of indication of whether the Percentage of Damage is the actual value applied to a specific vehicle or is the threshold level applied by a state. NIEM reference is j:VehicleBrandDamagePercentageCategoryText</value>

        [DataMember(Name="damagePercentageCategory")]
        public List<NcTextType> DamagePercentageCategory { get; set; }

        /// <summary>
        /// A date a vehicle brand was applied or obtained. NIEM reference is j:VehicleBrandDate
        /// </summary>
        /// <value>A date a vehicle brand was applied or obtained. NIEM reference is j:VehicleBrandDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// An organization that brands a vehicle. NIEM reference is j:VehicleBrander
        /// </summary>
        /// <value>An organization that brands a vehicle. NIEM reference is j:VehicleBrander</value>

        [DataMember(Name="vehicleBrander")]
        public List<JVehicleBranderType> VehicleBrander { get; set; }

        /// <summary>
        /// A percentage of damage (in terms of the extent that the fair salvage value plus the cost of repairing the vehicle for legal operation exceeds the fair market value of the vehicle prior to the incident causing the damage) a vehicle must sustain to be brand NIEM reference is j:VehicleBrandSalvagePercent
        /// </summary>
        /// <value>A percentage of damage (in terms of the extent that the fair salvage value plus the cost of repairing the vehicle for legal operation exceeds the fair market value of the vehicle prior to the incident causing the damage) a vehicle must sustain to be brand NIEM reference is j:VehicleBrandSalvagePercent</value>

        [DataMember(Name="salvagePercent")]
        public List<NiemXsdecimal> SalvagePercent { get; set; }

        /// <summary>
        /// A brand applied to the title or odometer of a vehicle. NIEM reference is j:VehicleBrandCode
        /// </summary>
        /// <value>A brand applied to the title or odometer of a vehicle. NIEM reference is j:VehicleBrandCode</value>

        [DataMember(Name="code")]
        public List<AamvaD20BrandCodeType> Code { get; set; }

        /// <summary>
        /// A brand applied to the title or odometer of a vehicle. NIEM reference is j:VehicleBrandText
        /// </summary>
        /// <value>A brand applied to the title or odometer of a vehicle. NIEM reference is j:VehicleBrandText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A disposition of the vehicle as documented by the junk yard or salvage yard. NIEM reference is j:VehicleBrandVehicleDispositionCode
        /// </summary>
        /// <value>A disposition of the vehicle as documented by the junk yard or salvage yard. NIEM reference is j:VehicleBrandVehicleDispositionCode</value>

        [DataMember(Name="vehicleDispositionCode")]
        public List<AamvaD20BrandVehicleDispositionCodeType> VehicleDispositionCode { get; set; }

        /// <summary>
        /// A disposition of the vehicle as documented by the junk yard or salvage yard. NIEM reference is j:VehicleBrandVehicleDispositionText
        /// </summary>
        /// <value>A disposition of the vehicle as documented by the junk yard or salvage yard. NIEM reference is j:VehicleBrandVehicleDispositionText</value>

        [DataMember(Name="vehicleDisposition")]
        public List<NcTextType> VehicleDisposition { get; set; }

        /// <summary>
        /// A name of an individual or organization from which a brander obtained a vehicle. NIEM reference is j:VehicleBrandVehicleSourceName
        /// </summary>
        /// <value>A name of an individual or organization from which a brander obtained a vehicle. NIEM reference is j:VehicleBrandVehicleSourceName</value>

        [DataMember(Name="vehicleSourceName")]
        public List<NcTextType> VehicleSourceName { get; set; }

        /// <summary>
        /// jVehicleBrandType JSON-LD context
        /// </summary>
        /// <value>jVehicleBrandType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjVehicleBrandTypeContextJsonldEnum for ../JSON-LD_Contexts/jVehicleBrandTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jVehicleBrandTypeContext.jsonld")]
            JSONLDContextsjVehicleBrandTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jVehicleBrandType JSON-LD context
        /// </summary>
        /// <value>jVehicleBrandType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JVehicleBrandType {\n");
            sb.Append("  DamagePercentageCategoryCode: ").Append(DamagePercentageCategoryCode).Append("\n");
            sb.Append("  DamagePercentageCategory: ").Append(DamagePercentageCategory).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  VehicleBrander: ").Append(VehicleBrander).Append("\n");
            sb.Append("  SalvagePercent: ").Append(SalvagePercent).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  VehicleDispositionCode: ").Append(VehicleDispositionCode).Append("\n");
            sb.Append("  VehicleDisposition: ").Append(VehicleDisposition).Append("\n");
            sb.Append("  VehicleSourceName: ").Append(VehicleSourceName).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JVehicleBrandType)obj);
        }

        /// <summary>
        /// Returns true if JVehicleBrandType instances are equal
        /// </summary>
        /// <param name="other">Instance of JVehicleBrandType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JVehicleBrandType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DamagePercentageCategoryCode == other.DamagePercentageCategoryCode ||
                    DamagePercentageCategoryCode != null &&
                    DamagePercentageCategoryCode.SequenceEqual(other.DamagePercentageCategoryCode)
                ) && 
                (
                    DamagePercentageCategory == other.DamagePercentageCategory ||
                    DamagePercentageCategory != null &&
                    DamagePercentageCategory.SequenceEqual(other.DamagePercentageCategory)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    VehicleBrander == other.VehicleBrander ||
                    VehicleBrander != null &&
                    VehicleBrander.SequenceEqual(other.VehicleBrander)
                ) && 
                (
                    SalvagePercent == other.SalvagePercent ||
                    SalvagePercent != null &&
                    SalvagePercent.SequenceEqual(other.SalvagePercent)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    VehicleDispositionCode == other.VehicleDispositionCode ||
                    VehicleDispositionCode != null &&
                    VehicleDispositionCode.SequenceEqual(other.VehicleDispositionCode)
                ) && 
                (
                    VehicleDisposition == other.VehicleDisposition ||
                    VehicleDisposition != null &&
                    VehicleDisposition.SequenceEqual(other.VehicleDisposition)
                ) && 
                (
                    VehicleSourceName == other.VehicleSourceName ||
                    VehicleSourceName != null &&
                    VehicleSourceName.SequenceEqual(other.VehicleSourceName)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DamagePercentageCategoryCode != null)
                    hashCode = hashCode * 59 + DamagePercentageCategoryCode.GetHashCode();
                    if (DamagePercentageCategory != null)
                    hashCode = hashCode * 59 + DamagePercentageCategory.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (VehicleBrander != null)
                    hashCode = hashCode * 59 + VehicleBrander.GetHashCode();
                    if (SalvagePercent != null)
                    hashCode = hashCode * 59 + SalvagePercent.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (VehicleDispositionCode != null)
                    hashCode = hashCode * 59 + VehicleDispositionCode.GetHashCode();
                    if (VehicleDisposition != null)
                    hashCode = hashCode * 59 + VehicleDisposition.GetHashCode();
                    if (VehicleSourceName != null)
                    hashCode = hashCode * 59 + VehicleSourceName.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JVehicleBrandType left, JVehicleBrandType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JVehicleBrandType left, JVehicleBrandType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
