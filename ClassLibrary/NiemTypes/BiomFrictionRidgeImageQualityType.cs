/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a quality measure for a generic friction ridge image
    /// </summary>
    [DataContract]
    public partial class BiomFrictionRidgeImageQualityType : IEquatable<BiomFrictionRidgeImageQualityType>
    { 
        /// <summary>
        /// A code for latent friction ridge positions NIEM reference is biom:LatentFrictionRidgePositionCode
        /// </summary>
        /// <value>A code for latent friction ridge positions NIEM reference is biom:LatentFrictionRidgePositionCode</value>

        [DataMember(Name="latentFrictionRidgePositionCode")]
        public List<string> LatentFrictionRidgePositionCode { get; set; }

        /// <summary>
        /// A unique identifier for a quality-algorithm product, assigned by the vendor NIEM reference is biom:QualityAlgorithmProductID
        /// </summary>
        /// <value>A unique identifier for a quality-algorithm product, assigned by the vendor NIEM reference is biom:QualityAlgorithmProductID</value>

        [DataMember(Name="qualityAlgorithmProductId")]
        public List<NiemXsunsignedShort> QualityAlgorithmProductId { get; set; }

        /// <summary>
        /// A unique identifier for the vendor of a quality-algorithm product NIEM reference is biom:QualityAlgorithmVendorID
        /// </summary>
        /// <value>A unique identifier for the vendor of a quality-algorithm product NIEM reference is biom:QualityAlgorithmVendorID</value>

        [DataMember(Name="qualityAlgorithmVendorId")]
        public List<BiomHexDoubleByteType> QualityAlgorithmVendorId { get; set; }

        /// <summary>
        /// A value of the quality of a particular sample NIEM reference is biom:QualityValue
        /// </summary>
        /// <value>A value of the quality of a particular sample NIEM reference is biom:QualityValue</value>

        [DataMember(Name="qualityValue")]
        public List<string> QualityValue { get; set; }

        /// <summary>
        /// biomFrictionRidgeImageQualityType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageQualityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFrictionRidgeImageQualityTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFrictionRidgeImageQualityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFrictionRidgeImageQualityTypeContext.jsonld")]
            JSONLDContextsbiomFrictionRidgeImageQualityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFrictionRidgeImageQualityType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageQualityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFrictionRidgeImageQualityType {\n");
            sb.Append("  LatentFrictionRidgePositionCode: ").Append(LatentFrictionRidgePositionCode).Append("\n");
            sb.Append("  QualityAlgorithmProductId: ").Append(QualityAlgorithmProductId).Append("\n");
            sb.Append("  QualityAlgorithmVendorId: ").Append(QualityAlgorithmVendorId).Append("\n");
            sb.Append("  QualityValue: ").Append(QualityValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFrictionRidgeImageQualityType)obj);
        }

        /// <summary>
        /// Returns true if BiomFrictionRidgeImageQualityType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFrictionRidgeImageQualityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFrictionRidgeImageQualityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LatentFrictionRidgePositionCode == other.LatentFrictionRidgePositionCode ||
                    LatentFrictionRidgePositionCode != null &&
                    LatentFrictionRidgePositionCode.SequenceEqual(other.LatentFrictionRidgePositionCode)
                ) && 
                (
                    QualityAlgorithmProductId == other.QualityAlgorithmProductId ||
                    QualityAlgorithmProductId != null &&
                    QualityAlgorithmProductId.SequenceEqual(other.QualityAlgorithmProductId)
                ) && 
                (
                    QualityAlgorithmVendorId == other.QualityAlgorithmVendorId ||
                    QualityAlgorithmVendorId != null &&
                    QualityAlgorithmVendorId.SequenceEqual(other.QualityAlgorithmVendorId)
                ) && 
                (
                    QualityValue == other.QualityValue ||
                    QualityValue != null &&
                    QualityValue.SequenceEqual(other.QualityValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LatentFrictionRidgePositionCode != null)
                    hashCode = hashCode * 59 + LatentFrictionRidgePositionCode.GetHashCode();
                    if (QualityAlgorithmProductId != null)
                    hashCode = hashCode * 59 + QualityAlgorithmProductId.GetHashCode();
                    if (QualityAlgorithmVendorId != null)
                    hashCode = hashCode * 59 + QualityAlgorithmVendorId.GetHashCode();
                    if (QualityValue != null)
                    hashCode = hashCode * 59 + QualityValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFrictionRidgeImageQualityType left, BiomFrictionRidgeImageQualityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFrictionRidgeImageQualityType left, BiomFrictionRidgeImageQualityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
