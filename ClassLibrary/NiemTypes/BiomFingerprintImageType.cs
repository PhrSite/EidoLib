/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a fingerprint image
    /// </summary>
    [DataContract]
    public partial class BiomFingerprintImageType : BiomImageType, IEquatable<BiomFingerprintImageType>
    { 
        /// <summary>
        /// A set of possible finger position codes, most probable position first. NIEM reference is biom:FingerprintImagePosition
        /// </summary>
        /// <value>A set of possible finger position codes, most probable position first. NIEM reference is biom:FingerprintImagePosition</value>

        [DataMember(Name="position")]
        public List<BiomFingerprintPositionListType> Position { get; set; }

        /// <summary>
        /// A kind of impression capture by which a fingerprint image information was obtained NIEM reference is biom:FingerprintImageImpressionCaptureCategoryCode
        /// </summary>
        /// <value>A kind of impression capture by which a fingerprint image information was obtained NIEM reference is biom:FingerprintImageImpressionCaptureCategoryCode</value>

        [DataMember(Name="impressionCaptureCategoryCode")]
        public List<BiomImpressionCaptureCategoryCodeType> ImpressionCaptureCategoryCode { get; set; }

        /// <summary>
        /// A kind of impression capture by which friction ridge image information was obtained NIEM reference is biom:FrictionRidgeImageImpressionCaptureCategoryCode
        /// </summary>
        /// <value>A kind of impression capture by which friction ridge image information was obtained NIEM reference is biom:FrictionRidgeImageImpressionCaptureCategoryCode</value>

        [DataMember(Name="frictionRidgeImageImpressionCaptureCategoryCode")]
        public List<BiomImpressionCaptureCategoryCodeType> FrictionRidgeImageImpressionCaptureCategoryCode { get; set; }

        /// <summary>
        /// A method used to capture a friction ridge impression. Conforms to ITL 2015. NIEM reference is biom:FrictionRidgeImpressionCaptureCode
        /// </summary>
        /// <value>A method used to capture a friction ridge impression. Conforms to ITL 2015. NIEM reference is biom:FrictionRidgeImpressionCaptureCode</value>

        [DataMember(Name="frictionRidgeImpressionCaptureCode")]
        public List<BiomImpressionCaptureCodeType> FrictionRidgeImpressionCaptureCode { get; set; }

        /// <summary>
        /// A description of a kind of fingerprint impression. NIEM reference is biom:FingerprintImpressionCategoryDescriptionText
        /// </summary>
        /// <value>A description of a kind of fingerprint impression. NIEM reference is biom:FingerprintImpressionCategoryDescriptionText</value>

        [DataMember(Name="fingerprintImpressionCategoryDescription")]
        public List<NcTextType> FingerprintImpressionCategoryDescription { get; set; }

        /// <summary>
        /// An optional field. This field is particularly useful if the image contained in this record is of an injury or latent image on a person. However, its use is not limited to such circumstances. Note that Field 10.041: SMT size or size of injury or iden NIEM reference is biom:SubjectExistentialDetails
        /// </summary>
        /// <value>An optional field. This field is particularly useful if the image contained in this record is of an injury or latent image on a person. However, its use is not limited to such circumstances. Note that Field 10.041: SMT size or size of injury or iden NIEM reference is biom:SubjectExistentialDetails</value>

        [DataMember(Name="subjectExistentialDetails")]
        public List<BiomSubjectExistentialDetailsType> SubjectExistentialDetails { get; set; }

        /// <summary>
        /// biomFingerprintImageType JSON-LD context
        /// </summary>
        /// <value>biomFingerprintImageType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFingerprintImageTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFingerprintImageTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFingerprintImageTypeContext.jsonld")]
            JSONLDContextsbiomFingerprintImageTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFingerprintImageType JSON-LD context
        /// </summary>
        /// <value>biomFingerprintImageType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFingerprintImageType {\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  ImpressionCaptureCategoryCode: ").Append(ImpressionCaptureCategoryCode).Append("\n");
            sb.Append("  FrictionRidgeImageImpressionCaptureCategoryCode: ").Append(FrictionRidgeImageImpressionCaptureCategoryCode).Append("\n");
            sb.Append("  FrictionRidgeImpressionCaptureCode: ").Append(FrictionRidgeImpressionCaptureCode).Append("\n");
            sb.Append("  FingerprintImpressionCategoryDescription: ").Append(FingerprintImpressionCategoryDescription).Append("\n");
            sb.Append("  SubjectExistentialDetails: ").Append(SubjectExistentialDetails).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFingerprintImageType)obj);
        }

        /// <summary>
        /// Returns true if BiomFingerprintImageType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFingerprintImageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFingerprintImageType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Position == other.Position ||
                    Position != null &&
                    Position.SequenceEqual(other.Position)
                ) && 
                (
                    ImpressionCaptureCategoryCode == other.ImpressionCaptureCategoryCode ||
                    ImpressionCaptureCategoryCode != null &&
                    ImpressionCaptureCategoryCode.SequenceEqual(other.ImpressionCaptureCategoryCode)
                ) && 
                (
                    FrictionRidgeImageImpressionCaptureCategoryCode == other.FrictionRidgeImageImpressionCaptureCategoryCode ||
                    FrictionRidgeImageImpressionCaptureCategoryCode != null &&
                    FrictionRidgeImageImpressionCaptureCategoryCode.SequenceEqual(other.FrictionRidgeImageImpressionCaptureCategoryCode)
                ) && 
                (
                    FrictionRidgeImpressionCaptureCode == other.FrictionRidgeImpressionCaptureCode ||
                    FrictionRidgeImpressionCaptureCode != null &&
                    FrictionRidgeImpressionCaptureCode.SequenceEqual(other.FrictionRidgeImpressionCaptureCode)
                ) && 
                (
                    FingerprintImpressionCategoryDescription == other.FingerprintImpressionCategoryDescription ||
                    FingerprintImpressionCategoryDescription != null &&
                    FingerprintImpressionCategoryDescription.SequenceEqual(other.FingerprintImpressionCategoryDescription)
                ) && 
                (
                    SubjectExistentialDetails == other.SubjectExistentialDetails ||
                    SubjectExistentialDetails != null &&
                    SubjectExistentialDetails.SequenceEqual(other.SubjectExistentialDetails)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Position != null)
                    hashCode = hashCode * 59 + Position.GetHashCode();
                    if (ImpressionCaptureCategoryCode != null)
                    hashCode = hashCode * 59 + ImpressionCaptureCategoryCode.GetHashCode();
                    if (FrictionRidgeImageImpressionCaptureCategoryCode != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageImpressionCaptureCategoryCode.GetHashCode();
                    if (FrictionRidgeImpressionCaptureCode != null)
                    hashCode = hashCode * 59 + FrictionRidgeImpressionCaptureCode.GetHashCode();
                    if (FingerprintImpressionCategoryDescription != null)
                    hashCode = hashCode * 59 + FingerprintImpressionCategoryDescription.GetHashCode();
                    if (SubjectExistentialDetails != null)
                    hashCode = hashCode * 59 + SubjectExistentialDetails.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFingerprintImageType left, BiomFingerprintImageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFingerprintImageType left, BiomFingerprintImageType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
