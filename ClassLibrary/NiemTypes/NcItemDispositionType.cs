/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a result or outcome that happens to a property item after it has been handled or processed.
    /// </summary>
    [DataContract]
    public partial class NcItemDispositionType : NcDispositionType, IEquatable<NcItemDispositionType>
    { 
        /// <summary>
        /// An indication of what happened to a property item. NIEM reference is j:ItemDispositionCode
        /// </summary>
        /// <value>An indication of what happened to a property item. NIEM reference is j:ItemDispositionCode</value>

        [DataMember(Name="code")]
        public List<JItemStatusCodeType> Code { get; set; }

        /// <summary>
        /// A location of a property item after it has been processed. NIEM reference is nc:ItemDispositionLocation
        /// </summary>
        /// <value>A location of a property item after it has been processed. NIEM reference is nc:ItemDispositionLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// An article or thing. NIEM reference is nc:Item
        /// </summary>
        /// <value>An article or thing. NIEM reference is nc:Item</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// An organization that is in possession of a property item. NIEM reference is nc:ItemHoldingOrganization
        /// </summary>
        /// <value>An organization that is in possession of a property item. NIEM reference is nc:ItemHoldingOrganization</value>

        [DataMember(Name="itemHoldingOrganization")]
        public List<NcOrganizationType> ItemHoldingOrganization { get; set; }

        /// <summary>
        /// An organization that moves or relocates a property item. NIEM reference is nc:ItemMovingOrganization
        /// </summary>
        /// <value>An organization that moves or relocates a property item. NIEM reference is nc:ItemMovingOrganization</value>

        [DataMember(Name="itemMovingOrganization")]
        public List<NcOrganizationType> ItemMovingOrganization { get; set; }

        /// <summary>
        /// ncItemDispositionType JSON-LD context
        /// </summary>
        /// <value>ncItemDispositionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncItemDispositionTypeContextJsonldEnum for ../JSON-LD_Contexts/ncItemDispositionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncItemDispositionTypeContext.jsonld")]
            JSONLDContextsncItemDispositionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncItemDispositionType JSON-LD context
        /// </summary>
        /// <value>ncItemDispositionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcItemDispositionType {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  ItemHoldingOrganization: ").Append(ItemHoldingOrganization).Append("\n");
            sb.Append("  ItemMovingOrganization: ").Append(ItemMovingOrganization).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcItemDispositionType)obj);
        }

        /// <summary>
        /// Returns true if NcItemDispositionType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcItemDispositionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcItemDispositionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    ItemHoldingOrganization == other.ItemHoldingOrganization ||
                    ItemHoldingOrganization != null &&
                    ItemHoldingOrganization.SequenceEqual(other.ItemHoldingOrganization)
                ) && 
                (
                    ItemMovingOrganization == other.ItemMovingOrganization ||
                    ItemMovingOrganization != null &&
                    ItemMovingOrganization.SequenceEqual(other.ItemMovingOrganization)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (ItemHoldingOrganization != null)
                    hashCode = hashCode * 59 + ItemHoldingOrganization.GetHashCode();
                    if (ItemMovingOrganization != null)
                    hashCode = hashCode * 59 + ItemMovingOrganization.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcItemDispositionType left, NcItemDispositionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcItemDispositionType left, NcItemDispositionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
