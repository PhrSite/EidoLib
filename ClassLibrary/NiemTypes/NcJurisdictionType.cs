/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a geopolitical area in which an organization, person, or object has a specific range of authority.
    /// </summary>
    [DataContract]
    public partial class NcJurisdictionType : IEquatable<NcJurisdictionType>
    { 
        /// <summary>
        /// A URI for an organization or other authority that assigns identifiers to things identified. NIEM reference is mo:AuthorityURI
        /// </summary>
        /// <value>A URI for an organization or other authority that assigns identifiers to things identified. NIEM reference is mo:AuthorityURI</value>

        [DataMember(Name="authorityUri")]
        public List<NiemXsanyURI> AuthorityUri { get; set; }

        /// <summary>
        /// An area, state, region, or other geographic unit over which some kind of authority exists. NIEM reference is j:JurisdictionANSID20AuthorityCode
        /// </summary>
        /// <value>An area, state, region, or other geographic unit over which some kind of authority exists. NIEM reference is j:JurisdictionANSID20AuthorityCode</value>

        [DataMember(Name="ansiD20AuthorityCode")]
        public List<AamvaD20JurisdictionAuthorityCodeType> AnsiD20AuthorityCode { get; set; }

        /// <summary>
        /// An area in which an organization or person has some kind of authoritative capacity or responsibility over. NIEM reference is nc:JurisdictionText
        /// </summary>
        /// <value>An area in which an organization or person has some kind of authoritative capacity or responsibility over. NIEM reference is nc:JurisdictionText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A name of a city or town. NIEM reference is nc:LocationCityName
        /// </summary>
        /// <value>A name of a city or town. NIEM reference is nc:LocationCityName</value>

        [DataMember(Name="locationCityName")]
        public List<NcProperNameTextType> LocationCityName { get; set; }

        /// <summary>
        /// A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry
        /// </summary>
        /// <value>A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry</value>

        [DataMember(Name="locationCountry")]
        public List<NcCountryType> LocationCountry { get; set; }

        /// <summary>
        /// A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode
        /// </summary>
        /// <value>A county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyCode</value>

        [DataMember(Name="locationCountyCode")]
        public List<CensusUSCountyCodeType> LocationCountyCode { get; set; }

        /// <summary>
        /// A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName
        /// </summary>
        /// <value>A name of a county, parish, vicinage, or other such geopolitical subdivision of a state. NIEM reference is nc:LocationCountyName</value>

        [DataMember(Name="locationCountyName")]
        public List<NcProperNameTextType> LocationCountyName { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState</value>

        [DataMember(Name="locationState")]
        public List<NcStateType> LocationState { get; set; }

        /// <summary>
        /// An identification of a jurisdiction. NIEM reference is nc:JurisdictionIdentification
        /// </summary>
        /// <value>An identification of a jurisdiction. NIEM reference is nc:JurisdictionIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// Additional information about a jurisdiction. NIEM reference is j:JurisdictionAugmentation
        /// </summary>
        /// <value>Additional information about a jurisdiction. NIEM reference is j:JurisdictionAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JJurisdictionAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncJurisdictionType JSON-LD context
        /// </summary>
        /// <value>ncJurisdictionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncJurisdictionTypeContextJsonldEnum for ../JSON-LD_Contexts/ncJurisdictionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncJurisdictionTypeContext.jsonld")]
            JSONLDContextsncJurisdictionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncJurisdictionType JSON-LD context
        /// </summary>
        /// <value>ncJurisdictionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcJurisdictionType {\n");
            sb.Append("  AuthorityUri: ").Append(AuthorityUri).Append("\n");
            sb.Append("  AnsiD20AuthorityCode: ").Append(AnsiD20AuthorityCode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  LocationCityName: ").Append(LocationCityName).Append("\n");
            sb.Append("  LocationCountry: ").Append(LocationCountry).Append("\n");
            sb.Append("  LocationCountyCode: ").Append(LocationCountyCode).Append("\n");
            sb.Append("  LocationCountyName: ").Append(LocationCountyName).Append("\n");
            sb.Append("  LocationState: ").Append(LocationState).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcJurisdictionType)obj);
        }

        /// <summary>
        /// Returns true if NcJurisdictionType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcJurisdictionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcJurisdictionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AuthorityUri == other.AuthorityUri ||
                    AuthorityUri != null &&
                    AuthorityUri.SequenceEqual(other.AuthorityUri)
                ) && 
                (
                    AnsiD20AuthorityCode == other.AnsiD20AuthorityCode ||
                    AnsiD20AuthorityCode != null &&
                    AnsiD20AuthorityCode.SequenceEqual(other.AnsiD20AuthorityCode)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    LocationCityName == other.LocationCityName ||
                    LocationCityName != null &&
                    LocationCityName.SequenceEqual(other.LocationCityName)
                ) && 
                (
                    LocationCountry == other.LocationCountry ||
                    LocationCountry != null &&
                    LocationCountry.SequenceEqual(other.LocationCountry)
                ) && 
                (
                    LocationCountyCode == other.LocationCountyCode ||
                    LocationCountyCode != null &&
                    LocationCountyCode.SequenceEqual(other.LocationCountyCode)
                ) && 
                (
                    LocationCountyName == other.LocationCountyName ||
                    LocationCountyName != null &&
                    LocationCountyName.SequenceEqual(other.LocationCountyName)
                ) && 
                (
                    LocationState == other.LocationState ||
                    LocationState != null &&
                    LocationState.SequenceEqual(other.LocationState)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AuthorityUri != null)
                    hashCode = hashCode * 59 + AuthorityUri.GetHashCode();
                    if (AnsiD20AuthorityCode != null)
                    hashCode = hashCode * 59 + AnsiD20AuthorityCode.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (LocationCityName != null)
                    hashCode = hashCode * 59 + LocationCityName.GetHashCode();
                    if (LocationCountry != null)
                    hashCode = hashCode * 59 + LocationCountry.GetHashCode();
                    if (LocationCountyCode != null)
                    hashCode = hashCode * 59 + LocationCountyCode.GetHashCode();
                    if (LocationCountyName != null)
                    hashCode = hashCode * 59 + LocationCountyName.GetHashCode();
                    if (LocationState != null)
                    hashCode = hashCode * 59 + LocationState.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcJurisdictionType left, NcJurisdictionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcJurisdictionType left, NcJurisdictionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
