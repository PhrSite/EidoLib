/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the history of a participant of a case.
    /// </summary>
    [DataContract]
    public partial class HsHistoricalNarrativeType : IEquatable<HsHistoricalNarrativeType>
    { 
        /// <summary>
        /// A status describing whether a person is competent to understand the court process. NIEM reference is hs:CompetencyStatusText
        /// </summary>
        /// <value>A status describing whether a person is competent to understand the court process. NIEM reference is hs:CompetencyStatusText</value>

        [DataMember(Name="competencyStatus")]
        public List<NcTextType> CompetencyStatus { get; set; }

        /// <summary>
        /// A description of a person&#x27;s criminal history, pending charges, and other relevant legal status information (for example, eligibility for protection under the Soldiers and Sailors Civil Relief Act). NIEM reference is hs:CriminalHistoryPendingChargesText
        /// </summary>
        /// <value>A description of a person&#x27;s criminal history, pending charges, and other relevant legal status information (for example, eligibility for protection under the Soldiers and Sailors Civil Relief Act). NIEM reference is hs:CriminalHistoryPendingChargesText</value>

        [DataMember(Name="criminalHistoryPendingCharges")]
        public List<NcTextType> CriminalHistoryPendingCharges { get; set; }

        /// <summary>
        /// An indigency status of the child. NIEM reference is hs:IndigencyStatus
        /// </summary>
        /// <value>An indigency status of the child. NIEM reference is hs:IndigencyStatus</value>

        [DataMember(Name="indigencyStatus")]
        public List<NcStatusType> IndigencyStatus { get; set; }

        /// <summary>
        /// A description of other cases and situations that may impact a court report. Tribal membership status and other ICWA issues. Includes prior juvenile (non-criminal) history, child support enforcement issues, mental health adjudications. Also identifies interstate placement issues (where there is an ICPC issue or UCCJEA issue). Also indicates the citizenship and legal residency status (if applicable). NIEM reference is hs:NonCriminalLegalIssuesText
        /// </summary>
        /// <value>A description of other cases and situations that may impact a court report. Tribal membership status and other ICWA issues. Includes prior juvenile (non-criminal) history, child support enforcement issues, mental health adjudications. Also identifies interstate placement issues (where there is an ICPC issue or UCCJEA issue). Also indicates the citizenship and legal residency status (if applicable). NIEM reference is hs:NonCriminalLegalIssuesText</value>

        [DataMember(Name="nonCriminalLegalIssues")]
        public List<NcTextType> NonCriminalLegalIssues { get; set; }

        /// <summary>
        /// A presenting history of the circumstances surrounding removal of the child. Includes some analysis of how those circumstances put the child in danger or actually harmed the child. NIEM reference is hs:PresentingProblemText
        /// </summary>
        /// <value>A presenting history of the circumstances surrounding removal of the child. Includes some analysis of how those circumstances put the child in danger or actually harmed the child. NIEM reference is hs:PresentingProblemText</value>

        [DataMember(Name="presentingProblem")]
        public List<NcTextType> PresentingProblem { get; set; }

        /// <summary>
        /// hsHistoricalNarrativeType JSON-LD context
        /// </summary>
        /// <value>hsHistoricalNarrativeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsHistoricalNarrativeTypeContextJsonldEnum for ../JSON-LD_Contexts/hsHistoricalNarrativeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsHistoricalNarrativeTypeContext.jsonld")]
            JSONLDContextshsHistoricalNarrativeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsHistoricalNarrativeType JSON-LD context
        /// </summary>
        /// <value>hsHistoricalNarrativeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsHistoricalNarrativeType {\n");
            sb.Append("  CompetencyStatus: ").Append(CompetencyStatus).Append("\n");
            sb.Append("  CriminalHistoryPendingCharges: ").Append(CriminalHistoryPendingCharges).Append("\n");
            sb.Append("  IndigencyStatus: ").Append(IndigencyStatus).Append("\n");
            sb.Append("  NonCriminalLegalIssues: ").Append(NonCriminalLegalIssues).Append("\n");
            sb.Append("  PresentingProblem: ").Append(PresentingProblem).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsHistoricalNarrativeType)obj);
        }

        /// <summary>
        /// Returns true if HsHistoricalNarrativeType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsHistoricalNarrativeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsHistoricalNarrativeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CompetencyStatus == other.CompetencyStatus ||
                    CompetencyStatus != null &&
                    CompetencyStatus.SequenceEqual(other.CompetencyStatus)
                ) && 
                (
                    CriminalHistoryPendingCharges == other.CriminalHistoryPendingCharges ||
                    CriminalHistoryPendingCharges != null &&
                    CriminalHistoryPendingCharges.SequenceEqual(other.CriminalHistoryPendingCharges)
                ) && 
                (
                    IndigencyStatus == other.IndigencyStatus ||
                    IndigencyStatus != null &&
                    IndigencyStatus.SequenceEqual(other.IndigencyStatus)
                ) && 
                (
                    NonCriminalLegalIssues == other.NonCriminalLegalIssues ||
                    NonCriminalLegalIssues != null &&
                    NonCriminalLegalIssues.SequenceEqual(other.NonCriminalLegalIssues)
                ) && 
                (
                    PresentingProblem == other.PresentingProblem ||
                    PresentingProblem != null &&
                    PresentingProblem.SequenceEqual(other.PresentingProblem)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CompetencyStatus != null)
                    hashCode = hashCode * 59 + CompetencyStatus.GetHashCode();
                    if (CriminalHistoryPendingCharges != null)
                    hashCode = hashCode * 59 + CriminalHistoryPendingCharges.GetHashCode();
                    if (IndigencyStatus != null)
                    hashCode = hashCode * 59 + IndigencyStatus.GetHashCode();
                    if (NonCriminalLegalIssues != null)
                    hashCode = hashCode * 59 + NonCriminalLegalIssues.GetHashCode();
                    if (PresentingProblem != null)
                    hashCode = hashCode * 59 + PresentingProblem.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsHistoricalNarrativeType left, HsHistoricalNarrativeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsHistoricalNarrativeType left, HsHistoricalNarrativeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
