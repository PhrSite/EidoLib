/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person who offers witness testimony as part of hearing.
    /// </summary>
    [DataContract]
    public partial class JHearingWitnessType : JWitnessType, IEquatable<JHearingWitnessType>
    { 
        /// <summary>
        /// True if the request for the witness was granted; false otherwise. NIEM reference is j:HearingWitnessGrantedIndicator
        /// </summary>
        /// <value>True if the request for the witness was granted; false otherwise. NIEM reference is j:HearingWitnessGrantedIndicator</value>

        [DataMember(Name="isGranted")]
        public List<NiemXsboolean> IsGranted { get; set; }

        /// <summary>
        /// A question given to the witness. NIEM reference is j:HearingWitnessQuestionText
        /// </summary>
        /// <value>A question given to the witness. NIEM reference is j:HearingWitnessQuestionText</value>

        [DataMember(Name="question")]
        public List<NcTextType> Question { get; set; }

        /// <summary>
        /// An answer a witness provided in response to a question. NIEM reference is j:HearingWitnessAnswerText
        /// </summary>
        /// <value>An answer a witness provided in response to a question. NIEM reference is j:HearingWitnessAnswerText</value>

        [DataMember(Name="answer")]
        public List<NcTextType> Answer { get; set; }

        /// <summary>
        /// True if that the witness requested at the hearing is the investigative employee; false otherwise. NIEM reference is j:HearingWitnessRequestedInvestigativeIndicator
        /// </summary>
        /// <value>True if that the witness requested at the hearing is the investigative employee; false otherwise. NIEM reference is j:HearingWitnessRequestedInvestigativeIndicator</value>

        [DataMember(Name="isRequestedInvestigative")]
        public List<NiemXsboolean> IsRequestedInvestigative { get; set; }

        /// <summary>
        /// True if that the subject waived the request for witness(es) at the hearing; false otherwise. NIEM reference is j:HearingWitnessWaivedIndicator
        /// </summary>
        /// <value>True if that the subject waived the request for witness(es) at the hearing; false otherwise. NIEM reference is j:HearingWitnessWaivedIndicator</value>

        [DataMember(Name="isWaived")]
        public List<NiemXsboolean> IsWaived { get; set; }

        /// <summary>
        /// A description of a witness who is also an inmate. NIEM reference is j:HearingWitnessOffenderText
        /// </summary>
        /// <value>A description of a witness who is also an inmate. NIEM reference is j:HearingWitnessOffenderText</value>

        [DataMember(Name="offender")]
        public List<NcTextType> Offender { get; set; }

        /// <summary>
        /// A kind of witness involved in a disciplinary hearing. NIEM reference is j:HearingWitnessCategoryText
        /// </summary>
        /// <value>A kind of witness involved in a disciplinary hearing. NIEM reference is j:HearingWitnessCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// An explanation as to why the request for a witness was not granted. NIEM reference is j:HearingWitnessNotGrantedReasonText
        /// </summary>
        /// <value>An explanation as to why the request for a witness was not granted. NIEM reference is j:HearingWitnessNotGrantedReasonText</value>

        [DataMember(Name="notGrantedReason")]
        public List<NcTextType> NotGrantedReason { get; set; }

        /// <summary>
        /// True if the witness was contacted by telephone; false otherwise. NIEM reference is j:HearingWitnessContactedIndicator
        /// </summary>
        /// <value>True if the witness was contacted by telephone; false otherwise. NIEM reference is j:HearingWitnessContactedIndicator</value>

        [DataMember(Name="isContacted")]
        public List<NiemXsboolean> IsContacted { get; set; }

        /// <summary>
        /// jHearingWitnessType JSON-LD context
        /// </summary>
        /// <value>jHearingWitnessType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjHearingWitnessTypeContextJsonldEnum for ../JSON-LD_Contexts/jHearingWitnessTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jHearingWitnessTypeContext.jsonld")]
            JSONLDContextsjHearingWitnessTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jHearingWitnessType JSON-LD context
        /// </summary>
        /// <value>jHearingWitnessType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JHearingWitnessType {\n");
            sb.Append("  IsGranted: ").Append(IsGranted).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  IsRequestedInvestigative: ").Append(IsRequestedInvestigative).Append("\n");
            sb.Append("  IsWaived: ").Append(IsWaived).Append("\n");
            sb.Append("  Offender: ").Append(Offender).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  NotGrantedReason: ").Append(NotGrantedReason).Append("\n");
            sb.Append("  IsContacted: ").Append(IsContacted).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JHearingWitnessType)obj);
        }

        /// <summary>
        /// Returns true if JHearingWitnessType instances are equal
        /// </summary>
        /// <param name="other">Instance of JHearingWitnessType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JHearingWitnessType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsGranted == other.IsGranted ||
                    IsGranted != null &&
                    IsGranted.SequenceEqual(other.IsGranted)
                ) && 
                (
                    Question == other.Question ||
                    Question != null &&
                    Question.SequenceEqual(other.Question)
                ) && 
                (
                    Answer == other.Answer ||
                    Answer != null &&
                    Answer.SequenceEqual(other.Answer)
                ) && 
                (
                    IsRequestedInvestigative == other.IsRequestedInvestigative ||
                    IsRequestedInvestigative != null &&
                    IsRequestedInvestigative.SequenceEqual(other.IsRequestedInvestigative)
                ) && 
                (
                    IsWaived == other.IsWaived ||
                    IsWaived != null &&
                    IsWaived.SequenceEqual(other.IsWaived)
                ) && 
                (
                    Offender == other.Offender ||
                    Offender != null &&
                    Offender.SequenceEqual(other.Offender)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    NotGrantedReason == other.NotGrantedReason ||
                    NotGrantedReason != null &&
                    NotGrantedReason.SequenceEqual(other.NotGrantedReason)
                ) && 
                (
                    IsContacted == other.IsContacted ||
                    IsContacted != null &&
                    IsContacted.SequenceEqual(other.IsContacted)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsGranted != null)
                    hashCode = hashCode * 59 + IsGranted.GetHashCode();
                    if (Question != null)
                    hashCode = hashCode * 59 + Question.GetHashCode();
                    if (Answer != null)
                    hashCode = hashCode * 59 + Answer.GetHashCode();
                    if (IsRequestedInvestigative != null)
                    hashCode = hashCode * 59 + IsRequestedInvestigative.GetHashCode();
                    if (IsWaived != null)
                    hashCode = hashCode * 59 + IsWaived.GetHashCode();
                    if (Offender != null)
                    hashCode = hashCode * 59 + Offender.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (NotGrantedReason != null)
                    hashCode = hashCode * 59 + NotGrantedReason.GetHashCode();
                    if (IsContacted != null)
                    hashCode = hashCode * 59 + IsContacted.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JHearingWitnessType left, JHearingWitnessType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JHearingWitnessType left, JHearingWitnessType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
