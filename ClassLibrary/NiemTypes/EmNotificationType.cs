/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the  function of the message
    /// </summary>
    [DataContract]
    public partial class EmNotificationType : NcActivityType, IEquatable<EmNotificationType>
    { 
        /// <summary>
        /// An identifier of the alert message. A number or string uniquely identifying this message, assigned by the sender NIEM reference is em:NotificationID
        /// </summary>
        /// <value>An identifier of the alert message. A number or string uniquely identifying this message, assigned by the sender NIEM reference is em:NotificationID</value>

        [DataMember(Name="notificationId")]
        public List<NcIdentificationType> NotificationId { get; set; }

        /// <summary>
        /// An identifier for the particular source of this alert; e.g., an operator or a specific device NIEM reference is em:NotificationSourceID
        /// </summary>
        /// <value>An identifier for the particular source of this alert; e.g., an operator or a specific device NIEM reference is em:NotificationSourceID</value>

        [DataMember(Name="sourceId")]
        public List<NcIdentificationType> SourceId { get; set; }

        /// <summary>
        /// A name, in text, of particular source of this alert; e.g., an operator or a specific device NIEM reference is em:NotificationSourceNameText
        /// </summary>
        /// <value>A name, in text, of particular source of this alert; e.g., an operator or a specific device NIEM reference is em:NotificationSourceNameText</value>

        [DataMember(Name="sourceName")]
        public List<NcTextType> SourceName { get; set; }

        /// <summary>
        /// An element for recipient of the notification NIEM reference is em:NotificationRecipient
        /// </summary>
        /// <value>An element for recipient of the notification NIEM reference is em:NotificationRecipient</value>

        [DataMember(Name="recipient")]
        public List<EmNotifierType> Recipient { get; set; }

        /// <summary>
        /// An element for originator of the notification NIEM reference is em:NotificationOriginator
        /// </summary>
        /// <value>An element for originator of the notification NIEM reference is em:NotificationOriginator</value>

        [DataMember(Name="originator")]
        public List<EmNotifierType> Originator { get; set; }

        /// <summary>
        /// An event that begins when an assembly of equipment or a device installed in or for commercial or residential premises, or other property, is triggered to transmit a signal, visibly, audibly, electronically, mechanically, or otherwise, to indicate NIEM reference is em:AlarmNotification
        /// </summary>
        /// <value>An event that begins when an assembly of equipment or a device installed in or for commercial or residential premises, or other property, is triggered to transmit a signal, visibly, audibly, electronically, mechanically, or otherwise, to indicate NIEM reference is em:AlarmNotification</value>

        [DataMember(Name="alarm")]
        public List<EmAlarmNotificationType> Alarm { get; set; }

        /// <summary>
        /// A notification of an incident or threat that may require a coordinated response or action. A type of NOTIFICATION NIEM reference is em:AlertNotification
        /// </summary>
        /// <value>A notification of an incident or threat that may require a coordinated response or action. A type of NOTIFICATION NIEM reference is em:AlertNotification</value>

        [DataMember(Name="alert")]
        public List<EmAlertNotificationType> Alert { get; set; }

        /// <summary>
        /// An element for representing a generalized notification to broadcast NIEM reference is em:GeneralNotification
        /// </summary>
        /// <value>An element for representing a generalized notification to broadcast NIEM reference is em:GeneralNotification</value>

        [DataMember(Name="general")]
        public List<EmGeneralNotificationType> General { get; set; }

        /// <summary>
        /// An element for representing an incident NIEM reference is em:IncidentNotification
        /// </summary>
        /// <value>An element for representing an incident NIEM reference is em:IncidentNotification</value>

        [DataMember(Name="incident")]
        public List<EmIncidentNotificationType> Incident { get; set; }

        /// <summary>
        /// An element for an emergency operation notification NIEM reference is em:OperationalStatusNotification
        /// </summary>
        /// <value>An element for an emergency operation notification NIEM reference is em:OperationalStatusNotification</value>

        [DataMember(Name="operationalStatus")]
        public List<EmOperationalStatusNotificationType> OperationalStatus { get; set; }

        /// <summary>
        /// An element to represent that the specified units are being logged off NIEM reference is em:UnitLogoffNotification
        /// </summary>
        /// <value>An element to represent that the specified units are being logged off NIEM reference is em:UnitLogoffNotification</value>

        [DataMember(Name="unitLogoff")]
        public List<EmUnitLogoffNotificationType> UnitLogoff { get; set; }

        /// <summary>
        /// An element to represent that the specified units are being logged on NIEM reference is em:UnitLogonNotification
        /// </summary>
        /// <value>An element to represent that the specified units are being logged on NIEM reference is em:UnitLogonNotification</value>

        [DataMember(Name="unitLogon")]
        public List<EmUnitLogonNotificationType> UnitLogon { get; set; }

        /// <summary>
        /// A code  value denoting the nature of the notification message NIEM reference is em:NotificationFunctionCategoryCode
        /// </summary>
        /// <value>A code  value denoting the nature of the notification message NIEM reference is em:NotificationFunctionCategoryCode</value>

        [DataMember(Name="functionCategoryCode")]
        public List<EmNotificationFunctionCategoryCodeType> FunctionCategoryCode { get; set; }

        /// <summary>
        /// A significant word or phrase related to the notification message. It may determine message routing decisions NIEM reference is em:NotificationKeywordText
        /// </summary>
        /// <value>A significant word or phrase related to the notification message. It may determine message routing decisions NIEM reference is em:NotificationKeywordText</value>

        [DataMember(Name="keyword")]
        public List<NcTextType> Keyword { get; set; }

        /// <summary>
        /// A code denoting the primary language used in the payload or body of the notification message NIEM reference is em:NotificationLanguageCode
        /// </summary>
        /// <value>A code denoting the primary language used in the payload or body of the notification message NIEM reference is em:NotificationLanguageCode</value>

        [DataMember(Name="languageCode")]
        public List<Iso6393LanguageCodeType> LanguageCode { get; set; }

        /// <summary>
        /// A set of details about the intended level of distribution of the notification message NIEM reference is em:NotificationDistributionScope
        /// </summary>
        /// <value>A set of details about the intended level of distribution of the notification message NIEM reference is em:NotificationDistributionScope</value>

        [DataMember(Name="distributionScope")]
        public List<EmNotificationDistributionScopeType> DistributionScope { get; set; }

        /// <summary>
        /// An element for possible notification message types NIEM reference is em:NotificationCategoryCode
        /// </summary>
        /// <value>An element for possible notification message types NIEM reference is em:NotificationCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<EmNotificationCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A notification target location NIEM reference is em:NotificationTargetLocation
        /// </summary>
        /// <value>A notification target location NIEM reference is em:NotificationTargetLocation</value>

        [DataMember(Name="targetLocation")]
        public List<EmNotificationTargetLocationType> TargetLocation { get; set; }

        /// <summary>
        /// A textual details about the confidentiality of a notification NIEM reference is em:NotificationConfidentialityText
        /// </summary>
        /// <value>A textual details about the confidentiality of a notification NIEM reference is em:NotificationConfidentialityText</value>

        [DataMember(Name="confidentiality")]
        public List<NcTextType> Confidentiality { get; set; }

        /// <summary>
        /// An element for possible message status types indicating outcome of notification transmission NIEM reference is em:NotificationMessageStatusCode
        /// </summary>
        /// <value>An element for possible message status types indicating outcome of notification transmission NIEM reference is em:NotificationMessageStatusCode</value>

        [DataMember(Name="messageStatusCode")]
        public List<EmNotificationMessageStatusCodeType> MessageStatusCode { get; set; }

        /// <summary>
        /// Additional information about a Notification. NIEM reference is j:NotificationAugmentation
        /// </summary>
        /// <value>Additional information about a Notification. NIEM reference is j:NotificationAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JNotificationAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// emNotificationType JSON-LD context
        /// </summary>
        /// <value>emNotificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemNotificationTypeContextJsonldEnum for ../JSON-LD_Contexts/emNotificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emNotificationTypeContext.jsonld")]
            JSONLDContextsemNotificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emNotificationType JSON-LD context
        /// </summary>
        /// <value>emNotificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmNotificationType {\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceName: ").Append(SourceName).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Originator: ").Append(Originator).Append("\n");
            sb.Append("  Alarm: ").Append(Alarm).Append("\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  General: ").Append(General).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  UnitLogoff: ").Append(UnitLogoff).Append("\n");
            sb.Append("  UnitLogon: ").Append(UnitLogon).Append("\n");
            sb.Append("  FunctionCategoryCode: ").Append(FunctionCategoryCode).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  DistributionScope: ").Append(DistributionScope).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  TargetLocation: ").Append(TargetLocation).Append("\n");
            sb.Append("  Confidentiality: ").Append(Confidentiality).Append("\n");
            sb.Append("  MessageStatusCode: ").Append(MessageStatusCode).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmNotificationType)obj);
        }

        /// <summary>
        /// Returns true if EmNotificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmNotificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmNotificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NotificationId == other.NotificationId ||
                    NotificationId != null &&
                    NotificationId.SequenceEqual(other.NotificationId)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.SequenceEqual(other.SourceId)
                ) && 
                (
                    SourceName == other.SourceName ||
                    SourceName != null &&
                    SourceName.SequenceEqual(other.SourceName)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.SequenceEqual(other.Recipient)
                ) && 
                (
                    Originator == other.Originator ||
                    Originator != null &&
                    Originator.SequenceEqual(other.Originator)
                ) && 
                (
                    Alarm == other.Alarm ||
                    Alarm != null &&
                    Alarm.SequenceEqual(other.Alarm)
                ) && 
                (
                    Alert == other.Alert ||
                    Alert != null &&
                    Alert.SequenceEqual(other.Alert)
                ) && 
                (
                    General == other.General ||
                    General != null &&
                    General.SequenceEqual(other.General)
                ) && 
                (
                    Incident == other.Incident ||
                    Incident != null &&
                    Incident.SequenceEqual(other.Incident)
                ) && 
                (
                    OperationalStatus == other.OperationalStatus ||
                    OperationalStatus != null &&
                    OperationalStatus.SequenceEqual(other.OperationalStatus)
                ) && 
                (
                    UnitLogoff == other.UnitLogoff ||
                    UnitLogoff != null &&
                    UnitLogoff.SequenceEqual(other.UnitLogoff)
                ) && 
                (
                    UnitLogon == other.UnitLogon ||
                    UnitLogon != null &&
                    UnitLogon.SequenceEqual(other.UnitLogon)
                ) && 
                (
                    FunctionCategoryCode == other.FunctionCategoryCode ||
                    FunctionCategoryCode != null &&
                    FunctionCategoryCode.SequenceEqual(other.FunctionCategoryCode)
                ) && 
                (
                    Keyword == other.Keyword ||
                    Keyword != null &&
                    Keyword.SequenceEqual(other.Keyword)
                ) && 
                (
                    LanguageCode == other.LanguageCode ||
                    LanguageCode != null &&
                    LanguageCode.SequenceEqual(other.LanguageCode)
                ) && 
                (
                    DistributionScope == other.DistributionScope ||
                    DistributionScope != null &&
                    DistributionScope.SequenceEqual(other.DistributionScope)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    TargetLocation == other.TargetLocation ||
                    TargetLocation != null &&
                    TargetLocation.SequenceEqual(other.TargetLocation)
                ) && 
                (
                    Confidentiality == other.Confidentiality ||
                    Confidentiality != null &&
                    Confidentiality.SequenceEqual(other.Confidentiality)
                ) && 
                (
                    MessageStatusCode == other.MessageStatusCode ||
                    MessageStatusCode != null &&
                    MessageStatusCode.SequenceEqual(other.MessageStatusCode)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NotificationId != null)
                    hashCode = hashCode * 59 + NotificationId.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (SourceName != null)
                    hashCode = hashCode * 59 + SourceName.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (Originator != null)
                    hashCode = hashCode * 59 + Originator.GetHashCode();
                    if (Alarm != null)
                    hashCode = hashCode * 59 + Alarm.GetHashCode();
                    if (Alert != null)
                    hashCode = hashCode * 59 + Alert.GetHashCode();
                    if (General != null)
                    hashCode = hashCode * 59 + General.GetHashCode();
                    if (Incident != null)
                    hashCode = hashCode * 59 + Incident.GetHashCode();
                    if (OperationalStatus != null)
                    hashCode = hashCode * 59 + OperationalStatus.GetHashCode();
                    if (UnitLogoff != null)
                    hashCode = hashCode * 59 + UnitLogoff.GetHashCode();
                    if (UnitLogon != null)
                    hashCode = hashCode * 59 + UnitLogon.GetHashCode();
                    if (FunctionCategoryCode != null)
                    hashCode = hashCode * 59 + FunctionCategoryCode.GetHashCode();
                    if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                    if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                    if (DistributionScope != null)
                    hashCode = hashCode * 59 + DistributionScope.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (TargetLocation != null)
                    hashCode = hashCode * 59 + TargetLocation.GetHashCode();
                    if (Confidentiality != null)
                    hashCode = hashCode * 59 + Confidentiality.GetHashCode();
                    if (MessageStatusCode != null)
                    hashCode = hashCode * 59 + MessageStatusCode.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmNotificationType left, EmNotificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmNotificationType left, EmNotificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
