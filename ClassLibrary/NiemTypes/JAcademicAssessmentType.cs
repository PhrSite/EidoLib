/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an institution or agency assessment process for determining academic needs of a subject.
    /// </summary>
    [DataContract]
    public partial class JAcademicAssessmentType : NcAssessmentType, IEquatable<JAcademicAssessmentType>
    { 
        /// <summary>
        /// An assessment history of education and academic achievement of a subject. NIEM reference is j:AcademicAssessmentEducation
        /// </summary>
        /// <value>An assessment history of education and academic achievement of a subject. NIEM reference is j:AcademicAssessmentEducation</value>

        [DataMember(Name="education")]
        public List<HsEducationType> Education { get; set; }

        /// <summary>
        /// A number for the grade point score awarded to a subject for a completed academic course. NIEM reference is j:AcademicAssessmentGradePointLevelNumeric
        /// </summary>
        /// <value>A number for the grade point score awarded to a subject for a completed academic course. NIEM reference is j:AcademicAssessmentGradePointLevelNumeric</value>

        [DataMember(Name="gradePointLevelNumeric")]
        public List<NcNumericType> GradePointLevelNumeric { get; set; }

        /// <summary>
        /// A record of academic achievement for a subject. NIEM reference is j:AcademicRecord
        /// </summary>
        /// <value>A record of academic achievement for a subject. NIEM reference is j:AcademicRecord</value>

        [DataMember(Name="academicRecord")]
        public List<JAcademicRecordType> AcademicRecord { get; set; }

        /// <summary>
        /// A specific course content related to core education and academic assessments and programs. NIEM reference is j:AcademicSubjectMatter
        /// </summary>
        /// <value>A specific course content related to core education and academic assessments and programs. NIEM reference is j:AcademicSubjectMatter</value>

        [DataMember(Name="academicSubjectMatter")]
        public List<JAcademicSubjectMatterType> AcademicSubjectMatter { get; set; }

        /// <summary>
        /// An examination of a course of study. NIEM reference is j:AcademicTestText
        /// </summary>
        /// <value>An examination of a course of study. NIEM reference is j:AcademicTestText</value>

        [DataMember(Name="academicTest")]
        public List<NcTextType> AcademicTest { get; set; }

        /// <summary>
        /// jAcademicAssessmentType JSON-LD context
        /// </summary>
        /// <value>jAcademicAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjAcademicAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jAcademicAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jAcademicAssessmentTypeContext.jsonld")]
            JSONLDContextsjAcademicAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jAcademicAssessmentType JSON-LD context
        /// </summary>
        /// <value>jAcademicAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JAcademicAssessmentType {\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  GradePointLevelNumeric: ").Append(GradePointLevelNumeric).Append("\n");
            sb.Append("  AcademicRecord: ").Append(AcademicRecord).Append("\n");
            sb.Append("  AcademicSubjectMatter: ").Append(AcademicSubjectMatter).Append("\n");
            sb.Append("  AcademicTest: ").Append(AcademicTest).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JAcademicAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JAcademicAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JAcademicAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JAcademicAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Education == other.Education ||
                    Education != null &&
                    Education.SequenceEqual(other.Education)
                ) && 
                (
                    GradePointLevelNumeric == other.GradePointLevelNumeric ||
                    GradePointLevelNumeric != null &&
                    GradePointLevelNumeric.SequenceEqual(other.GradePointLevelNumeric)
                ) && 
                (
                    AcademicRecord == other.AcademicRecord ||
                    AcademicRecord != null &&
                    AcademicRecord.SequenceEqual(other.AcademicRecord)
                ) && 
                (
                    AcademicSubjectMatter == other.AcademicSubjectMatter ||
                    AcademicSubjectMatter != null &&
                    AcademicSubjectMatter.SequenceEqual(other.AcademicSubjectMatter)
                ) && 
                (
                    AcademicTest == other.AcademicTest ||
                    AcademicTest != null &&
                    AcademicTest.SequenceEqual(other.AcademicTest)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Education != null)
                    hashCode = hashCode * 59 + Education.GetHashCode();
                    if (GradePointLevelNumeric != null)
                    hashCode = hashCode * 59 + GradePointLevelNumeric.GetHashCode();
                    if (AcademicRecord != null)
                    hashCode = hashCode * 59 + AcademicRecord.GetHashCode();
                    if (AcademicSubjectMatter != null)
                    hashCode = hashCode * 59 + AcademicSubjectMatter.GetHashCode();
                    if (AcademicTest != null)
                    hashCode = hashCode * 59 + AcademicTest.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JAcademicAssessmentType left, JAcademicAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JAcademicAssessmentType left, JAcademicAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
