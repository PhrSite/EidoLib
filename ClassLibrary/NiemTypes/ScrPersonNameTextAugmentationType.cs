/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a name of a person.
    /// </summary>
    [DataContract]
    public partial class ScrPersonNameTextAugmentationType : IEquatable<ScrPersonNameTextAugmentationType>
    { 
        /// <summary>
        /// An identifier that represents a NAME TRANSLATION REPRESENTATION NIEM reference is scr:nameTranslationRepresentationID
        /// </summary>
        /// <value>An identifier that represents a NAME TRANSLATION REPRESENTATION NIEM reference is scr:nameTranslationRepresentationID</value>

        [DataMember(Name="nameTranslationRepresentationId")]
        public string NameTranslationRepresentationId { get; set; }

        /// <summary>
        /// A translation representation of a name NIEM reference is scr:nameTranslationRepresentationText
        /// </summary>
        /// <value>A translation representation of a name NIEM reference is scr:nameTranslationRepresentationText</value>

        [DataMember(Name="nameTranslationRepresentation")]
        public string NameTranslationRepresentation { get; set; }

        /// <summary>
        /// A short name that describes the translation. NIEM reference is scr:nameTranslationShortName
        /// </summary>
        /// <value>A short name that describes the translation. NIEM reference is scr:nameTranslationShortName</value>

        [DataMember(Name="nameTranslationShortName")]
        public string NameTranslationShortName { get; set; }

        /// <summary>
        /// A kind of name translation. NIEM reference is scr:nameTranslationCategoryCode
        /// </summary>
        /// <value>A kind of name translation. NIEM reference is scr:nameTranslationCategoryCode</value>

        [DataMember(Name="nameTranslationCategoryCode")]
        public string NameTranslationCategoryCode { get; set; }

        /// <summary>
        /// A description of the values used for Name translation. NIEM reference is scr:nameTranslationCategoryDescriptionText
        /// </summary>
        /// <value>A description of the values used for Name translation. NIEM reference is scr:nameTranslationCategoryDescriptionText</value>

        [DataMember(Name="nameTranslationCategoryDescription")]
        public string NameTranslationCategoryDescription { get; set; }

        /// <summary>
        /// scrPersonNameTextAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrPersonNameTextAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrPersonNameTextAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrPersonNameTextAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrPersonNameTextAugmentationTypeContext.jsonld")]
            JSONLDContextsscrPersonNameTextAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrPersonNameTextAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrPersonNameTextAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrPersonNameTextAugmentationType {\n");
            sb.Append("  NameTranslationRepresentationId: ").Append(NameTranslationRepresentationId).Append("\n");
            sb.Append("  NameTranslationRepresentation: ").Append(NameTranslationRepresentation).Append("\n");
            sb.Append("  NameTranslationShortName: ").Append(NameTranslationShortName).Append("\n");
            sb.Append("  NameTranslationCategoryCode: ").Append(NameTranslationCategoryCode).Append("\n");
            sb.Append("  NameTranslationCategoryDescription: ").Append(NameTranslationCategoryDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrPersonNameTextAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrPersonNameTextAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrPersonNameTextAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrPersonNameTextAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NameTranslationRepresentationId == other.NameTranslationRepresentationId ||
                    NameTranslationRepresentationId != null &&
                    NameTranslationRepresentationId.Equals(other.NameTranslationRepresentationId)
                ) && 
                (
                    NameTranslationRepresentation == other.NameTranslationRepresentation ||
                    NameTranslationRepresentation != null &&
                    NameTranslationRepresentation.Equals(other.NameTranslationRepresentation)
                ) && 
                (
                    NameTranslationShortName == other.NameTranslationShortName ||
                    NameTranslationShortName != null &&
                    NameTranslationShortName.Equals(other.NameTranslationShortName)
                ) && 
                (
                    NameTranslationCategoryCode == other.NameTranslationCategoryCode ||
                    NameTranslationCategoryCode != null &&
                    NameTranslationCategoryCode.Equals(other.NameTranslationCategoryCode)
                ) && 
                (
                    NameTranslationCategoryDescription == other.NameTranslationCategoryDescription ||
                    NameTranslationCategoryDescription != null &&
                    NameTranslationCategoryDescription.Equals(other.NameTranslationCategoryDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NameTranslationRepresentationId != null)
                    hashCode = hashCode * 59 + NameTranslationRepresentationId.GetHashCode();
                    if (NameTranslationRepresentation != null)
                    hashCode = hashCode * 59 + NameTranslationRepresentation.GetHashCode();
                    if (NameTranslationShortName != null)
                    hashCode = hashCode * 59 + NameTranslationShortName.GetHashCode();
                    if (NameTranslationCategoryCode != null)
                    hashCode = hashCode * 59 + NameTranslationCategoryCode.GetHashCode();
                    if (NameTranslationCategoryDescription != null)
                    hashCode = hashCode * 59 + NameTranslationCategoryDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrPersonNameTextAugmentationType left, ScrPersonNameTextAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrPersonNameTextAugmentationType left, ScrPersonNameTextAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
