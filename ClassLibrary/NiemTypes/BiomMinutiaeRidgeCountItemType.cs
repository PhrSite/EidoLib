/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a distance between two minutiae in ridges
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaeRidgeCountItemType : IEquatable<BiomMinutiaeRidgeCountItemType>
    { 
        /// <summary>
        /// An index identifier for uniquely denoting a minutia NIEM reference is biom:MinutiaID
        /// </summary>
        /// <value>An index identifier for uniquely denoting a minutia NIEM reference is biom:MinutiaID</value>

        [DataMember(Name="minutiaId")]
        public List<NiemXspositiveInteger> MinutiaId { get; set; }

        /// <summary>
        /// An index identifier for a second minutia, when two minutia are to be examined NIEM reference is biom:MinutiaReferenceID
        /// </summary>
        /// <value>An index identifier for a second minutia, when two minutia are to be examined NIEM reference is biom:MinutiaReferenceID</value>

        [DataMember(Name="minutiaReferenceId")]
        public List<NiemXspositiveInteger> MinutiaReferenceId { get; set; }

        /// <summary>
        /// A number of friction ridges between two features on an image NIEM reference is biom:RidgeCountValue
        /// </summary>
        /// <value>A number of friction ridges between two features on an image NIEM reference is biom:RidgeCountValue</value>

        [DataMember(Name="ridgeCountValue")]
        public List<NiemXsnonNegativeInteger> RidgeCountValue { get; set; }

        /// <summary>
        /// biomMinutiaeRidgeCountItemType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeRidgeCountItemType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaeRidgeCountItemTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaeRidgeCountItemTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaeRidgeCountItemTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaeRidgeCountItemTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaeRidgeCountItemType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeRidgeCountItemType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaeRidgeCountItemType {\n");
            sb.Append("  MinutiaId: ").Append(MinutiaId).Append("\n");
            sb.Append("  MinutiaReferenceId: ").Append(MinutiaReferenceId).Append("\n");
            sb.Append("  RidgeCountValue: ").Append(RidgeCountValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaeRidgeCountItemType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaeRidgeCountItemType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaeRidgeCountItemType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaeRidgeCountItemType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MinutiaId == other.MinutiaId ||
                    MinutiaId != null &&
                    MinutiaId.SequenceEqual(other.MinutiaId)
                ) && 
                (
                    MinutiaReferenceId == other.MinutiaReferenceId ||
                    MinutiaReferenceId != null &&
                    MinutiaReferenceId.SequenceEqual(other.MinutiaReferenceId)
                ) && 
                (
                    RidgeCountValue == other.RidgeCountValue ||
                    RidgeCountValue != null &&
                    RidgeCountValue.SequenceEqual(other.RidgeCountValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MinutiaId != null)
                    hashCode = hashCode * 59 + MinutiaId.GetHashCode();
                    if (MinutiaReferenceId != null)
                    hashCode = hashCode * 59 + MinutiaReferenceId.GetHashCode();
                    if (RidgeCountValue != null)
                    hashCode = hashCode * 59 + RidgeCountValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaeRidgeCountItemType left, BiomMinutiaeRidgeCountItemType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaeRidgeCountItemType left, BiomMinutiaeRidgeCountItemType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
