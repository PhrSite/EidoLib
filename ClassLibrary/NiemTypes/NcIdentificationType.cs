/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a representation of an identity.
    /// </summary>
    [DataContract]
    public partial class NcIdentificationType : IEquatable<NcIdentificationType>
    { 
        /// <summary>
        /// An area, region, or unit where a unique identification is issued. NIEM reference is nc:IdentificationJurisdiction
        /// </summary>
        /// <value>An area, region, or unit where a unique identification is issued. NIEM reference is nc:IdentificationJurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public List<NcJurisdictionType> Jurisdiction { get; set; }

        /// <summary>
        /// An identifier. NIEM reference is nc:IdentificationID
        /// </summary>
        /// <value>An identifier. NIEM reference is nc:IdentificationID</value>

        [DataMember(Name="identificationId")]
        public List<NiemXsstring> IdentificationId { get; set; }

        /// <summary>
        /// A kind of conveyance identification. NIEM reference is scr:ConveyanceIdentificationCategoryCode
        /// </summary>
        /// <value>A kind of conveyance identification. NIEM reference is scr:ConveyanceIdentificationCategoryCode</value>

        [DataMember(Name="conveyanceCategoryCode")]
        public List<ScrConveyanceIdentificationCategoryCodeType> ConveyanceCategoryCode { get; set; }

        /// <summary>
        /// A kind of financial account number. NIEM reference is nc:FinancialAccountNumberCategoryCode
        /// </summary>
        /// <value>A kind of financial account number. NIEM reference is nc:FinancialAccountNumberCategoryCode</value>

        [DataMember(Name="financialAccountNumberCategoryCode")]
        public List<NcFinancialAccountNumberCategoryCodeType> FinancialAccountNumberCategoryCode { get; set; }

        /// <summary>
        /// A kind of identification. NIEM reference is j:IdentificationCategoryCode
        /// </summary>
        /// <value>A kind of identification. NIEM reference is j:IdentificationCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<JIdentificationCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of identification. NIEM reference is nc:IdentificationCategoryText
        /// </summary>
        /// <value>A kind of identification. NIEM reference is nc:IdentificationCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A kind of person identification used in a document or credential NIEM reference is scr:PersonDesignatorCategoryCode
        /// </summary>
        /// <value>A kind of person identification used in a document or credential NIEM reference is scr:PersonDesignatorCategoryCode</value>

        [DataMember(Name="personDesignatorCategoryCode")]
        public List<ScrPersonDesignatorCategoryCodeType> PersonDesignatorCategoryCode { get; set; }

        /// <summary>
        /// A kind of identifier assigned to a person. NIEM reference is j:PersonIDCategoryCode
        /// </summary>
        /// <value>A kind of identifier assigned to a person. NIEM reference is j:PersonIDCategoryCode</value>

        [DataMember(Name="personIdCategoryCode")]
        public List<NcicMNUCodeType> PersonIdCategoryCode { get; set; }

        /// <summary>
        /// True if a badge is temporary; false otherwise NIEM reference is em:TemporaryIDIndicator
        /// </summary>
        /// <value>True if a badge is temporary; false otherwise NIEM reference is em:TemporaryIDIndicator</value>

        [DataMember(Name="isTemporaryId")]
        public List<NiemXsboolean> IsTemporaryId { get; set; }

        /// <summary>
        /// A description of a kind of identification. NIEM reference is nc:IdentificationCategoryDescriptionText
        /// </summary>
        /// <value>A description of a kind of identification. NIEM reference is nc:IdentificationCategoryDescriptionText</value>

        [DataMember(Name="categoryDescription")]
        public List<NcTextType> CategoryDescription { get; set; }

        /// <summary>
        /// A date an identification takes effect. NIEM reference is nc:IdentificationEffectiveDate
        /// </summary>
        /// <value>A date an identification takes effect. NIEM reference is nc:IdentificationEffectiveDate</value>

        [DataMember(Name="effectiveDate")]
        public List<NcDateType> EffectiveDate { get; set; }

        /// <summary>
        /// A date after which an identification is no longer valid. NIEM reference is nc:IdentificationExpirationDate
        /// </summary>
        /// <value>A date after which an identification is no longer valid. NIEM reference is nc:IdentificationExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// A person, organization, or locale which issues an identification. NIEM reference is nc:IdentificationSourceText
        /// </summary>
        /// <value>A person, organization, or locale which issues an identification. NIEM reference is nc:IdentificationSourceText</value>

        [DataMember(Name="source")]
        public List<NcTextType> Source { get; set; }

        /// <summary>
        /// A status of an identification. NIEM reference is nc:IdentificationStatus
        /// </summary>
        /// <value>A status of an identification. NIEM reference is nc:IdentificationStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// Additional information about an identification. NIEM reference is intel:IdentificationAugmentation
        /// </summary>
        /// <value>Additional information about an identification. NIEM reference is intel:IdentificationAugmentation</value>

        [DataMember(Name="intelAugmentation")]
        public List<IntelIdentificationAugmentationType> IntelAugmentation { get; set; }

        /// <summary>
        /// Additional information about an identification. NIEM reference is scr:IdentificationAugmentation
        /// </summary>
        /// <value>Additional information about an identification. NIEM reference is scr:IdentificationAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrIdentificationAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// ncIdentificationType JSON-LD context
        /// </summary>
        /// <value>ncIdentificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncIdentificationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncIdentificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncIdentificationTypeContext.jsonld")]
            JSONLDContextsncIdentificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncIdentificationType JSON-LD context
        /// </summary>
        /// <value>ncIdentificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcIdentificationType {\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  IdentificationId: ").Append(IdentificationId).Append("\n");
            sb.Append("  ConveyanceCategoryCode: ").Append(ConveyanceCategoryCode).Append("\n");
            sb.Append("  FinancialAccountNumberCategoryCode: ").Append(FinancialAccountNumberCategoryCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  PersonDesignatorCategoryCode: ").Append(PersonDesignatorCategoryCode).Append("\n");
            sb.Append("  PersonIdCategoryCode: ").Append(PersonIdCategoryCode).Append("\n");
            sb.Append("  IsTemporaryId: ").Append(IsTemporaryId).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  IntelAugmentation: ").Append(IntelAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcIdentificationType)obj);
        }

        /// <summary>
        /// Returns true if NcIdentificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcIdentificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcIdentificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.SequenceEqual(other.Jurisdiction)
                ) && 
                (
                    IdentificationId == other.IdentificationId ||
                    IdentificationId != null &&
                    IdentificationId.SequenceEqual(other.IdentificationId)
                ) && 
                (
                    ConveyanceCategoryCode == other.ConveyanceCategoryCode ||
                    ConveyanceCategoryCode != null &&
                    ConveyanceCategoryCode.SequenceEqual(other.ConveyanceCategoryCode)
                ) && 
                (
                    FinancialAccountNumberCategoryCode == other.FinancialAccountNumberCategoryCode ||
                    FinancialAccountNumberCategoryCode != null &&
                    FinancialAccountNumberCategoryCode.SequenceEqual(other.FinancialAccountNumberCategoryCode)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    PersonDesignatorCategoryCode == other.PersonDesignatorCategoryCode ||
                    PersonDesignatorCategoryCode != null &&
                    PersonDesignatorCategoryCode.SequenceEqual(other.PersonDesignatorCategoryCode)
                ) && 
                (
                    PersonIdCategoryCode == other.PersonIdCategoryCode ||
                    PersonIdCategoryCode != null &&
                    PersonIdCategoryCode.SequenceEqual(other.PersonIdCategoryCode)
                ) && 
                (
                    IsTemporaryId == other.IsTemporaryId ||
                    IsTemporaryId != null &&
                    IsTemporaryId.SequenceEqual(other.IsTemporaryId)
                ) && 
                (
                    CategoryDescription == other.CategoryDescription ||
                    CategoryDescription != null &&
                    CategoryDescription.SequenceEqual(other.CategoryDescription)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.SequenceEqual(other.EffectiveDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.SequenceEqual(other.Source)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    IntelAugmentation == other.IntelAugmentation ||
                    IntelAugmentation != null &&
                    IntelAugmentation.SequenceEqual(other.IntelAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (IdentificationId != null)
                    hashCode = hashCode * 59 + IdentificationId.GetHashCode();
                    if (ConveyanceCategoryCode != null)
                    hashCode = hashCode * 59 + ConveyanceCategoryCode.GetHashCode();
                    if (FinancialAccountNumberCategoryCode != null)
                    hashCode = hashCode * 59 + FinancialAccountNumberCategoryCode.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (PersonDesignatorCategoryCode != null)
                    hashCode = hashCode * 59 + PersonDesignatorCategoryCode.GetHashCode();
                    if (PersonIdCategoryCode != null)
                    hashCode = hashCode * 59 + PersonIdCategoryCode.GetHashCode();
                    if (IsTemporaryId != null)
                    hashCode = hashCode * 59 + IsTemporaryId.GetHashCode();
                    if (CategoryDescription != null)
                    hashCode = hashCode * 59 + CategoryDescription.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (IntelAugmentation != null)
                    hashCode = hashCode * 59 + IntelAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcIdentificationType left, NcIdentificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcIdentificationType left, NcIdentificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
