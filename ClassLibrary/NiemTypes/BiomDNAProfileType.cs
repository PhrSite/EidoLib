/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a description of a DNA profile
    /// </summary>
    [DataContract]
    public partial class BiomDNAProfileType : IEquatable<BiomDNAProfileType>
    { 
        /// <summary>
        /// A kind of DNA profile NIEM reference is biom:DNAProfileCategoryCode
        /// </summary>
        /// <value>A kind of DNA profile NIEM reference is biom:DNAProfileCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomDNAProfileCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of DNA profile result NIEM reference is biom:DNAProfileResultCode
        /// </summary>
        /// <value>A kind of DNA profile result NIEM reference is biom:DNAProfileResultCode</value>

        [DataMember(Name="resultCode")]
        public List<BiomDNAProfileResultCodeType> ResultCode { get; set; }

        /// <summary>
        /// An identifier for uniquely identifying the profile or sample for which the transaction is based. NIEM reference is biom:DNAProfileID
        /// </summary>
        /// <value>An identifier for uniquely identifying the profile or sample for which the transaction is based. NIEM reference is biom:DNAProfileID</value>

        [DataMember(Name="dnaProfileId")]
        public List<NcTextType> DnaProfileId { get; set; }

        /// <summary>
        /// A supplemental message in a DNA profile NIEM reference is biom:DNAProfileSupplementalText
        /// </summary>
        /// <value>A supplemental message in a DNA profile NIEM reference is biom:DNAProfileSupplementalText</value>

        [DataMember(Name="supplemental")]
        public List<NcTextType> Supplemental { get; set; }

        /// <summary>
        /// A descriptive comment about a DNA profile NIEM reference is biom:DNAProfileCommentText
        /// </summary>
        /// <value>A descriptive comment about a DNA profile NIEM reference is biom:DNAProfileCommentText</value>

        [DataMember(Name="comment")]
        public List<NcTextType> Comment { get; set; }

        /// <summary>
        /// biomDNAProfileType JSON-LD context
        /// </summary>
        /// <value>biomDNAProfileType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDNAProfileTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDNAProfileTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDNAProfileTypeContext.jsonld")]
            JSONLDContextsbiomDNAProfileTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDNAProfileType JSON-LD context
        /// </summary>
        /// <value>biomDNAProfileType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDNAProfileType {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  DnaProfileId: ").Append(DnaProfileId).Append("\n");
            sb.Append("  Supplemental: ").Append(Supplemental).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDNAProfileType)obj);
        }

        /// <summary>
        /// Returns true if BiomDNAProfileType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDNAProfileType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDNAProfileType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    ResultCode == other.ResultCode ||
                    ResultCode != null &&
                    ResultCode.SequenceEqual(other.ResultCode)
                ) && 
                (
                    DnaProfileId == other.DnaProfileId ||
                    DnaProfileId != null &&
                    DnaProfileId.SequenceEqual(other.DnaProfileId)
                ) && 
                (
                    Supplemental == other.Supplemental ||
                    Supplemental != null &&
                    Supplemental.SequenceEqual(other.Supplemental)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (ResultCode != null)
                    hashCode = hashCode * 59 + ResultCode.GetHashCode();
                    if (DnaProfileId != null)
                    hashCode = hashCode * 59 + DnaProfileId.GetHashCode();
                    if (Supplemental != null)
                    hashCode = hashCode * 59 + Supplemental.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDNAProfileType left, BiomDNAProfileType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDNAProfileType left, BiomDNAProfileType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
