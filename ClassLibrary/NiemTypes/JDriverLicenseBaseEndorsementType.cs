/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an endorsement on a driver license or driver license permit which authorizes the operation of specified types of vehicles carrying specified loads.
    /// </summary>
    [DataContract]
    public partial class JDriverLicenseBaseEndorsementType : IEquatable<JDriverLicenseBaseEndorsementType>
    { 
        /// <summary>
        /// An endorsement on a driver license or driver license permit which authorizes the operation of specified types of vehicles carrying specified loads. NIEM reference is j:DriverLicenseEndorsementText
        /// </summary>
        /// <value>An endorsement on a driver license or driver license permit which authorizes the operation of specified types of vehicles carrying specified loads. NIEM reference is j:DriverLicenseEndorsementText</value>

        [DataMember(Name="driverLicenseEndorsement")]
        public List<NcTextType> DriverLicenseEndorsement { get; set; }

        /// <summary>
        /// A date on which an endorsement for a driver license ends. NIEM reference is j:DriverLicenseEndorsementEndDate
        /// </summary>
        /// <value>A date on which an endorsement for a driver license ends. NIEM reference is j:DriverLicenseEndorsementEndDate</value>

        [DataMember(Name="driverLicenseEndorsementEndDate")]
        public List<NcDateType> DriverLicenseEndorsementEndDate { get; set; }

        /// <summary>
        /// A date on which an adjudication by the TSA was made, of a driver&#x27;s suitability to hold a Hazardous Material Endorsement. NIEM reference is j:DriverLicenseHMEThreatDate
        /// </summary>
        /// <value>A date on which an adjudication by the TSA was made, of a driver&#x27;s suitability to hold a Hazardous Material Endorsement. NIEM reference is j:DriverLicenseHMEThreatDate</value>

        [DataMember(Name="driverLicenseHmeThreatDate")]
        public List<NcDateType> DriverLicenseHmeThreatDate { get; set; }

        /// <summary>
        /// A code indicating if a driver should be issued a Hazardous Material Endorsement, as determined by the TSA background check and adjudication process. NIEM reference is j:DriverLicenseHMEThreatCode
        /// </summary>
        /// <value>A code indicating if a driver should be issued a Hazardous Material Endorsement, as determined by the TSA background check and adjudication process. NIEM reference is j:DriverLicenseHMEThreatCode</value>

        [DataMember(Name="driverLicenseHmeThreatCode")]
        public List<JDriverLicenseHMEThreatCodeType> DriverLicenseHmeThreatCode { get; set; }

        /// <summary>
        /// A determination if a driver should be issued a HAZMAT Endorsement, as determined by the TSA adjudication process.   NIEM reference is j:DriverLicenseHMEThreatText
        /// </summary>
        /// <value>A determination if a driver should be issued a HAZMAT Endorsement, as determined by the TSA adjudication process.   NIEM reference is j:DriverLicenseHMEThreatText</value>

        [DataMember(Name="driverLicenseHmeThreat")]
        public List<NcTextType> DriverLicenseHmeThreat { get; set; }

        /// <summary>
        /// jDriverLicenseBaseEndorsementType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseBaseEndorsementType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDriverLicenseBaseEndorsementTypeContextJsonldEnum for ../JSON-LD_Contexts/jDriverLicenseBaseEndorsementTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDriverLicenseBaseEndorsementTypeContext.jsonld")]
            JSONLDContextsjDriverLicenseBaseEndorsementTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDriverLicenseBaseEndorsementType JSON-LD context
        /// </summary>
        /// <value>jDriverLicenseBaseEndorsementType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDriverLicenseBaseEndorsementType {\n");
            sb.Append("  DriverLicenseEndorsement: ").Append(DriverLicenseEndorsement).Append("\n");
            sb.Append("  DriverLicenseEndorsementEndDate: ").Append(DriverLicenseEndorsementEndDate).Append("\n");
            sb.Append("  DriverLicenseHmeThreatDate: ").Append(DriverLicenseHmeThreatDate).Append("\n");
            sb.Append("  DriverLicenseHmeThreatCode: ").Append(DriverLicenseHmeThreatCode).Append("\n");
            sb.Append("  DriverLicenseHmeThreat: ").Append(DriverLicenseHmeThreat).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDriverLicenseBaseEndorsementType)obj);
        }

        /// <summary>
        /// Returns true if JDriverLicenseBaseEndorsementType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDriverLicenseBaseEndorsementType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDriverLicenseBaseEndorsementType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DriverLicenseEndorsement == other.DriverLicenseEndorsement ||
                    DriverLicenseEndorsement != null &&
                    DriverLicenseEndorsement.SequenceEqual(other.DriverLicenseEndorsement)
                ) && 
                (
                    DriverLicenseEndorsementEndDate == other.DriverLicenseEndorsementEndDate ||
                    DriverLicenseEndorsementEndDate != null &&
                    DriverLicenseEndorsementEndDate.SequenceEqual(other.DriverLicenseEndorsementEndDate)
                ) && 
                (
                    DriverLicenseHmeThreatDate == other.DriverLicenseHmeThreatDate ||
                    DriverLicenseHmeThreatDate != null &&
                    DriverLicenseHmeThreatDate.SequenceEqual(other.DriverLicenseHmeThreatDate)
                ) && 
                (
                    DriverLicenseHmeThreatCode == other.DriverLicenseHmeThreatCode ||
                    DriverLicenseHmeThreatCode != null &&
                    DriverLicenseHmeThreatCode.SequenceEqual(other.DriverLicenseHmeThreatCode)
                ) && 
                (
                    DriverLicenseHmeThreat == other.DriverLicenseHmeThreat ||
                    DriverLicenseHmeThreat != null &&
                    DriverLicenseHmeThreat.SequenceEqual(other.DriverLicenseHmeThreat)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DriverLicenseEndorsement != null)
                    hashCode = hashCode * 59 + DriverLicenseEndorsement.GetHashCode();
                    if (DriverLicenseEndorsementEndDate != null)
                    hashCode = hashCode * 59 + DriverLicenseEndorsementEndDate.GetHashCode();
                    if (DriverLicenseHmeThreatDate != null)
                    hashCode = hashCode * 59 + DriverLicenseHmeThreatDate.GetHashCode();
                    if (DriverLicenseHmeThreatCode != null)
                    hashCode = hashCode * 59 + DriverLicenseHmeThreatCode.GetHashCode();
                    if (DriverLicenseHmeThreat != null)
                    hashCode = hashCode * 59 + DriverLicenseHmeThreat.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDriverLicenseBaseEndorsementType left, JDriverLicenseBaseEndorsementType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDriverLicenseBaseEndorsementType left, JDriverLicenseBaseEndorsementType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
