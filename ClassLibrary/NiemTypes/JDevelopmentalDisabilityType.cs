/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for any of a diverse group of severe chronic conditions that are due to mental and/or physical impairments.
    /// </summary>
    [DataContract]
    public partial class JDevelopmentalDisabilityType : IEquatable<JDevelopmentalDisabilityType>
    { 
        /// <summary>
        /// True if the subject or parolee had a possible developmental disability before the age of 18; false otherwise. NIEM reference is j:DevelopmentalDisabilityYouthIndicator
        /// </summary>
        /// <value>True if the subject or parolee had a possible developmental disability before the age of 18; false otherwise. NIEM reference is j:DevelopmentalDisabilityYouthIndicator</value>

        [DataMember(Name="isYouth")]
        public List<NiemXsboolean> IsYouth { get; set; }

        /// <summary>
        /// A detail description of an other disability. NIEM reference is j:DevelopmentDisabilityDetailsText
        /// </summary>
        /// <value>A detail description of an other disability. NIEM reference is j:DevelopmentDisabilityDetailsText</value>

        [DataMember(Name="developmentDisabilityDetails")]
        public List<NcTextType> DevelopmentDisabilityDetails { get; set; }

        /// <summary>
        /// A name of the document that records the other disability. NIEM reference is j:DevelopmentDisabilityDocumentOfRecord
        /// </summary>
        /// <value>A name of the document that records the other disability. NIEM reference is j:DevelopmentDisabilityDocumentOfRecord</value>

        [DataMember(Name="developmentDisabilityDocumentOfRecord")]
        public List<NcDocumentType> DevelopmentDisabilityDocumentOfRecord { get; set; }

        /// <summary>
        /// A kind of level of functionality for a subject based of their disability. NIEM reference is j:DevelopmentDisabilityFunctionalLevelText
        /// </summary>
        /// <value>A kind of level of functionality for a subject based of their disability. NIEM reference is j:DevelopmentDisabilityFunctionalLevelText</value>

        [DataMember(Name="developmentDisabilityFunctionalLevel")]
        public List<NcTextType> DevelopmentDisabilityFunctionalLevel { get; set; }

        /// <summary>
        /// A date when the developmental disability was identified and recorded. NIEM reference is j:DevelopmentDisabilityIdentifiedDate
        /// </summary>
        /// <value>A date when the developmental disability was identified and recorded. NIEM reference is j:DevelopmentDisabilityIdentifiedDate</value>

        [DataMember(Name="developmentDisabilityIdentifiedDate")]
        public List<NcDateType> DevelopmentDisabilityIdentifiedDate { get; set; }

        /// <summary>
        /// A kind of a subject&#x27;s development disability. NIEM reference is j:DevelopmentDisabilityCategoryText
        /// </summary>
        /// <value>A kind of a subject&#x27;s development disability. NIEM reference is j:DevelopmentDisabilityCategoryText</value>

        [DataMember(Name="developmentDisabilityCategory")]
        public List<NcTextType> DevelopmentDisabilityCategory { get; set; }

        /// <summary>
        /// jDevelopmentalDisabilityType JSON-LD context
        /// </summary>
        /// <value>jDevelopmentalDisabilityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjDevelopmentalDisabilityTypeContextJsonldEnum for ../JSON-LD_Contexts/jDevelopmentalDisabilityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jDevelopmentalDisabilityTypeContext.jsonld")]
            JSONLDContextsjDevelopmentalDisabilityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jDevelopmentalDisabilityType JSON-LD context
        /// </summary>
        /// <value>jDevelopmentalDisabilityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JDevelopmentalDisabilityType {\n");
            sb.Append("  IsYouth: ").Append(IsYouth).Append("\n");
            sb.Append("  DevelopmentDisabilityDetails: ").Append(DevelopmentDisabilityDetails).Append("\n");
            sb.Append("  DevelopmentDisabilityDocumentOfRecord: ").Append(DevelopmentDisabilityDocumentOfRecord).Append("\n");
            sb.Append("  DevelopmentDisabilityFunctionalLevel: ").Append(DevelopmentDisabilityFunctionalLevel).Append("\n");
            sb.Append("  DevelopmentDisabilityIdentifiedDate: ").Append(DevelopmentDisabilityIdentifiedDate).Append("\n");
            sb.Append("  DevelopmentDisabilityCategory: ").Append(DevelopmentDisabilityCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JDevelopmentalDisabilityType)obj);
        }

        /// <summary>
        /// Returns true if JDevelopmentalDisabilityType instances are equal
        /// </summary>
        /// <param name="other">Instance of JDevelopmentalDisabilityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JDevelopmentalDisabilityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsYouth == other.IsYouth ||
                    IsYouth != null &&
                    IsYouth.SequenceEqual(other.IsYouth)
                ) && 
                (
                    DevelopmentDisabilityDetails == other.DevelopmentDisabilityDetails ||
                    DevelopmentDisabilityDetails != null &&
                    DevelopmentDisabilityDetails.SequenceEqual(other.DevelopmentDisabilityDetails)
                ) && 
                (
                    DevelopmentDisabilityDocumentOfRecord == other.DevelopmentDisabilityDocumentOfRecord ||
                    DevelopmentDisabilityDocumentOfRecord != null &&
                    DevelopmentDisabilityDocumentOfRecord.SequenceEqual(other.DevelopmentDisabilityDocumentOfRecord)
                ) && 
                (
                    DevelopmentDisabilityFunctionalLevel == other.DevelopmentDisabilityFunctionalLevel ||
                    DevelopmentDisabilityFunctionalLevel != null &&
                    DevelopmentDisabilityFunctionalLevel.SequenceEqual(other.DevelopmentDisabilityFunctionalLevel)
                ) && 
                (
                    DevelopmentDisabilityIdentifiedDate == other.DevelopmentDisabilityIdentifiedDate ||
                    DevelopmentDisabilityIdentifiedDate != null &&
                    DevelopmentDisabilityIdentifiedDate.SequenceEqual(other.DevelopmentDisabilityIdentifiedDate)
                ) && 
                (
                    DevelopmentDisabilityCategory == other.DevelopmentDisabilityCategory ||
                    DevelopmentDisabilityCategory != null &&
                    DevelopmentDisabilityCategory.SequenceEqual(other.DevelopmentDisabilityCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsYouth != null)
                    hashCode = hashCode * 59 + IsYouth.GetHashCode();
                    if (DevelopmentDisabilityDetails != null)
                    hashCode = hashCode * 59 + DevelopmentDisabilityDetails.GetHashCode();
                    if (DevelopmentDisabilityDocumentOfRecord != null)
                    hashCode = hashCode * 59 + DevelopmentDisabilityDocumentOfRecord.GetHashCode();
                    if (DevelopmentDisabilityFunctionalLevel != null)
                    hashCode = hashCode * 59 + DevelopmentDisabilityFunctionalLevel.GetHashCode();
                    if (DevelopmentDisabilityIdentifiedDate != null)
                    hashCode = hashCode * 59 + DevelopmentDisabilityIdentifiedDate.GetHashCode();
                    if (DevelopmentDisabilityCategory != null)
                    hashCode = hashCode * 59 + DevelopmentDisabilityCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JDevelopmentalDisabilityType left, JDevelopmentalDisabilityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JDevelopmentalDisabilityType left, JDevelopmentalDisabilityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
