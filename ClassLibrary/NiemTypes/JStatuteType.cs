/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a law, rule, or ordinance within a jurisdiction.
    /// </summary>
    [DataContract]
    public partial class JStatuteType : IEquatable<JStatuteType>
    { 
        /// <summary>
        /// An identification number of a set of laws for a particular jurisdiction. NIEM reference is j:StatuteCodeIdentification
        /// </summary>
        /// <value>An identification number of a set of laws for a particular jurisdiction. NIEM reference is j:StatuteCodeIdentification</value>

        [DataMember(Name="codeIdentification")]
        public List<NcIdentificationType> CodeIdentification { get; set; }

        /// <summary>
        /// An identification of a section or category within a code book. NIEM reference is j:StatuteCodeSectionIdentification
        /// </summary>
        /// <value>An identification of a section or category within a code book. NIEM reference is j:StatuteCodeSectionIdentification</value>

        [DataMember(Name="codeSectionIdentification")]
        public List<NcIdentificationType> CodeSectionIdentification { get; set; }

        /// <summary>
        /// A description of a statute. NIEM reference is j:StatuteDescriptionText
        /// </summary>
        /// <value>A description of a statute. NIEM reference is j:StatuteDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A date a statute was enacted and came into effect. NIEM reference is j:StatuteEnactmentDate
        /// </summary>
        /// <value>A date a statute was enacted and came into effect. NIEM reference is j:StatuteEnactmentDate</value>

        [DataMember(Name="enactmentDate")]
        public List<NcDateType> EnactmentDate { get; set; }

        /// <summary>
        /// An area in which a statute applies. NIEM reference is j:StatuteJurisdiction
        /// </summary>
        /// <value>An area in which a statute applies. NIEM reference is j:StatuteJurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public List<NcJurisdictionType> Jurisdiction { get; set; }

        /// <summary>
        /// A brief description of a Statute which makes use of catchwords. NIEM reference is j:StatuteKeywordText
        /// </summary>
        /// <value>A brief description of a Statute which makes use of catchwords. NIEM reference is j:StatuteKeywordText</value>

        [DataMember(Name="keyword")]
        public List<NcTextType> Keyword { get; set; }

        /// <summary>
        /// A level of crime a statute applies to. NIEM reference is j:StatuteLevelText
        /// </summary>
        /// <value>A level of crime a statute applies to. NIEM reference is j:StatuteLevelText</value>

        [DataMember(Name="level")]
        public List<NcTextType> Level { get; set; }

        /// <summary>
        /// True if a statute refers to an offense that may be made more serious due to circumstances related to the incident; false otherwise. NIEM reference is j:StatuteOffenseEnhanceableIndicator
        /// </summary>
        /// <value>True if a statute refers to an offense that may be made more serious due to circumstances related to the incident; false otherwise. NIEM reference is j:StatuteOffenseEnhanceableIndicator</value>

        [DataMember(Name="isOffenseEnhanceable")]
        public List<NiemXsboolean> IsOffenseEnhanceable { get; set; }

        /// <summary>
        /// A date a statute was repealed and no longer applied. NIEM reference is j:StatuteRepealDate
        /// </summary>
        /// <value>A date a statute was repealed and no longer applied. NIEM reference is j:StatuteRepealDate</value>

        [DataMember(Name="repealDate")]
        public List<NcDateType> RepealDate { get; set; }

        /// <summary>
        /// A current status of a statute. NIEM reference is j:StatuteStatus
        /// </summary>
        /// <value>A current status of a statute. NIEM reference is j:StatuteStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A full text of a statute or law. NIEM reference is j:StatuteText
        /// </summary>
        /// <value>A full text of a statute or law. NIEM reference is j:StatuteText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A kind of statute. NIEM reference is j:StatuteCategoryCode
        /// </summary>
        /// <value>A kind of statute. NIEM reference is j:StatuteCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NcStatuteCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of statute. NIEM reference is j:StatuteCategoryText
        /// </summary>
        /// <value>A kind of statute. NIEM reference is j:StatuteCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A literal description of a criminal offense within a state code book. NIEM reference is j:StatuteOffenseStateCodeText
        /// </summary>
        /// <value>A literal description of a criminal offense within a state code book. NIEM reference is j:StatuteOffenseStateCodeText</value>

        [DataMember(Name="offenseStateCode")]
        public List<NcTextType> OffenseStateCode { get; set; }

        /// <summary>
        /// A criminal offense within a code book. NIEM reference is j:StatuteOffenseAPCOCode
        /// </summary>
        /// <value>A criminal offense within a code book. NIEM reference is j:StatuteOffenseAPCOCode</value>

        [DataMember(Name="offenseApcoCode")]
        public List<ApcoIncidentCategoryCodeType> OffenseApcoCode { get; set; }

        /// <summary>
        /// A criminal offense within a code book. NIEM reference is j:StatuteOffenseUCRCode
        /// </summary>
        /// <value>A criminal offense within a code book. NIEM reference is j:StatuteOffenseUCRCode</value>

        [DataMember(Name="offenseUcrCode")]
        public List<UcrOffenseCodeType> OffenseUcrCode { get; set; }

        /// <summary>
        /// An identification of a criminal offense within a code book. NIEM reference is j:StatuteOffenseIdentification
        /// </summary>
        /// <value>An identification of a criminal offense within a code book. NIEM reference is j:StatuteOffenseIdentification</value>

        [DataMember(Name="offenseIdentification")]
        public List<NcIdentificationType> OffenseIdentification { get; set; }

        /// <summary>
        /// jStatuteType JSON-LD context
        /// </summary>
        /// <value>jStatuteType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjStatuteTypeContextJsonldEnum for ../JSON-LD_Contexts/jStatuteTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jStatuteTypeContext.jsonld")]
            JSONLDContextsjStatuteTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jStatuteType JSON-LD context
        /// </summary>
        /// <value>jStatuteType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JStatuteType {\n");
            sb.Append("  CodeIdentification: ").Append(CodeIdentification).Append("\n");
            sb.Append("  CodeSectionIdentification: ").Append(CodeSectionIdentification).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnactmentDate: ").Append(EnactmentDate).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  IsOffenseEnhanceable: ").Append(IsOffenseEnhanceable).Append("\n");
            sb.Append("  RepealDate: ").Append(RepealDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  OffenseStateCode: ").Append(OffenseStateCode).Append("\n");
            sb.Append("  OffenseApcoCode: ").Append(OffenseApcoCode).Append("\n");
            sb.Append("  OffenseUcrCode: ").Append(OffenseUcrCode).Append("\n");
            sb.Append("  OffenseIdentification: ").Append(OffenseIdentification).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JStatuteType)obj);
        }

        /// <summary>
        /// Returns true if JStatuteType instances are equal
        /// </summary>
        /// <param name="other">Instance of JStatuteType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JStatuteType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CodeIdentification == other.CodeIdentification ||
                    CodeIdentification != null &&
                    CodeIdentification.SequenceEqual(other.CodeIdentification)
                ) && 
                (
                    CodeSectionIdentification == other.CodeSectionIdentification ||
                    CodeSectionIdentification != null &&
                    CodeSectionIdentification.SequenceEqual(other.CodeSectionIdentification)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    EnactmentDate == other.EnactmentDate ||
                    EnactmentDate != null &&
                    EnactmentDate.SequenceEqual(other.EnactmentDate)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.SequenceEqual(other.Jurisdiction)
                ) && 
                (
                    Keyword == other.Keyword ||
                    Keyword != null &&
                    Keyword.SequenceEqual(other.Keyword)
                ) && 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.SequenceEqual(other.Level)
                ) && 
                (
                    IsOffenseEnhanceable == other.IsOffenseEnhanceable ||
                    IsOffenseEnhanceable != null &&
                    IsOffenseEnhanceable.SequenceEqual(other.IsOffenseEnhanceable)
                ) && 
                (
                    RepealDate == other.RepealDate ||
                    RepealDate != null &&
                    RepealDate.SequenceEqual(other.RepealDate)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    OffenseStateCode == other.OffenseStateCode ||
                    OffenseStateCode != null &&
                    OffenseStateCode.SequenceEqual(other.OffenseStateCode)
                ) && 
                (
                    OffenseApcoCode == other.OffenseApcoCode ||
                    OffenseApcoCode != null &&
                    OffenseApcoCode.SequenceEqual(other.OffenseApcoCode)
                ) && 
                (
                    OffenseUcrCode == other.OffenseUcrCode ||
                    OffenseUcrCode != null &&
                    OffenseUcrCode.SequenceEqual(other.OffenseUcrCode)
                ) && 
                (
                    OffenseIdentification == other.OffenseIdentification ||
                    OffenseIdentification != null &&
                    OffenseIdentification.SequenceEqual(other.OffenseIdentification)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CodeIdentification != null)
                    hashCode = hashCode * 59 + CodeIdentification.GetHashCode();
                    if (CodeSectionIdentification != null)
                    hashCode = hashCode * 59 + CodeSectionIdentification.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EnactmentDate != null)
                    hashCode = hashCode * 59 + EnactmentDate.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (IsOffenseEnhanceable != null)
                    hashCode = hashCode * 59 + IsOffenseEnhanceable.GetHashCode();
                    if (RepealDate != null)
                    hashCode = hashCode * 59 + RepealDate.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (OffenseStateCode != null)
                    hashCode = hashCode * 59 + OffenseStateCode.GetHashCode();
                    if (OffenseApcoCode != null)
                    hashCode = hashCode * 59 + OffenseApcoCode.GetHashCode();
                    if (OffenseUcrCode != null)
                    hashCode = hashCode * 59 + OffenseUcrCode.GetHashCode();
                    if (OffenseIdentification != null)
                    hashCode = hashCode * 59 + OffenseIdentification.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JStatuteType left, JStatuteType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JStatuteType left, JStatuteType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
