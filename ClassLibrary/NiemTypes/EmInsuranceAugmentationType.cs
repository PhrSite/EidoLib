/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an insurance
    /// </summary>
    [DataContract]
    public partial class EmInsuranceAugmentationType : IEquatable<EmInsuranceAugmentationType>
    { 
        /// <summary>
        /// A textual name of the insurance NIEM reference is em:InsuranceName
        /// </summary>
        /// <value>A textual name of the insurance NIEM reference is em:InsuranceName</value>

        [DataMember(Name="insuranceName")]
        public List<NcTextType> InsuranceName { get; set; }

        /// <summary>
        /// A phone number of the company that has issued the insurance NIEM reference is em:InsurancePhoneNumber
        /// </summary>
        /// <value>A phone number of the company that has issued the insurance NIEM reference is em:InsurancePhoneNumber</value>

        [DataMember(Name="insurancePhoneNumber")]
        public List<NcTelephoneNumberType> InsurancePhoneNumber { get; set; }

        /// <summary>
        /// An identifier for the insurance group number NIEM reference is em:InsuranceGroupNumberID
        /// </summary>
        /// <value>An identifier for the insurance group number NIEM reference is em:InsuranceGroupNumberID</value>

        [DataMember(Name="insuranceGroupNumberId")]
        public List<NiemXsstring> InsuranceGroupNumberId { get; set; }

        /// <summary>
        /// A postal location to which paper mail can be directed. NIEM reference is nc:Address
        /// </summary>
        /// <value>A postal location to which paper mail can be directed. NIEM reference is nc:Address</value>

        [DataMember(Name="address")]
        public List<NcAddressType> Address { get; set; }

        /// <summary>
        /// emInsuranceAugmentationType JSON-LD context
        /// </summary>
        /// <value>emInsuranceAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemInsuranceAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/emInsuranceAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emInsuranceAugmentationTypeContext.jsonld")]
            JSONLDContextsemInsuranceAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emInsuranceAugmentationType JSON-LD context
        /// </summary>
        /// <value>emInsuranceAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmInsuranceAugmentationType {\n");
            sb.Append("  InsuranceName: ").Append(InsuranceName).Append("\n");
            sb.Append("  InsurancePhoneNumber: ").Append(InsurancePhoneNumber).Append("\n");
            sb.Append("  InsuranceGroupNumberId: ").Append(InsuranceGroupNumberId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmInsuranceAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if EmInsuranceAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmInsuranceAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmInsuranceAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InsuranceName == other.InsuranceName ||
                    InsuranceName != null &&
                    InsuranceName.SequenceEqual(other.InsuranceName)
                ) && 
                (
                    InsurancePhoneNumber == other.InsurancePhoneNumber ||
                    InsurancePhoneNumber != null &&
                    InsurancePhoneNumber.SequenceEqual(other.InsurancePhoneNumber)
                ) && 
                (
                    InsuranceGroupNumberId == other.InsuranceGroupNumberId ||
                    InsuranceGroupNumberId != null &&
                    InsuranceGroupNumberId.SequenceEqual(other.InsuranceGroupNumberId)
                ) && 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.SequenceEqual(other.Address)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InsuranceName != null)
                    hashCode = hashCode * 59 + InsuranceName.GetHashCode();
                    if (InsurancePhoneNumber != null)
                    hashCode = hashCode * 59 + InsurancePhoneNumber.GetHashCode();
                    if (InsuranceGroupNumberId != null)
                    hashCode = hashCode * 59 + InsuranceGroupNumberId.GetHashCode();
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmInsuranceAugmentationType left, EmInsuranceAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmInsuranceAugmentationType left, EmInsuranceAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
