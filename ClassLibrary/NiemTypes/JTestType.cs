/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a test administered by a person or organization.
    /// </summary>
    [DataContract]
    public partial class JTestType : NcActivityType, IEquatable<JTestType>
    { 
        /// <summary>
        /// A date of the next testing. NIEM reference is j:TestNextDate
        /// </summary>
        /// <value>A date of the next testing. NIEM reference is j:TestNextDate</value>

        [DataMember(Name="nextDate")]
        public List<NcDateType> NextDate { get; set; }

        /// <summary>
        /// An account as reported by an observer. NIEM reference is j:Narrative
        /// </summary>
        /// <value>An account as reported by an observer. NIEM reference is j:Narrative</value>

        [DataMember(Name="narrative")]
        public List<NcCommentType> Narrative { get; set; }

        /// <summary>
        /// A recommendation that results from an analysis. NIEM reference is j:Recommendation
        /// </summary>
        /// <value>A recommendation that results from an analysis. NIEM reference is j:Recommendation</value>

        [DataMember(Name="recommendation")]
        public List<NcCommentType> Recommendation { get; set; }

        /// <summary>
        /// A data type for a calculation or score of a test. NIEM reference is j:TestResult
        /// </summary>
        /// <value>A data type for a calculation or score of a test. NIEM reference is j:TestResult</value>

        [DataMember(Name="result")]
        public List<JTestResultType> Result { get; set; }

        /// <summary>
        /// A method used to test. NIEM reference is j:TestMethodText
        /// </summary>
        /// <value>A method used to test. NIEM reference is j:TestMethodText</value>

        [DataMember(Name="method")]
        public List<NcTextType> Method { get; set; }

        /// <summary>
        /// jTestType JSON-LD context
        /// </summary>
        /// <value>jTestType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjTestTypeContextJsonldEnum for ../JSON-LD_Contexts/jTestTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jTestTypeContext.jsonld")]
            JSONLDContextsjTestTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jTestType JSON-LD context
        /// </summary>
        /// <value>jTestType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JTestType {\n");
            sb.Append("  NextDate: ").Append(NextDate).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  Recommendation: ").Append(Recommendation).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JTestType)obj);
        }

        /// <summary>
        /// Returns true if JTestType instances are equal
        /// </summary>
        /// <param name="other">Instance of JTestType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JTestType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NextDate == other.NextDate ||
                    NextDate != null &&
                    NextDate.SequenceEqual(other.NextDate)
                ) && 
                (
                    Narrative == other.Narrative ||
                    Narrative != null &&
                    Narrative.SequenceEqual(other.Narrative)
                ) && 
                (
                    Recommendation == other.Recommendation ||
                    Recommendation != null &&
                    Recommendation.SequenceEqual(other.Recommendation)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.SequenceEqual(other.Result)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.SequenceEqual(other.Method)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NextDate != null)
                    hashCode = hashCode * 59 + NextDate.GetHashCode();
                    if (Narrative != null)
                    hashCode = hashCode * 59 + Narrative.GetHashCode();
                    if (Recommendation != null)
                    hashCode = hashCode * 59 + Recommendation.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JTestType left, JTestType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JTestType left, JTestType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
