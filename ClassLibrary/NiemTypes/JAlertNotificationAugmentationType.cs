/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Alert.
    /// </summary>
    [DataContract]
    public partial class JAlertNotificationAugmentationType : IEquatable<JAlertNotificationAugmentationType>
    { 
        /// <summary>
        /// A description of the status of an alert. NIEM reference is j:AlertStatusText
        /// </summary>
        /// <value>A description of the status of an alert. NIEM reference is j:AlertStatusText</value>

        [DataMember(Name="alertStatus")]
        public List<NcTextType> AlertStatus { get; set; }

        /// <summary>
        /// A description of an action required By a Notified Party on receiving the Alert Notice. NIEM reference is j:AlertInstructionsDescriptionText
        /// </summary>
        /// <value>A description of an action required By a Notified Party on receiving the Alert Notice. NIEM reference is j:AlertInstructionsDescriptionText</value>

        [DataMember(Name="alertInstructionsDescription")]
        public List<NcTextType> AlertInstructionsDescription { get; set; }

        /// <summary>
        /// True if a hold was placed on an alert; false otherwise. NIEM reference is j:AlertHoldIndicator
        /// </summary>
        /// <value>True if a hold was placed on an alert; false otherwise. NIEM reference is j:AlertHoldIndicator</value>

        [DataMember(Name="isAlertHold")]
        public List<NiemXsboolean> IsAlertHold { get; set; }

        /// <summary>
        /// A comment about an alert. NIEM reference is j:AlertComment
        /// </summary>
        /// <value>A comment about an alert. NIEM reference is j:AlertComment</value>

        [DataMember(Name="alertComment")]
        public List<NcCommentType> AlertComment { get; set; }

        /// <summary>
        /// jAlertNotificationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jAlertNotificationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjAlertNotificationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jAlertNotificationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jAlertNotificationAugmentationTypeContext.jsonld")]
            JSONLDContextsjAlertNotificationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jAlertNotificationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jAlertNotificationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JAlertNotificationAugmentationType {\n");
            sb.Append("  AlertStatus: ").Append(AlertStatus).Append("\n");
            sb.Append("  AlertInstructionsDescription: ").Append(AlertInstructionsDescription).Append("\n");
            sb.Append("  IsAlertHold: ").Append(IsAlertHold).Append("\n");
            sb.Append("  AlertComment: ").Append(AlertComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JAlertNotificationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JAlertNotificationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JAlertNotificationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JAlertNotificationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AlertStatus == other.AlertStatus ||
                    AlertStatus != null &&
                    AlertStatus.SequenceEqual(other.AlertStatus)
                ) && 
                (
                    AlertInstructionsDescription == other.AlertInstructionsDescription ||
                    AlertInstructionsDescription != null &&
                    AlertInstructionsDescription.SequenceEqual(other.AlertInstructionsDescription)
                ) && 
                (
                    IsAlertHold == other.IsAlertHold ||
                    IsAlertHold != null &&
                    IsAlertHold.SequenceEqual(other.IsAlertHold)
                ) && 
                (
                    AlertComment == other.AlertComment ||
                    AlertComment != null &&
                    AlertComment.SequenceEqual(other.AlertComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AlertStatus != null)
                    hashCode = hashCode * 59 + AlertStatus.GetHashCode();
                    if (AlertInstructionsDescription != null)
                    hashCode = hashCode * 59 + AlertInstructionsDescription.GetHashCode();
                    if (IsAlertHold != null)
                    hashCode = hashCode * 59 + IsAlertHold.GetHashCode();
                    if (AlertComment != null)
                    hashCode = hashCode * 59 + AlertComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JAlertNotificationAugmentationType left, JAlertNotificationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JAlertNotificationAugmentationType left, JAlertNotificationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
