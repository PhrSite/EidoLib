/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a digital representation of an object encoded in a binary format.
    /// </summary>
    [DataContract]
    public partial class NcBinaryType : IEquatable<NcBinaryType>
    { 
        /// <summary>
        /// An identifier that references a binary object. NIEM reference is nc:BinaryID
        /// </summary>
        /// <value>An identifier that references a binary object. NIEM reference is nc:BinaryID</value>

        [DataMember(Name="binaryId")]
        public List<NiemXsstring> BinaryId { get; set; }

        /// <summary>
        /// A physical location of a binary object. NIEM reference is nc:BinaryLocationText
        /// </summary>
        /// <value>A physical location of a binary object. NIEM reference is nc:BinaryLocationText</value>

        [DataMember(Name="location")]
        public List<NcTextType> Location { get; set; }

        /// <summary>
        /// A kind of binary object. NIEM reference is j:BinaryCategoryCode
        /// </summary>
        /// <value>A kind of binary object. NIEM reference is j:BinaryCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NdexBinaryCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of object that has been encoded. NIEM reference is nc:BinaryCategoryText
        /// </summary>
        /// <value>A kind of object that has been encoded. NIEM reference is nc:BinaryCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A hash value representing an object encoded in a binary format. NIEM reference is nc:BinaryHash
        /// </summary>
        /// <value>A hash value representing an object encoded in a binary format. NIEM reference is nc:BinaryHash</value>

        [DataMember(Name="hash")]
        public List<NcBinaryHashType> Hash { get; set; }

        /// <summary>
        /// True if a binary is available; false if it is not. NIEM reference is nc:BinaryAvailableIndicator
        /// </summary>
        /// <value>True if a binary is available; false if it is not. NIEM reference is nc:BinaryAvailableIndicator</value>

        [DataMember(Name="isAvailable")]
        public List<NiemXsboolean> IsAvailable { get; set; }

        /// <summary>
        /// A base64 binary encoding of data. NIEM reference is nc:Base64BinaryObject
        /// </summary>
        /// <value>A base64 binary encoding of data. NIEM reference is nc:Base64BinaryObject</value>

        [DataMember(Name="base64Object")]
        public List<NiemXsbase64Binary> Base64Object { get; set; }

        /// <summary>
        /// A hexadecimal binary encoding of data. NIEM reference is nc:HexBinaryObject
        /// </summary>
        /// <value>A hexadecimal binary encoding of data. NIEM reference is nc:HexBinaryObject</value>

        [DataMember(Name="hexObject")]
        public List<NiemXshexBinary> HexObject { get; set; }

        /// <summary>
        /// A UTF8 binary encoding of data. NIEM reference is cbrn:UTF8BinaryObjectText
        /// </summary>
        /// <value>A UTF8 binary encoding of data. NIEM reference is cbrn:UTF8BinaryObjectText</value>

        [DataMember(Name="utf8Object")]
        public List<NiemXsstring> Utf8Object { get; set; }

        /// <summary>
        /// A date on which a binary object is captured or created. NIEM reference is nc:BinaryCaptureDate
        /// </summary>
        /// <value>A date on which a binary object is captured or created. NIEM reference is nc:BinaryCaptureDate</value>

        [DataMember(Name="captureDate")]
        public List<NcDateType> CaptureDate { get; set; }

        /// <summary>
        /// An entity which captured or created a binary object. NIEM reference is nc:BinaryCapturer
        /// </summary>
        /// <value>An entity which captured or created a binary object. NIEM reference is nc:BinaryCapturer</value>

        [DataMember(Name="capturer")]
        public List<NcEntityType> Capturer { get; set; }

        /// <summary>
        /// A description of a binary object. NIEM reference is nc:BinaryDescriptionText
        /// </summary>
        /// <value>A description of a binary object. NIEM reference is nc:BinaryDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A file format or content type of a binary object. NIEM reference is nc:BinaryFormatText
        /// </summary>
        /// <value>A file format or content type of a binary object. NIEM reference is nc:BinaryFormatText</value>

        [DataMember(Name="format")]
        public List<NcTextType> Format { get; set; }

        /// <summary>
        /// A name of a standard or protocol used to classify binary content. NIEM reference is nc:BinaryFormatStandardName
        /// </summary>
        /// <value>A name of a standard or protocol used to classify binary content. NIEM reference is nc:BinaryFormatStandardName</value>

        [DataMember(Name="formatStandardName")]
        public List<NcTextType> FormatStandardName { get; set; }

        /// <summary>
        /// A URL or file reference of a binary object. NIEM reference is nc:BinaryURI
        /// </summary>
        /// <value>A URL or file reference of a binary object. NIEM reference is nc:BinaryURI</value>

        [DataMember(Name="uri")]
        public List<NiemXsanyURI> Uri { get; set; }

        /// <summary>
        /// A size of a binary object in kilobytes. NIEM reference is nc:BinarySizeValue
        /// </summary>
        /// <value>A size of a binary object in kilobytes. NIEM reference is nc:BinarySizeValue</value>

        [DataMember(Name="sizeValue")]
        public List<NcNonNegativeDecimalType> SizeValue { get; set; }

        /// <summary>
        /// Additional information about a binary. NIEM reference is j:BinaryAugmentation
        /// </summary>
        /// <value>Additional information about a binary. NIEM reference is j:BinaryAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JBinaryAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncBinaryType JSON-LD context
        /// </summary>
        /// <value>ncBinaryType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncBinaryTypeContextJsonldEnum for ../JSON-LD_Contexts/ncBinaryTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncBinaryTypeContext.jsonld")]
            JSONLDContextsncBinaryTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncBinaryType JSON-LD context
        /// </summary>
        /// <value>ncBinaryType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcBinaryType {\n");
            sb.Append("  BinaryId: ").Append(BinaryId).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  Base64Object: ").Append(Base64Object).Append("\n");
            sb.Append("  HexObject: ").Append(HexObject).Append("\n");
            sb.Append("  Utf8Object: ").Append(Utf8Object).Append("\n");
            sb.Append("  CaptureDate: ").Append(CaptureDate).Append("\n");
            sb.Append("  Capturer: ").Append(Capturer).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  FormatStandardName: ").Append(FormatStandardName).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  SizeValue: ").Append(SizeValue).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcBinaryType)obj);
        }

        /// <summary>
        /// Returns true if NcBinaryType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcBinaryType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcBinaryType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BinaryId == other.BinaryId ||
                    BinaryId != null &&
                    BinaryId.SequenceEqual(other.BinaryId)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Hash == other.Hash ||
                    Hash != null &&
                    Hash.SequenceEqual(other.Hash)
                ) && 
                (
                    IsAvailable == other.IsAvailable ||
                    IsAvailable != null &&
                    IsAvailable.SequenceEqual(other.IsAvailable)
                ) && 
                (
                    Base64Object == other.Base64Object ||
                    Base64Object != null &&
                    Base64Object.SequenceEqual(other.Base64Object)
                ) && 
                (
                    HexObject == other.HexObject ||
                    HexObject != null &&
                    HexObject.SequenceEqual(other.HexObject)
                ) && 
                (
                    Utf8Object == other.Utf8Object ||
                    Utf8Object != null &&
                    Utf8Object.SequenceEqual(other.Utf8Object)
                ) && 
                (
                    CaptureDate == other.CaptureDate ||
                    CaptureDate != null &&
                    CaptureDate.SequenceEqual(other.CaptureDate)
                ) && 
                (
                    Capturer == other.Capturer ||
                    Capturer != null &&
                    Capturer.SequenceEqual(other.Capturer)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.SequenceEqual(other.Format)
                ) && 
                (
                    FormatStandardName == other.FormatStandardName ||
                    FormatStandardName != null &&
                    FormatStandardName.SequenceEqual(other.FormatStandardName)
                ) && 
                (
                    Uri == other.Uri ||
                    Uri != null &&
                    Uri.SequenceEqual(other.Uri)
                ) && 
                (
                    SizeValue == other.SizeValue ||
                    SizeValue != null &&
                    SizeValue.SequenceEqual(other.SizeValue)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BinaryId != null)
                    hashCode = hashCode * 59 + BinaryId.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Hash != null)
                    hashCode = hashCode * 59 + Hash.GetHashCode();
                    if (IsAvailable != null)
                    hashCode = hashCode * 59 + IsAvailable.GetHashCode();
                    if (Base64Object != null)
                    hashCode = hashCode * 59 + Base64Object.GetHashCode();
                    if (HexObject != null)
                    hashCode = hashCode * 59 + HexObject.GetHashCode();
                    if (Utf8Object != null)
                    hashCode = hashCode * 59 + Utf8Object.GetHashCode();
                    if (CaptureDate != null)
                    hashCode = hashCode * 59 + CaptureDate.GetHashCode();
                    if (Capturer != null)
                    hashCode = hashCode * 59 + Capturer.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (FormatStandardName != null)
                    hashCode = hashCode * 59 + FormatStandardName.GetHashCode();
                    if (Uri != null)
                    hashCode = hashCode * 59 + Uri.GetHashCode();
                    if (SizeValue != null)
                    hashCode = hashCode * 59 + SizeValue.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcBinaryType left, NcBinaryType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcBinaryType left, NcBinaryType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
