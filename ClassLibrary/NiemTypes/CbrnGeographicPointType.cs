/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for geographical coordinates of a point on the surface of the earth. For latitudes, positive values correspond to Northern latitudes, and negative values to Southern; for longitudes, positive values are Eastern longitudes and negative are Western. The units of measure for  elevation and positional accuracy elements is given by the units attribute.
    /// </summary>
    [DataContract]
    public partial class CbrnGeographicPointType : CbrnRemarksComplexObjectType, IEquatable<CbrnGeographicPointType>
    { 
        /// <summary>
        /// Gets or Sets LatitudeValue
        /// </summary>

        [DataMember(Name="latitudeValue")]
        public CbrnAngle90Type LatitudeValue { get; set; }

        /// <summary>
        /// Gets or Sets LongitudeValue
        /// </summary>

        [DataMember(Name="longitudeValue")]
        public CbrnAngle180Type LongitudeValue { get; set; }

        /// <summary>
        /// Gets or Sets ElevationValue
        /// </summary>

        [DataMember(Name="elevationValue")]
        public NiemXsinteger ElevationValue { get; set; }

        /// <summary>
        /// Gets or Sets ElevationOffsetValue
        /// </summary>

        [DataMember(Name="elevationOffsetValue")]
        public NiemXsinteger ElevationOffsetValue { get; set; }

        /// <summary>
        /// Gets or Sets GeoPointAccuracyValue
        /// </summary>

        [DataMember(Name="geoPointAccuracyValue")]
        public NiemXsinteger GeoPointAccuracyValue { get; set; }

        /// <summary>
        /// Gets or Sets ElevationAccuracyValue
        /// </summary>

        [DataMember(Name="elevationAccuracyValue")]
        public NiemXsinteger ElevationAccuracyValue { get; set; }

        /// <summary>
        /// Gets or Sets ElevationOffsetAccuracyValue
        /// </summary>

        [DataMember(Name="elevationOffsetAccuracyValue")]
        public NiemXsinteger ElevationOffsetAccuracyValue { get; set; }

        /// <summary>
        /// A value identifying the spatial reference system in which geographic coordinates are stated.  Default is WGS-84. NIEM reference is cbrn:datumText
        /// </summary>
        /// <value>A value identifying the spatial reference system in which geographic coordinates are stated.  Default is WGS-84. NIEM reference is cbrn:datumText</value>

        [DataMember(Name="datum")]
        public string Datum { get; set; }

        /// <summary>
        /// A unit of measure for a value element. If used, the unit of measure shall be as stated in the documentation for the element. NIEM reference is cbrn:unitsText
        /// </summary>
        /// <value>A unit of measure for a value element. If used, the unit of measure shall be as stated in the documentation for the element. NIEM reference is cbrn:unitsText</value>

        [DataMember(Name="units")]
        public string Units { get; set; }

        /// <summary>
        /// cbrnGeographicPointType JSON-LD context
        /// </summary>
        /// <value>cbrnGeographicPointType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextscbrnGeographicPointTypeContextJsonldEnum for ../JSON-LD_Contexts/cbrnGeographicPointTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/cbrnGeographicPointTypeContext.jsonld")]
            JSONLDContextscbrnGeographicPointTypeContextJsonldEnum = 0        }

        /// <summary>
        /// cbrnGeographicPointType JSON-LD context
        /// </summary>
        /// <value>cbrnGeographicPointType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CbrnGeographicPointType {\n");
            sb.Append("  LatitudeValue: ").Append(LatitudeValue).Append("\n");
            sb.Append("  LongitudeValue: ").Append(LongitudeValue).Append("\n");
            sb.Append("  ElevationValue: ").Append(ElevationValue).Append("\n");
            sb.Append("  ElevationOffsetValue: ").Append(ElevationOffsetValue).Append("\n");
            sb.Append("  GeoPointAccuracyValue: ").Append(GeoPointAccuracyValue).Append("\n");
            sb.Append("  ElevationAccuracyValue: ").Append(ElevationAccuracyValue).Append("\n");
            sb.Append("  ElevationOffsetAccuracyValue: ").Append(ElevationOffsetAccuracyValue).Append("\n");
            sb.Append("  Datum: ").Append(Datum).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CbrnGeographicPointType)obj);
        }

        /// <summary>
        /// Returns true if CbrnGeographicPointType instances are equal
        /// </summary>
        /// <param name="other">Instance of CbrnGeographicPointType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CbrnGeographicPointType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LatitudeValue == other.LatitudeValue ||
                    LatitudeValue != null &&
                    LatitudeValue.Equals(other.LatitudeValue)
                ) && 
                (
                    LongitudeValue == other.LongitudeValue ||
                    LongitudeValue != null &&
                    LongitudeValue.Equals(other.LongitudeValue)
                ) && 
                (
                    ElevationValue == other.ElevationValue ||
                    ElevationValue != null &&
                    ElevationValue.Equals(other.ElevationValue)
                ) && 
                (
                    ElevationOffsetValue == other.ElevationOffsetValue ||
                    ElevationOffsetValue != null &&
                    ElevationOffsetValue.Equals(other.ElevationOffsetValue)
                ) && 
                (
                    GeoPointAccuracyValue == other.GeoPointAccuracyValue ||
                    GeoPointAccuracyValue != null &&
                    GeoPointAccuracyValue.Equals(other.GeoPointAccuracyValue)
                ) && 
                (
                    ElevationAccuracyValue == other.ElevationAccuracyValue ||
                    ElevationAccuracyValue != null &&
                    ElevationAccuracyValue.Equals(other.ElevationAccuracyValue)
                ) && 
                (
                    ElevationOffsetAccuracyValue == other.ElevationOffsetAccuracyValue ||
                    ElevationOffsetAccuracyValue != null &&
                    ElevationOffsetAccuracyValue.Equals(other.ElevationOffsetAccuracyValue)
                ) && 
                (
                    Datum == other.Datum ||
                    Datum != null &&
                    Datum.Equals(other.Datum)
                ) && 
                (
                    Units == other.Units ||
                    Units != null &&
                    Units.Equals(other.Units)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LatitudeValue != null)
                    hashCode = hashCode * 59 + LatitudeValue.GetHashCode();
                    if (LongitudeValue != null)
                    hashCode = hashCode * 59 + LongitudeValue.GetHashCode();
                    if (ElevationValue != null)
                    hashCode = hashCode * 59 + ElevationValue.GetHashCode();
                    if (ElevationOffsetValue != null)
                    hashCode = hashCode * 59 + ElevationOffsetValue.GetHashCode();
                    if (GeoPointAccuracyValue != null)
                    hashCode = hashCode * 59 + GeoPointAccuracyValue.GetHashCode();
                    if (ElevationAccuracyValue != null)
                    hashCode = hashCode * 59 + ElevationAccuracyValue.GetHashCode();
                    if (ElevationOffsetAccuracyValue != null)
                    hashCode = hashCode * 59 + ElevationOffsetAccuracyValue.GetHashCode();
                    if (Datum != null)
                    hashCode = hashCode * 59 + Datum.GetHashCode();
                    if (Units != null)
                    hashCode = hashCode * 59 + Units.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CbrnGeographicPointType left, CbrnGeographicPointType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CbrnGeographicPointType left, CbrnGeographicPointType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
