/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for describing the service that will be made available by the agency.
    /// </summary>
    [DataContract]
    public partial class HsServiceType : NcActivityType, IEquatable<HsServiceType>
    { 
        /// <summary>
        /// An agency responsible for paying the cost of a service. NIEM reference is hs:ResponsibilityForServiceCostText
        /// </summary>
        /// <value>An agency responsible for paying the cost of a service. NIEM reference is hs:ResponsibilityForServiceCostText</value>

        [DataMember(Name="responsibilityForCost")]
        public List<NcTextType> ResponsibilityForCost { get; set; }

        /// <summary>
        /// A description of the person or organization who will provide the service. NIEM reference is hs:ResponsibleEntityDescriptionText
        /// </summary>
        /// <value>A description of the person or organization who will provide the service. NIEM reference is hs:ResponsibleEntityDescriptionText</value>

        [DataMember(Name="responsibleEntityDescription")]
        public List<NcTextType> ResponsibleEntityDescription { get; set; }

        /// <summary>
        /// A cost or estimated cost of the service. NIEM reference is hs:ServiceCostValue
        /// </summary>
        /// <value>A cost or estimated cost of the service. NIEM reference is hs:ServiceCostValue</value>

        [DataMember(Name="costValue")]
        public List<NcNumericType> CostValue { get; set; }

        /// <summary>
        /// A kind of a service that will be provided as part of a case plan.  Categories include:  assessment, treatment, program, benefit, education, transportation, respite care. NIEM reference is hs:ServiceCategoryCode
        /// </summary>
        /// <value>A kind of a service that will be provided as part of a case plan.  Categories include:  assessment, treatment, program, benefit, education, transportation, respite care. NIEM reference is hs:ServiceCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<HsServiceCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of a service that will be provided as part of a case plan.  Categories include:  assessment, treatment, program, benefit, education, transportation, respite care. NIEM reference is hs:ServiceCategoryText
        /// </summary>
        /// <value>A kind of a service that will be provided as part of a case plan.  Categories include:  assessment, treatment, program, benefit, education, transportation, respite care. NIEM reference is hs:ServiceCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A reason a service was referred out. NIEM reference is hs:ReferredOutServiceReasonText
        /// </summary>
        /// <value>A reason a service was referred out. NIEM reference is hs:ReferredOutServiceReasonText</value>

        [DataMember(Name="referredOutReason")]
        public List<NcTextType> ReferredOutReason { get; set; }

        /// <summary>
        /// A kind of reason a service was not provided, e.g organizational barriers. NIEM reference is hs:UnprovidedServiceReasonCategoryCode
        /// </summary>
        /// <value>A kind of reason a service was not provided, e.g organizational barriers. NIEM reference is hs:UnprovidedServiceReasonCategoryCode</value>

        [DataMember(Name="unprovidedReasonCategoryCode")]
        public List<HsUnprovidedServiceReasonCategoryCodeType> UnprovidedReasonCategoryCode { get; set; }

        /// <summary>
        /// A kind of reason a service was not provided, e.g organizational barriers. NIEM reference is hs:UnprovidedServiceReasonCategoryText
        /// </summary>
        /// <value>A kind of reason a service was not provided, e.g organizational barriers. NIEM reference is hs:UnprovidedServiceReasonCategoryText</value>

        [DataMember(Name="unprovidedReasonCategory")]
        public List<NcTextType> UnprovidedReasonCategory { get; set; }

        /// <summary>
        /// hsServiceType JSON-LD context
        /// </summary>
        /// <value>hsServiceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsServiceTypeContextJsonldEnum for ../JSON-LD_Contexts/hsServiceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsServiceTypeContext.jsonld")]
            JSONLDContextshsServiceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsServiceType JSON-LD context
        /// </summary>
        /// <value>hsServiceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsServiceType {\n");
            sb.Append("  ResponsibilityForCost: ").Append(ResponsibilityForCost).Append("\n");
            sb.Append("  ResponsibleEntityDescription: ").Append(ResponsibleEntityDescription).Append("\n");
            sb.Append("  CostValue: ").Append(CostValue).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ReferredOutReason: ").Append(ReferredOutReason).Append("\n");
            sb.Append("  UnprovidedReasonCategoryCode: ").Append(UnprovidedReasonCategoryCode).Append("\n");
            sb.Append("  UnprovidedReasonCategory: ").Append(UnprovidedReasonCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsServiceType)obj);
        }

        /// <summary>
        /// Returns true if HsServiceType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsServiceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsServiceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ResponsibilityForCost == other.ResponsibilityForCost ||
                    ResponsibilityForCost != null &&
                    ResponsibilityForCost.SequenceEqual(other.ResponsibilityForCost)
                ) && 
                (
                    ResponsibleEntityDescription == other.ResponsibleEntityDescription ||
                    ResponsibleEntityDescription != null &&
                    ResponsibleEntityDescription.SequenceEqual(other.ResponsibleEntityDescription)
                ) && 
                (
                    CostValue == other.CostValue ||
                    CostValue != null &&
                    CostValue.SequenceEqual(other.CostValue)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    ReferredOutReason == other.ReferredOutReason ||
                    ReferredOutReason != null &&
                    ReferredOutReason.SequenceEqual(other.ReferredOutReason)
                ) && 
                (
                    UnprovidedReasonCategoryCode == other.UnprovidedReasonCategoryCode ||
                    UnprovidedReasonCategoryCode != null &&
                    UnprovidedReasonCategoryCode.SequenceEqual(other.UnprovidedReasonCategoryCode)
                ) && 
                (
                    UnprovidedReasonCategory == other.UnprovidedReasonCategory ||
                    UnprovidedReasonCategory != null &&
                    UnprovidedReasonCategory.SequenceEqual(other.UnprovidedReasonCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ResponsibilityForCost != null)
                    hashCode = hashCode * 59 + ResponsibilityForCost.GetHashCode();
                    if (ResponsibleEntityDescription != null)
                    hashCode = hashCode * 59 + ResponsibleEntityDescription.GetHashCode();
                    if (CostValue != null)
                    hashCode = hashCode * 59 + CostValue.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (ReferredOutReason != null)
                    hashCode = hashCode * 59 + ReferredOutReason.GetHashCode();
                    if (UnprovidedReasonCategoryCode != null)
                    hashCode = hashCode * 59 + UnprovidedReasonCategoryCode.GetHashCode();
                    if (UnprovidedReasonCategory != null)
                    hashCode = hashCode * 59 + UnprovidedReasonCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsServiceType left, HsServiceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsServiceType left, HsServiceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
