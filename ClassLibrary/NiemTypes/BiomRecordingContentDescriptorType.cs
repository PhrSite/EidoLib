/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a recording content descriptor
    /// </summary>
    [DataContract]
    public partial class BiomRecordingContentDescriptorType : IEquatable<BiomRecordingContentDescriptorType>
    { 
        /// <summary>
        /// A kind of first information item is the assigned voice indicator / AVI. It is mandatory if this field is used. It indicates if the voice recording sample was obtained from a known subject. NIEM reference is biom:RecordingAssignedVoiceCategoryCode
        /// </summary>
        /// <value>A kind of first information item is the assigned voice indicator / AVI. It is mandatory if this field is used. It indicates if the voice recording sample was obtained from a known subject. NIEM reference is biom:RecordingAssignedVoiceCategoryCode</value>

        [DataMember(Name="recordingAssignedVoiceCategoryCode")]
        public List<BiomRecordingAssignedVoiceCategoryCodeType> RecordingAssignedVoiceCategoryCode { get; set; }

        /// <summary>
        /// A kind of second information item is the speaker plurality code / SPC. It is optional and indicates plurality of speakers represented on voice recording: M &#x3D; multiple speakers S &#x3D; single speaker. NIEM reference is biom:SpeakerPluralityCode
        /// </summary>
        /// <value>A kind of second information item is the speaker plurality code / SPC. It is optional and indicates plurality of speakers represented on voice recording: M &#x3D; multiple speakers S &#x3D; single speaker. NIEM reference is biom:SpeakerPluralityCode</value>

        [DataMember(Name="speakerPluralityCode")]
        public List<BiomSpeakerPluralityCodeType> SpeakerPluralityCode { get; set; }

        /// <summary>
        /// A kind of comment that allows statements of up to 4000 Unicode characters in length describing methods by which the plurality and nationality of the speakers was determined, along with any supporting text. NIEM reference is biom:RecordingContentCommentText
        /// </summary>
        /// <value>A kind of comment that allows statements of up to 4000 Unicode characters in length describing methods by which the plurality and nationality of the speakers was determined, along with any supporting text. NIEM reference is biom:RecordingContentCommentText</value>

        [DataMember(Name="recordingContentComment")]
        public List<BiomLongCommentType> RecordingContentComment { get; set; }

        /// <summary>
        /// biomRecordingContentDescriptorType JSON-LD context
        /// </summary>
        /// <value>biomRecordingContentDescriptorType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomRecordingContentDescriptorTypeContextJsonldEnum for ../JSON-LD_Contexts/biomRecordingContentDescriptorTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomRecordingContentDescriptorTypeContext.jsonld")]
            JSONLDContextsbiomRecordingContentDescriptorTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomRecordingContentDescriptorType JSON-LD context
        /// </summary>
        /// <value>biomRecordingContentDescriptorType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomRecordingContentDescriptorType {\n");
            sb.Append("  RecordingAssignedVoiceCategoryCode: ").Append(RecordingAssignedVoiceCategoryCode).Append("\n");
            sb.Append("  SpeakerPluralityCode: ").Append(SpeakerPluralityCode).Append("\n");
            sb.Append("  RecordingContentComment: ").Append(RecordingContentComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomRecordingContentDescriptorType)obj);
        }

        /// <summary>
        /// Returns true if BiomRecordingContentDescriptorType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomRecordingContentDescriptorType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomRecordingContentDescriptorType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RecordingAssignedVoiceCategoryCode == other.RecordingAssignedVoiceCategoryCode ||
                    RecordingAssignedVoiceCategoryCode != null &&
                    RecordingAssignedVoiceCategoryCode.SequenceEqual(other.RecordingAssignedVoiceCategoryCode)
                ) && 
                (
                    SpeakerPluralityCode == other.SpeakerPluralityCode ||
                    SpeakerPluralityCode != null &&
                    SpeakerPluralityCode.SequenceEqual(other.SpeakerPluralityCode)
                ) && 
                (
                    RecordingContentComment == other.RecordingContentComment ||
                    RecordingContentComment != null &&
                    RecordingContentComment.SequenceEqual(other.RecordingContentComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RecordingAssignedVoiceCategoryCode != null)
                    hashCode = hashCode * 59 + RecordingAssignedVoiceCategoryCode.GetHashCode();
                    if (SpeakerPluralityCode != null)
                    hashCode = hashCode * 59 + SpeakerPluralityCode.GetHashCode();
                    if (RecordingContentComment != null)
                    hashCode = hashCode * 59 + RecordingContentComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomRecordingContentDescriptorType left, BiomRecordingContentDescriptorType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomRecordingContentDescriptorType left, BiomRecordingContentDescriptorType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
