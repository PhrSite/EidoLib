/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
        /// <summary>
        /// A data type for a code that characterizes the recovery of the victim based on investigator perception.
        /// </summary>
        /// <value>A data type for a code that characterizes the recovery of the victim based on investigator perception.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NdexVictimMORecoveryCodeSimpleType
        {
            /// <summary>
            /// Enum AsSkeletalRemainsEnum for As skeletal remains
            /// </summary>
            [EnumMember(Value = "As skeletal remains")]
            AsSkeletalRemainsEnum = 0,
            /// <summary>
            /// Enum BuriedEnum for Buried
            /// </summary>
            [EnumMember(Value = "Buried")]
            BuriedEnum = 1,
            /// <summary>
            /// Enum CoveredEnum for Covered
            /// </summary>
            [EnumMember(Value = "Covered")]
            CoveredEnum = 2,
            /// <summary>
            /// Enum CoveredCompletelyEnum for Covered_Completely
            /// </summary>
            [EnumMember(Value = "Covered_Completely")]
            CoveredCompletelyEnum = 3,
            /// <summary>
            /// Enum CoveredFaceOnlyEnum for Covered_Face Only
            /// </summary>
            [EnumMember(Value = "Covered_Face Only")]
            CoveredFaceOnlyEnum = 4,
            /// <summary>
            /// Enum CoveredPartiallyEnum for Covered_Partially
            /// </summary>
            [EnumMember(Value = "Covered_Partially")]
            CoveredPartiallyEnum = 5,
            /// <summary>
            /// Enum InBagEnum for In Bag
            /// </summary>
            [EnumMember(Value = "In Bag")]
            InBagEnum = 6,
            /// <summary>
            /// Enum InBagGarbageEnum for In Bag_Garbage
            /// </summary>
            [EnumMember(Value = "In Bag_Garbage")]
            InBagGarbageEnum = 7,
            /// <summary>
            /// Enum InBagLaundryEnum for In Bag_Laundry
            /// </summary>
            [EnumMember(Value = "In Bag_Laundry")]
            InBagLaundryEnum = 8,
            /// <summary>
            /// Enum InBagPlasticEnum for In Bag_Plastic
            /// </summary>
            [EnumMember(Value = "In Bag_Plastic")]
            InBagPlasticEnum = 9,
            /// <summary>
            /// Enum InBathtubEnum for In Bathtub
            /// </summary>
            [EnumMember(Value = "In Bathtub")]
            InBathtubEnum = 10,
            /// <summary>
            /// Enum InContainerEnum for In Container
            /// </summary>
            [EnumMember(Value = "In Container")]
            InContainerEnum = 11,
            /// <summary>
            /// Enum InContainerBoxEnum for In Container_Box
            /// </summary>
            [EnumMember(Value = "In Container_Box")]
            InContainerBoxEnum = 12,
            /// <summary>
            /// Enum InContainerDumpsterEnum for In Container_Dumpster
            /// </summary>
            [EnumMember(Value = "In Container_Dumpster")]
            InContainerDumpsterEnum = 13,
            /// <summary>
            /// Enum InContainerRefrigeratorEnum for In Container_refrigerator
            /// </summary>
            [EnumMember(Value = "In Container_refrigerator")]
            InContainerRefrigeratorEnum = 14,
            /// <summary>
            /// Enum InContainerSuitcaseEnum for In Container_suitcase
            /// </summary>
            [EnumMember(Value = "In Container_suitcase")]
            InContainerSuitcaseEnum = 15,
            /// <summary>
            /// Enum InVehicleEnum for In Vehicle
            /// </summary>
            [EnumMember(Value = "In Vehicle")]
            InVehicleEnum = 16,
            /// <summary>
            /// Enum InWaterEnum for In Water
            /// </summary>
            [EnumMember(Value = "In Water")]
            InWaterEnum = 17,
            /// <summary>
            /// Enum InWaterNotWeightedEnum for In Water_Not Weighted
            /// </summary>
            [EnumMember(Value = "In Water_Not Weighted")]
            InWaterNotWeightedEnum = 18,
            /// <summary>
            /// Enum InWaterWeightedDownEnum for In Water_Weighted Down
            /// </summary>
            [EnumMember(Value = "In Water_Weighted Down")]
            InWaterWeightedDownEnum = 19,
            /// <summary>
            /// Enum WrappedEnum for Wrapped
            /// </summary>
            [EnumMember(Value = "Wrapped")]
            WrappedEnum = 20        }
}
