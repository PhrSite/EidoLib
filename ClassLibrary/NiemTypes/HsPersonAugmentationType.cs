/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a person.
    /// </summary>
    [DataContract]
    public partial class HsPersonAugmentationType : IEquatable<HsPersonAugmentationType>
    { 
        /// <summary>
        /// A name of a state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateName
        /// </summary>
        /// <value>A name of a state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationStateName</value>

        [DataMember(Name="locationStateName")]
        public List<NcProperNameTextType> LocationStateName { get; set; }

        /// <summary>
        /// True if contact by voice phone is supported for follow up purposes; false otherwise. NIEM reference is hs:PhoneContactSupportIndicator
        /// </summary>
        /// <value>True if contact by voice phone is supported for follow up purposes; false otherwise. NIEM reference is hs:PhoneContactSupportIndicator</value>

        [DataMember(Name="isPhoneContactSupport")]
        public List<NiemXsboolean> IsPhoneContactSupport { get; set; }

        /// <summary>
        /// True if contact by fax machine is supported for follow up purposes; false otherwise. NIEM reference is hs:FaxContactSupportIndicator
        /// </summary>
        /// <value>True if contact by fax machine is supported for follow up purposes; false otherwise. NIEM reference is hs:FaxContactSupportIndicator</value>

        [DataMember(Name="isFaxContactSupport")]
        public List<NiemXsboolean> IsFaxContactSupport { get; set; }

        /// <summary>
        /// True if contact by e-mail is supported for follow up purposes; false otherwise. NIEM reference is hs:EmailContactSupportIndicator
        /// </summary>
        /// <value>True if contact by e-mail is supported for follow up purposes; false otherwise. NIEM reference is hs:EmailContactSupportIndicator</value>

        [DataMember(Name="isEmailContactSupport")]
        public List<NiemXsboolean> IsEmailContactSupport { get; set; }

        /// <summary>
        /// A verification of a SSN by the Social Security Administration (SSA). NIEM reference is hs:SSNVerificationIndicatorCode
        /// </summary>
        /// <value>A verification of a SSN by the Social Security Administration (SSA). NIEM reference is hs:SSNVerificationIndicatorCode</value>

        [DataMember(Name="ssnVerificationIndicatorCode")]
        public List<HsSSNVerificationIndicatorCodeType> SsnVerificationIndicatorCode { get; set; }

        /// <summary>
        /// True if there has been fraudulent receipt of TANF benefits within the last ten years due to a misrepresentation of residence; false otherwise. NIEM reference is hs:FraudIndicator
        /// </summary>
        /// <value>True if there has been fraudulent receipt of TANF benefits within the last ten years due to a misrepresentation of residence; false otherwise. NIEM reference is hs:FraudIndicator</value>

        [DataMember(Name="isFraud")]
        public List<NiemXsboolean> IsFraud { get; set; }

        /// <summary>
        /// True if a person is a current fugitive felon; false otherwise. NIEM reference is hs:FugitiveFelonIndicator
        /// </summary>
        /// <value>True if a person is a current fugitive felon; false otherwise. NIEM reference is hs:FugitiveFelonIndicator</value>

        [DataMember(Name="isFugitiveFelon")]
        public List<NiemXsboolean> IsFugitiveFelon { get; set; }

        /// <summary>
        /// True if Current Probation or Parole Violation; false otherwise. NIEM reference is hs:ProbationAndParoleViolationIndicator
        /// </summary>
        /// <value>True if Current Probation or Parole Violation; false otherwise. NIEM reference is hs:ProbationAndParoleViolationIndicator</value>

        [DataMember(Name="isProbationAndParoleViolation")]
        public List<NiemXsboolean> IsProbationAndParoleViolation { get; set; }

        /// <summary>
        /// True if a person is a drug-related felon; false otherwise. NIEM reference is hs:DrugRelatedFelonIndicator
        /// </summary>
        /// <value>True if a person is a drug-related felon; false otherwise. NIEM reference is hs:DrugRelatedFelonIndicator</value>

        [DataMember(Name="isDrugRelatedFelon")]
        public List<NiemXsboolean> IsDrugRelatedFelon { get; set; }

        /// <summary>
        /// True if to perform a VA Match; false if there is no VA match. NIEM reference is hs:VAMatchRequestIndicator
        /// </summary>
        /// <value>True if to perform a VA Match; false if there is no VA match. NIEM reference is hs:VAMatchRequestIndicator</value>

        [DataMember(Name="isVaMatchRequest")]
        public List<NiemXsboolean> IsVaMatchRequest { get; set; }

        /// <summary>
        /// True if to perform an interstate match; false if there is no state match. NIEM reference is hs:StateMatchRequestIndicator
        /// </summary>
        /// <value>True if to perform an interstate match; false if there is no state match. NIEM reference is hs:StateMatchRequestIndicator</value>

        [DataMember(Name="isStateMatchRequest")]
        public List<NiemXsboolean> IsStateMatchRequest { get; set; }

        /// <summary>
        /// True if perform federal data match; false if there is no fed match. NIEM reference is hs:FEDMatchRequestIndicator
        /// </summary>
        /// <value>True if perform federal data match; false if there is no fed match. NIEM reference is hs:FEDMatchRequestIndicator</value>

        [DataMember(Name="isFedMatchRequest")]
        public List<NiemXsboolean> IsFedMatchRequest { get; set; }

        /// <summary>
        /// A set of programs for which a person may be considered for eligibility. NIEM reference is hs:Eligibility
        /// </summary>
        /// <value>A set of programs for which a person may be considered for eligibility. NIEM reference is hs:Eligibility</value>

        [DataMember(Name="eligibility")]
        public List<HsEligibilityType> Eligibility { get; set; }

        /// <summary>
        /// A tribe in which the child may be affiliated with. NIEM reference is hs:TribalAffiliationText
        /// </summary>
        /// <value>A tribe in which the child may be affiliated with. NIEM reference is hs:TribalAffiliationText</value>

        [DataMember(Name="tribalAffiliation")]
        public List<NcTextType> TribalAffiliation { get; set; }

        /// <summary>
        /// An aggregation of information about a set of related activities and events. NIEM reference is nc:Case
        /// </summary>
        /// <value>An aggregation of information about a set of related activities and events. NIEM reference is nc:Case</value>

        [DataMember(Name="case")]
        public List<NcCaseType> _Case { get; set; }

        /// <summary>
        /// True if the juvenile is currently enrolled in an educational program; false otherwise. NIEM reference is hs:StudentCurrentEducationEnrollmentIndicator
        /// </summary>
        /// <value>True if the juvenile is currently enrolled in an educational program; false otherwise. NIEM reference is hs:StudentCurrentEducationEnrollmentIndicator</value>

        [DataMember(Name="isStudentCurrentEducationEnrollment")]
        public List<NiemXsboolean> IsStudentCurrentEducationEnrollment { get; set; }

        /// <summary>
        /// True if the juvenile is currently considered truant; false otherwise. NIEM reference is hs:StudentCurrentEducationTruancyIndicator
        /// </summary>
        /// <value>True if the juvenile is currently considered truant; false otherwise. NIEM reference is hs:StudentCurrentEducationTruancyIndicator</value>

        [DataMember(Name="isStudentCurrentEducationTruancy")]
        public List<NiemXsboolean> IsStudentCurrentEducationTruancy { get; set; }

        /// <summary>
        /// A description of the juvenile&#x27;s current educational program (e.g., grade level, curriculum, etc.). NIEM reference is hs:StudentCurrentEducationDescriptionText
        /// </summary>
        /// <value>A description of the juvenile&#x27;s current educational program (e.g., grade level, curriculum, etc.). NIEM reference is hs:StudentCurrentEducationDescriptionText</value>

        [DataMember(Name="studentCurrentEducationDescription")]
        public List<NcTextType> StudentCurrentEducationDescription { get; set; }

        /// <summary>
        /// True if the student is eligible for enrollment in a special-education program (based on diagnosed developmental disabilities, learning disorders, etc.); false otherwise. NIEM reference is hs:StudentSpecialEducationEligibleIndicator
        /// </summary>
        /// <value>True if the student is eligible for enrollment in a special-education program (based on diagnosed developmental disabilities, learning disorders, etc.); false otherwise. NIEM reference is hs:StudentSpecialEducationEligibleIndicator</value>

        [DataMember(Name="isStudentSpecialEducationEligible")]
        public List<NiemXsboolean> IsStudentSpecialEducationEligible { get; set; }

        /// <summary>
        /// A date a juvenile&#x27;s current educational program is scheduled to conclude. NIEM reference is hs:StudentCurrentEducationEnrollmentEndDate
        /// </summary>
        /// <value>A date a juvenile&#x27;s current educational program is scheduled to conclude. NIEM reference is hs:StudentCurrentEducationEnrollmentEndDate</value>

        [DataMember(Name="studentCurrentEducationEnrollmentEndDate")]
        public List<NcDateType> StudentCurrentEducationEnrollmentEndDate { get; set; }

        /// <summary>
        /// A unique alphanumeric identification assigned to a student by an education organization. NIEM reference is hs:StudentIdentification
        /// </summary>
        /// <value>A unique alphanumeric identification assigned to a student by an education organization. NIEM reference is hs:StudentIdentification</value>

        [DataMember(Name="studentIdentification")]
        public List<NcIdentificationType> StudentIdentification { get; set; }

        /// <summary>
        /// A description of the educational issues related to the court report and service plan of any participant in the case. NIEM reference is hs:Education
        /// </summary>
        /// <value>A description of the educational issues related to the court report and service plan of any participant in the case. NIEM reference is hs:Education</value>

        [DataMember(Name="education")]
        public List<HsEducationType> Education { get; set; }

        /// <summary>
        /// A history of a participant of a case. NIEM reference is hs:HistoricalNarrative
        /// </summary>
        /// <value>A history of a participant of a case. NIEM reference is hs:HistoricalNarrative</value>

        [DataMember(Name="historicalNarrative")]
        public List<HsHistoricalNarrativeType> HistoricalNarrative { get; set; }

        /// <summary>
        /// True if a case participant&#x27;s ethnicity implicates the Indian Child Welfare Act (ICWA); false otherwise. NIEM reference is hs:ICWAEligibilityIndicator
        /// </summary>
        /// <value>True if a case participant&#x27;s ethnicity implicates the Indian Child Welfare Act (ICWA); false otherwise. NIEM reference is hs:ICWAEligibilityIndicator</value>

        [DataMember(Name="isIcwaEligibility")]
        public List<NiemXsboolean> IsIcwaEligibility { get; set; }

        /// <summary>
        /// True if the juvenile has Serious Habitual Offender status; false otherwise. NIEM reference is hs:SeriousHabitualOffenderIndicator
        /// </summary>
        /// <value>True if the juvenile has Serious Habitual Offender status; false otherwise. NIEM reference is hs:SeriousHabitualOffenderIndicator</value>

        [DataMember(Name="isSeriousHabitualOffender")]
        public List<NiemXsboolean> IsSeriousHabitualOffender { get; set; }

        /// <summary>
        /// A person&#x27;s mental health, substance abuse, medical health and medications. NIEM reference is hs:HealthDetails
        /// </summary>
        /// <value>A person&#x27;s mental health, substance abuse, medical health and medications. NIEM reference is hs:HealthDetails</value>

        [DataMember(Name="healthDetails")]
        public List<HsHealthDetailsType> HealthDetails { get; set; }

        /// <summary>
        /// A health insurance policy. NIEM reference is hs:HealthInsurance
        /// </summary>
        /// <value>A health insurance policy. NIEM reference is hs:HealthInsurance</value>

        [DataMember(Name="healthInsurance")]
        public List<HsHealthInsuranceType> HealthInsurance { get; set; }

        /// <summary>
        /// True if any of the case participants requires an interpreter during case proceedings; false otherwise. NIEM reference is hs:EnglishInterpreterRequiredIndicator
        /// </summary>
        /// <value>True if any of the case participants requires an interpreter during case proceedings; false otherwise. NIEM reference is hs:EnglishInterpreterRequiredIndicator</value>

        [DataMember(Name="isEnglishInterpreterRequired")]
        public List<NiemXsboolean> IsEnglishInterpreterRequired { get; set; }

        /// <summary>
        /// A description of recent major life changes, generally in the prior year. NIEM reference is hs:RecentLifeChangesDescriptionText
        /// </summary>
        /// <value>A description of recent major life changes, generally in the prior year. NIEM reference is hs:RecentLifeChangesDescriptionText</value>

        [DataMember(Name="recentLifeChangesDescription")]
        public List<NcTextType> RecentLifeChangesDescription { get; set; }

        /// <summary>
        /// An association between an employer and contact information. NIEM reference is hs:EmployerContactInformation
        /// </summary>
        /// <value>An association between an employer and contact information. NIEM reference is hs:EmployerContactInformation</value>

        [DataMember(Name="employerContactInformation")]
        public List<NcContactInformationType> EmployerContactInformation { get; set; }

        /// <summary>
        /// An identification for a foreign-born person. NIEM reference is hs:AlienIdentification
        /// </summary>
        /// <value>An identification for a foreign-born person. NIEM reference is hs:AlienIdentification</value>

        [DataMember(Name="alienIdentification")]
        public List<NcIdentificationType> AlienIdentification { get; set; }

        /// <summary>
        /// A data concept for a kind of current living situtation. NIEM reference is hs:CurrentLivingSituationCategoryCode
        /// </summary>
        /// <value>A data concept for a kind of current living situtation. NIEM reference is hs:CurrentLivingSituationCategoryCode</value>

        [DataMember(Name="currentLivingSituationCategoryCode")]
        public List<HsLivingSituationCategoryCodeType> CurrentLivingSituationCategoryCode { get; set; }

        /// <summary>
        /// A kind of current living situtation. NIEM reference is hs:CurrentLivingSituationCategoryText
        /// </summary>
        /// <value>A kind of current living situtation. NIEM reference is hs:CurrentLivingSituationCategoryText</value>

        [DataMember(Name="currentLivingSituationCategory")]
        public List<NcTextType> CurrentLivingSituationCategory { get; set; }

        /// <summary>
        /// A description of a person&#x27;s hobbies and/or interests. NIEM reference is hs:HobbiesInterestsDescriptionText
        /// </summary>
        /// <value>A description of a person&#x27;s hobbies and/or interests. NIEM reference is hs:HobbiesInterestsDescriptionText</value>

        [DataMember(Name="hobbiesInterestsDescription")]
        public List<NcTextType> HobbiesInterestsDescription { get; set; }

        /// <summary>
        /// A kind of housing at time of service. NIEM reference is hs:HousingPermanencyCategoryCode
        /// </summary>
        /// <value>A kind of housing at time of service. NIEM reference is hs:HousingPermanencyCategoryCode</value>

        [DataMember(Name="housingPermanencyCategoryCode")]
        public List<HsHousingPermanencyCategoryCodeType> HousingPermanencyCategoryCode { get; set; }

        /// <summary>
        /// A measurement of the perceived or apparent age of a person. NIEM reference is hs:PerceivedAgeMeasure
        /// </summary>
        /// <value>A measurement of the perceived or apparent age of a person. NIEM reference is hs:PerceivedAgeMeasure</value>

        [DataMember(Name="perceivedAgeMeasure")]
        public List<NcTimeMeasureType> PerceivedAgeMeasure { get; set; }

        /// <summary>
        /// A gender of a person&#x27;s identity. The cultural meanings of patterns of behavior, experience, and personality that are labeled masculine or feminine. NIEM reference is hs:PersonGenderIdentityCode
        /// </summary>
        /// <value>A gender of a person&#x27;s identity. The cultural meanings of patterns of behavior, experience, and personality that are labeled masculine or feminine. NIEM reference is hs:PersonGenderIdentityCode</value>

        [DataMember(Name="personGenderIdentityCode")]
        public List<HsPersonGenderIdentityCodeType> PersonGenderIdentityCode { get; set; }

        /// <summary>
        /// A gender of a person&#x27;s identity. The cultural meanings of patterns of behavior, experience, and personality that are labeled masculine or feminine. NIEM reference is hs:PersonGenderIdentityText
        /// </summary>
        /// <value>A gender of a person&#x27;s identity. The cultural meanings of patterns of behavior, experience, and personality that are labeled masculine or feminine. NIEM reference is hs:PersonGenderIdentityText</value>

        [DataMember(Name="personGenderIdentity")]
        public List<NcTextType> PersonGenderIdentity { get; set; }

        /// <summary>
        /// A description of a person&#x27;s general physical condition. NIEM reference is hs:PersonPhysicalConditionText
        /// </summary>
        /// <value>A description of a person&#x27;s general physical condition. NIEM reference is hs:PersonPhysicalConditionText</value>

        [DataMember(Name="personPhysicalCondition")]
        public List<NcTextType> PersonPhysicalCondition { get; set; }

        /// <summary>
        /// A kind of living situation experienced in the last year. NIEM reference is hs:RecentLivingSituationCategoryCode
        /// </summary>
        /// <value>A kind of living situation experienced in the last year. NIEM reference is hs:RecentLivingSituationCategoryCode</value>

        [DataMember(Name="recentLivingSituationCategoryCode")]
        public List<HsLivingSituationCategoryCodeType> RecentLivingSituationCategoryCode { get; set; }

        /// <summary>
        /// A kind of living situation experienced in the last year. NIEM reference is hs:RecentLivingSituationCategoryText
        /// </summary>
        /// <value>A kind of living situation experienced in the last year. NIEM reference is hs:RecentLivingSituationCategoryText</value>

        [DataMember(Name="recentLivingSituationCategory")]
        public List<NcTextType> RecentLivingSituationCategory { get; set; }

        /// <summary>
        /// hsPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsPersonAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsPersonAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/hsPersonAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsPersonAugmentationTypeContext.jsonld")]
            JSONLDContextshsPersonAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsPersonAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsPersonAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsPersonAugmentationType {\n");
            sb.Append("  LocationStateName: ").Append(LocationStateName).Append("\n");
            sb.Append("  IsPhoneContactSupport: ").Append(IsPhoneContactSupport).Append("\n");
            sb.Append("  IsFaxContactSupport: ").Append(IsFaxContactSupport).Append("\n");
            sb.Append("  IsEmailContactSupport: ").Append(IsEmailContactSupport).Append("\n");
            sb.Append("  SsnVerificationIndicatorCode: ").Append(SsnVerificationIndicatorCode).Append("\n");
            sb.Append("  IsFraud: ").Append(IsFraud).Append("\n");
            sb.Append("  IsFugitiveFelon: ").Append(IsFugitiveFelon).Append("\n");
            sb.Append("  IsProbationAndParoleViolation: ").Append(IsProbationAndParoleViolation).Append("\n");
            sb.Append("  IsDrugRelatedFelon: ").Append(IsDrugRelatedFelon).Append("\n");
            sb.Append("  IsVaMatchRequest: ").Append(IsVaMatchRequest).Append("\n");
            sb.Append("  IsStateMatchRequest: ").Append(IsStateMatchRequest).Append("\n");
            sb.Append("  IsFedMatchRequest: ").Append(IsFedMatchRequest).Append("\n");
            sb.Append("  Eligibility: ").Append(Eligibility).Append("\n");
            sb.Append("  TribalAffiliation: ").Append(TribalAffiliation).Append("\n");
            sb.Append("  _Case: ").Append(_Case).Append("\n");
            sb.Append("  IsStudentCurrentEducationEnrollment: ").Append(IsStudentCurrentEducationEnrollment).Append("\n");
            sb.Append("  IsStudentCurrentEducationTruancy: ").Append(IsStudentCurrentEducationTruancy).Append("\n");
            sb.Append("  StudentCurrentEducationDescription: ").Append(StudentCurrentEducationDescription).Append("\n");
            sb.Append("  IsStudentSpecialEducationEligible: ").Append(IsStudentSpecialEducationEligible).Append("\n");
            sb.Append("  StudentCurrentEducationEnrollmentEndDate: ").Append(StudentCurrentEducationEnrollmentEndDate).Append("\n");
            sb.Append("  StudentIdentification: ").Append(StudentIdentification).Append("\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  HistoricalNarrative: ").Append(HistoricalNarrative).Append("\n");
            sb.Append("  IsIcwaEligibility: ").Append(IsIcwaEligibility).Append("\n");
            sb.Append("  IsSeriousHabitualOffender: ").Append(IsSeriousHabitualOffender).Append("\n");
            sb.Append("  HealthDetails: ").Append(HealthDetails).Append("\n");
            sb.Append("  HealthInsurance: ").Append(HealthInsurance).Append("\n");
            sb.Append("  IsEnglishInterpreterRequired: ").Append(IsEnglishInterpreterRequired).Append("\n");
            sb.Append("  RecentLifeChangesDescription: ").Append(RecentLifeChangesDescription).Append("\n");
            sb.Append("  EmployerContactInformation: ").Append(EmployerContactInformation).Append("\n");
            sb.Append("  AlienIdentification: ").Append(AlienIdentification).Append("\n");
            sb.Append("  CurrentLivingSituationCategoryCode: ").Append(CurrentLivingSituationCategoryCode).Append("\n");
            sb.Append("  CurrentLivingSituationCategory: ").Append(CurrentLivingSituationCategory).Append("\n");
            sb.Append("  HobbiesInterestsDescription: ").Append(HobbiesInterestsDescription).Append("\n");
            sb.Append("  HousingPermanencyCategoryCode: ").Append(HousingPermanencyCategoryCode).Append("\n");
            sb.Append("  PerceivedAgeMeasure: ").Append(PerceivedAgeMeasure).Append("\n");
            sb.Append("  PersonGenderIdentityCode: ").Append(PersonGenderIdentityCode).Append("\n");
            sb.Append("  PersonGenderIdentity: ").Append(PersonGenderIdentity).Append("\n");
            sb.Append("  PersonPhysicalCondition: ").Append(PersonPhysicalCondition).Append("\n");
            sb.Append("  RecentLivingSituationCategoryCode: ").Append(RecentLivingSituationCategoryCode).Append("\n");
            sb.Append("  RecentLivingSituationCategory: ").Append(RecentLivingSituationCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsPersonAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if HsPersonAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsPersonAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsPersonAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationStateName == other.LocationStateName ||
                    LocationStateName != null &&
                    LocationStateName.SequenceEqual(other.LocationStateName)
                ) && 
                (
                    IsPhoneContactSupport == other.IsPhoneContactSupport ||
                    IsPhoneContactSupport != null &&
                    IsPhoneContactSupport.SequenceEqual(other.IsPhoneContactSupport)
                ) && 
                (
                    IsFaxContactSupport == other.IsFaxContactSupport ||
                    IsFaxContactSupport != null &&
                    IsFaxContactSupport.SequenceEqual(other.IsFaxContactSupport)
                ) && 
                (
                    IsEmailContactSupport == other.IsEmailContactSupport ||
                    IsEmailContactSupport != null &&
                    IsEmailContactSupport.SequenceEqual(other.IsEmailContactSupport)
                ) && 
                (
                    SsnVerificationIndicatorCode == other.SsnVerificationIndicatorCode ||
                    SsnVerificationIndicatorCode != null &&
                    SsnVerificationIndicatorCode.SequenceEqual(other.SsnVerificationIndicatorCode)
                ) && 
                (
                    IsFraud == other.IsFraud ||
                    IsFraud != null &&
                    IsFraud.SequenceEqual(other.IsFraud)
                ) && 
                (
                    IsFugitiveFelon == other.IsFugitiveFelon ||
                    IsFugitiveFelon != null &&
                    IsFugitiveFelon.SequenceEqual(other.IsFugitiveFelon)
                ) && 
                (
                    IsProbationAndParoleViolation == other.IsProbationAndParoleViolation ||
                    IsProbationAndParoleViolation != null &&
                    IsProbationAndParoleViolation.SequenceEqual(other.IsProbationAndParoleViolation)
                ) && 
                (
                    IsDrugRelatedFelon == other.IsDrugRelatedFelon ||
                    IsDrugRelatedFelon != null &&
                    IsDrugRelatedFelon.SequenceEqual(other.IsDrugRelatedFelon)
                ) && 
                (
                    IsVaMatchRequest == other.IsVaMatchRequest ||
                    IsVaMatchRequest != null &&
                    IsVaMatchRequest.SequenceEqual(other.IsVaMatchRequest)
                ) && 
                (
                    IsStateMatchRequest == other.IsStateMatchRequest ||
                    IsStateMatchRequest != null &&
                    IsStateMatchRequest.SequenceEqual(other.IsStateMatchRequest)
                ) && 
                (
                    IsFedMatchRequest == other.IsFedMatchRequest ||
                    IsFedMatchRequest != null &&
                    IsFedMatchRequest.SequenceEqual(other.IsFedMatchRequest)
                ) && 
                (
                    Eligibility == other.Eligibility ||
                    Eligibility != null &&
                    Eligibility.SequenceEqual(other.Eligibility)
                ) && 
                (
                    TribalAffiliation == other.TribalAffiliation ||
                    TribalAffiliation != null &&
                    TribalAffiliation.SequenceEqual(other.TribalAffiliation)
                ) && 
                (
                    _Case == other._Case ||
                    _Case != null &&
                    _Case.SequenceEqual(other._Case)
                ) && 
                (
                    IsStudentCurrentEducationEnrollment == other.IsStudentCurrentEducationEnrollment ||
                    IsStudentCurrentEducationEnrollment != null &&
                    IsStudentCurrentEducationEnrollment.SequenceEqual(other.IsStudentCurrentEducationEnrollment)
                ) && 
                (
                    IsStudentCurrentEducationTruancy == other.IsStudentCurrentEducationTruancy ||
                    IsStudentCurrentEducationTruancy != null &&
                    IsStudentCurrentEducationTruancy.SequenceEqual(other.IsStudentCurrentEducationTruancy)
                ) && 
                (
                    StudentCurrentEducationDescription == other.StudentCurrentEducationDescription ||
                    StudentCurrentEducationDescription != null &&
                    StudentCurrentEducationDescription.SequenceEqual(other.StudentCurrentEducationDescription)
                ) && 
                (
                    IsStudentSpecialEducationEligible == other.IsStudentSpecialEducationEligible ||
                    IsStudentSpecialEducationEligible != null &&
                    IsStudentSpecialEducationEligible.SequenceEqual(other.IsStudentSpecialEducationEligible)
                ) && 
                (
                    StudentCurrentEducationEnrollmentEndDate == other.StudentCurrentEducationEnrollmentEndDate ||
                    StudentCurrentEducationEnrollmentEndDate != null &&
                    StudentCurrentEducationEnrollmentEndDate.SequenceEqual(other.StudentCurrentEducationEnrollmentEndDate)
                ) && 
                (
                    StudentIdentification == other.StudentIdentification ||
                    StudentIdentification != null &&
                    StudentIdentification.SequenceEqual(other.StudentIdentification)
                ) && 
                (
                    Education == other.Education ||
                    Education != null &&
                    Education.SequenceEqual(other.Education)
                ) && 
                (
                    HistoricalNarrative == other.HistoricalNarrative ||
                    HistoricalNarrative != null &&
                    HistoricalNarrative.SequenceEqual(other.HistoricalNarrative)
                ) && 
                (
                    IsIcwaEligibility == other.IsIcwaEligibility ||
                    IsIcwaEligibility != null &&
                    IsIcwaEligibility.SequenceEqual(other.IsIcwaEligibility)
                ) && 
                (
                    IsSeriousHabitualOffender == other.IsSeriousHabitualOffender ||
                    IsSeriousHabitualOffender != null &&
                    IsSeriousHabitualOffender.SequenceEqual(other.IsSeriousHabitualOffender)
                ) && 
                (
                    HealthDetails == other.HealthDetails ||
                    HealthDetails != null &&
                    HealthDetails.SequenceEqual(other.HealthDetails)
                ) && 
                (
                    HealthInsurance == other.HealthInsurance ||
                    HealthInsurance != null &&
                    HealthInsurance.SequenceEqual(other.HealthInsurance)
                ) && 
                (
                    IsEnglishInterpreterRequired == other.IsEnglishInterpreterRequired ||
                    IsEnglishInterpreterRequired != null &&
                    IsEnglishInterpreterRequired.SequenceEqual(other.IsEnglishInterpreterRequired)
                ) && 
                (
                    RecentLifeChangesDescription == other.RecentLifeChangesDescription ||
                    RecentLifeChangesDescription != null &&
                    RecentLifeChangesDescription.SequenceEqual(other.RecentLifeChangesDescription)
                ) && 
                (
                    EmployerContactInformation == other.EmployerContactInformation ||
                    EmployerContactInformation != null &&
                    EmployerContactInformation.SequenceEqual(other.EmployerContactInformation)
                ) && 
                (
                    AlienIdentification == other.AlienIdentification ||
                    AlienIdentification != null &&
                    AlienIdentification.SequenceEqual(other.AlienIdentification)
                ) && 
                (
                    CurrentLivingSituationCategoryCode == other.CurrentLivingSituationCategoryCode ||
                    CurrentLivingSituationCategoryCode != null &&
                    CurrentLivingSituationCategoryCode.SequenceEqual(other.CurrentLivingSituationCategoryCode)
                ) && 
                (
                    CurrentLivingSituationCategory == other.CurrentLivingSituationCategory ||
                    CurrentLivingSituationCategory != null &&
                    CurrentLivingSituationCategory.SequenceEqual(other.CurrentLivingSituationCategory)
                ) && 
                (
                    HobbiesInterestsDescription == other.HobbiesInterestsDescription ||
                    HobbiesInterestsDescription != null &&
                    HobbiesInterestsDescription.SequenceEqual(other.HobbiesInterestsDescription)
                ) && 
                (
                    HousingPermanencyCategoryCode == other.HousingPermanencyCategoryCode ||
                    HousingPermanencyCategoryCode != null &&
                    HousingPermanencyCategoryCode.SequenceEqual(other.HousingPermanencyCategoryCode)
                ) && 
                (
                    PerceivedAgeMeasure == other.PerceivedAgeMeasure ||
                    PerceivedAgeMeasure != null &&
                    PerceivedAgeMeasure.SequenceEqual(other.PerceivedAgeMeasure)
                ) && 
                (
                    PersonGenderIdentityCode == other.PersonGenderIdentityCode ||
                    PersonGenderIdentityCode != null &&
                    PersonGenderIdentityCode.SequenceEqual(other.PersonGenderIdentityCode)
                ) && 
                (
                    PersonGenderIdentity == other.PersonGenderIdentity ||
                    PersonGenderIdentity != null &&
                    PersonGenderIdentity.SequenceEqual(other.PersonGenderIdentity)
                ) && 
                (
                    PersonPhysicalCondition == other.PersonPhysicalCondition ||
                    PersonPhysicalCondition != null &&
                    PersonPhysicalCondition.SequenceEqual(other.PersonPhysicalCondition)
                ) && 
                (
                    RecentLivingSituationCategoryCode == other.RecentLivingSituationCategoryCode ||
                    RecentLivingSituationCategoryCode != null &&
                    RecentLivingSituationCategoryCode.SequenceEqual(other.RecentLivingSituationCategoryCode)
                ) && 
                (
                    RecentLivingSituationCategory == other.RecentLivingSituationCategory ||
                    RecentLivingSituationCategory != null &&
                    RecentLivingSituationCategory.SequenceEqual(other.RecentLivingSituationCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationStateName != null)
                    hashCode = hashCode * 59 + LocationStateName.GetHashCode();
                    if (IsPhoneContactSupport != null)
                    hashCode = hashCode * 59 + IsPhoneContactSupport.GetHashCode();
                    if (IsFaxContactSupport != null)
                    hashCode = hashCode * 59 + IsFaxContactSupport.GetHashCode();
                    if (IsEmailContactSupport != null)
                    hashCode = hashCode * 59 + IsEmailContactSupport.GetHashCode();
                    if (SsnVerificationIndicatorCode != null)
                    hashCode = hashCode * 59 + SsnVerificationIndicatorCode.GetHashCode();
                    if (IsFraud != null)
                    hashCode = hashCode * 59 + IsFraud.GetHashCode();
                    if (IsFugitiveFelon != null)
                    hashCode = hashCode * 59 + IsFugitiveFelon.GetHashCode();
                    if (IsProbationAndParoleViolation != null)
                    hashCode = hashCode * 59 + IsProbationAndParoleViolation.GetHashCode();
                    if (IsDrugRelatedFelon != null)
                    hashCode = hashCode * 59 + IsDrugRelatedFelon.GetHashCode();
                    if (IsVaMatchRequest != null)
                    hashCode = hashCode * 59 + IsVaMatchRequest.GetHashCode();
                    if (IsStateMatchRequest != null)
                    hashCode = hashCode * 59 + IsStateMatchRequest.GetHashCode();
                    if (IsFedMatchRequest != null)
                    hashCode = hashCode * 59 + IsFedMatchRequest.GetHashCode();
                    if (Eligibility != null)
                    hashCode = hashCode * 59 + Eligibility.GetHashCode();
                    if (TribalAffiliation != null)
                    hashCode = hashCode * 59 + TribalAffiliation.GetHashCode();
                    if (_Case != null)
                    hashCode = hashCode * 59 + _Case.GetHashCode();
                    if (IsStudentCurrentEducationEnrollment != null)
                    hashCode = hashCode * 59 + IsStudentCurrentEducationEnrollment.GetHashCode();
                    if (IsStudentCurrentEducationTruancy != null)
                    hashCode = hashCode * 59 + IsStudentCurrentEducationTruancy.GetHashCode();
                    if (StudentCurrentEducationDescription != null)
                    hashCode = hashCode * 59 + StudentCurrentEducationDescription.GetHashCode();
                    if (IsStudentSpecialEducationEligible != null)
                    hashCode = hashCode * 59 + IsStudentSpecialEducationEligible.GetHashCode();
                    if (StudentCurrentEducationEnrollmentEndDate != null)
                    hashCode = hashCode * 59 + StudentCurrentEducationEnrollmentEndDate.GetHashCode();
                    if (StudentIdentification != null)
                    hashCode = hashCode * 59 + StudentIdentification.GetHashCode();
                    if (Education != null)
                    hashCode = hashCode * 59 + Education.GetHashCode();
                    if (HistoricalNarrative != null)
                    hashCode = hashCode * 59 + HistoricalNarrative.GetHashCode();
                    if (IsIcwaEligibility != null)
                    hashCode = hashCode * 59 + IsIcwaEligibility.GetHashCode();
                    if (IsSeriousHabitualOffender != null)
                    hashCode = hashCode * 59 + IsSeriousHabitualOffender.GetHashCode();
                    if (HealthDetails != null)
                    hashCode = hashCode * 59 + HealthDetails.GetHashCode();
                    if (HealthInsurance != null)
                    hashCode = hashCode * 59 + HealthInsurance.GetHashCode();
                    if (IsEnglishInterpreterRequired != null)
                    hashCode = hashCode * 59 + IsEnglishInterpreterRequired.GetHashCode();
                    if (RecentLifeChangesDescription != null)
                    hashCode = hashCode * 59 + RecentLifeChangesDescription.GetHashCode();
                    if (EmployerContactInformation != null)
                    hashCode = hashCode * 59 + EmployerContactInformation.GetHashCode();
                    if (AlienIdentification != null)
                    hashCode = hashCode * 59 + AlienIdentification.GetHashCode();
                    if (CurrentLivingSituationCategoryCode != null)
                    hashCode = hashCode * 59 + CurrentLivingSituationCategoryCode.GetHashCode();
                    if (CurrentLivingSituationCategory != null)
                    hashCode = hashCode * 59 + CurrentLivingSituationCategory.GetHashCode();
                    if (HobbiesInterestsDescription != null)
                    hashCode = hashCode * 59 + HobbiesInterestsDescription.GetHashCode();
                    if (HousingPermanencyCategoryCode != null)
                    hashCode = hashCode * 59 + HousingPermanencyCategoryCode.GetHashCode();
                    if (PerceivedAgeMeasure != null)
                    hashCode = hashCode * 59 + PerceivedAgeMeasure.GetHashCode();
                    if (PersonGenderIdentityCode != null)
                    hashCode = hashCode * 59 + PersonGenderIdentityCode.GetHashCode();
                    if (PersonGenderIdentity != null)
                    hashCode = hashCode * 59 + PersonGenderIdentity.GetHashCode();
                    if (PersonPhysicalCondition != null)
                    hashCode = hashCode * 59 + PersonPhysicalCondition.GetHashCode();
                    if (RecentLivingSituationCategoryCode != null)
                    hashCode = hashCode * 59 + RecentLivingSituationCategoryCode.GetHashCode();
                    if (RecentLivingSituationCategory != null)
                    hashCode = hashCode * 59 + RecentLivingSituationCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsPersonAugmentationType left, HsPersonAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsPersonAugmentationType left, HsPersonAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
