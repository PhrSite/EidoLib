/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for criminal characteristics associated with a person or a criminal organization.
    /// </summary>
    [DataContract]
    public partial class JCriminalTraitDetailsType : IEquatable<JCriminalTraitDetailsType>
    { 
        /// <summary>
        /// A characteristic action associated with criminal activity by a person or a criminal organization. NIEM reference is j:CriminalTraitAction
        /// </summary>
        /// <value>A characteristic action associated with criminal activity by a person or a criminal organization. NIEM reference is j:CriminalTraitAction</value>

        [DataMember(Name="criminalTraitAction")]
        public List<NcActivityType> CriminalTraitAction { get; set; }

        /// <summary>
        /// A description of a kind of crime a criminal organization or person usually commits. NIEM reference is j:CriminalTraitActivityDescriptionText
        /// </summary>
        /// <value>A description of a kind of crime a criminal organization or person usually commits. NIEM reference is j:CriminalTraitActivityDescriptionText</value>

        [DataMember(Name="criminalTraitActivityDescription")]
        public List<NcTextType> CriminalTraitActivityDescription { get; set; }

        /// <summary>
        /// A color associated with criminal activity. NIEM reference is j:CriminalTraitColorText
        /// </summary>
        /// <value>A color associated with criminal activity. NIEM reference is j:CriminalTraitColorText</value>

        [DataMember(Name="criminalTraitColor")]
        public List<NcTextType> CriminalTraitColor { get; set; }

        /// <summary>
        /// A description of the types of communication used by a criminal organization or person. NIEM reference is j:CriminalTraitCommunicationDescriptionText
        /// </summary>
        /// <value>A description of the types of communication used by a criminal organization or person. NIEM reference is j:CriminalTraitCommunicationDescriptionText</value>

        [DataMember(Name="criminalTraitCommunicationDescription")]
        public List<NcTextType> CriminalTraitCommunicationDescription { get; set; }

        /// <summary>
        /// A description of criminal characteristics. NIEM reference is j:CriminalTraitDescriptionText
        /// </summary>
        /// <value>A description of criminal characteristics. NIEM reference is j:CriminalTraitDescriptionText</value>

        [DataMember(Name="criminalTraitDescription")]
        public List<NcTextType> CriminalTraitDescription { get; set; }

        /// <summary>
        /// An identifying dress or clothing associated with a criminal organization or person. NIEM reference is j:CriminalTraitDressText
        /// </summary>
        /// <value>An identifying dress or clothing associated with a criminal organization or person. NIEM reference is j:CriminalTraitDressText</value>

        [DataMember(Name="criminalTraitDress")]
        public List<NcTextType> CriminalTraitDress { get; set; }

        /// <summary>
        /// An ethnic or cultural background associated with a criminal organization. NIEM reference is j:CriminalTraitEthnicityCode
        /// </summary>
        /// <value>An ethnic or cultural background associated with a criminal organization. NIEM reference is j:CriminalTraitEthnicityCode</value>

        [DataMember(Name="criminalTraitEthnicityCode")]
        public List<UcrEthnicityCodeType> CriminalTraitEthnicityCode { get; set; }

        /// <summary>
        /// An ethnic or cultural background associated with a criminal organization. NIEM reference is j:CriminalTraitEthnicityText
        /// </summary>
        /// <value>An ethnic or cultural background associated with a criminal organization. NIEM reference is j:CriminalTraitEthnicityText</value>

        [DataMember(Name="criminalTraitEthnicity")]
        public List<NcTextType> CriminalTraitEthnicity { get; set; }

        /// <summary>
        /// A description of criminal artwork associated with a criminal organization or person. NIEM reference is j:CriminalTraitGraffitiDescriptionText
        /// </summary>
        /// <value>A description of criminal artwork associated with a criminal organization or person. NIEM reference is j:CriminalTraitGraffitiDescriptionText</value>

        [DataMember(Name="criminalTraitGraffitiDescription")]
        public List<NcTextType> CriminalTraitGraffitiDescription { get; set; }

        /// <summary>
        /// An image of criminal artwork. NIEM reference is j:CriminalTraitGraffitiImage
        /// </summary>
        /// <value>An image of criminal artwork. NIEM reference is j:CriminalTraitGraffitiImage</value>

        [DataMember(Name="criminalTraitGraffitiImage")]
        public List<NcImageType> CriminalTraitGraffitiImage { get; set; }

        /// <summary>
        /// An identifying hand signal associated with a criminal organization or person. NIEM reference is j:CriminalTraitHandSignalText
        /// </summary>
        /// <value>An identifying hand signal associated with a criminal organization or person. NIEM reference is j:CriminalTraitHandSignalText</value>

        [DataMember(Name="criminalTraitHandSignal")]
        public List<NcTextType> CriminalTraitHandSignal { get; set; }

        /// <summary>
        /// A usual way in which a criminal organization or person acts or operates.  NIEM reference is j:CriminalTraitModusOperandiText
        /// </summary>
        /// <value>A usual way in which a criminal organization or person acts or operates.  NIEM reference is j:CriminalTraitModusOperandiText</value>

        [DataMember(Name="criminalTraitModusOperandi")]
        public List<NcTextType> CriminalTraitModusOperandi { get; set; }

        /// <summary>
        /// A description of the kind of recipient of criminal activity usually chosen by a criminal organization or person. NIEM reference is j:CriminalTraitTargetDescriptionText
        /// </summary>
        /// <value>A description of the kind of recipient of criminal activity usually chosen by a criminal organization or person. NIEM reference is j:CriminalTraitTargetDescriptionText</value>

        [DataMember(Name="criminalTraitTargetDescription")]
        public List<NcTextType> CriminalTraitTargetDescription { get; set; }

        /// <summary>
        /// A description of a tattoo associated with a criminal organization or person. NIEM reference is j:CriminalTraitTattooDescriptionText
        /// </summary>
        /// <value>A description of a tattoo associated with a criminal organization or person. NIEM reference is j:CriminalTraitTattooDescriptionText</value>

        [DataMember(Name="criminalTraitTattooDescription")]
        public List<NcTextType> CriminalTraitTattooDescription { get; set; }

        /// <summary>
        /// An image of a tattoo associated with a criminal organization or person. NIEM reference is j:CriminalTraitTattooImage
        /// </summary>
        /// <value>An image of a tattoo associated with a criminal organization or person. NIEM reference is j:CriminalTraitTattooImage</value>

        [DataMember(Name="criminalTraitTattooImage")]
        public List<NcImageType> CriminalTraitTattooImage { get; set; }

        /// <summary>
        /// A description of a location a criminal organization or person often frequents or considers to have control over. NIEM reference is j:CriminalTraitTurfText
        /// </summary>
        /// <value>A description of a location a criminal organization or person often frequents or considers to have control over. NIEM reference is j:CriminalTraitTurfText</value>

        [DataMember(Name="criminalTraitTurf")]
        public List<NcTextType> CriminalTraitTurf { get; set; }

        /// <summary>
        /// jCriminalTraitDetailsType JSON-LD context
        /// </summary>
        /// <value>jCriminalTraitDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCriminalTraitDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/jCriminalTraitDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCriminalTraitDetailsTypeContext.jsonld")]
            JSONLDContextsjCriminalTraitDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCriminalTraitDetailsType JSON-LD context
        /// </summary>
        /// <value>jCriminalTraitDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCriminalTraitDetailsType {\n");
            sb.Append("  CriminalTraitAction: ").Append(CriminalTraitAction).Append("\n");
            sb.Append("  CriminalTraitActivityDescription: ").Append(CriminalTraitActivityDescription).Append("\n");
            sb.Append("  CriminalTraitColor: ").Append(CriminalTraitColor).Append("\n");
            sb.Append("  CriminalTraitCommunicationDescription: ").Append(CriminalTraitCommunicationDescription).Append("\n");
            sb.Append("  CriminalTraitDescription: ").Append(CriminalTraitDescription).Append("\n");
            sb.Append("  CriminalTraitDress: ").Append(CriminalTraitDress).Append("\n");
            sb.Append("  CriminalTraitEthnicityCode: ").Append(CriminalTraitEthnicityCode).Append("\n");
            sb.Append("  CriminalTraitEthnicity: ").Append(CriminalTraitEthnicity).Append("\n");
            sb.Append("  CriminalTraitGraffitiDescription: ").Append(CriminalTraitGraffitiDescription).Append("\n");
            sb.Append("  CriminalTraitGraffitiImage: ").Append(CriminalTraitGraffitiImage).Append("\n");
            sb.Append("  CriminalTraitHandSignal: ").Append(CriminalTraitHandSignal).Append("\n");
            sb.Append("  CriminalTraitModusOperandi: ").Append(CriminalTraitModusOperandi).Append("\n");
            sb.Append("  CriminalTraitTargetDescription: ").Append(CriminalTraitTargetDescription).Append("\n");
            sb.Append("  CriminalTraitTattooDescription: ").Append(CriminalTraitTattooDescription).Append("\n");
            sb.Append("  CriminalTraitTattooImage: ").Append(CriminalTraitTattooImage).Append("\n");
            sb.Append("  CriminalTraitTurf: ").Append(CriminalTraitTurf).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCriminalTraitDetailsType)obj);
        }

        /// <summary>
        /// Returns true if JCriminalTraitDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCriminalTraitDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCriminalTraitDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CriminalTraitAction == other.CriminalTraitAction ||
                    CriminalTraitAction != null &&
                    CriminalTraitAction.SequenceEqual(other.CriminalTraitAction)
                ) && 
                (
                    CriminalTraitActivityDescription == other.CriminalTraitActivityDescription ||
                    CriminalTraitActivityDescription != null &&
                    CriminalTraitActivityDescription.SequenceEqual(other.CriminalTraitActivityDescription)
                ) && 
                (
                    CriminalTraitColor == other.CriminalTraitColor ||
                    CriminalTraitColor != null &&
                    CriminalTraitColor.SequenceEqual(other.CriminalTraitColor)
                ) && 
                (
                    CriminalTraitCommunicationDescription == other.CriminalTraitCommunicationDescription ||
                    CriminalTraitCommunicationDescription != null &&
                    CriminalTraitCommunicationDescription.SequenceEqual(other.CriminalTraitCommunicationDescription)
                ) && 
                (
                    CriminalTraitDescription == other.CriminalTraitDescription ||
                    CriminalTraitDescription != null &&
                    CriminalTraitDescription.SequenceEqual(other.CriminalTraitDescription)
                ) && 
                (
                    CriminalTraitDress == other.CriminalTraitDress ||
                    CriminalTraitDress != null &&
                    CriminalTraitDress.SequenceEqual(other.CriminalTraitDress)
                ) && 
                (
                    CriminalTraitEthnicityCode == other.CriminalTraitEthnicityCode ||
                    CriminalTraitEthnicityCode != null &&
                    CriminalTraitEthnicityCode.SequenceEqual(other.CriminalTraitEthnicityCode)
                ) && 
                (
                    CriminalTraitEthnicity == other.CriminalTraitEthnicity ||
                    CriminalTraitEthnicity != null &&
                    CriminalTraitEthnicity.SequenceEqual(other.CriminalTraitEthnicity)
                ) && 
                (
                    CriminalTraitGraffitiDescription == other.CriminalTraitGraffitiDescription ||
                    CriminalTraitGraffitiDescription != null &&
                    CriminalTraitGraffitiDescription.SequenceEqual(other.CriminalTraitGraffitiDescription)
                ) && 
                (
                    CriminalTraitGraffitiImage == other.CriminalTraitGraffitiImage ||
                    CriminalTraitGraffitiImage != null &&
                    CriminalTraitGraffitiImage.SequenceEqual(other.CriminalTraitGraffitiImage)
                ) && 
                (
                    CriminalTraitHandSignal == other.CriminalTraitHandSignal ||
                    CriminalTraitHandSignal != null &&
                    CriminalTraitHandSignal.SequenceEqual(other.CriminalTraitHandSignal)
                ) && 
                (
                    CriminalTraitModusOperandi == other.CriminalTraitModusOperandi ||
                    CriminalTraitModusOperandi != null &&
                    CriminalTraitModusOperandi.SequenceEqual(other.CriminalTraitModusOperandi)
                ) && 
                (
                    CriminalTraitTargetDescription == other.CriminalTraitTargetDescription ||
                    CriminalTraitTargetDescription != null &&
                    CriminalTraitTargetDescription.SequenceEqual(other.CriminalTraitTargetDescription)
                ) && 
                (
                    CriminalTraitTattooDescription == other.CriminalTraitTattooDescription ||
                    CriminalTraitTattooDescription != null &&
                    CriminalTraitTattooDescription.SequenceEqual(other.CriminalTraitTattooDescription)
                ) && 
                (
                    CriminalTraitTattooImage == other.CriminalTraitTattooImage ||
                    CriminalTraitTattooImage != null &&
                    CriminalTraitTattooImage.SequenceEqual(other.CriminalTraitTattooImage)
                ) && 
                (
                    CriminalTraitTurf == other.CriminalTraitTurf ||
                    CriminalTraitTurf != null &&
                    CriminalTraitTurf.SequenceEqual(other.CriminalTraitTurf)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CriminalTraitAction != null)
                    hashCode = hashCode * 59 + CriminalTraitAction.GetHashCode();
                    if (CriminalTraitActivityDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitActivityDescription.GetHashCode();
                    if (CriminalTraitColor != null)
                    hashCode = hashCode * 59 + CriminalTraitColor.GetHashCode();
                    if (CriminalTraitCommunicationDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitCommunicationDescription.GetHashCode();
                    if (CriminalTraitDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitDescription.GetHashCode();
                    if (CriminalTraitDress != null)
                    hashCode = hashCode * 59 + CriminalTraitDress.GetHashCode();
                    if (CriminalTraitEthnicityCode != null)
                    hashCode = hashCode * 59 + CriminalTraitEthnicityCode.GetHashCode();
                    if (CriminalTraitEthnicity != null)
                    hashCode = hashCode * 59 + CriminalTraitEthnicity.GetHashCode();
                    if (CriminalTraitGraffitiDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitGraffitiDescription.GetHashCode();
                    if (CriminalTraitGraffitiImage != null)
                    hashCode = hashCode * 59 + CriminalTraitGraffitiImage.GetHashCode();
                    if (CriminalTraitHandSignal != null)
                    hashCode = hashCode * 59 + CriminalTraitHandSignal.GetHashCode();
                    if (CriminalTraitModusOperandi != null)
                    hashCode = hashCode * 59 + CriminalTraitModusOperandi.GetHashCode();
                    if (CriminalTraitTargetDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitTargetDescription.GetHashCode();
                    if (CriminalTraitTattooDescription != null)
                    hashCode = hashCode * 59 + CriminalTraitTattooDescription.GetHashCode();
                    if (CriminalTraitTattooImage != null)
                    hashCode = hashCode * 59 + CriminalTraitTattooImage.GetHashCode();
                    if (CriminalTraitTurf != null)
                    hashCode = hashCode * 59 + CriminalTraitTurf.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCriminalTraitDetailsType left, JCriminalTraitDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCriminalTraitDetailsType left, JCriminalTraitDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
