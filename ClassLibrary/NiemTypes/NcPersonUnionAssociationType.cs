/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an association between two persons who are in a state of union with each other.
    /// </summary>
    [DataContract]
    public partial class NcPersonUnionAssociationType : NcPersonAssociationType, IEquatable<NcPersonUnionAssociationType>
    { 
        /// <summary>
        /// A separation of the parties in a Person Union. NIEM reference is nc:PersonUnionSeparation
        /// </summary>
        /// <value>A separation of the parties in a Person Union. NIEM reference is nc:PersonUnionSeparation</value>

        [DataMember(Name="personUnionSeparation")]
        public List<NcPersonUnionSeparationType> PersonUnionSeparation { get; set; }

        /// <summary>
        /// A legal termination of a Person Union. NIEM reference is nc:PersonDisunion
        /// </summary>
        /// <value>A legal termination of a Person Union. NIEM reference is nc:PersonDisunion</value>

        [DataMember(Name="personDisunion")]
        public List<NcPersonDisunionType> PersonDisunion { get; set; }

        /// <summary>
        /// True if a document certifying the Person Union exists; false otherwise. NIEM reference is nc:PersonUnionCertificateIndicator
        /// </summary>
        /// <value>True if a document certifying the Person Union exists; false otherwise. NIEM reference is nc:PersonUnionCertificateIndicator</value>

        [DataMember(Name="isPersonUnionCertificate")]
        public List<NiemXsboolean> IsPersonUnionCertificate { get; set; }

        /// <summary>
        /// A location where the Person Union occurred. NIEM reference is nc:PersonUnionLocation
        /// </summary>
        /// <value>A location where the Person Union occurred. NIEM reference is nc:PersonUnionLocation</value>

        [DataMember(Name="personUnionLocation")]
        public List<NcLocationType> PersonUnionLocation { get; set; }

        /// <summary>
        /// A kind of union between two people. NIEM reference is nc:PersonUnionCategoryCode
        /// </summary>
        /// <value>A kind of union between two people. NIEM reference is nc:PersonUnionCategoryCode</value>

        [DataMember(Name="personUnionCategoryCode")]
        public List<NcPersonUnionCategoryCodeType> PersonUnionCategoryCode { get; set; }

        /// <summary>
        /// A kind of union between two people. NIEM reference is nc:PersonUnionCategoryText
        /// </summary>
        /// <value>A kind of union between two people. NIEM reference is nc:PersonUnionCategoryText</value>

        [DataMember(Name="personUnionCategory")]
        public List<NcTextType> PersonUnionCategory { get; set; }

        /// <summary>
        /// A status of a union, such as separated or divorced. NIEM reference is j:MaritalStatusCode
        /// </summary>
        /// <value>A status of a union, such as separated or divorced. NIEM reference is j:MaritalStatusCode</value>

        [DataMember(Name="maritalStatusCode")]
        public List<NdexMaritalStatusCodeType> MaritalStatusCode { get; set; }

        /// <summary>
        /// A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusCode
        /// </summary>
        /// <value>A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusCode</value>

        [DataMember(Name="personUnionStatusCode")]
        public List<NcPersonUnionStatusCodeType> PersonUnionStatusCode { get; set; }

        /// <summary>
        /// A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusText
        /// </summary>
        /// <value>A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusText</value>

        [DataMember(Name="personUnionStatus")]
        public List<NcTextType> PersonUnionStatus { get; set; }

        /// <summary>
        /// ncPersonUnionAssociationType JSON-LD context
        /// </summary>
        /// <value>ncPersonUnionAssociationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonUnionAssociationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonUnionAssociationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonUnionAssociationTypeContext.jsonld")]
            JSONLDContextsncPersonUnionAssociationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonUnionAssociationType JSON-LD context
        /// </summary>
        /// <value>ncPersonUnionAssociationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonUnionAssociationType {\n");
            sb.Append("  PersonUnionSeparation: ").Append(PersonUnionSeparation).Append("\n");
            sb.Append("  PersonDisunion: ").Append(PersonDisunion).Append("\n");
            sb.Append("  IsPersonUnionCertificate: ").Append(IsPersonUnionCertificate).Append("\n");
            sb.Append("  PersonUnionLocation: ").Append(PersonUnionLocation).Append("\n");
            sb.Append("  PersonUnionCategoryCode: ").Append(PersonUnionCategoryCode).Append("\n");
            sb.Append("  PersonUnionCategory: ").Append(PersonUnionCategory).Append("\n");
            sb.Append("  MaritalStatusCode: ").Append(MaritalStatusCode).Append("\n");
            sb.Append("  PersonUnionStatusCode: ").Append(PersonUnionStatusCode).Append("\n");
            sb.Append("  PersonUnionStatus: ").Append(PersonUnionStatus).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonUnionAssociationType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonUnionAssociationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonUnionAssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonUnionAssociationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PersonUnionSeparation == other.PersonUnionSeparation ||
                    PersonUnionSeparation != null &&
                    PersonUnionSeparation.SequenceEqual(other.PersonUnionSeparation)
                ) && 
                (
                    PersonDisunion == other.PersonDisunion ||
                    PersonDisunion != null &&
                    PersonDisunion.SequenceEqual(other.PersonDisunion)
                ) && 
                (
                    IsPersonUnionCertificate == other.IsPersonUnionCertificate ||
                    IsPersonUnionCertificate != null &&
                    IsPersonUnionCertificate.SequenceEqual(other.IsPersonUnionCertificate)
                ) && 
                (
                    PersonUnionLocation == other.PersonUnionLocation ||
                    PersonUnionLocation != null &&
                    PersonUnionLocation.SequenceEqual(other.PersonUnionLocation)
                ) && 
                (
                    PersonUnionCategoryCode == other.PersonUnionCategoryCode ||
                    PersonUnionCategoryCode != null &&
                    PersonUnionCategoryCode.SequenceEqual(other.PersonUnionCategoryCode)
                ) && 
                (
                    PersonUnionCategory == other.PersonUnionCategory ||
                    PersonUnionCategory != null &&
                    PersonUnionCategory.SequenceEqual(other.PersonUnionCategory)
                ) && 
                (
                    MaritalStatusCode == other.MaritalStatusCode ||
                    MaritalStatusCode != null &&
                    MaritalStatusCode.SequenceEqual(other.MaritalStatusCode)
                ) && 
                (
                    PersonUnionStatusCode == other.PersonUnionStatusCode ||
                    PersonUnionStatusCode != null &&
                    PersonUnionStatusCode.SequenceEqual(other.PersonUnionStatusCode)
                ) && 
                (
                    PersonUnionStatus == other.PersonUnionStatus ||
                    PersonUnionStatus != null &&
                    PersonUnionStatus.SequenceEqual(other.PersonUnionStatus)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PersonUnionSeparation != null)
                    hashCode = hashCode * 59 + PersonUnionSeparation.GetHashCode();
                    if (PersonDisunion != null)
                    hashCode = hashCode * 59 + PersonDisunion.GetHashCode();
                    if (IsPersonUnionCertificate != null)
                    hashCode = hashCode * 59 + IsPersonUnionCertificate.GetHashCode();
                    if (PersonUnionLocation != null)
                    hashCode = hashCode * 59 + PersonUnionLocation.GetHashCode();
                    if (PersonUnionCategoryCode != null)
                    hashCode = hashCode * 59 + PersonUnionCategoryCode.GetHashCode();
                    if (PersonUnionCategory != null)
                    hashCode = hashCode * 59 + PersonUnionCategory.GetHashCode();
                    if (MaritalStatusCode != null)
                    hashCode = hashCode * 59 + MaritalStatusCode.GetHashCode();
                    if (PersonUnionStatusCode != null)
                    hashCode = hashCode * 59 + PersonUnionStatusCode.GetHashCode();
                    if (PersonUnionStatus != null)
                    hashCode = hashCode * 59 + PersonUnionStatus.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonUnionAssociationType left, NcPersonUnionAssociationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonUnionAssociationType left, NcPersonUnionAssociationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
