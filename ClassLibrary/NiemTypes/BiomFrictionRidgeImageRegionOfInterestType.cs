/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a square or polygon within a friction ridge image containing minutiae
    /// </summary>
    [DataContract]
    public partial class BiomFrictionRidgeImageRegionOfInterestType : IEquatable<BiomFrictionRidgeImageRegionOfInterestType>
    { 
        /// <summary>
        /// A width of a rectangular image segment in 10 micrometer (0.01mm) units NIEM reference is biom:ImageSegmentWidthMeasure
        /// </summary>
        /// <value>A width of a rectangular image segment in 10 micrometer (0.01mm) units NIEM reference is biom:ImageSegmentWidthMeasure</value>

        [DataMember(Name="imageSegmentWidthMeasure")]
        public List<BiomInteger1to50000Type> ImageSegmentWidthMeasure { get; set; }

        /// <summary>
        /// A height of a rectangular image segment in 10 micrometer (0.01mm) units NIEM reference is biom:ImageSegmentHeightMeasure
        /// </summary>
        /// <value>A height of a rectangular image segment in 10 micrometer (0.01mm) units NIEM reference is biom:ImageSegmentHeightMeasure</value>

        [DataMember(Name="imageSegmentHeightMeasure")]
        public List<BiomInteger1to50000Type> ImageSegmentHeightMeasure { get; set; }

        /// <summary>
        /// A distance in 10 micrometer units (0.01mm) from the left edge of an original image to the left edge of a rectangular image segment NIEM reference is biom:ImageSegmentHorizontalOffsetMeasure
        /// </summary>
        /// <value>A distance in 10 micrometer units (0.01mm) from the left edge of an original image to the left edge of a rectangular image segment NIEM reference is biom:ImageSegmentHorizontalOffsetMeasure</value>

        [DataMember(Name="imageSegmentHorizontalOffsetMeasure")]
        public List<BiomInteger0to50000Type> ImageSegmentHorizontalOffsetMeasure { get; set; }

        /// <summary>
        /// A distance in 10 micrometer units (0.01mm) from the top edge of an original image to the top edge of a rectangular image segment NIEM reference is biom:ImageSegmentVerticalOffsetMeasure
        /// </summary>
        /// <value>A distance in 10 micrometer units (0.01mm) from the top edge of an original image to the top edge of a rectangular image segment NIEM reference is biom:ImageSegmentVerticalOffsetMeasure</value>

        [DataMember(Name="imageSegmentVerticalOffsetMeasure")]
        public List<BiomInteger0to50000Type> ImageSegmentVerticalOffsetMeasure { get; set; }

        /// <summary>
        /// A set of vertices within an image describing a polygon-shaped region NIEM reference is biom:ImageSegmentPolygon
        /// </summary>
        /// <value>A set of vertices within an image describing a polygon-shaped region NIEM reference is biom:ImageSegmentPolygon</value>

        [DataMember(Name="imageSegmentPolygon")]
        public List<BiomImageSegmentPolygonType> ImageSegmentPolygon { get; set; }

        /// <summary>
        /// biomFrictionRidgeImageRegionOfInterestType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageRegionOfInterestType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomFrictionRidgeImageRegionOfInterestTypeContextJsonldEnum for ../JSON-LD_Contexts/biomFrictionRidgeImageRegionOfInterestTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomFrictionRidgeImageRegionOfInterestTypeContext.jsonld")]
            JSONLDContextsbiomFrictionRidgeImageRegionOfInterestTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomFrictionRidgeImageRegionOfInterestType JSON-LD context
        /// </summary>
        /// <value>biomFrictionRidgeImageRegionOfInterestType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomFrictionRidgeImageRegionOfInterestType {\n");
            sb.Append("  ImageSegmentWidthMeasure: ").Append(ImageSegmentWidthMeasure).Append("\n");
            sb.Append("  ImageSegmentHeightMeasure: ").Append(ImageSegmentHeightMeasure).Append("\n");
            sb.Append("  ImageSegmentHorizontalOffsetMeasure: ").Append(ImageSegmentHorizontalOffsetMeasure).Append("\n");
            sb.Append("  ImageSegmentVerticalOffsetMeasure: ").Append(ImageSegmentVerticalOffsetMeasure).Append("\n");
            sb.Append("  ImageSegmentPolygon: ").Append(ImageSegmentPolygon).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomFrictionRidgeImageRegionOfInterestType)obj);
        }

        /// <summary>
        /// Returns true if BiomFrictionRidgeImageRegionOfInterestType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomFrictionRidgeImageRegionOfInterestType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomFrictionRidgeImageRegionOfInterestType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageSegmentWidthMeasure == other.ImageSegmentWidthMeasure ||
                    ImageSegmentWidthMeasure != null &&
                    ImageSegmentWidthMeasure.SequenceEqual(other.ImageSegmentWidthMeasure)
                ) && 
                (
                    ImageSegmentHeightMeasure == other.ImageSegmentHeightMeasure ||
                    ImageSegmentHeightMeasure != null &&
                    ImageSegmentHeightMeasure.SequenceEqual(other.ImageSegmentHeightMeasure)
                ) && 
                (
                    ImageSegmentHorizontalOffsetMeasure == other.ImageSegmentHorizontalOffsetMeasure ||
                    ImageSegmentHorizontalOffsetMeasure != null &&
                    ImageSegmentHorizontalOffsetMeasure.SequenceEqual(other.ImageSegmentHorizontalOffsetMeasure)
                ) && 
                (
                    ImageSegmentVerticalOffsetMeasure == other.ImageSegmentVerticalOffsetMeasure ||
                    ImageSegmentVerticalOffsetMeasure != null &&
                    ImageSegmentVerticalOffsetMeasure.SequenceEqual(other.ImageSegmentVerticalOffsetMeasure)
                ) && 
                (
                    ImageSegmentPolygon == other.ImageSegmentPolygon ||
                    ImageSegmentPolygon != null &&
                    ImageSegmentPolygon.SequenceEqual(other.ImageSegmentPolygon)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageSegmentWidthMeasure != null)
                    hashCode = hashCode * 59 + ImageSegmentWidthMeasure.GetHashCode();
                    if (ImageSegmentHeightMeasure != null)
                    hashCode = hashCode * 59 + ImageSegmentHeightMeasure.GetHashCode();
                    if (ImageSegmentHorizontalOffsetMeasure != null)
                    hashCode = hashCode * 59 + ImageSegmentHorizontalOffsetMeasure.GetHashCode();
                    if (ImageSegmentVerticalOffsetMeasure != null)
                    hashCode = hashCode * 59 + ImageSegmentVerticalOffsetMeasure.GetHashCode();
                    if (ImageSegmentPolygon != null)
                    hashCode = hashCode * 59 + ImageSegmentPolygon.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomFrictionRidgeImageRegionOfInterestType left, BiomFrictionRidgeImageRegionOfInterestType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomFrictionRidgeImageRegionOfInterestType left, BiomFrictionRidgeImageRegionOfInterestType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
