/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a method of contacting a person or organization by messages over a radio.
    /// </summary>
    [DataContract]
    public partial class NcContactRadioType : IEquatable<NcContactRadioType>
    { 
        /// <summary>
        /// A kind of wavelength or band of a radio. NIEM reference is nc:ContactRadioCategoryText
        /// </summary>
        /// <value>A kind of wavelength or band of a radio. NIEM reference is nc:ContactRadioCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A radio channel or frequency within the band. NIEM reference is nc:ContactRadioChannelText
        /// </summary>
        /// <value>A radio channel or frequency within the band. NIEM reference is nc:ContactRadioChannelText</value>

        [DataMember(Name="channel")]
        public List<NcTextType> Channel { get; set; }

        /// <summary>
        /// An identifier of a person using a radio. NIEM reference is nc:ContactRadioCallSignID
        /// </summary>
        /// <value>An identifier of a person using a radio. NIEM reference is nc:ContactRadioCallSignID</value>

        [DataMember(Name="callSignId")]
        public List<NiemXsstring> CallSignId { get; set; }

        /// <summary>
        /// ncContactRadioType JSON-LD context
        /// </summary>
        /// <value>ncContactRadioType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncContactRadioTypeContextJsonldEnum for ../JSON-LD_Contexts/ncContactRadioTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncContactRadioTypeContext.jsonld")]
            JSONLDContextsncContactRadioTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncContactRadioType JSON-LD context
        /// </summary>
        /// <value>ncContactRadioType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcContactRadioType {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  CallSignId: ").Append(CallSignId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcContactRadioType)obj);
        }

        /// <summary>
        /// Returns true if NcContactRadioType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcContactRadioType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcContactRadioType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Channel == other.Channel ||
                    Channel != null &&
                    Channel.SequenceEqual(other.Channel)
                ) && 
                (
                    CallSignId == other.CallSignId ||
                    CallSignId != null &&
                    CallSignId.SequenceEqual(other.CallSignId)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Channel != null)
                    hashCode = hashCode * 59 + Channel.GetHashCode();
                    if (CallSignId != null)
                    hashCode = hashCode * 59 + CallSignId.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcContactRadioType left, NcContactRadioType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcContactRadioType left, NcContactRadioType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
