/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a formal allegation that a specific person has committed a specific offense.
    /// </summary>
    [DataContract]
    public partial class JChargeType : IEquatable<JChargeType>
    { 
        /// <summary>
        /// True if a charge is related to a traffic accident; false otherwise. NIEM reference is j:ChargeAccidentRelatedIndicator
        /// </summary>
        /// <value>True if a charge is related to a traffic accident; false otherwise. NIEM reference is j:ChargeAccidentRelatedIndicator</value>

        [DataMember(Name="isAccidentRelated")]
        public List<NiemXsboolean> IsAccidentRelated { get; set; }

        /// <summary>
        /// A degree of involvement a person is being charged with committing in an offense. NIEM reference is j:ChargeApplicabilityText
        /// </summary>
        /// <value>A degree of involvement a person is being charged with committing in an offense. NIEM reference is j:ChargeApplicabilityText</value>

        [DataMember(Name="applicability")]
        public List<NcTextType> Applicability { get; set; }

        /// <summary>
        /// True if a charge is the reason a person was arrested; false otherwise. NIEM reference is j:ChargeArrestReasonIndicator
        /// </summary>
        /// <value>True if a charge is the reason a person was arrested; false otherwise. NIEM reference is j:ChargeArrestReasonIndicator</value>

        [DataMember(Name="isArrestReason")]
        public List<NiemXsboolean> IsArrestReason { get; set; }

        /// <summary>
        /// A description of a crime category. NIEM reference is j:ChargeCategoryDescriptionText
        /// </summary>
        /// <value>A description of a crime category. NIEM reference is j:ChargeCategoryDescriptionText</value>

        [DataMember(Name="categoryDescription")]
        public List<NcTextType> CategoryDescription { get; set; }

        /// <summary>
        /// A number of times a person is charged with committing the same crime. NIEM reference is j:ChargeCountQuantity
        /// </summary>
        /// <value>A number of times a person is charged with committing the same crime. NIEM reference is j:ChargeCountQuantity</value>

        [DataMember(Name="countQuantity")]
        public List<NiemXsnonNegativeInteger> CountQuantity { get; set; }

        /// <summary>
        /// A degree of a charge. NIEM reference is j:ChargeDegreeText
        /// </summary>
        /// <value>A degree of a charge. NIEM reference is j:ChargeDegreeText</value>

        [DataMember(Name="degree")]
        public List<NcTextType> Degree { get; set; }

        /// <summary>
        /// A plain language description of a charge. NIEM reference is j:ChargeDescriptionText
        /// </summary>
        /// <value>A plain language description of a charge. NIEM reference is j:ChargeDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A result or processing of a charge. NIEM reference is j:ChargeDisposition
        /// </summary>
        /// <value>A result or processing of a charge. NIEM reference is j:ChargeDisposition</value>

        [DataMember(Name="disposition")]
        public List<JChargeDispositionType> Disposition { get; set; }

        /// <summary>
        /// True if a charge is related to a person&#x27;s employment; false otherwise. NIEM reference is j:ChargeEmploymentRelatedIndicator
        /// </summary>
        /// <value>True if a charge is related to a person&#x27;s employment; false otherwise. NIEM reference is j:ChargeEmploymentRelatedIndicator</value>

        [DataMember(Name="isEmploymentRelated")]
        public List<NiemXsboolean> IsEmploymentRelated { get; set; }

        /// <summary>
        /// An entity which filed a current charge. NIEM reference is j:ChargeFilerEntity
        /// </summary>
        /// <value>An entity which filed a current charge. NIEM reference is j:ChargeFilerEntity</value>

        [DataMember(Name="filerEntity")]
        public List<NcEntityType> FilerEntity { get; set; }

        /// <summary>
        /// A formal allegation, contained in at least one charging instrument, that a defendant has violated a statute and/or ordinance in association with an incident. NIEM reference is j:ChargeEnhancingAllegationCharge
        /// </summary>
        /// <value>A formal allegation, contained in at least one charging instrument, that a defendant has violated a statute and/or ordinance in association with an incident. NIEM reference is j:ChargeEnhancingAllegationCharge</value>

        [DataMember(Name="enhancingAllegationCharge")]
        public List<JChargeType> EnhancingAllegationCharge { get; set; }

        /// <summary>
        /// A factor or reason that makes a charge more serious. NIEM reference is j:ChargeEnhancingFactor
        /// </summary>
        /// <value>A factor or reason that makes a charge more serious. NIEM reference is j:ChargeEnhancingFactor</value>

        [DataMember(Name="enhancingFactor")]
        public List<JChargeEnhancingFactorType> EnhancingFactor { get; set; }

        /// <summary>
        /// A prior conviction. NIEM reference is j:ChargeEnhancingPriorConviction
        /// </summary>
        /// <value>A prior conviction. NIEM reference is j:ChargeEnhancingPriorConviction</value>

        [DataMember(Name="enhancingPriorConviction")]
        public List<JConvictionType> EnhancingPriorConviction { get; set; }

        /// <summary>
        /// An entity that originally filed a charge or a related predecessor charge if the charge was changed later by prosecution or the court. NIEM reference is j:ChargeOriginatorEntity
        /// </summary>
        /// <value>An entity that originally filed a charge or a related predecessor charge if the charge was changed later by prosecution or the court. NIEM reference is j:ChargeOriginatorEntity</value>

        [DataMember(Name="originatorEntity")]
        public List<NcEntityType> OriginatorEntity { get; set; }

        /// <summary>
        /// True if a charge refers to a felony offense; false otherwise. NIEM reference is j:ChargeFelonyIndicator
        /// </summary>
        /// <value>True if a charge refers to a felony offense; false otherwise. NIEM reference is j:ChargeFelonyIndicator</value>

        [DataMember(Name="isFelony")]
        public List<NiemXsboolean> IsFelony { get; set; }

        /// <summary>
        /// A date a charge was filed. NIEM reference is j:ChargeFilingDate
        /// </summary>
        /// <value>A date a charge was filed. NIEM reference is j:ChargeFilingDate</value>

        [DataMember(Name="filingDate")]
        public List<NcDateType> FilingDate { get; set; }

        /// <summary>
        /// True if a charge is the most serious charge within a group of charges; false otherwise. NIEM reference is j:ChargeHighestIndicator
        /// </summary>
        /// <value>True if a charge is the most serious charge within a group of charges; false otherwise. NIEM reference is j:ChargeHighestIndicator</value>

        [DataMember(Name="isHighest")]
        public List<NiemXsboolean> IsHighest { get; set; }

        /// <summary>
        /// A unique identification number assigned to a particular charge by an arresting agency, prosecuting attorney, or a court for case management purposes. NIEM reference is j:ChargeIdentification
        /// </summary>
        /// <value>A unique identification number assigned to a particular charge by an arresting agency, prosecuting attorney, or a court for case management purposes. NIEM reference is j:ChargeIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// An official document filed to formally accuse a person of committing a specific offense. NIEM reference is j:ChargeInstrument
        /// </summary>
        /// <value>An official document filed to formally accuse a person of committing a specific offense. NIEM reference is j:ChargeInstrument</value>

        [DataMember(Name="instrument")]
        public List<NcDocumentType> Instrument { get; set; }

        /// <summary>
        /// A legal or formal description of a charge. NIEM reference is j:ChargeLegalDescriptionText
        /// </summary>
        /// <value>A legal or formal description of a charge. NIEM reference is j:ChargeLegalDescriptionText</value>

        [DataMember(Name="legalDescription")]
        public List<NcTextType> LegalDescription { get; set; }

        /// <summary>
        /// A charge disposition as reported to the Monthly Arrest and Citation Register. NIEM reference is j:ChargeMACRDispositionText
        /// </summary>
        /// <value>A charge disposition as reported to the Monthly Arrest and Citation Register. NIEM reference is j:ChargeMACRDispositionText</value>

        [DataMember(Name="macrDisposition")]
        public List<NcTextType> MacrDisposition { get; set; }

        /// <summary>
        /// An entity that modified the original charge. NIEM reference is j:ChargeModifierEntity
        /// </summary>
        /// <value>An entity that modified the original charge. NIEM reference is j:ChargeModifierEntity</value>

        [DataMember(Name="modifierEntity")]
        public List<NcEntityType> ModifierEntity { get; set; }

        /// <summary>
        /// An indication of the level or seriousness of the charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRIndicationLevelText
        /// </summary>
        /// <value>An indication of the level or seriousness of the charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRIndicationLevelText</value>

        [DataMember(Name="macrIndicationLevel")]
        public List<NcTextType> MacrIndicationLevel { get; set; }

        /// <summary>
        /// An indication of the level or seriousness of a juvenile charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRJuvenileLevelText
        /// </summary>
        /// <value>An indication of the level or seriousness of a juvenile charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRJuvenileLevelText</value>

        [DataMember(Name="macrJuvenileLevel")]
        public List<NcTextType> MacrJuvenileLevel { get; set; }

        /// <summary>
        /// A status of a charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRStatusText
        /// </summary>
        /// <value>A status of a charge, as reported to the Monthly Arrest and Citation Register NIEM reference is j:ChargeMACRStatusText</value>

        [DataMember(Name="macrStatus")]
        public List<NcTextType> MacrStatus { get; set; }

        /// <summary>
        /// An official document filed to modify a charge against a person. NIEM reference is j:ChargeModificationInstrument
        /// </summary>
        /// <value>An official document filed to modify a charge against a person. NIEM reference is j:ChargeModificationInstrument</value>

        [DataMember(Name="modificationInstrument")]
        public List<NcDocumentType> ModificationInstrument { get; set; }

        /// <summary>
        /// A document associated with a charge. NIEM reference is j:ChargeNarrative
        /// </summary>
        /// <value>A document associated with a charge. NIEM reference is j:ChargeNarrative</value>

        [DataMember(Name="narrative")]
        public List<NcDocumentType> Narrative { get; set; }

        /// <summary>
        /// An answer which a defendant in an action at law makes in response to a charge. NIEM reference is j:ChargePlea
        /// </summary>
        /// <value>An answer which a defendant in an action at law makes in response to a charge. NIEM reference is j:ChargePlea</value>

        [DataMember(Name="plea")]
        public List<JPleaType> Plea { get; set; }

        /// <summary>
        /// An additional piece of information that clarifies a charge. NIEM reference is j:ChargeQualifierText
        /// </summary>
        /// <value>An additional piece of information that clarifies a charge. NIEM reference is j:ChargeQualifierText</value>

        [DataMember(Name="qualifier")]
        public List<NcTextType> Qualifier { get; set; }

        /// <summary>
        /// A bail amount on a schedule recommended according to the charge. NIEM reference is j:ChargeRecommendedBailAmount
        /// </summary>
        /// <value>A bail amount on a schedule recommended according to the charge. NIEM reference is j:ChargeRecommendedBailAmount</value>

        [DataMember(Name="recommendedBailAmount")]
        public List<NcAmountType> RecommendedBailAmount { get; set; }

        /// <summary>
        /// A factor which may make a charge less serious or limit the penalty. NIEM reference is j:ChargeReducingFactorText
        /// </summary>
        /// <value>A factor which may make a charge less serious or limit the penalty. NIEM reference is j:ChargeReducingFactorText</value>

        [DataMember(Name="reducingFactor")]
        public List<NcTextType> ReducingFactor { get; set; }

        /// <summary>
        /// A sanction given to a person convicted of a charge. NIEM reference is j:ChargeSanction
        /// </summary>
        /// <value>A sanction given to a person convicted of a charge. NIEM reference is j:ChargeSanction</value>

        [DataMember(Name="sanction")]
        public List<JSanctionType> Sanction { get; set; }

        /// <summary>
        /// A sentence given to a person convicted of a charge. NIEM reference is j:ChargeSentence
        /// </summary>
        /// <value>A sentence given to a person convicted of a charge. NIEM reference is j:ChargeSentence</value>

        [DataMember(Name="sentence")]
        public List<JSentenceType> Sentence { get; set; }

        /// <summary>
        /// A standard sentence range a person charged with an offense potentially faces if convicted. NIEM reference is j:ChargeSentenceRangeText
        /// </summary>
        /// <value>A standard sentence range a person charged with an offense potentially faces if convicted. NIEM reference is j:ChargeSentenceRangeText</value>

        [DataMember(Name="sentenceRange")]
        public List<NcTextType> SentenceRange { get; set; }

        /// <summary>
        /// A sequentially assigned identifier for charge tracking purposes. NIEM reference is j:ChargeSequenceID
        /// </summary>
        /// <value>A sequentially assigned identifier for charge tracking purposes. NIEM reference is j:ChargeSequenceID</value>

        [DataMember(Name="sequenceId")]
        public List<NiemXsstring> SequenceId { get; set; }

        /// <summary>
        /// True if a charge filed refers to a serious or violent offense; false otherwise. NIEM reference is j:ChargeSeriousViolentIndicator
        /// </summary>
        /// <value>True if a charge filed refers to a serious or violent offense; false otherwise. NIEM reference is j:ChargeSeriousViolentIndicator</value>

        [DataMember(Name="isSeriousViolent")]
        public List<NiemXsboolean> IsSeriousViolent { get; set; }

        /// <summary>
        /// A severity level of a charge. NIEM reference is j:ChargeSeverityLevel
        /// </summary>
        /// <value>A severity level of a charge. NIEM reference is j:ChargeSeverityLevel</value>

        [DataMember(Name="severityLevel")]
        public List<JSeverityLevelType> SeverityLevel { get; set; }

        /// <summary>
        /// A level of severity of a charge. NIEM reference is j:ChargeSeverityText
        /// </summary>
        /// <value>A level of severity of a charge. NIEM reference is j:ChargeSeverityText</value>

        [DataMember(Name="severity")]
        public List<NcTextType> Severity { get; set; }

        /// <summary>
        /// A factor that has enhanced a charge, making it a more serious offense. NIEM reference is j:ChargeSpecialAllegationText
        /// </summary>
        /// <value>A factor that has enhanced a charge, making it a more serious offense. NIEM reference is j:ChargeSpecialAllegationText</value>

        [DataMember(Name="specialAllegation")]
        public List<NcTextType> SpecialAllegation { get; set; }

        /// <summary>
        /// A state of a charge. NIEM reference is j:ChargeStatus
        /// </summary>
        /// <value>A state of a charge. NIEM reference is j:ChargeStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A unique identifier of a law, rule, or ordinance within a jurisdiction that a person is accused of violating. NIEM reference is j:ChargeStatute
        /// </summary>
        /// <value>A unique identifier of a law, rule, or ordinance within a jurisdiction that a person is accused of violating. NIEM reference is j:ChargeStatute</value>

        [DataMember(Name="statute")]
        public List<JStatuteType> Statute { get; set; }

        /// <summary>
        /// A person accused of committing a specific offense. NIEM reference is j:ChargeSubject
        /// </summary>
        /// <value>A person accused of committing a specific offense. NIEM reference is j:ChargeSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// A text of a charge. NIEM reference is j:ChargeText
        /// </summary>
        /// <value>A text of a charge. NIEM reference is j:ChargeText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A unique identification number assigned to an entire set of charges for an arrest. Different numbers may appear in the set if cases have been consolidated. NIEM reference is j:ChargeTrackingIdentification
        /// </summary>
        /// <value>A unique identification number assigned to an entire set of charges for an arrest. Different numbers may appear in the set if cases have been consolidated. NIEM reference is j:ChargeTrackingIdentification</value>

        [DataMember(Name="trackingIdentification")]
        public List<NcIdentificationType> TrackingIdentification { get; set; }

        /// <summary>
        /// A Uniform Crime Report (UCR) kind or classification of a crime associated with a charge. NIEM reference is j:ChargeUCRCrimeCategoryText
        /// </summary>
        /// <value>A Uniform Crime Report (UCR) kind or classification of a crime associated with a charge. NIEM reference is j:ChargeUCRCrimeCategoryText</value>

        [DataMember(Name="ucrCrimeCategory")]
        public List<NcTextType> UcrCrimeCategory { get; set; }

        /// <summary>
        /// A set of details describing if a person was found guilty or innocent of a charge. NIEM reference is j:ChargeVerdict
        /// </summary>
        /// <value>A set of details describing if a person was found guilty or innocent of a charge. NIEM reference is j:ChargeVerdict</value>

        [DataMember(Name="verdict")]
        public List<JVerdictType> Verdict { get; set; }

        /// <summary>
        /// A person or entity who is the victim of an offense designated by the charge. NIEM reference is j:ChargeVictim
        /// </summary>
        /// <value>A person or entity who is the victim of an offense designated by the charge. NIEM reference is j:ChargeVictim</value>

        [DataMember(Name="victim")]
        public List<JVictimType> Victim { get; set; }

        /// <summary>
        /// A literal description of an offense within the National Crime Information Center (NCIC) system. NIEM reference is j:ChargeNCICText
        /// </summary>
        /// <value>A literal description of an offense within the National Crime Information Center (NCIC) system. NIEM reference is j:ChargeNCICText</value>

        [DataMember(Name="ncic")]
        public List<NcTextType> Ncic { get; set; }

        /// <summary>
        /// A description of the level of the offense such as Grade A Misdemeanor, Gross Misdemeanor, Aggravated Misdemeanor.  States may transmit numeric grade levels (1, 2, 3) or define degrees alphanumerically (A, B, C.) NIEM reference is j:ChargeSeverityDescriptionText
        /// </summary>
        /// <value>A description of the level of the offense such as Grade A Misdemeanor, Gross Misdemeanor, Aggravated Misdemeanor.  States may transmit numeric grade levels (1, 2, 3) or define degrees alphanumerically (A, B, C.) NIEM reference is j:ChargeSeverityDescriptionText</value>

        [DataMember(Name="severityDescription")]
        public List<NcTextType> SeverityDescription { get; set; }

        /// <summary>
        /// A kind of charge. NIEM reference is j:ChargeCategoryCode
        /// </summary>
        /// <value>A kind of charge. NIEM reference is j:ChargeCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NdexChargeCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// An offense within the National Crime Information Center (NCIC) system. NIEM reference is j:ChargeNCICCode
        /// </summary>
        /// <value>An offense within the National Crime Information Center (NCIC) system. NIEM reference is j:ChargeNCICCode</value>

        [DataMember(Name="ncicCode")]
        public List<NcicOFFCodeType> NcicCode { get; set; }

        /// <summary>
        /// An offense within the Uniform Crime Report (UCR) system. NIEM reference is j:ChargeUCRCode
        /// </summary>
        /// <value>An offense within the Uniform Crime Report (UCR) system. NIEM reference is j:ChargeUCRCode</value>

        [DataMember(Name="ucrCode")]
        public List<UcrOffenseCodeType> UcrCode { get; set; }

        /// <summary>
        /// Additional information about a charge. NIEM reference is hs:ChargeAugmentation
        /// </summary>
        /// <value>Additional information about a charge. NIEM reference is hs:ChargeAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsChargeAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about a charge. NIEM reference is scr:ChargeAugmentation
        /// </summary>
        /// <value>Additional information about a charge. NIEM reference is scr:ChargeAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrChargeAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// jChargeType JSON-LD context
        /// </summary>
        /// <value>jChargeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjChargeTypeContextJsonldEnum for ../JSON-LD_Contexts/jChargeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jChargeTypeContext.jsonld")]
            JSONLDContextsjChargeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jChargeType JSON-LD context
        /// </summary>
        /// <value>jChargeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JChargeType {\n");
            sb.Append("  IsAccidentRelated: ").Append(IsAccidentRelated).Append("\n");
            sb.Append("  Applicability: ").Append(Applicability).Append("\n");
            sb.Append("  IsArrestReason: ").Append(IsArrestReason).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  CountQuantity: ").Append(CountQuantity).Append("\n");
            sb.Append("  Degree: ").Append(Degree).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  IsEmploymentRelated: ").Append(IsEmploymentRelated).Append("\n");
            sb.Append("  FilerEntity: ").Append(FilerEntity).Append("\n");
            sb.Append("  EnhancingAllegationCharge: ").Append(EnhancingAllegationCharge).Append("\n");
            sb.Append("  EnhancingFactor: ").Append(EnhancingFactor).Append("\n");
            sb.Append("  EnhancingPriorConviction: ").Append(EnhancingPriorConviction).Append("\n");
            sb.Append("  OriginatorEntity: ").Append(OriginatorEntity).Append("\n");
            sb.Append("  IsFelony: ").Append(IsFelony).Append("\n");
            sb.Append("  FilingDate: ").Append(FilingDate).Append("\n");
            sb.Append("  IsHighest: ").Append(IsHighest).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  LegalDescription: ").Append(LegalDescription).Append("\n");
            sb.Append("  MacrDisposition: ").Append(MacrDisposition).Append("\n");
            sb.Append("  ModifierEntity: ").Append(ModifierEntity).Append("\n");
            sb.Append("  MacrIndicationLevel: ").Append(MacrIndicationLevel).Append("\n");
            sb.Append("  MacrJuvenileLevel: ").Append(MacrJuvenileLevel).Append("\n");
            sb.Append("  MacrStatus: ").Append(MacrStatus).Append("\n");
            sb.Append("  ModificationInstrument: ").Append(ModificationInstrument).Append("\n");
            sb.Append("  Narrative: ").Append(Narrative).Append("\n");
            sb.Append("  Plea: ").Append(Plea).Append("\n");
            sb.Append("  Qualifier: ").Append(Qualifier).Append("\n");
            sb.Append("  RecommendedBailAmount: ").Append(RecommendedBailAmount).Append("\n");
            sb.Append("  ReducingFactor: ").Append(ReducingFactor).Append("\n");
            sb.Append("  Sanction: ").Append(Sanction).Append("\n");
            sb.Append("  Sentence: ").Append(Sentence).Append("\n");
            sb.Append("  SentenceRange: ").Append(SentenceRange).Append("\n");
            sb.Append("  SequenceId: ").Append(SequenceId).Append("\n");
            sb.Append("  IsSeriousViolent: ").Append(IsSeriousViolent).Append("\n");
            sb.Append("  SeverityLevel: ").Append(SeverityLevel).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  SpecialAllegation: ").Append(SpecialAllegation).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Statute: ").Append(Statute).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TrackingIdentification: ").Append(TrackingIdentification).Append("\n");
            sb.Append("  UcrCrimeCategory: ").Append(UcrCrimeCategory).Append("\n");
            sb.Append("  Verdict: ").Append(Verdict).Append("\n");
            sb.Append("  Victim: ").Append(Victim).Append("\n");
            sb.Append("  Ncic: ").Append(Ncic).Append("\n");
            sb.Append("  SeverityDescription: ").Append(SeverityDescription).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  NcicCode: ").Append(NcicCode).Append("\n");
            sb.Append("  UcrCode: ").Append(UcrCode).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JChargeType)obj);
        }

        /// <summary>
        /// Returns true if JChargeType instances are equal
        /// </summary>
        /// <param name="other">Instance of JChargeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JChargeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsAccidentRelated == other.IsAccidentRelated ||
                    IsAccidentRelated != null &&
                    IsAccidentRelated.SequenceEqual(other.IsAccidentRelated)
                ) && 
                (
                    Applicability == other.Applicability ||
                    Applicability != null &&
                    Applicability.SequenceEqual(other.Applicability)
                ) && 
                (
                    IsArrestReason == other.IsArrestReason ||
                    IsArrestReason != null &&
                    IsArrestReason.SequenceEqual(other.IsArrestReason)
                ) && 
                (
                    CategoryDescription == other.CategoryDescription ||
                    CategoryDescription != null &&
                    CategoryDescription.SequenceEqual(other.CategoryDescription)
                ) && 
                (
                    CountQuantity == other.CountQuantity ||
                    CountQuantity != null &&
                    CountQuantity.SequenceEqual(other.CountQuantity)
                ) && 
                (
                    Degree == other.Degree ||
                    Degree != null &&
                    Degree.SequenceEqual(other.Degree)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Disposition == other.Disposition ||
                    Disposition != null &&
                    Disposition.SequenceEqual(other.Disposition)
                ) && 
                (
                    IsEmploymentRelated == other.IsEmploymentRelated ||
                    IsEmploymentRelated != null &&
                    IsEmploymentRelated.SequenceEqual(other.IsEmploymentRelated)
                ) && 
                (
                    FilerEntity == other.FilerEntity ||
                    FilerEntity != null &&
                    FilerEntity.SequenceEqual(other.FilerEntity)
                ) && 
                (
                    EnhancingAllegationCharge == other.EnhancingAllegationCharge ||
                    EnhancingAllegationCharge != null &&
                    EnhancingAllegationCharge.SequenceEqual(other.EnhancingAllegationCharge)
                ) && 
                (
                    EnhancingFactor == other.EnhancingFactor ||
                    EnhancingFactor != null &&
                    EnhancingFactor.SequenceEqual(other.EnhancingFactor)
                ) && 
                (
                    EnhancingPriorConviction == other.EnhancingPriorConviction ||
                    EnhancingPriorConviction != null &&
                    EnhancingPriorConviction.SequenceEqual(other.EnhancingPriorConviction)
                ) && 
                (
                    OriginatorEntity == other.OriginatorEntity ||
                    OriginatorEntity != null &&
                    OriginatorEntity.SequenceEqual(other.OriginatorEntity)
                ) && 
                (
                    IsFelony == other.IsFelony ||
                    IsFelony != null &&
                    IsFelony.SequenceEqual(other.IsFelony)
                ) && 
                (
                    FilingDate == other.FilingDate ||
                    FilingDate != null &&
                    FilingDate.SequenceEqual(other.FilingDate)
                ) && 
                (
                    IsHighest == other.IsHighest ||
                    IsHighest != null &&
                    IsHighest.SequenceEqual(other.IsHighest)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Instrument == other.Instrument ||
                    Instrument != null &&
                    Instrument.SequenceEqual(other.Instrument)
                ) && 
                (
                    LegalDescription == other.LegalDescription ||
                    LegalDescription != null &&
                    LegalDescription.SequenceEqual(other.LegalDescription)
                ) && 
                (
                    MacrDisposition == other.MacrDisposition ||
                    MacrDisposition != null &&
                    MacrDisposition.SequenceEqual(other.MacrDisposition)
                ) && 
                (
                    ModifierEntity == other.ModifierEntity ||
                    ModifierEntity != null &&
                    ModifierEntity.SequenceEqual(other.ModifierEntity)
                ) && 
                (
                    MacrIndicationLevel == other.MacrIndicationLevel ||
                    MacrIndicationLevel != null &&
                    MacrIndicationLevel.SequenceEqual(other.MacrIndicationLevel)
                ) && 
                (
                    MacrJuvenileLevel == other.MacrJuvenileLevel ||
                    MacrJuvenileLevel != null &&
                    MacrJuvenileLevel.SequenceEqual(other.MacrJuvenileLevel)
                ) && 
                (
                    MacrStatus == other.MacrStatus ||
                    MacrStatus != null &&
                    MacrStatus.SequenceEqual(other.MacrStatus)
                ) && 
                (
                    ModificationInstrument == other.ModificationInstrument ||
                    ModificationInstrument != null &&
                    ModificationInstrument.SequenceEqual(other.ModificationInstrument)
                ) && 
                (
                    Narrative == other.Narrative ||
                    Narrative != null &&
                    Narrative.SequenceEqual(other.Narrative)
                ) && 
                (
                    Plea == other.Plea ||
                    Plea != null &&
                    Plea.SequenceEqual(other.Plea)
                ) && 
                (
                    Qualifier == other.Qualifier ||
                    Qualifier != null &&
                    Qualifier.SequenceEqual(other.Qualifier)
                ) && 
                (
                    RecommendedBailAmount == other.RecommendedBailAmount ||
                    RecommendedBailAmount != null &&
                    RecommendedBailAmount.SequenceEqual(other.RecommendedBailAmount)
                ) && 
                (
                    ReducingFactor == other.ReducingFactor ||
                    ReducingFactor != null &&
                    ReducingFactor.SequenceEqual(other.ReducingFactor)
                ) && 
                (
                    Sanction == other.Sanction ||
                    Sanction != null &&
                    Sanction.SequenceEqual(other.Sanction)
                ) && 
                (
                    Sentence == other.Sentence ||
                    Sentence != null &&
                    Sentence.SequenceEqual(other.Sentence)
                ) && 
                (
                    SentenceRange == other.SentenceRange ||
                    SentenceRange != null &&
                    SentenceRange.SequenceEqual(other.SentenceRange)
                ) && 
                (
                    SequenceId == other.SequenceId ||
                    SequenceId != null &&
                    SequenceId.SequenceEqual(other.SequenceId)
                ) && 
                (
                    IsSeriousViolent == other.IsSeriousViolent ||
                    IsSeriousViolent != null &&
                    IsSeriousViolent.SequenceEqual(other.IsSeriousViolent)
                ) && 
                (
                    SeverityLevel == other.SeverityLevel ||
                    SeverityLevel != null &&
                    SeverityLevel.SequenceEqual(other.SeverityLevel)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.SequenceEqual(other.Severity)
                ) && 
                (
                    SpecialAllegation == other.SpecialAllegation ||
                    SpecialAllegation != null &&
                    SpecialAllegation.SequenceEqual(other.SpecialAllegation)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Statute == other.Statute ||
                    Statute != null &&
                    Statute.SequenceEqual(other.Statute)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    TrackingIdentification == other.TrackingIdentification ||
                    TrackingIdentification != null &&
                    TrackingIdentification.SequenceEqual(other.TrackingIdentification)
                ) && 
                (
                    UcrCrimeCategory == other.UcrCrimeCategory ||
                    UcrCrimeCategory != null &&
                    UcrCrimeCategory.SequenceEqual(other.UcrCrimeCategory)
                ) && 
                (
                    Verdict == other.Verdict ||
                    Verdict != null &&
                    Verdict.SequenceEqual(other.Verdict)
                ) && 
                (
                    Victim == other.Victim ||
                    Victim != null &&
                    Victim.SequenceEqual(other.Victim)
                ) && 
                (
                    Ncic == other.Ncic ||
                    Ncic != null &&
                    Ncic.SequenceEqual(other.Ncic)
                ) && 
                (
                    SeverityDescription == other.SeverityDescription ||
                    SeverityDescription != null &&
                    SeverityDescription.SequenceEqual(other.SeverityDescription)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    NcicCode == other.NcicCode ||
                    NcicCode != null &&
                    NcicCode.SequenceEqual(other.NcicCode)
                ) && 
                (
                    UcrCode == other.UcrCode ||
                    UcrCode != null &&
                    UcrCode.SequenceEqual(other.UcrCode)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsAccidentRelated != null)
                    hashCode = hashCode * 59 + IsAccidentRelated.GetHashCode();
                    if (Applicability != null)
                    hashCode = hashCode * 59 + Applicability.GetHashCode();
                    if (IsArrestReason != null)
                    hashCode = hashCode * 59 + IsArrestReason.GetHashCode();
                    if (CategoryDescription != null)
                    hashCode = hashCode * 59 + CategoryDescription.GetHashCode();
                    if (CountQuantity != null)
                    hashCode = hashCode * 59 + CountQuantity.GetHashCode();
                    if (Degree != null)
                    hashCode = hashCode * 59 + Degree.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Disposition != null)
                    hashCode = hashCode * 59 + Disposition.GetHashCode();
                    if (IsEmploymentRelated != null)
                    hashCode = hashCode * 59 + IsEmploymentRelated.GetHashCode();
                    if (FilerEntity != null)
                    hashCode = hashCode * 59 + FilerEntity.GetHashCode();
                    if (EnhancingAllegationCharge != null)
                    hashCode = hashCode * 59 + EnhancingAllegationCharge.GetHashCode();
                    if (EnhancingFactor != null)
                    hashCode = hashCode * 59 + EnhancingFactor.GetHashCode();
                    if (EnhancingPriorConviction != null)
                    hashCode = hashCode * 59 + EnhancingPriorConviction.GetHashCode();
                    if (OriginatorEntity != null)
                    hashCode = hashCode * 59 + OriginatorEntity.GetHashCode();
                    if (IsFelony != null)
                    hashCode = hashCode * 59 + IsFelony.GetHashCode();
                    if (FilingDate != null)
                    hashCode = hashCode * 59 + FilingDate.GetHashCode();
                    if (IsHighest != null)
                    hashCode = hashCode * 59 + IsHighest.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Instrument != null)
                    hashCode = hashCode * 59 + Instrument.GetHashCode();
                    if (LegalDescription != null)
                    hashCode = hashCode * 59 + LegalDescription.GetHashCode();
                    if (MacrDisposition != null)
                    hashCode = hashCode * 59 + MacrDisposition.GetHashCode();
                    if (ModifierEntity != null)
                    hashCode = hashCode * 59 + ModifierEntity.GetHashCode();
                    if (MacrIndicationLevel != null)
                    hashCode = hashCode * 59 + MacrIndicationLevel.GetHashCode();
                    if (MacrJuvenileLevel != null)
                    hashCode = hashCode * 59 + MacrJuvenileLevel.GetHashCode();
                    if (MacrStatus != null)
                    hashCode = hashCode * 59 + MacrStatus.GetHashCode();
                    if (ModificationInstrument != null)
                    hashCode = hashCode * 59 + ModificationInstrument.GetHashCode();
                    if (Narrative != null)
                    hashCode = hashCode * 59 + Narrative.GetHashCode();
                    if (Plea != null)
                    hashCode = hashCode * 59 + Plea.GetHashCode();
                    if (Qualifier != null)
                    hashCode = hashCode * 59 + Qualifier.GetHashCode();
                    if (RecommendedBailAmount != null)
                    hashCode = hashCode * 59 + RecommendedBailAmount.GetHashCode();
                    if (ReducingFactor != null)
                    hashCode = hashCode * 59 + ReducingFactor.GetHashCode();
                    if (Sanction != null)
                    hashCode = hashCode * 59 + Sanction.GetHashCode();
                    if (Sentence != null)
                    hashCode = hashCode * 59 + Sentence.GetHashCode();
                    if (SentenceRange != null)
                    hashCode = hashCode * 59 + SentenceRange.GetHashCode();
                    if (SequenceId != null)
                    hashCode = hashCode * 59 + SequenceId.GetHashCode();
                    if (IsSeriousViolent != null)
                    hashCode = hashCode * 59 + IsSeriousViolent.GetHashCode();
                    if (SeverityLevel != null)
                    hashCode = hashCode * 59 + SeverityLevel.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (SpecialAllegation != null)
                    hashCode = hashCode * 59 + SpecialAllegation.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Statute != null)
                    hashCode = hashCode * 59 + Statute.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (TrackingIdentification != null)
                    hashCode = hashCode * 59 + TrackingIdentification.GetHashCode();
                    if (UcrCrimeCategory != null)
                    hashCode = hashCode * 59 + UcrCrimeCategory.GetHashCode();
                    if (Verdict != null)
                    hashCode = hashCode * 59 + Verdict.GetHashCode();
                    if (Victim != null)
                    hashCode = hashCode * 59 + Victim.GetHashCode();
                    if (Ncic != null)
                    hashCode = hashCode * 59 + Ncic.GetHashCode();
                    if (SeverityDescription != null)
                    hashCode = hashCode * 59 + SeverityDescription.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (NcicCode != null)
                    hashCode = hashCode * 59 + NcicCode.GetHashCode();
                    if (UcrCode != null)
                    hashCode = hashCode * 59 + UcrCode.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JChargeType left, JChargeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JChargeType left, JChargeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
