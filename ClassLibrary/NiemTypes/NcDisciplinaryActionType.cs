/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an activity assigned to a person for the purpose of self-improvement, punishment, or restitution.
    /// </summary>
    [DataContract]
    public partial class NcDisciplinaryActionType : NcActivityType, IEquatable<NcDisciplinaryActionType>
    { 
        /// <summary>
        /// A person to whom a disciplinary action is assigned. NIEM reference is nc:DisciplinaryActionPerson
        /// </summary>
        /// <value>A person to whom a disciplinary action is assigned. NIEM reference is nc:DisciplinaryActionPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// An entity which assigns a disciplinary action to a person. NIEM reference is nc:DisciplinaryActionAssigner
        /// </summary>
        /// <value>An entity which assigns a disciplinary action to a person. NIEM reference is nc:DisciplinaryActionAssigner</value>

        [DataMember(Name="assigner")]
        public List<NcEntityType> Assigner { get; set; }

        /// <summary>
        /// A recommendation or requirement for a person to perform community service as a disciplinary action. NIEM reference is nc:DisciplinaryActionCommunityService
        /// </summary>
        /// <value>A recommendation or requirement for a person to perform community service as a disciplinary action. NIEM reference is nc:DisciplinaryActionCommunityService</value>

        [DataMember(Name="communityService")]
        public List<NcActivityType> CommunityService { get; set; }

        /// <summary>
        /// An entity responsible for ensuring a person performs the assigned disciplinary action. NIEM reference is nc:DisciplinaryActionEnforcer
        /// </summary>
        /// <value>An entity responsible for ensuring a person performs the assigned disciplinary action. NIEM reference is nc:DisciplinaryActionEnforcer</value>

        [DataMember(Name="enforcer")]
        public List<NcEntityType> Enforcer { get; set; }

        /// <summary>
        /// A recommendation or requirement for a person to attend counseling as a disciplinary action. NIEM reference is nc:DisciplinaryActionCounseling
        /// </summary>
        /// <value>A recommendation or requirement for a person to attend counseling as a disciplinary action. NIEM reference is nc:DisciplinaryActionCounseling</value>

        [DataMember(Name="counseling")]
        public List<NcActivityType> Counseling { get; set; }

        /// <summary>
        /// A monetary fine assigned to a person as a disciplinary action. NIEM reference is nc:DisciplinaryActionFee
        /// </summary>
        /// <value>A monetary fine assigned to a person as a disciplinary action. NIEM reference is nc:DisciplinaryActionFee</value>

        [DataMember(Name="fee")]
        public List<NcObligationType> Fee { get; set; }

        /// <summary>
        /// A recommendation or requirement for a person to attend a program as a disciplinary action. NIEM reference is nc:DisciplinaryActionProgram
        /// </summary>
        /// <value>A recommendation or requirement for a person to attend a program as a disciplinary action. NIEM reference is nc:DisciplinaryActionProgram</value>

        [DataMember(Name="program")]
        public List<NcProgramType> Program { get; set; }

        /// <summary>
        /// A requirement for a person to financially or otherwise compensate another person as  a disciplinary action. NIEM reference is nc:DisciplinaryActionRestitution
        /// </summary>
        /// <value>A requirement for a person to financially or otherwise compensate another person as  a disciplinary action. NIEM reference is nc:DisciplinaryActionRestitution</value>

        [DataMember(Name="restitution")]
        public List<NcObligationType> Restitution { get; set; }

        /// <summary>
        /// Additional information about a disciplinary action. NIEM reference is j:DisciplinaryActionAugmentation
        /// </summary>
        /// <value>Additional information about a disciplinary action. NIEM reference is j:DisciplinaryActionAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JDisciplinaryActionAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncDisciplinaryActionType JSON-LD context
        /// </summary>
        /// <value>ncDisciplinaryActionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncDisciplinaryActionTypeContextJsonldEnum for ../JSON-LD_Contexts/ncDisciplinaryActionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncDisciplinaryActionTypeContext.jsonld")]
            JSONLDContextsncDisciplinaryActionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncDisciplinaryActionType JSON-LD context
        /// </summary>
        /// <value>ncDisciplinaryActionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcDisciplinaryActionType {\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Assigner: ").Append(Assigner).Append("\n");
            sb.Append("  CommunityService: ").Append(CommunityService).Append("\n");
            sb.Append("  Enforcer: ").Append(Enforcer).Append("\n");
            sb.Append("  Counseling: ").Append(Counseling).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Program: ").Append(Program).Append("\n");
            sb.Append("  Restitution: ").Append(Restitution).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcDisciplinaryActionType)obj);
        }

        /// <summary>
        /// Returns true if NcDisciplinaryActionType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcDisciplinaryActionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcDisciplinaryActionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Assigner == other.Assigner ||
                    Assigner != null &&
                    Assigner.SequenceEqual(other.Assigner)
                ) && 
                (
                    CommunityService == other.CommunityService ||
                    CommunityService != null &&
                    CommunityService.SequenceEqual(other.CommunityService)
                ) && 
                (
                    Enforcer == other.Enforcer ||
                    Enforcer != null &&
                    Enforcer.SequenceEqual(other.Enforcer)
                ) && 
                (
                    Counseling == other.Counseling ||
                    Counseling != null &&
                    Counseling.SequenceEqual(other.Counseling)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.SequenceEqual(other.Fee)
                ) && 
                (
                    Program == other.Program ||
                    Program != null &&
                    Program.SequenceEqual(other.Program)
                ) && 
                (
                    Restitution == other.Restitution ||
                    Restitution != null &&
                    Restitution.SequenceEqual(other.Restitution)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Assigner != null)
                    hashCode = hashCode * 59 + Assigner.GetHashCode();
                    if (CommunityService != null)
                    hashCode = hashCode * 59 + CommunityService.GetHashCode();
                    if (Enforcer != null)
                    hashCode = hashCode * 59 + Enforcer.GetHashCode();
                    if (Counseling != null)
                    hashCode = hashCode * 59 + Counseling.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (Program != null)
                    hashCode = hashCode * 59 + Program.GetHashCode();
                    if (Restitution != null)
                    hashCode = hashCode * 59 + Restitution.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcDisciplinaryActionType left, NcDisciplinaryActionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcDisciplinaryActionType left, NcDisciplinaryActionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
