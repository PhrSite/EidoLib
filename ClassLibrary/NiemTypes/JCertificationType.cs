/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an official process of distinguishing the credentials of person or entity.
    /// </summary>
    [DataContract]
    public partial class JCertificationType : NcActivityType, IEquatable<JCertificationType>
    { 
        /// <summary>
        /// A date on which the certification review took place. NIEM reference is j:CertificationReviewDate
        /// </summary>
        /// <value>A date on which the certification review took place. NIEM reference is j:CertificationReviewDate</value>

        [DataMember(Name="reviewDate")]
        public List<NcDateType> ReviewDate { get; set; }

        /// <summary>
        /// A name of the certifying authority. NIEM reference is j:CertificationName
        /// </summary>
        /// <value>A name of the certifying authority. NIEM reference is j:CertificationName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// A name of a certifying authority who issued the certification. NIEM reference is j:CertificationIssuingAuthority
        /// </summary>
        /// <value>A name of a certifying authority who issued the certification. NIEM reference is j:CertificationIssuingAuthority</value>

        [DataMember(Name="issuingAuthority")]
        public List<NcEntityType> IssuingAuthority { get; set; }

        /// <summary>
        /// An identification for a person or entity certification. NIEM reference is j:CertificationIdentification
        /// </summary>
        /// <value>An identification for a person or entity certification. NIEM reference is j:CertificationIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A reason for certification expiration, if/when the certification has expired. NIEM reference is j:CertificationExpirationReasonText
        /// </summary>
        /// <value>A reason for certification expiration, if/when the certification has expired. NIEM reference is j:CertificationExpirationReasonText</value>

        [DataMember(Name="expirationReason")]
        public List<NcTextType> ExpirationReason { get; set; }

        /// <summary>
        /// A date the certification expires. NIEM reference is j:CertificationExpirationDate
        /// </summary>
        /// <value>A date the certification expires. NIEM reference is j:CertificationExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// jCertificationType JSON-LD context
        /// </summary>
        /// <value>jCertificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCertificationTypeContextJsonldEnum for ../JSON-LD_Contexts/jCertificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCertificationTypeContext.jsonld")]
            JSONLDContextsjCertificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCertificationType JSON-LD context
        /// </summary>
        /// <value>jCertificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCertificationType {\n");
            sb.Append("  ReviewDate: ").Append(ReviewDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IssuingAuthority: ").Append(IssuingAuthority).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  ExpirationReason: ").Append(ExpirationReason).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCertificationType)obj);
        }

        /// <summary>
        /// Returns true if JCertificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCertificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCertificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReviewDate == other.ReviewDate ||
                    ReviewDate != null &&
                    ReviewDate.SequenceEqual(other.ReviewDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    IssuingAuthority == other.IssuingAuthority ||
                    IssuingAuthority != null &&
                    IssuingAuthority.SequenceEqual(other.IssuingAuthority)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    ExpirationReason == other.ExpirationReason ||
                    ExpirationReason != null &&
                    ExpirationReason.SequenceEqual(other.ExpirationReason)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReviewDate != null)
                    hashCode = hashCode * 59 + ReviewDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (IssuingAuthority != null)
                    hashCode = hashCode * 59 + IssuingAuthority.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (ExpirationReason != null)
                    hashCode = hashCode * 59 + ExpirationReason.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCertificationType left, JCertificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCertificationType left, JCertificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
