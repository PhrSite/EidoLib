/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a Program.
    /// </summary>
    [DataContract]
    public partial class JProgramAugmentationType : IEquatable<JProgramAugmentationType>
    { 
        /// <summary>
        /// A corrections employee assigned or associated with a specific program. NIEM reference is j:ProgramStaffMember
        /// </summary>
        /// <value>A corrections employee assigned or associated with a specific program. NIEM reference is j:ProgramStaffMember</value>

        [DataMember(Name="programStaffMember")]
        public List<JStaffMemberType> ProgramStaffMember { get; set; }

        /// <summary>
        /// A monthly calendar of events that the program wants to publish to help others maintain awareness of key events. NIEM reference is j:ProgramCalendarSchedule
        /// </summary>
        /// <value>A monthly calendar of events that the program wants to publish to help others maintain awareness of key events. NIEM reference is j:ProgramCalendarSchedule</value>

        [DataMember(Name="programCalendarSchedule")]
        public List<NcScheduleType> ProgramCalendarSchedule { get; set; }

        /// <summary>
        /// A designated owner to maintain the definition of a Treatment Program for its lifecycle. NIEM reference is j:ProgramOwner
        /// </summary>
        /// <value>A designated owner to maintain the definition of a Treatment Program for its lifecycle. NIEM reference is j:ProgramOwner</value>

        [DataMember(Name="programOwner")]
        public List<NcEntityType> ProgramOwner { get; set; }

        /// <summary>
        /// A timeline of events for an in-service program. NIEM reference is j:ProgramInServiceSchedule
        /// </summary>
        /// <value>A timeline of events for an in-service program. NIEM reference is j:ProgramInServiceSchedule</value>

        [DataMember(Name="programInServiceSchedule")]
        public List<NcScheduleType> ProgramInServiceSchedule { get; set; }

        /// <summary>
        /// A kind of gender restriction specific to a program enrollment. NIEM reference is j:ProgramGenderRestrictionCategoryText
        /// </summary>
        /// <value>A kind of gender restriction specific to a program enrollment. NIEM reference is j:ProgramGenderRestrictionCategoryText</value>

        [DataMember(Name="programGenderRestrictionCategory")]
        public List<NcTextType> ProgramGenderRestrictionCategory { get; set; }

        /// <summary>
        /// True if testing is a part of the Rehabilitation Program or Treatment Program for any reason (drug, alcohol, etc.); false otherwise. NIEM reference is j:ProgramIncludesTestingIndicator
        /// </summary>
        /// <value>True if testing is a part of the Rehabilitation Program or Treatment Program for any reason (drug, alcohol, etc.); false otherwise. NIEM reference is j:ProgramIncludesTestingIndicator</value>

        [DataMember(Name="isProgramIncludesTesting")]
        public List<NiemXsboolean> IsProgramIncludesTesting { get; set; }

        /// <summary>
        /// A statement describing a program of treatments at a high level. NIEM reference is j:ProgramOverviewStatementText
        /// </summary>
        /// <value>A statement describing a program of treatments at a high level. NIEM reference is j:ProgramOverviewStatementText</value>

        [DataMember(Name="programOverviewStatement")]
        public List<NcTextType> ProgramOverviewStatement { get; set; }

        /// <summary>
        /// A name given to identify a key position used in delivery of rehabilitation services for the State of California. NIEM reference is j:ProgramKeyPositionName
        /// </summary>
        /// <value>A name given to identify a key position used in delivery of rehabilitation services for the State of California. NIEM reference is j:ProgramKeyPositionName</value>

        [DataMember(Name="programKeyPositionName")]
        public List<NcProperNameTextType> ProgramKeyPositionName { get; set; }

        /// <summary>
        /// True if a provider can set if programs include children of subjects; false otherwise. NIEM reference is j:ProgramIncludesChildrenIndicator
        /// </summary>
        /// <value>True if a provider can set if programs include children of subjects; false otherwise. NIEM reference is j:ProgramIncludesChildrenIndicator</value>

        [DataMember(Name="isProgramIncludesChildren")]
        public List<NiemXsboolean> IsProgramIncludesChildren { get; set; }

        /// <summary>
        /// True if a program attendee must be 18 or older due to compliance with some program requirements; false otherwise. NIEM reference is j:ProgramRequirementMinimumAge18Indicator
        /// </summary>
        /// <value>True if a program attendee must be 18 or older due to compliance with some program requirements; false otherwise. NIEM reference is j:ProgramRequirementMinimumAge18Indicator</value>

        [DataMember(Name="isProgramRequirementMinimumAge18")]
        public List<NiemXsboolean> IsProgramRequirementMinimumAge18 { get; set; }

        /// <summary>
        /// True if a program attendee must be 21 or older due to compliance with some program requirements; false otherwise. NIEM reference is j:ProgramRequirementMinimumAge21Indicator
        /// </summary>
        /// <value>True if a program attendee must be 21 or older due to compliance with some program requirements; false otherwise. NIEM reference is j:ProgramRequirementMinimumAge21Indicator</value>

        [DataMember(Name="isProgramRequirementMinimumAge21")]
        public List<NiemXsboolean> IsProgramRequirementMinimumAge21 { get; set; }

        /// <summary>
        /// A kind of alternative language that is supported within a program, other than English. NIEM reference is j:ProgramSupportedAlternativeLanguageText
        /// </summary>
        /// <value>A kind of alternative language that is supported within a program, other than English. NIEM reference is j:ProgramSupportedAlternativeLanguageText</value>

        [DataMember(Name="programSupportedAlternativeLanguage")]
        public List<NcTextType> ProgramSupportedAlternativeLanguage { get; set; }

        /// <summary>
        /// A date that the Ancillary Program information was verified. NIEM reference is j:ProgramVerifiedDate
        /// </summary>
        /// <value>A date that the Ancillary Program information was verified. NIEM reference is j:ProgramVerifiedDate</value>

        [DataMember(Name="programVerifiedDate")]
        public List<NcDateType> ProgramVerifiedDate { get; set; }

        /// <summary>
        /// A plan of activity that may include a number of Treatment Programs as well as activities defined for achievement of Rehabilitation Program Need Satisfaction, Goals, and Objectives. NIEM reference is j:ProgramPlan
        /// </summary>
        /// <value>A plan of activity that may include a number of Treatment Programs as well as activities defined for achievement of Rehabilitation Program Need Satisfaction, Goals, and Objectives. NIEM reference is j:ProgramPlan</value>

        [DataMember(Name="programPlan")]
        public List<JPlanType> ProgramPlan { get; set; }

        /// <summary>
        /// A document detailing the objectives and agreements of the subject in the scope of the program. NIEM reference is j:ProgramContract
        /// </summary>
        /// <value>A document detailing the objectives and agreements of the subject in the scope of the program. NIEM reference is j:ProgramContract</value>

        [DataMember(Name="programContract")]
        public List<JContractType> ProgramContract { get; set; }

        /// <summary>
        /// A set of details about the actions and events within a specific program. NIEM reference is j:ProgramActivity
        /// </summary>
        /// <value>A set of details about the actions and events within a specific program. NIEM reference is j:ProgramActivity</value>

        [DataMember(Name="programActivity")]
        public List<NcActivityType> ProgramActivity { get; set; }

        /// <summary>
        /// A kind of values for rehabilitation related experience program topics. NIEM reference is j:ProgramKeyAreasOfPracticeCategoryText
        /// </summary>
        /// <value>A kind of values for rehabilitation related experience program topics. NIEM reference is j:ProgramKeyAreasOfPracticeCategoryText</value>

        [DataMember(Name="programKeyAreasOfPracticeCategory")]
        public List<NcTextType> ProgramKeyAreasOfPracticeCategory { get; set; }

        /// <summary>
        /// A set of details required for a subject&#x27;s participation in a specific program. NIEM reference is j:ProgramEnrollment
        /// </summary>
        /// <value>A set of details required for a subject&#x27;s participation in a specific program. NIEM reference is j:ProgramEnrollment</value>

        [DataMember(Name="programEnrollment")]
        public List<JProgramEnrollmentType> ProgramEnrollment { get; set; }

        /// <summary>
        /// A description to clarify the key position required in delivery of rehabilitation services. NIEM reference is j:ProgramKeyPositionDescriptionText
        /// </summary>
        /// <value>A description to clarify the key position required in delivery of rehabilitation services. NIEM reference is j:ProgramKeyPositionDescriptionText</value>

        [DataMember(Name="programKeyPositionDescription")]
        public List<NcTextType> ProgramKeyPositionDescription { get; set; }

        /// <summary>
        /// True if a provider can set if programs include senior as subjects; false otherwise. NIEM reference is j:ProgramIncludesSeniorsIndicator
        /// </summary>
        /// <value>True if a provider can set if programs include senior as subjects; false otherwise. NIEM reference is j:ProgramIncludesSeniorsIndicator</value>

        [DataMember(Name="isProgramIncludesSeniors")]
        public List<NiemXsboolean> IsProgramIncludesSeniors { get; set; }

        /// <summary>
        /// A finding of a defect or condition that did not meet the standard during the inspection. NIEM reference is j:ProgramDefectFindingText
        /// </summary>
        /// <value>A finding of a defect or condition that did not meet the standard during the inspection. NIEM reference is j:ProgramDefectFindingText</value>

        [DataMember(Name="programDefectFinding")]
        public List<NcTextType> ProgramDefectFinding { get; set; }

        /// <summary>
        /// A text field to briefly describe the services that the Ancillary Program provides. NIEM reference is j:ProgramDescriptionOfServicesText
        /// </summary>
        /// <value>A text field to briefly describe the services that the Ancillary Program provides. NIEM reference is j:ProgramDescriptionOfServicesText</value>

        [DataMember(Name="programDescriptionOfServices")]
        public List<NcTextType> ProgramDescriptionOfServices { get; set; }

        /// <summary>
        /// True if of whether the experience included offender population activities; false otherwise. NIEM reference is j:ProgramIncludesOffenderPopulationActivityIndicator
        /// </summary>
        /// <value>True if of whether the experience included offender population activities; false otherwise. NIEM reference is j:ProgramIncludesOffenderPopulationActivityIndicator</value>

        [DataMember(Name="isProgramIncludesOffenderPopulationActivity")]
        public List<NiemXsboolean> IsProgramIncludesOffenderPopulationActivity { get; set; }

        /// <summary>
        /// A staff member assigned as a caseworker to a specific program. NIEM reference is j:ProgramCaseworker
        /// </summary>
        /// <value>A staff member assigned as a caseworker to a specific program. NIEM reference is j:ProgramCaseworker</value>

        [DataMember(Name="programCaseworker")]
        public List<HsCaseworkerType> ProgramCaseworker { get; set; }

        /// <summary>
        /// jProgramAugmentationType JSON-LD context
        /// </summary>
        /// <value>jProgramAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjProgramAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jProgramAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jProgramAugmentationTypeContext.jsonld")]
            JSONLDContextsjProgramAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jProgramAugmentationType JSON-LD context
        /// </summary>
        /// <value>jProgramAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JProgramAugmentationType {\n");
            sb.Append("  ProgramStaffMember: ").Append(ProgramStaffMember).Append("\n");
            sb.Append("  ProgramCalendarSchedule: ").Append(ProgramCalendarSchedule).Append("\n");
            sb.Append("  ProgramOwner: ").Append(ProgramOwner).Append("\n");
            sb.Append("  ProgramInServiceSchedule: ").Append(ProgramInServiceSchedule).Append("\n");
            sb.Append("  ProgramGenderRestrictionCategory: ").Append(ProgramGenderRestrictionCategory).Append("\n");
            sb.Append("  IsProgramIncludesTesting: ").Append(IsProgramIncludesTesting).Append("\n");
            sb.Append("  ProgramOverviewStatement: ").Append(ProgramOverviewStatement).Append("\n");
            sb.Append("  ProgramKeyPositionName: ").Append(ProgramKeyPositionName).Append("\n");
            sb.Append("  IsProgramIncludesChildren: ").Append(IsProgramIncludesChildren).Append("\n");
            sb.Append("  IsProgramRequirementMinimumAge18: ").Append(IsProgramRequirementMinimumAge18).Append("\n");
            sb.Append("  IsProgramRequirementMinimumAge21: ").Append(IsProgramRequirementMinimumAge21).Append("\n");
            sb.Append("  ProgramSupportedAlternativeLanguage: ").Append(ProgramSupportedAlternativeLanguage).Append("\n");
            sb.Append("  ProgramVerifiedDate: ").Append(ProgramVerifiedDate).Append("\n");
            sb.Append("  ProgramPlan: ").Append(ProgramPlan).Append("\n");
            sb.Append("  ProgramContract: ").Append(ProgramContract).Append("\n");
            sb.Append("  ProgramActivity: ").Append(ProgramActivity).Append("\n");
            sb.Append("  ProgramKeyAreasOfPracticeCategory: ").Append(ProgramKeyAreasOfPracticeCategory).Append("\n");
            sb.Append("  ProgramEnrollment: ").Append(ProgramEnrollment).Append("\n");
            sb.Append("  ProgramKeyPositionDescription: ").Append(ProgramKeyPositionDescription).Append("\n");
            sb.Append("  IsProgramIncludesSeniors: ").Append(IsProgramIncludesSeniors).Append("\n");
            sb.Append("  ProgramDefectFinding: ").Append(ProgramDefectFinding).Append("\n");
            sb.Append("  ProgramDescriptionOfServices: ").Append(ProgramDescriptionOfServices).Append("\n");
            sb.Append("  IsProgramIncludesOffenderPopulationActivity: ").Append(IsProgramIncludesOffenderPopulationActivity).Append("\n");
            sb.Append("  ProgramCaseworker: ").Append(ProgramCaseworker).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JProgramAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JProgramAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JProgramAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JProgramAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProgramStaffMember == other.ProgramStaffMember ||
                    ProgramStaffMember != null &&
                    ProgramStaffMember.SequenceEqual(other.ProgramStaffMember)
                ) && 
                (
                    ProgramCalendarSchedule == other.ProgramCalendarSchedule ||
                    ProgramCalendarSchedule != null &&
                    ProgramCalendarSchedule.SequenceEqual(other.ProgramCalendarSchedule)
                ) && 
                (
                    ProgramOwner == other.ProgramOwner ||
                    ProgramOwner != null &&
                    ProgramOwner.SequenceEqual(other.ProgramOwner)
                ) && 
                (
                    ProgramInServiceSchedule == other.ProgramInServiceSchedule ||
                    ProgramInServiceSchedule != null &&
                    ProgramInServiceSchedule.SequenceEqual(other.ProgramInServiceSchedule)
                ) && 
                (
                    ProgramGenderRestrictionCategory == other.ProgramGenderRestrictionCategory ||
                    ProgramGenderRestrictionCategory != null &&
                    ProgramGenderRestrictionCategory.SequenceEqual(other.ProgramGenderRestrictionCategory)
                ) && 
                (
                    IsProgramIncludesTesting == other.IsProgramIncludesTesting ||
                    IsProgramIncludesTesting != null &&
                    IsProgramIncludesTesting.SequenceEqual(other.IsProgramIncludesTesting)
                ) && 
                (
                    ProgramOverviewStatement == other.ProgramOverviewStatement ||
                    ProgramOverviewStatement != null &&
                    ProgramOverviewStatement.SequenceEqual(other.ProgramOverviewStatement)
                ) && 
                (
                    ProgramKeyPositionName == other.ProgramKeyPositionName ||
                    ProgramKeyPositionName != null &&
                    ProgramKeyPositionName.SequenceEqual(other.ProgramKeyPositionName)
                ) && 
                (
                    IsProgramIncludesChildren == other.IsProgramIncludesChildren ||
                    IsProgramIncludesChildren != null &&
                    IsProgramIncludesChildren.SequenceEqual(other.IsProgramIncludesChildren)
                ) && 
                (
                    IsProgramRequirementMinimumAge18 == other.IsProgramRequirementMinimumAge18 ||
                    IsProgramRequirementMinimumAge18 != null &&
                    IsProgramRequirementMinimumAge18.SequenceEqual(other.IsProgramRequirementMinimumAge18)
                ) && 
                (
                    IsProgramRequirementMinimumAge21 == other.IsProgramRequirementMinimumAge21 ||
                    IsProgramRequirementMinimumAge21 != null &&
                    IsProgramRequirementMinimumAge21.SequenceEqual(other.IsProgramRequirementMinimumAge21)
                ) && 
                (
                    ProgramSupportedAlternativeLanguage == other.ProgramSupportedAlternativeLanguage ||
                    ProgramSupportedAlternativeLanguage != null &&
                    ProgramSupportedAlternativeLanguage.SequenceEqual(other.ProgramSupportedAlternativeLanguage)
                ) && 
                (
                    ProgramVerifiedDate == other.ProgramVerifiedDate ||
                    ProgramVerifiedDate != null &&
                    ProgramVerifiedDate.SequenceEqual(other.ProgramVerifiedDate)
                ) && 
                (
                    ProgramPlan == other.ProgramPlan ||
                    ProgramPlan != null &&
                    ProgramPlan.SequenceEqual(other.ProgramPlan)
                ) && 
                (
                    ProgramContract == other.ProgramContract ||
                    ProgramContract != null &&
                    ProgramContract.SequenceEqual(other.ProgramContract)
                ) && 
                (
                    ProgramActivity == other.ProgramActivity ||
                    ProgramActivity != null &&
                    ProgramActivity.SequenceEqual(other.ProgramActivity)
                ) && 
                (
                    ProgramKeyAreasOfPracticeCategory == other.ProgramKeyAreasOfPracticeCategory ||
                    ProgramKeyAreasOfPracticeCategory != null &&
                    ProgramKeyAreasOfPracticeCategory.SequenceEqual(other.ProgramKeyAreasOfPracticeCategory)
                ) && 
                (
                    ProgramEnrollment == other.ProgramEnrollment ||
                    ProgramEnrollment != null &&
                    ProgramEnrollment.SequenceEqual(other.ProgramEnrollment)
                ) && 
                (
                    ProgramKeyPositionDescription == other.ProgramKeyPositionDescription ||
                    ProgramKeyPositionDescription != null &&
                    ProgramKeyPositionDescription.SequenceEqual(other.ProgramKeyPositionDescription)
                ) && 
                (
                    IsProgramIncludesSeniors == other.IsProgramIncludesSeniors ||
                    IsProgramIncludesSeniors != null &&
                    IsProgramIncludesSeniors.SequenceEqual(other.IsProgramIncludesSeniors)
                ) && 
                (
                    ProgramDefectFinding == other.ProgramDefectFinding ||
                    ProgramDefectFinding != null &&
                    ProgramDefectFinding.SequenceEqual(other.ProgramDefectFinding)
                ) && 
                (
                    ProgramDescriptionOfServices == other.ProgramDescriptionOfServices ||
                    ProgramDescriptionOfServices != null &&
                    ProgramDescriptionOfServices.SequenceEqual(other.ProgramDescriptionOfServices)
                ) && 
                (
                    IsProgramIncludesOffenderPopulationActivity == other.IsProgramIncludesOffenderPopulationActivity ||
                    IsProgramIncludesOffenderPopulationActivity != null &&
                    IsProgramIncludesOffenderPopulationActivity.SequenceEqual(other.IsProgramIncludesOffenderPopulationActivity)
                ) && 
                (
                    ProgramCaseworker == other.ProgramCaseworker ||
                    ProgramCaseworker != null &&
                    ProgramCaseworker.SequenceEqual(other.ProgramCaseworker)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProgramStaffMember != null)
                    hashCode = hashCode * 59 + ProgramStaffMember.GetHashCode();
                    if (ProgramCalendarSchedule != null)
                    hashCode = hashCode * 59 + ProgramCalendarSchedule.GetHashCode();
                    if (ProgramOwner != null)
                    hashCode = hashCode * 59 + ProgramOwner.GetHashCode();
                    if (ProgramInServiceSchedule != null)
                    hashCode = hashCode * 59 + ProgramInServiceSchedule.GetHashCode();
                    if (ProgramGenderRestrictionCategory != null)
                    hashCode = hashCode * 59 + ProgramGenderRestrictionCategory.GetHashCode();
                    if (IsProgramIncludesTesting != null)
                    hashCode = hashCode * 59 + IsProgramIncludesTesting.GetHashCode();
                    if (ProgramOverviewStatement != null)
                    hashCode = hashCode * 59 + ProgramOverviewStatement.GetHashCode();
                    if (ProgramKeyPositionName != null)
                    hashCode = hashCode * 59 + ProgramKeyPositionName.GetHashCode();
                    if (IsProgramIncludesChildren != null)
                    hashCode = hashCode * 59 + IsProgramIncludesChildren.GetHashCode();
                    if (IsProgramRequirementMinimumAge18 != null)
                    hashCode = hashCode * 59 + IsProgramRequirementMinimumAge18.GetHashCode();
                    if (IsProgramRequirementMinimumAge21 != null)
                    hashCode = hashCode * 59 + IsProgramRequirementMinimumAge21.GetHashCode();
                    if (ProgramSupportedAlternativeLanguage != null)
                    hashCode = hashCode * 59 + ProgramSupportedAlternativeLanguage.GetHashCode();
                    if (ProgramVerifiedDate != null)
                    hashCode = hashCode * 59 + ProgramVerifiedDate.GetHashCode();
                    if (ProgramPlan != null)
                    hashCode = hashCode * 59 + ProgramPlan.GetHashCode();
                    if (ProgramContract != null)
                    hashCode = hashCode * 59 + ProgramContract.GetHashCode();
                    if (ProgramActivity != null)
                    hashCode = hashCode * 59 + ProgramActivity.GetHashCode();
                    if (ProgramKeyAreasOfPracticeCategory != null)
                    hashCode = hashCode * 59 + ProgramKeyAreasOfPracticeCategory.GetHashCode();
                    if (ProgramEnrollment != null)
                    hashCode = hashCode * 59 + ProgramEnrollment.GetHashCode();
                    if (ProgramKeyPositionDescription != null)
                    hashCode = hashCode * 59 + ProgramKeyPositionDescription.GetHashCode();
                    if (IsProgramIncludesSeniors != null)
                    hashCode = hashCode * 59 + IsProgramIncludesSeniors.GetHashCode();
                    if (ProgramDefectFinding != null)
                    hashCode = hashCode * 59 + ProgramDefectFinding.GetHashCode();
                    if (ProgramDescriptionOfServices != null)
                    hashCode = hashCode * 59 + ProgramDescriptionOfServices.GetHashCode();
                    if (IsProgramIncludesOffenderPopulationActivity != null)
                    hashCode = hashCode * 59 + IsProgramIncludesOffenderPopulationActivity.GetHashCode();
                    if (ProgramCaseworker != null)
                    hashCode = hashCode * 59 + ProgramCaseworker.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JProgramAugmentationType left, JProgramAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JProgramAugmentationType left, JProgramAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
