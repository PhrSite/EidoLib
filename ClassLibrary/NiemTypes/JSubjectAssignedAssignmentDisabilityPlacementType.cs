/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a kind of placement or assignment specific to a disability.
    /// </summary>
    [DataContract]
    public partial class JSubjectAssignedAssignmentDisabilityPlacementType : NcActivityType, IEquatable<JSubjectAssignedAssignmentDisabilityPlacementType>
    { 
        /// <summary>
        /// A date when a subject&#x27;s disability placement is scheduled to end. NIEM reference is j:SubjectAssignedDisabilityPlacementExpirationDate
        /// </summary>
        /// <value>A date when a subject&#x27;s disability placement is scheduled to end. NIEM reference is j:SubjectAssignedDisabilityPlacementExpirationDate</value>

        [DataMember(Name="subjectAssignedDisabilityPlacementExpirationDate")]
        public List<NcDateType> SubjectAssignedDisabilityPlacementExpirationDate { get; set; }

        /// <summary>
        /// A physician&#x27;s comment regarding a subject&#x27;s placement due to a disability. NIEM reference is j:SubjectAssignedDisabilityPlacementPhysicianComment
        /// </summary>
        /// <value>A physician&#x27;s comment regarding a subject&#x27;s placement due to a disability. NIEM reference is j:SubjectAssignedDisabilityPlacementPhysicianComment</value>

        [DataMember(Name="subjectAssignedDisabilityPlacementPhysicianComment")]
        public List<NcCommentType> SubjectAssignedDisabilityPlacementPhysicianComment { get; set; }

        /// <summary>
        /// A restriction on placement for a subject due to a disability. NIEM reference is j:SubjectAssignedDisabilityPlacementRestriction
        /// </summary>
        /// <value>A restriction on placement for a subject due to a disability. NIEM reference is j:SubjectAssignedDisabilityPlacementRestriction</value>

        [DataMember(Name="subjectAssignedDisabilityPlacementRestriction")]
        public List<JSubjectAssignedDisabilityPlacementRestrictionType> SubjectAssignedDisabilityPlacementRestriction { get; set; }

        /// <summary>
        /// jSubjectAssignedAssignmentDisabilityPlacementType JSON-LD context
        /// </summary>
        /// <value>jSubjectAssignedAssignmentDisabilityPlacementType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectAssignedAssignmentDisabilityPlacementTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectAssignedAssignmentDisabilityPlacementTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectAssignedAssignmentDisabilityPlacementTypeContext.jsonld")]
            JSONLDContextsjSubjectAssignedAssignmentDisabilityPlacementTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectAssignedAssignmentDisabilityPlacementType JSON-LD context
        /// </summary>
        /// <value>jSubjectAssignedAssignmentDisabilityPlacementType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectAssignedAssignmentDisabilityPlacementType {\n");
            sb.Append("  SubjectAssignedDisabilityPlacementExpirationDate: ").Append(SubjectAssignedDisabilityPlacementExpirationDate).Append("\n");
            sb.Append("  SubjectAssignedDisabilityPlacementPhysicianComment: ").Append(SubjectAssignedDisabilityPlacementPhysicianComment).Append("\n");
            sb.Append("  SubjectAssignedDisabilityPlacementRestriction: ").Append(SubjectAssignedDisabilityPlacementRestriction).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectAssignedAssignmentDisabilityPlacementType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectAssignedAssignmentDisabilityPlacementType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectAssignedAssignmentDisabilityPlacementType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectAssignedAssignmentDisabilityPlacementType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubjectAssignedDisabilityPlacementExpirationDate == other.SubjectAssignedDisabilityPlacementExpirationDate ||
                    SubjectAssignedDisabilityPlacementExpirationDate != null &&
                    SubjectAssignedDisabilityPlacementExpirationDate.SequenceEqual(other.SubjectAssignedDisabilityPlacementExpirationDate)
                ) && 
                (
                    SubjectAssignedDisabilityPlacementPhysicianComment == other.SubjectAssignedDisabilityPlacementPhysicianComment ||
                    SubjectAssignedDisabilityPlacementPhysicianComment != null &&
                    SubjectAssignedDisabilityPlacementPhysicianComment.SequenceEqual(other.SubjectAssignedDisabilityPlacementPhysicianComment)
                ) && 
                (
                    SubjectAssignedDisabilityPlacementRestriction == other.SubjectAssignedDisabilityPlacementRestriction ||
                    SubjectAssignedDisabilityPlacementRestriction != null &&
                    SubjectAssignedDisabilityPlacementRestriction.SequenceEqual(other.SubjectAssignedDisabilityPlacementRestriction)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubjectAssignedDisabilityPlacementExpirationDate != null)
                    hashCode = hashCode * 59 + SubjectAssignedDisabilityPlacementExpirationDate.GetHashCode();
                    if (SubjectAssignedDisabilityPlacementPhysicianComment != null)
                    hashCode = hashCode * 59 + SubjectAssignedDisabilityPlacementPhysicianComment.GetHashCode();
                    if (SubjectAssignedDisabilityPlacementRestriction != null)
                    hashCode = hashCode * 59 + SubjectAssignedDisabilityPlacementRestriction.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectAssignedAssignmentDisabilityPlacementType left, JSubjectAssignedAssignmentDisabilityPlacementType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectAssignedAssignmentDisabilityPlacementType left, JSubjectAssignedAssignmentDisabilityPlacementType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
