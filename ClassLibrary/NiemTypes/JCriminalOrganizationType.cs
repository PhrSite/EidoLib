/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an organization that is formed to or intentionally conducts illegal activities.
    /// </summary>
    [DataContract]
    public partial class JCriminalOrganizationType : IEquatable<JCriminalOrganizationType>
    { 
        /// <summary>
        /// An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization
        /// </summary>
        /// <value>An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization</value>

        [DataMember(Name="roleOfOrganization")]
        public List<NcOrganizationType> RoleOfOrganization { get; set; }

        /// <summary>
        /// A caution or warning associated with a criminal organization. NIEM reference is j:CriminalOrganizationCautionText
        /// </summary>
        /// <value>A caution or warning associated with a criminal organization. NIEM reference is j:CriminalOrganizationCautionText</value>

        [DataMember(Name="caution")]
        public List<NcTextType> Caution { get; set; }

        /// <summary>
        /// A high estimate of the number of people in an organization. NIEM reference is j:CriminalOrganizationMembershipHighQuantityText
        /// </summary>
        /// <value>A high estimate of the number of people in an organization. NIEM reference is j:CriminalOrganizationMembershipHighQuantityText</value>

        [DataMember(Name="membershipHighQuantity")]
        public List<NcTextType> MembershipHighQuantity { get; set; }

        /// <summary>
        /// A description of the requirement or result of a person becoming a member of a criminal organization. NIEM reference is j:CriminalOrganizationMembershipInitiationText
        /// </summary>
        /// <value>A description of the requirement or result of a person becoming a member of a criminal organization. NIEM reference is j:CriminalOrganizationMembershipInitiationText</value>

        [DataMember(Name="membershipInitiation")]
        public List<NcTextType> MembershipInitiation { get; set; }

        /// <summary>
        /// A low estimate of the number of people in an organization. NIEM reference is j:CriminalOrganizationMembershipLowQuantityText
        /// </summary>
        /// <value>A low estimate of the number of people in an organization. NIEM reference is j:CriminalOrganizationMembershipLowQuantityText</value>

        [DataMember(Name="membershipLowQuantity")]
        public List<NcTextType> MembershipLowQuantity { get; set; }

        /// <summary>
        /// An identification assigned to a criminal organization. NIEM reference is j:CriminalOrganizationNCICIdentification
        /// </summary>
        /// <value>An identification assigned to a criminal organization. NIEM reference is j:CriminalOrganizationNCICIdentification</value>

        [DataMember(Name="ncicIdentification")]
        public List<NcIdentificationType> NcicIdentification { get; set; }

        /// <summary>
        /// An objective or purpose of the criminal organization. NIEM reference is j:CriminalOrganizationObjectiveText
        /// </summary>
        /// <value>An objective or purpose of the criminal organization. NIEM reference is j:CriminalOrganizationObjectiveText</value>

        [DataMember(Name="objective")]
        public List<NcTextType> Objective { get; set; }

        /// <summary>
        /// A description of characteristic traits and identifiers of a criminal organization. NIEM reference is j:CriminalOrganizationTraitDetails
        /// </summary>
        /// <value>A description of characteristic traits and identifiers of a criminal organization. NIEM reference is j:CriminalOrganizationTraitDetails</value>

        [DataMember(Name="traitDetails")]
        public List<JCriminalTraitDetailsType> TraitDetails { get; set; }

        /// <summary>
        /// jCriminalOrganizationType JSON-LD context
        /// </summary>
        /// <value>jCriminalOrganizationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCriminalOrganizationTypeContextJsonldEnum for ../JSON-LD_Contexts/jCriminalOrganizationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCriminalOrganizationTypeContext.jsonld")]
            JSONLDContextsjCriminalOrganizationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCriminalOrganizationType JSON-LD context
        /// </summary>
        /// <value>jCriminalOrganizationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCriminalOrganizationType {\n");
            sb.Append("  RoleOfOrganization: ").Append(RoleOfOrganization).Append("\n");
            sb.Append("  Caution: ").Append(Caution).Append("\n");
            sb.Append("  MembershipHighQuantity: ").Append(MembershipHighQuantity).Append("\n");
            sb.Append("  MembershipInitiation: ").Append(MembershipInitiation).Append("\n");
            sb.Append("  MembershipLowQuantity: ").Append(MembershipLowQuantity).Append("\n");
            sb.Append("  NcicIdentification: ").Append(NcicIdentification).Append("\n");
            sb.Append("  Objective: ").Append(Objective).Append("\n");
            sb.Append("  TraitDetails: ").Append(TraitDetails).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCriminalOrganizationType)obj);
        }

        /// <summary>
        /// Returns true if JCriminalOrganizationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCriminalOrganizationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCriminalOrganizationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfOrganization == other.RoleOfOrganization ||
                    RoleOfOrganization != null &&
                    RoleOfOrganization.SequenceEqual(other.RoleOfOrganization)
                ) && 
                (
                    Caution == other.Caution ||
                    Caution != null &&
                    Caution.SequenceEqual(other.Caution)
                ) && 
                (
                    MembershipHighQuantity == other.MembershipHighQuantity ||
                    MembershipHighQuantity != null &&
                    MembershipHighQuantity.SequenceEqual(other.MembershipHighQuantity)
                ) && 
                (
                    MembershipInitiation == other.MembershipInitiation ||
                    MembershipInitiation != null &&
                    MembershipInitiation.SequenceEqual(other.MembershipInitiation)
                ) && 
                (
                    MembershipLowQuantity == other.MembershipLowQuantity ||
                    MembershipLowQuantity != null &&
                    MembershipLowQuantity.SequenceEqual(other.MembershipLowQuantity)
                ) && 
                (
                    NcicIdentification == other.NcicIdentification ||
                    NcicIdentification != null &&
                    NcicIdentification.SequenceEqual(other.NcicIdentification)
                ) && 
                (
                    Objective == other.Objective ||
                    Objective != null &&
                    Objective.SequenceEqual(other.Objective)
                ) && 
                (
                    TraitDetails == other.TraitDetails ||
                    TraitDetails != null &&
                    TraitDetails.SequenceEqual(other.TraitDetails)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfOrganization != null)
                    hashCode = hashCode * 59 + RoleOfOrganization.GetHashCode();
                    if (Caution != null)
                    hashCode = hashCode * 59 + Caution.GetHashCode();
                    if (MembershipHighQuantity != null)
                    hashCode = hashCode * 59 + MembershipHighQuantity.GetHashCode();
                    if (MembershipInitiation != null)
                    hashCode = hashCode * 59 + MembershipInitiation.GetHashCode();
                    if (MembershipLowQuantity != null)
                    hashCode = hashCode * 59 + MembershipLowQuantity.GetHashCode();
                    if (NcicIdentification != null)
                    hashCode = hashCode * 59 + NcicIdentification.GetHashCode();
                    if (Objective != null)
                    hashCode = hashCode * 59 + Objective.GetHashCode();
                    if (TraitDetails != null)
                    hashCode = hashCode * 59 + TraitDetails.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCriminalOrganizationType left, JCriminalOrganizationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCriminalOrganizationType left, JCriminalOrganizationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
