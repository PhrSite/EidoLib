/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a single or set of related actions, events, or process steps.
    /// </summary>
    [DataContract]
    public partial class NcActivityType : IEquatable<NcActivityType>
    { 
        /// <summary>
        /// An identification that references an activity. NIEM reference is nc:ActivityIdentification
        /// </summary>
        /// <value>An identification that references an activity. NIEM reference is nc:ActivityIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A kind of activity. NIEM reference is nc:ActivityCategoryText
        /// </summary>
        /// <value>A kind of activity. NIEM reference is nc:ActivityCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A description of an activity. NIEM reference is nc:ActivityDescriptionText
        /// </summary>
        /// <value>A description of an activity. NIEM reference is nc:ActivityDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A name of an activity. NIEM reference is nc:ActivityName
        /// </summary>
        /// <value>A name of an activity. NIEM reference is nc:ActivityName</value>

        [DataMember(Name="name")]
        public List<NcTextType> Name { get; set; }

        /// <summary>
        /// A status of an activity. NIEM reference is nc:ActivityStatus
        /// </summary>
        /// <value>A status of an activity. NIEM reference is nc:ActivityStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A reason for an activity. NIEM reference is nc:ActivityReasonText
        /// </summary>
        /// <value>A reason for an activity. NIEM reference is nc:ActivityReasonText</value>

        [DataMember(Name="reason")]
        public List<NcTextType> Reason { get; set; }

        /// <summary>
        /// A result or outcome of an activity. NIEM reference is nc:ActivityDisposition
        /// </summary>
        /// <value>A result or outcome of an activity. NIEM reference is nc:ActivityDisposition</value>

        [DataMember(Name="disposition")]
        public List<NcDispositionType> Disposition { get; set; }

        /// <summary>
        /// A person or organization to contact for additional information about an activity. NIEM reference is nc:ActivityContactEntity
        /// </summary>
        /// <value>A person or organization to contact for additional information about an activity. NIEM reference is nc:ActivityContactEntity</value>

        [DataMember(Name="contactEntity")]
        public List<NcEntityType> ContactEntity { get; set; }

        /// <summary>
        /// A date of an activity. NIEM reference is nc:ActivityDate
        /// </summary>
        /// <value>A date of an activity. NIEM reference is nc:ActivityDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// Additional information about an activity. NIEM reference is j:ActivityAugmentation
        /// </summary>
        /// <value>Additional information about an activity. NIEM reference is j:ActivityAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JActivityAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncActivityType JSON-LD context
        /// </summary>
        /// <value>ncActivityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncActivityTypeContextJsonldEnum for ../JSON-LD_Contexts/ncActivityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncActivityTypeContext.jsonld")]
            JSONLDContextsncActivityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncActivityType JSON-LD context
        /// </summary>
        /// <value>ncActivityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcActivityType {\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  ContactEntity: ").Append(ContactEntity).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcActivityType)obj);
        }

        /// <summary>
        /// Returns true if NcActivityType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcActivityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcActivityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.SequenceEqual(other.Reason)
                ) && 
                (
                    Disposition == other.Disposition ||
                    Disposition != null &&
                    Disposition.SequenceEqual(other.Disposition)
                ) && 
                (
                    ContactEntity == other.ContactEntity ||
                    ContactEntity != null &&
                    ContactEntity.SequenceEqual(other.ContactEntity)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Disposition != null)
                    hashCode = hashCode * 59 + Disposition.GetHashCode();
                    if (ContactEntity != null)
                    hashCode = hashCode * 59 + ContactEntity.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcActivityType left, NcActivityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcActivityType left, NcActivityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
