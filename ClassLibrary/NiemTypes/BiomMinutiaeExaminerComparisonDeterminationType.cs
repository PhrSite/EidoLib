/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an examiner&#x27;s comparison of friction ridge impressions
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaeExaminerComparisonDeterminationType : IEquatable<BiomMinutiaeExaminerComparisonDeterminationType>
    { 
        /// <summary>
        /// An identification of a particular record in a transaction. (Obsolete, use ImageReferenceID) NIEM reference is biom:ImageReferenceIdentification
        /// </summary>
        /// <value>An identification of a particular record in a transaction. (Obsolete, use ImageReferenceID) NIEM reference is biom:ImageReferenceIdentification</value>

        [DataMember(Name="imageReferenceIdentification")]
        public List<NcIdentificationType> ImageReferenceIdentification { get; set; }

        /// <summary>
        /// An identifier for denoting (or indexing together) instances of a particular record in a transaction NIEM reference is biom:ImageReferenceID
        /// </summary>
        /// <value>An identifier for denoting (or indexing together) instances of a particular record in a transaction NIEM reference is biom:ImageReferenceID</value>

        [DataMember(Name="imageReferenceId")]
        public List<BiomInteger0to99Type> ImageReferenceId { get; set; }

        /// <summary>
        /// A result of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDeterminationResultCode
        /// </summary>
        /// <value>A result of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDeterminationResultCode</value>

        [DataMember(Name="resultCode")]
        public List<BiomMinutiaeExaminerComparisonDeterminationResultCodeType> ResultCode { get; set; }

        /// <summary>
        /// A status of progress of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerProgressCode
        /// </summary>
        /// <value>A status of progress of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerProgressCode</value>

        [DataMember(Name="minutiaeExaminerProgressCode")]
        public List<BiomMinutiaeExaminerProgressCodeType> MinutiaeExaminerProgressCode { get; set; }

        /// <summary>
        /// A name for the latent examiner responsible for minutiae markup or verification NIEM reference is biom:MinutiaeExaminerName
        /// </summary>
        /// <value>A name for the latent examiner responsible for minutiae markup or verification NIEM reference is biom:MinutiaeExaminerName</value>

        [DataMember(Name="minutiaeExaminerName")]
        public List<NcPersonNameType> MinutiaeExaminerName { get; set; }

        /// <summary>
        /// A name of an organization. NIEM reference is nc:OrganizationName
        /// </summary>
        /// <value>A name of an organization. NIEM reference is nc:OrganizationName</value>

        [DataMember(Name="organizationName")]
        public List<NcTextType> OrganizationName { get; set; }

        /// <summary>
        /// A date/time of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDeterminationDateTime
        /// </summary>
        /// <value>A date/time of an examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDeterminationDateTime</value>

        [DataMember(Name="dateTime")]
        public List<NcZuluDateTimeType> DateTime { get; set; }

        /// <summary>
        /// A level of complexity of an examiner&#x27;s comparison NIEM reference is biom:MinutiaeComparisonComplexityCode
        /// </summary>
        /// <value>A level of complexity of an examiner&#x27;s comparison NIEM reference is biom:MinutiaeComparisonComplexityCode</value>

        [DataMember(Name="minutiaeComparisonComplexityCode")]
        public List<BiomMinutiaeAnalysisComplexityCodeType> MinutiaeComparisonComplexityCode { get; set; }

        /// <summary>
        /// A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText
        /// </summary>
        /// <value>A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText</value>

        [DataMember(Name="minutiaeComment")]
        public List<NcTextType> MinutiaeComment { get; set; }

        /// <summary>
        /// biomMinutiaeExaminerComparisonDeterminationType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeExaminerComparisonDeterminationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaeExaminerComparisonDeterminationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaeExaminerComparisonDeterminationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaeExaminerComparisonDeterminationTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaeExaminerComparisonDeterminationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaeExaminerComparisonDeterminationType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeExaminerComparisonDeterminationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaeExaminerComparisonDeterminationType {\n");
            sb.Append("  ImageReferenceIdentification: ").Append(ImageReferenceIdentification).Append("\n");
            sb.Append("  ImageReferenceId: ").Append(ImageReferenceId).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  MinutiaeExaminerProgressCode: ").Append(MinutiaeExaminerProgressCode).Append("\n");
            sb.Append("  MinutiaeExaminerName: ").Append(MinutiaeExaminerName).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  MinutiaeComparisonComplexityCode: ").Append(MinutiaeComparisonComplexityCode).Append("\n");
            sb.Append("  MinutiaeComment: ").Append(MinutiaeComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaeExaminerComparisonDeterminationType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaeExaminerComparisonDeterminationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaeExaminerComparisonDeterminationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaeExaminerComparisonDeterminationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageReferenceIdentification == other.ImageReferenceIdentification ||
                    ImageReferenceIdentification != null &&
                    ImageReferenceIdentification.SequenceEqual(other.ImageReferenceIdentification)
                ) && 
                (
                    ImageReferenceId == other.ImageReferenceId ||
                    ImageReferenceId != null &&
                    ImageReferenceId.SequenceEqual(other.ImageReferenceId)
                ) && 
                (
                    ResultCode == other.ResultCode ||
                    ResultCode != null &&
                    ResultCode.SequenceEqual(other.ResultCode)
                ) && 
                (
                    MinutiaeExaminerProgressCode == other.MinutiaeExaminerProgressCode ||
                    MinutiaeExaminerProgressCode != null &&
                    MinutiaeExaminerProgressCode.SequenceEqual(other.MinutiaeExaminerProgressCode)
                ) && 
                (
                    MinutiaeExaminerName == other.MinutiaeExaminerName ||
                    MinutiaeExaminerName != null &&
                    MinutiaeExaminerName.SequenceEqual(other.MinutiaeExaminerName)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.SequenceEqual(other.OrganizationName)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.SequenceEqual(other.DateTime)
                ) && 
                (
                    MinutiaeComparisonComplexityCode == other.MinutiaeComparisonComplexityCode ||
                    MinutiaeComparisonComplexityCode != null &&
                    MinutiaeComparisonComplexityCode.SequenceEqual(other.MinutiaeComparisonComplexityCode)
                ) && 
                (
                    MinutiaeComment == other.MinutiaeComment ||
                    MinutiaeComment != null &&
                    MinutiaeComment.SequenceEqual(other.MinutiaeComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageReferenceIdentification != null)
                    hashCode = hashCode * 59 + ImageReferenceIdentification.GetHashCode();
                    if (ImageReferenceId != null)
                    hashCode = hashCode * 59 + ImageReferenceId.GetHashCode();
                    if (ResultCode != null)
                    hashCode = hashCode * 59 + ResultCode.GetHashCode();
                    if (MinutiaeExaminerProgressCode != null)
                    hashCode = hashCode * 59 + MinutiaeExaminerProgressCode.GetHashCode();
                    if (MinutiaeExaminerName != null)
                    hashCode = hashCode * 59 + MinutiaeExaminerName.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (MinutiaeComparisonComplexityCode != null)
                    hashCode = hashCode * 59 + MinutiaeComparisonComplexityCode.GetHashCode();
                    if (MinutiaeComment != null)
                    hashCode = hashCode * 59 + MinutiaeComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaeExaminerComparisonDeterminationType left, BiomMinutiaeExaminerComparisonDeterminationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaeExaminerComparisonDeterminationType left, BiomMinutiaeExaminerComparisonDeterminationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
