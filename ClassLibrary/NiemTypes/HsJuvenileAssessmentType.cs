/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a juvenile assessment.
    /// </summary>
    [DataContract]
    public partial class HsJuvenileAssessmentType : NcAssessmentType, IEquatable<HsJuvenileAssessmentType>
    { 
        /// <summary>
        /// A facility administering an assessment. NIEM reference is hs:AdministeringFacility
        /// </summary>
        /// <value>A facility administering an assessment. NIEM reference is hs:AdministeringFacility</value>

        [DataMember(Name="administeringFacility")]
        public List<NcFacilityType> AdministeringFacility { get; set; }

        /// <summary>
        /// An additional piece of information about the assessment. NIEM reference is hs:AssessmentOtherText
        /// </summary>
        /// <value>An additional piece of information about the assessment. NIEM reference is hs:AssessmentOtherText</value>

        [DataMember(Name="assessmentOther")]
        public List<NcTextType> AssessmentOther { get; set; }

        /// <summary>
        /// An outcome of an assessment. NIEM reference is hs:AssessmentOutcome
        /// </summary>
        /// <value>An outcome of an assessment. NIEM reference is hs:AssessmentOutcome</value>

        [DataMember(Name="assessmentOutcome")]
        public List<HsAssessmentOutcomeType> AssessmentOutcome { get; set; }

        /// <summary>
        /// A recommendation of an assessment. NIEM reference is hs:AssessmentRecommendation
        /// </summary>
        /// <value>A recommendation of an assessment. NIEM reference is hs:AssessmentRecommendation</value>

        [DataMember(Name="assessmentRecommendation")]
        public List<HsAssessmentRecommendationType> AssessmentRecommendation { get; set; }

        /// <summary>
        /// A caseworker for the child. NIEM reference is hs:Caseworker
        /// </summary>
        /// <value>A caseworker for the child. NIEM reference is hs:Caseworker</value>

        [DataMember(Name="caseworker")]
        public List<HsCaseworkerType> Caseworker { get; set; }

        /// <summary>
        /// A role of a juvenile, played by a person defined as a juvenile rather than an adult under the law. NIEM reference is hs:Juvenile
        /// </summary>
        /// <value>A role of a juvenile, played by a person defined as a juvenile rather than an adult under the law. NIEM reference is hs:Juvenile</value>

        [DataMember(Name="juvenile")]
        public List<HsJuvenileType> Juvenile { get; set; }

        /// <summary>
        /// An identifier of a person receiving a record. NIEM reference is hs:ReceivedByTrackingID
        /// </summary>
        /// <value>An identifier of a person receiving a record. NIEM reference is hs:ReceivedByTrackingID</value>

        [DataMember(Name="receivedByTrackingId")]
        public List<NiemXsstring> ReceivedByTrackingId { get; set; }

        /// <summary>
        /// hsJuvenileAssessmentType JSON-LD context
        /// </summary>
        /// <value>hsJuvenileAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsJuvenileAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/hsJuvenileAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsJuvenileAssessmentTypeContext.jsonld")]
            JSONLDContextshsJuvenileAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsJuvenileAssessmentType JSON-LD context
        /// </summary>
        /// <value>hsJuvenileAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsJuvenileAssessmentType {\n");
            sb.Append("  AdministeringFacility: ").Append(AdministeringFacility).Append("\n");
            sb.Append("  AssessmentOther: ").Append(AssessmentOther).Append("\n");
            sb.Append("  AssessmentOutcome: ").Append(AssessmentOutcome).Append("\n");
            sb.Append("  AssessmentRecommendation: ").Append(AssessmentRecommendation).Append("\n");
            sb.Append("  Caseworker: ").Append(Caseworker).Append("\n");
            sb.Append("  Juvenile: ").Append(Juvenile).Append("\n");
            sb.Append("  ReceivedByTrackingId: ").Append(ReceivedByTrackingId).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsJuvenileAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if HsJuvenileAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsJuvenileAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsJuvenileAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AdministeringFacility == other.AdministeringFacility ||
                    AdministeringFacility != null &&
                    AdministeringFacility.SequenceEqual(other.AdministeringFacility)
                ) && 
                (
                    AssessmentOther == other.AssessmentOther ||
                    AssessmentOther != null &&
                    AssessmentOther.SequenceEqual(other.AssessmentOther)
                ) && 
                (
                    AssessmentOutcome == other.AssessmentOutcome ||
                    AssessmentOutcome != null &&
                    AssessmentOutcome.SequenceEqual(other.AssessmentOutcome)
                ) && 
                (
                    AssessmentRecommendation == other.AssessmentRecommendation ||
                    AssessmentRecommendation != null &&
                    AssessmentRecommendation.SequenceEqual(other.AssessmentRecommendation)
                ) && 
                (
                    Caseworker == other.Caseworker ||
                    Caseworker != null &&
                    Caseworker.SequenceEqual(other.Caseworker)
                ) && 
                (
                    Juvenile == other.Juvenile ||
                    Juvenile != null &&
                    Juvenile.SequenceEqual(other.Juvenile)
                ) && 
                (
                    ReceivedByTrackingId == other.ReceivedByTrackingId ||
                    ReceivedByTrackingId != null &&
                    ReceivedByTrackingId.SequenceEqual(other.ReceivedByTrackingId)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AdministeringFacility != null)
                    hashCode = hashCode * 59 + AdministeringFacility.GetHashCode();
                    if (AssessmentOther != null)
                    hashCode = hashCode * 59 + AssessmentOther.GetHashCode();
                    if (AssessmentOutcome != null)
                    hashCode = hashCode * 59 + AssessmentOutcome.GetHashCode();
                    if (AssessmentRecommendation != null)
                    hashCode = hashCode * 59 + AssessmentRecommendation.GetHashCode();
                    if (Caseworker != null)
                    hashCode = hashCode * 59 + Caseworker.GetHashCode();
                    if (Juvenile != null)
                    hashCode = hashCode * 59 + Juvenile.GetHashCode();
                    if (ReceivedByTrackingId != null)
                    hashCode = hashCode * 59 + ReceivedByTrackingId.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsJuvenileAssessmentType left, HsJuvenileAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsJuvenileAssessmentType left, HsJuvenileAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
