/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person who has observed an incident.
    /// </summary>
    [DataContract]
    public partial class JWitnessType : IEquatable<JWitnessType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// An identification number or string identifying a witness. NIEM reference is j:WitnessIdentification
        /// </summary>
        /// <value>An identification number or string identifying a witness. NIEM reference is j:WitnessIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A sequential number assigned to the witness of an incident. NIEM reference is j:WitnessSequenceNumberText
        /// </summary>
        /// <value>A sequential number assigned to the witness of an incident. NIEM reference is j:WitnessSequenceNumberText</value>

        [DataMember(Name="sequenceNumber")]
        public List<NcTextType> SequenceNumber { get; set; }

        /// <summary>
        /// A description or narrative of an incident as reported by the witness. NIEM reference is j:WitnessAccountDescriptionText
        /// </summary>
        /// <value>A description or narrative of an incident as reported by the witness. NIEM reference is j:WitnessAccountDescriptionText</value>

        [DataMember(Name="accountDescription")]
        public List<NcTextType> AccountDescription { get; set; }

        /// <summary>
        /// A date a witness observed an incident. NIEM reference is j:WitnessDate
        /// </summary>
        /// <value>A date a witness observed an incident. NIEM reference is j:WitnessDate</value>

        [DataMember(Name="date")]
        public List<NcDateType> Date { get; set; }

        /// <summary>
        /// A description of a location from which the witness observed an incident. NIEM reference is j:WitnessLocationDescriptionText
        /// </summary>
        /// <value>A description of a location from which the witness observed an incident. NIEM reference is j:WitnessLocationDescriptionText</value>

        [DataMember(Name="locationDescription")]
        public List<NcTextType> LocationDescription { get; set; }

        /// <summary>
        /// True if a witness&#x27;s story has been corroborated or validated; false otherwise. NIEM reference is j:WitnessReportVerifiedIndicator
        /// </summary>
        /// <value>True if a witness&#x27;s story has been corroborated or validated; false otherwise. NIEM reference is j:WitnessReportVerifiedIndicator</value>

        [DataMember(Name="isReportVerified")]
        public List<NiemXsboolean> IsReportVerified { get; set; }

        /// <summary>
        /// A special condition a witness requires to testify. NIEM reference is j:WitnessSpecialConditionText
        /// </summary>
        /// <value>A special condition a witness requires to testify. NIEM reference is j:WitnessSpecialConditionText</value>

        [DataMember(Name="specialCondition")]
        public List<NcTextType> SpecialCondition { get; set; }

        /// <summary>
        /// True if a witness is willing to testify; false otherwise. NIEM reference is j:WitnessWillTestifyIndicator
        /// </summary>
        /// <value>True if a witness is willing to testify; false otherwise. NIEM reference is j:WitnessWillTestifyIndicator</value>

        [DataMember(Name="isWillTestify")]
        public List<NiemXsboolean> IsWillTestify { get; set; }

        /// <summary>
        /// jWitnessType JSON-LD context
        /// </summary>
        /// <value>jWitnessType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjWitnessTypeContextJsonldEnum for ../JSON-LD_Contexts/jWitnessTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jWitnessTypeContext.jsonld")]
            JSONLDContextsjWitnessTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jWitnessType JSON-LD context
        /// </summary>
        /// <value>jWitnessType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JWitnessType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  AccountDescription: ").Append(AccountDescription).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  LocationDescription: ").Append(LocationDescription).Append("\n");
            sb.Append("  IsReportVerified: ").Append(IsReportVerified).Append("\n");
            sb.Append("  SpecialCondition: ").Append(SpecialCondition).Append("\n");
            sb.Append("  IsWillTestify: ").Append(IsWillTestify).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JWitnessType)obj);
        }

        /// <summary>
        /// Returns true if JWitnessType instances are equal
        /// </summary>
        /// <param name="other">Instance of JWitnessType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JWitnessType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    SequenceNumber == other.SequenceNumber ||
                    SequenceNumber != null &&
                    SequenceNumber.SequenceEqual(other.SequenceNumber)
                ) && 
                (
                    AccountDescription == other.AccountDescription ||
                    AccountDescription != null &&
                    AccountDescription.SequenceEqual(other.AccountDescription)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.SequenceEqual(other.Date)
                ) && 
                (
                    LocationDescription == other.LocationDescription ||
                    LocationDescription != null &&
                    LocationDescription.SequenceEqual(other.LocationDescription)
                ) && 
                (
                    IsReportVerified == other.IsReportVerified ||
                    IsReportVerified != null &&
                    IsReportVerified.SequenceEqual(other.IsReportVerified)
                ) && 
                (
                    SpecialCondition == other.SpecialCondition ||
                    SpecialCondition != null &&
                    SpecialCondition.SequenceEqual(other.SpecialCondition)
                ) && 
                (
                    IsWillTestify == other.IsWillTestify ||
                    IsWillTestify != null &&
                    IsWillTestify.SequenceEqual(other.IsWillTestify)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (SequenceNumber != null)
                    hashCode = hashCode * 59 + SequenceNumber.GetHashCode();
                    if (AccountDescription != null)
                    hashCode = hashCode * 59 + AccountDescription.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (LocationDescription != null)
                    hashCode = hashCode * 59 + LocationDescription.GetHashCode();
                    if (IsReportVerified != null)
                    hashCode = hashCode * 59 + IsReportVerified.GetHashCode();
                    if (SpecialCondition != null)
                    hashCode = hashCode * 59 + SpecialCondition.GetHashCode();
                    if (IsWillTestify != null)
                    hashCode = hashCode * 59 + IsWillTestify.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JWitnessType left, JWitnessType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JWitnessType left, JWitnessType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
