/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an incident.
    /// </summary>
    [DataContract]
    public partial class JIncidentAugmentationType : IEquatable<JIncidentAugmentationType>
    { 
        /// <summary>
        /// A log identification number assigned to an incident. NIEM reference is j:IncidentLogIdentification
        /// </summary>
        /// <value>A log identification number assigned to an incident. NIEM reference is j:IncidentLogIdentification</value>

        [DataMember(Name="incidentLogIdentification")]
        public List<NcIdentificationType> IncidentLogIdentification { get; set; }

        /// <summary>
        /// True if evidence was held due to this incident; false otherwise. NIEM reference is j:IncidentEvidenceHeldIndicator
        /// </summary>
        /// <value>True if evidence was held due to this incident; false otherwise. NIEM reference is j:IncidentEvidenceHeldIndicator</value>

        [DataMember(Name="isIncidentEvidenceHeld")]
        public List<NiemXsboolean> IsIncidentEvidenceHeld { get; set; }

        /// <summary>
        /// True if the crisis response team was activated to respond to the subject incident; false otherwise. NIEM reference is j:IncidentCrisisResponseTeamActivatedIndicator
        /// </summary>
        /// <value>True if the crisis response team was activated to respond to the subject incident; false otherwise. NIEM reference is j:IncidentCrisisResponseTeamActivatedIndicator</value>

        [DataMember(Name="isIncidentCrisisResponseTeamActivated")]
        public List<NiemXsboolean> IsIncidentCrisisResponseTeamActivated { get; set; }

        /// <summary>
        /// True if the crisis stage has passed; false otherwise. NIEM reference is j:IncidentCrisisOverIndicator
        /// </summary>
        /// <value>True if the crisis stage has passed; false otherwise. NIEM reference is j:IncidentCrisisOverIndicator</value>

        [DataMember(Name="isIncidentCrisisOver")]
        public List<NiemXsboolean> IsIncidentCrisisOver { get; set; }

        /// <summary>
        /// True if emergency service was summoned for this incident; false otherwise. NIEM reference is j:IncidentEmergencyServiceRequiredIndicator
        /// </summary>
        /// <value>True if emergency service was summoned for this incident; false otherwise. NIEM reference is j:IncidentEmergencyServiceRequiredIndicator</value>

        [DataMember(Name="isIncidentEmergencyServiceRequired")]
        public List<NiemXsboolean> IsIncidentEmergencyServiceRequired { get; set; }

        /// <summary>
        /// A listing of the issues related to the incident. NIEM reference is j:IncidentIssuesText
        /// </summary>
        /// <value>A listing of the issues related to the incident. NIEM reference is j:IncidentIssuesText</value>

        [DataMember(Name="incidentIssues")]
        public List<NcTextType> IncidentIssues { get; set; }

        /// <summary>
        /// True if law enforcement was summoned for this incident; false otherwise. NIEM reference is j:IncidentLawEnforcementSummonedIndicator
        /// </summary>
        /// <value>True if law enforcement was summoned for this incident; false otherwise. NIEM reference is j:IncidentLawEnforcementSummonedIndicator</value>

        [DataMember(Name="isIncidentLawEnforcementSummoned")]
        public List<NiemXsboolean> IsIncidentLawEnforcementSummoned { get; set; }

        /// <summary>
        /// An arrest made because of an incident. NIEM reference is j:IncidentArrest
        /// </summary>
        /// <value>An arrest made because of an incident. NIEM reference is j:IncidentArrest</value>

        [DataMember(Name="incidentArrest")]
        public List<JArrestType> IncidentArrest { get; set; }

        /// <summary>
        /// A group of officials assembled for managing or reviewing an incident. NIEM reference is j:IncidentReviewPanel
        /// </summary>
        /// <value>A group of officials assembled for managing or reviewing an incident. NIEM reference is j:IncidentReviewPanel</value>

        [DataMember(Name="incidentReviewPanel")]
        public List<JPanelType> IncidentReviewPanel { get; set; }

        /// <summary>
        /// A name of a participant associated with an incident. NIEM reference is j:IncidentParticipant
        /// </summary>
        /// <value>A name of a participant associated with an incident. NIEM reference is j:IncidentParticipant</value>

        [DataMember(Name="incidentParticipant")]
        public List<JParticipantType> IncidentParticipant { get; set; }

        /// <summary>
        /// A description of a facility associated with an incident. NIEM reference is j:IncidentFacility
        /// </summary>
        /// <value>A description of a facility associated with an incident. NIEM reference is j:IncidentFacility</value>

        [DataMember(Name="incidentFacility")]
        public List<NcFacilityType> IncidentFacility { get; set; }

        /// <summary>
        /// A staff member involved in the incident. NIEM reference is j:IncidentStaffMember
        /// </summary>
        /// <value>A staff member involved in the incident. NIEM reference is j:IncidentStaffMember</value>

        [DataMember(Name="incidentStaffMember")]
        public List<JStaffMemberType> IncidentStaffMember { get; set; }

        /// <summary>
        /// A description of a drug associated with an incident. NIEM reference is j:IncidentDrug
        /// </summary>
        /// <value>A description of a drug associated with an incident. NIEM reference is j:IncidentDrug</value>

        [DataMember(Name="incidentDrug")]
        public List<NcDrugType> IncidentDrug { get; set; }

        /// <summary>
        /// A weather condition at the time of the incident. NIEM reference is j:IncidentWeatherMMUCCCode
        /// </summary>
        /// <value>A weather condition at the time of the incident. NIEM reference is j:IncidentWeatherMMUCCCode</value>

        [DataMember(Name="incidentWeatherMmuccCode")]
        public List<MmuccCrashWeatherConditionCodeType> IncidentWeatherMmuccCode { get; set; }

        /// <summary>
        /// A weather condition at the time of the incident. NIEM reference is j:IncidentWeatherText
        /// </summary>
        /// <value>A weather condition at the time of the incident. NIEM reference is j:IncidentWeatherText</value>

        [DataMember(Name="incidentWeather")]
        public List<NcTextType> IncidentWeather { get; set; }

        /// <summary>
        /// A description of the applied force resulting from an incident. NIEM reference is j:IncidentAppliedForce
        /// </summary>
        /// <value>A description of the applied force resulting from an incident. NIEM reference is j:IncidentAppliedForce</value>

        [DataMember(Name="incidentAppliedForce")]
        public List<JForceType> IncidentAppliedForce { get; set; }

        /// <summary>
        /// An indication of the lighting conditions at the time of an incident. NIEM reference is j:IncidentLightingText
        /// </summary>
        /// <value>An indication of the lighting conditions at the time of an incident. NIEM reference is j:IncidentLightingText</value>

        [DataMember(Name="incidentLighting")]
        public List<NcTextType> IncidentLighting { get; set; }

        /// <summary>
        /// True if an Amber Alert has been issued  for this incident; false otherwise. NIEM reference is j:AmberAlertIssuedIndicator
        /// </summary>
        /// <value>True if an Amber Alert has been issued  for this incident; false otherwise. NIEM reference is j:AmberAlertIssuedIndicator</value>

        [DataMember(Name="isAmberAlertIssued")]
        public List<NiemXsboolean> IsAmberAlertIssued { get; set; }

        /// <summary>
        /// A count of persons arrested as a result of recovering the property of record NIEM reference is j:IncidentArrestCountQuantity
        /// </summary>
        /// <value>A count of persons arrested as a result of recovering the property of record NIEM reference is j:IncidentArrestCountQuantity</value>

        [DataMember(Name="incidentArrestCountQuantity")]
        public List<NiemXsnonNegativeInteger> IncidentArrestCountQuantity { get; set; }

        /// <summary>
        /// True if an arrest was made due to the incident; false otherwise. NIEM reference is j:IncidentArrestMadeIndicator
        /// </summary>
        /// <value>True if an arrest was made due to the incident; false otherwise. NIEM reference is j:IncidentArrestMadeIndicator</value>

        [DataMember(Name="isIncidentArrestMade")]
        public List<NiemXsboolean> IsIncidentArrestMade { get; set; }

        /// <summary>
        /// A peace official that assisted in processing an incident. NIEM reference is j:IncidentAssistingOfficial
        /// </summary>
        /// <value>A peace official that assisted in processing an incident. NIEM reference is j:IncidentAssistingOfficial</value>

        [DataMember(Name="incidentAssistingOfficial")]
        public List<JEnforcementOfficialType> IncidentAssistingOfficial { get; set; }

        /// <summary>
        /// A kind of incident. NIEM reference is j:IncidentCategoryCode
        /// </summary>
        /// <value>A kind of incident. NIEM reference is j:IncidentCategoryCode</value>

        [DataMember(Name="incidentCategoryCode")]
        public List<UcrCriminalActivityCategoryCodeType> IncidentCategoryCode { get; set; }

        /// <summary>
        /// A kind of incident. NIEM reference is j:IncidentCategoryUCRCode
        /// </summary>
        /// <value>A kind of incident. NIEM reference is j:IncidentCategoryUCRCode</value>

        [DataMember(Name="incidentCategoryUcrCode")]
        public List<UcrOffenseCodeType> IncidentCategoryUcrCode { get; set; }

        /// <summary>
        /// A general kind of an incident that occurred. NIEM reference is j:IncidentGeneralCategoryText
        /// </summary>
        /// <value>A general kind of an incident that occurred. NIEM reference is j:IncidentGeneralCategoryText</value>

        [DataMember(Name="incidentGeneralCategory")]
        public List<NcTextType> IncidentGeneralCategory { get; set; }

        /// <summary>
        /// True if an incident that occurred is criminal; false if an incident is non-criminal.  NIEM reference is j:IncidentCriminalIndicator
        /// </summary>
        /// <value>True if an incident that occurred is criminal; false if an incident is non-criminal.  NIEM reference is j:IncidentCriminalIndicator</value>

        [DataMember(Name="isIncidentCriminal")]
        public List<NiemXsboolean> IsIncidentCriminal { get; set; }

        /// <summary>
        /// A property item that was damaged in an incident. NIEM reference is j:IncidentDamagedItem
        /// </summary>
        /// <value>A property item that was damaged in an incident. NIEM reference is j:IncidentDamagedItem</value>

        [DataMember(Name="incidentDamagedItem")]
        public List<NcItemType> IncidentDamagedItem { get; set; }

        /// <summary>
        /// An item seized by an official for later use in ascertaining the true nature of an incident. NIEM reference is j:IncidentEvidence
        /// </summary>
        /// <value>An item seized by an official for later use in ascertaining the true nature of an incident. NIEM reference is j:IncidentEvidence</value>

        [DataMember(Name="incidentEvidence")]
        public List<JEvidenceType> IncidentEvidence { get; set; }

        /// <summary>
        /// A reason why an incident has been cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceCode
        /// </summary>
        /// <value>A reason why an incident has been cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceCode</value>

        [DataMember(Name="incidentExceptionalClearanceCode")]
        public List<UcrIncidentExceptionalClearanceCodeType> IncidentExceptionalClearanceCode { get; set; }

        /// <summary>
        /// A reason why an incident has been cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceText
        /// </summary>
        /// <value>A reason why an incident has been cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceText</value>

        [DataMember(Name="incidentExceptionalClearance")]
        public List<NcTextType> IncidentExceptionalClearance { get; set; }

        /// <summary>
        /// A date an incident was cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceDate
        /// </summary>
        /// <value>A date an incident was cleared exceptionally. NIEM reference is j:IncidentExceptionalClearanceDate</value>

        [DataMember(Name="incidentExceptionalClearanceDate")]
        public List<NcDateType> IncidentExceptionalClearanceDate { get; set; }

        /// <summary>
        /// True if force was used in an incident; false otherwise. NIEM reference is j:IncidentForceInvolvedIndicator
        /// </summary>
        /// <value>True if force was used in an incident; false otherwise. NIEM reference is j:IncidentForceInvolvedIndicator</value>

        [DataMember(Name="isIncidentForceInvolved")]
        public List<NiemXsboolean> IsIncidentForceInvolved { get; set; }

        /// <summary>
        /// An electronic or paper form to be completed by a response unit and submitted to record the details of an incident and of a response to an incident. NIEM reference is j:IncidentForm
        /// </summary>
        /// <value>An electronic or paper form to be completed by a response unit and submitted to record the details of an incident and of a response to an incident. NIEM reference is j:IncidentForm</value>

        [DataMember(Name="incidentForm")]
        public List<JIncidentFormType> IncidentForm { get; set; }

        /// <summary>
        /// An indication of the severity level of an injury received during an incident. NIEM reference is j:IncidentInjuryLevelText
        /// </summary>
        /// <value>An indication of the severity level of an injury received during an incident. NIEM reference is j:IncidentInjuryLevelText</value>

        [DataMember(Name="incidentInjuryLevel")]
        public List<NcTextType> IncidentInjuryLevel { get; set; }

        /// <summary>
        /// A property item that was somehow involved in an incident but not damaged, stolen, or seized. NIEM reference is j:IncidentInvolvedItem
        /// </summary>
        /// <value>A property item that was somehow involved in an incident but not damaged, stolen, or seized. NIEM reference is j:IncidentInvolvedItem</value>

        [DataMember(Name="incidentInvolvedItem")]
        public List<NcItemType> IncidentInvolvedItem { get; set; }

        /// <summary>
        /// A structure that was involved in an incident. NIEM reference is j:IncidentInvolvedStructure
        /// </summary>
        /// <value>A structure that was involved in an incident. NIEM reference is j:IncidentInvolvedStructure</value>

        [DataMember(Name="incidentInvolvedStructure")]
        public List<NcFacilityType> IncidentInvolvedStructure { get; set; }

        /// <summary>
        /// A description of the method used to carry out on incident. NIEM reference is j:IncidentMethodDescriptionText
        /// </summary>
        /// <value>A description of the method used to carry out on incident. NIEM reference is j:IncidentMethodDescriptionText</value>

        [DataMember(Name="incidentMethodDescription")]
        public List<NcTextType> IncidentMethodDescription { get; set; }

        /// <summary>
        /// True if an incident involved or employed a person under the legal age of an adult; false otherwise. NIEM reference is j:IncidentMinorInvolvedIndicator
        /// </summary>
        /// <value>True if an incident involved or employed a person under the legal age of an adult; false otherwise. NIEM reference is j:IncidentMinorInvolvedIndicator</value>

        [DataMember(Name="isIncidentMinorInvolved")]
        public List<NiemXsboolean> IsIncidentMinorInvolved { get; set; }

        /// <summary>
        /// A number and kind of missing persons found as a result of solving the case NIEM reference is j:IncidentMissingPersonFoundText
        /// </summary>
        /// <value>A number and kind of missing persons found as a result of solving the case NIEM reference is j:IncidentMissingPersonFoundText</value>

        [DataMember(Name="incidentMissingPersonFound")]
        public List<NcTextType> IncidentMissingPersonFound { get; set; }

        /// <summary>
        /// An item that was stolen.  NIEM reference is j:IncidentNonPropertyItemText
        /// </summary>
        /// <value>An item that was stolen.  NIEM reference is j:IncidentNonPropertyItemText</value>

        [DataMember(Name="incidentNonPropertyItem")]
        public List<NcTextType> IncidentNonPropertyItem { get; set; }

        /// <summary>
        /// True if an official was present when an incident occurred; false otherwise. NIEM reference is j:IncidentOfficialPresentIndicator
        /// </summary>
        /// <value>True if an official was present when an incident occurred; false otherwise. NIEM reference is j:IncidentOfficialPresentIndicator</value>

        [DataMember(Name="isIncidentOfficialPresent")]
        public List<NiemXsboolean> IsIncidentOfficialPresent { get; set; }

        /// <summary>
        /// True if a request was made to gather fingerprints; false otherwise. NIEM reference is j:IncidentPrintsRequestedIndicator
        /// </summary>
        /// <value>True if a request was made to gather fingerprints; false otherwise. NIEM reference is j:IncidentPrintsRequestedIndicator</value>

        [DataMember(Name="isIncidentPrintsRequested")]
        public List<NiemXsboolean> IsIncidentPrintsRequested { get; set; }

        /// <summary>
        /// A set of information about what happened to a property item after an incident. NIEM reference is j:IncidentItemDisposition
        /// </summary>
        /// <value>A set of information about what happened to a property item after an incident. NIEM reference is j:IncidentItemDisposition</value>

        [DataMember(Name="incidentItemDisposition")]
        public List<NcItemDispositionType> IncidentItemDisposition { get; set; }

        /// <summary>
        /// A property item that was found or recovered in an incident. NIEM reference is j:IncidentRecoveredItem
        /// </summary>
        /// <value>A property item that was found or recovered in an incident. NIEM reference is j:IncidentRecoveredItem</value>

        [DataMember(Name="incidentRecoveredItem")]
        public List<NcItemType> IncidentRecoveredItem { get; set; }

        /// <summary>
        /// A number of motor vehicle recovered from an incident. NIEM reference is j:IncidentRecoveredVehicleQuantity
        /// </summary>
        /// <value>A number of motor vehicle recovered from an incident. NIEM reference is j:IncidentRecoveredVehicleQuantity</value>

        [DataMember(Name="incidentRecoveredVehicleQuantity")]
        public List<NcQuantityType> IncidentRecoveredVehicleQuantity { get; set; }

        /// <summary>
        /// A peace official that submitted an incident report in an incident. NIEM reference is j:IncidentReportingOfficial
        /// </summary>
        /// <value>A peace official that submitted an incident report in an incident. NIEM reference is j:IncidentReportingOfficial</value>

        [DataMember(Name="incidentReportingOfficial")]
        public List<JEnforcementOfficialType> IncidentReportingOfficial { get; set; }

        /// <summary>
        /// A peace official that responded to an incident. NIEM reference is j:IncidentResponseOfficial
        /// </summary>
        /// <value>A peace official that responded to an incident. NIEM reference is j:IncidentResponseOfficial</value>

        [DataMember(Name="incidentResponseOfficial")]
        public List<JEnforcementOfficialType> IncidentResponseOfficial { get; set; }

        /// <summary>
        /// An organization or agency that responded to an incident. NIEM reference is j:IncidentResponseOrganization
        /// </summary>
        /// <value>An organization or agency that responded to an incident. NIEM reference is j:IncidentResponseOrganization</value>

        [DataMember(Name="incidentResponseOrganization")]
        public List<NcOrganizationType> IncidentResponseOrganization { get; set; }

        /// <summary>
        /// A property item that was removed by an official in an incident. NIEM reference is j:IncidentSeizedItem
        /// </summary>
        /// <value>A property item that was removed by an official in an incident. NIEM reference is j:IncidentSeizedItem</value>

        [DataMember(Name="incidentSeizedItem")]
        public List<NcItemType> IncidentSeizedItem { get; set; }

        /// <summary>
        /// An identifier issued by an organization to track calls for service or an observation by an organization employee. NIEM reference is j:IncidentServiceCall
        /// </summary>
        /// <value>An identifier issued by an organization to track calls for service or an observation by an organization employee. NIEM reference is j:IncidentServiceCall</value>

        [DataMember(Name="incidentServiceCall")]
        public List<JServiceCallType> IncidentServiceCall { get; set; }

        /// <summary>
        /// An item or location from which something was stolen. NIEM reference is j:IncidentSourceText
        /// </summary>
        /// <value>An item or location from which something was stolen. NIEM reference is j:IncidentSourceText</value>

        [DataMember(Name="incidentSource")]
        public List<NcTextType> IncidentSource { get; set; }

        /// <summary>
        /// A property item that was stolen in an incident. NIEM reference is j:IncidentStolenItem
        /// </summary>
        /// <value>A property item that was stolen in an incident. NIEM reference is j:IncidentStolenItem</value>

        [DataMember(Name="incidentStolenItem")]
        public List<NcItemType> IncidentStolenItem { get; set; }

        /// <summary>
        /// A number of motor vehicles stolen in an incident. NIEM reference is j:IncidentStolenVehicleQuantity
        /// </summary>
        /// <value>A number of motor vehicles stolen in an incident. NIEM reference is j:IncidentStolenVehicleQuantity</value>

        [DataMember(Name="incidentStolenVehicleQuantity")]
        public List<NcQuantityType> IncidentStolenVehicleQuantity { get; set; }

        /// <summary>
        /// A person whose actions caused an incident. NIEM reference is j:IncidentSubject
        /// </summary>
        /// <value>A person whose actions caused an incident. NIEM reference is j:IncidentSubject</value>

        [DataMember(Name="incidentSubject")]
        public List<JSubjectType> IncidentSubject { get; set; }

        /// <summary>
        /// An organization (possibly a criminal organization) whose actions caused an incident. NIEM reference is j:IncidentSubjectOrganization
        /// </summary>
        /// <value>An organization (possibly a criminal organization) whose actions caused an incident. NIEM reference is j:IncidentSubjectOrganization</value>

        [DataMember(Name="incidentSubjectOrganization")]
        public List<NcOrganizationType> IncidentSubjectOrganization { get; set; }

        /// <summary>
        /// A weapon used or possessed by a subject in an incident. NIEM reference is j:IncidentSubjectWeapon
        /// </summary>
        /// <value>A weapon used or possessed by a subject in an incident. NIEM reference is j:IncidentSubjectWeapon</value>

        [DataMember(Name="incidentSubjectWeapon")]
        public List<NcWeaponType> IncidentSubjectWeapon { get; set; }

        /// <summary>
        /// An enforcement supervisor responsible for, or present at, an incident. NIEM reference is j:IncidentSupervisingOfficial
        /// </summary>
        /// <value>An enforcement supervisor responsible for, or present at, an incident. NIEM reference is j:IncidentSupervisingOfficial</value>

        [DataMember(Name="incidentSupervisingOfficial")]
        public List<JEnforcementOfficialType> IncidentSupervisingOfficial { get; set; }

        /// <summary>
        /// An area surrounding a location where an incident occurred. NIEM reference is j:IncidentSurroundingLocation
        /// </summary>
        /// <value>An area surrounding a location where an incident occurred. NIEM reference is j:IncidentSurroundingLocation</value>

        [DataMember(Name="incidentSurroundingLocation")]
        public List<NcLocationType> IncidentSurroundingLocation { get; set; }

        /// <summary>
        /// An entity that was an intended recipient of a subject&#x27;s actions involved in an incident. NIEM reference is j:IncidentTarget
        /// </summary>
        /// <value>An entity that was an intended recipient of a subject&#x27;s actions involved in an incident. NIEM reference is j:IncidentTarget</value>

        [DataMember(Name="incidentTarget")]
        public List<JTargetType> IncidentTarget { get; set; }

        /// <summary>
        /// True if an incident involved a traffic accident; false otherwise. NIEM reference is j:IncidentTrafficAccidentInvolvedIndicator
        /// </summary>
        /// <value>True if an incident involved a traffic accident; false otherwise. NIEM reference is j:IncidentTrafficAccidentInvolvedIndicator</value>

        [DataMember(Name="isIncidentTrafficAccidentInvolved")]
        public List<NiemXsboolean> IsIncidentTrafficAccidentInvolved { get; set; }

        /// <summary>
        /// A dissemination level of an incident. NIEM reference is j:IncidentDisseminationLevelCode
        /// </summary>
        /// <value>A dissemination level of an incident. NIEM reference is j:IncidentDisseminationLevelCode</value>

        [DataMember(Name="incidentDisseminationLevelCode")]
        public List<JIncidentLevelDisseminationCodeType> IncidentDisseminationLevelCode { get; set; }

        /// <summary>
        /// A dissemination level of an incident. NIEM reference is j:IncidentDisseminationLevelText
        /// </summary>
        /// <value>A dissemination level of an incident. NIEM reference is j:IncidentDisseminationLevelText</value>

        [DataMember(Name="incidentDisseminationLevel")]
        public List<NcTextType> IncidentDisseminationLevel { get; set; }

        /// <summary>
        /// A person that was negatively affected in an incident. NIEM reference is j:IncidentVictim
        /// </summary>
        /// <value>A person that was negatively affected in an incident. NIEM reference is j:IncidentVictim</value>

        [DataMember(Name="incidentVictim")]
        public List<JVictimType> IncidentVictim { get; set; }

        /// <summary>
        /// True if a weapon was used in an incident; false otherwise. NIEM reference is j:IncidentWeaponInvolvedIndicator
        /// </summary>
        /// <value>True if a weapon was used in an incident; false otherwise. NIEM reference is j:IncidentWeaponInvolvedIndicator</value>

        [DataMember(Name="isIncidentWeaponInvolved")]
        public List<NiemXsboolean> IsIncidentWeaponInvolved { get; set; }

        /// <summary>
        /// A person who observed or has knowledge of an incident. NIEM reference is j:IncidentWitness
        /// </summary>
        /// <value>A person who observed or has knowledge of an incident. NIEM reference is j:IncidentWitness</value>

        [DataMember(Name="incidentWitness")]
        public List<JWitnessType> IncidentWitness { get; set; }

        /// <summary>
        /// A point of entry to a location or structure used in an incident. NIEM reference is j:IncidentEntryPoint
        /// </summary>
        /// <value>A point of entry to a location or structure used in an incident. NIEM reference is j:IncidentEntryPoint</value>

        [DataMember(Name="incidentEntryPoint")]
        public List<JPassagePointType> IncidentEntryPoint { get; set; }

        /// <summary>
        /// A point of exit to a location or structure used in an incident. NIEM reference is j:IncidentExitPoint
        /// </summary>
        /// <value>A point of exit to a location or structure used in an incident. NIEM reference is j:IncidentExitPoint</value>

        [DataMember(Name="incidentExitPoint")]
        public List<JPassagePointType> IncidentExitPoint { get; set; }

        /// <summary>
        /// A factor involved that has an effect on an incident. NIEM reference is j:IncidentFactor
        /// </summary>
        /// <value>A factor involved that has an effect on an incident. NIEM reference is j:IncidentFactor</value>

        [DataMember(Name="incidentFactor")]
        public List<JIncidentFactorType> IncidentFactor { get; set; }

        /// <summary>
        /// A force used in an incident, whether physical or aided by a tool or weapon. NIEM reference is j:IncidentForce
        /// </summary>
        /// <value>A force used in an incident, whether physical or aided by a tool or weapon. NIEM reference is j:IncidentForce</value>

        [DataMember(Name="incidentForce")]
        public List<JForceType> IncidentForce { get; set; }

        /// <summary>
        /// A level of an incident. NIEM reference is j:IncidentLevelCode
        /// </summary>
        /// <value>A level of an incident. NIEM reference is j:IncidentLevelCode</value>

        [DataMember(Name="incidentLevelCode")]
        public List<NcOffenseLevelCodeType> IncidentLevelCode { get; set; }

        /// <summary>
        /// A level of an incident. NIEM reference is j:IncidentLevelText
        /// </summary>
        /// <value>A level of an incident. NIEM reference is j:IncidentLevelText</value>

        [DataMember(Name="incidentLevel")]
        public List<NcTextType> IncidentLevel { get; set; }

        /// <summary>
        /// A number of structures or premises entered by the subject during an incident. NIEM reference is j:IncidentStructuresEnteredQuantity
        /// </summary>
        /// <value>A number of structures or premises entered by the subject during an incident. NIEM reference is j:IncidentStructuresEnteredQuantity</value>

        [DataMember(Name="incidentStructuresEnteredQuantity")]
        public List<NcQuantityType> IncidentStructuresEnteredQuantity { get; set; }

        /// <summary>
        /// jIncidentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jIncidentAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjIncidentAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jIncidentAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jIncidentAugmentationTypeContext.jsonld")]
            JSONLDContextsjIncidentAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jIncidentAugmentationType JSON-LD context
        /// </summary>
        /// <value>jIncidentAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JIncidentAugmentationType {\n");
            sb.Append("  IncidentLogIdentification: ").Append(IncidentLogIdentification).Append("\n");
            sb.Append("  IsIncidentEvidenceHeld: ").Append(IsIncidentEvidenceHeld).Append("\n");
            sb.Append("  IsIncidentCrisisResponseTeamActivated: ").Append(IsIncidentCrisisResponseTeamActivated).Append("\n");
            sb.Append("  IsIncidentCrisisOver: ").Append(IsIncidentCrisisOver).Append("\n");
            sb.Append("  IsIncidentEmergencyServiceRequired: ").Append(IsIncidentEmergencyServiceRequired).Append("\n");
            sb.Append("  IncidentIssues: ").Append(IncidentIssues).Append("\n");
            sb.Append("  IsIncidentLawEnforcementSummoned: ").Append(IsIncidentLawEnforcementSummoned).Append("\n");
            sb.Append("  IncidentArrest: ").Append(IncidentArrest).Append("\n");
            sb.Append("  IncidentReviewPanel: ").Append(IncidentReviewPanel).Append("\n");
            sb.Append("  IncidentParticipant: ").Append(IncidentParticipant).Append("\n");
            sb.Append("  IncidentFacility: ").Append(IncidentFacility).Append("\n");
            sb.Append("  IncidentStaffMember: ").Append(IncidentStaffMember).Append("\n");
            sb.Append("  IncidentDrug: ").Append(IncidentDrug).Append("\n");
            sb.Append("  IncidentWeatherMmuccCode: ").Append(IncidentWeatherMmuccCode).Append("\n");
            sb.Append("  IncidentWeather: ").Append(IncidentWeather).Append("\n");
            sb.Append("  IncidentAppliedForce: ").Append(IncidentAppliedForce).Append("\n");
            sb.Append("  IncidentLighting: ").Append(IncidentLighting).Append("\n");
            sb.Append("  IsAmberAlertIssued: ").Append(IsAmberAlertIssued).Append("\n");
            sb.Append("  IncidentArrestCountQuantity: ").Append(IncidentArrestCountQuantity).Append("\n");
            sb.Append("  IsIncidentArrestMade: ").Append(IsIncidentArrestMade).Append("\n");
            sb.Append("  IncidentAssistingOfficial: ").Append(IncidentAssistingOfficial).Append("\n");
            sb.Append("  IncidentCategoryCode: ").Append(IncidentCategoryCode).Append("\n");
            sb.Append("  IncidentCategoryUcrCode: ").Append(IncidentCategoryUcrCode).Append("\n");
            sb.Append("  IncidentGeneralCategory: ").Append(IncidentGeneralCategory).Append("\n");
            sb.Append("  IsIncidentCriminal: ").Append(IsIncidentCriminal).Append("\n");
            sb.Append("  IncidentDamagedItem: ").Append(IncidentDamagedItem).Append("\n");
            sb.Append("  IncidentEvidence: ").Append(IncidentEvidence).Append("\n");
            sb.Append("  IncidentExceptionalClearanceCode: ").Append(IncidentExceptionalClearanceCode).Append("\n");
            sb.Append("  IncidentExceptionalClearance: ").Append(IncidentExceptionalClearance).Append("\n");
            sb.Append("  IncidentExceptionalClearanceDate: ").Append(IncidentExceptionalClearanceDate).Append("\n");
            sb.Append("  IsIncidentForceInvolved: ").Append(IsIncidentForceInvolved).Append("\n");
            sb.Append("  IncidentForm: ").Append(IncidentForm).Append("\n");
            sb.Append("  IncidentInjuryLevel: ").Append(IncidentInjuryLevel).Append("\n");
            sb.Append("  IncidentInvolvedItem: ").Append(IncidentInvolvedItem).Append("\n");
            sb.Append("  IncidentInvolvedStructure: ").Append(IncidentInvolvedStructure).Append("\n");
            sb.Append("  IncidentMethodDescription: ").Append(IncidentMethodDescription).Append("\n");
            sb.Append("  IsIncidentMinorInvolved: ").Append(IsIncidentMinorInvolved).Append("\n");
            sb.Append("  IncidentMissingPersonFound: ").Append(IncidentMissingPersonFound).Append("\n");
            sb.Append("  IncidentNonPropertyItem: ").Append(IncidentNonPropertyItem).Append("\n");
            sb.Append("  IsIncidentOfficialPresent: ").Append(IsIncidentOfficialPresent).Append("\n");
            sb.Append("  IsIncidentPrintsRequested: ").Append(IsIncidentPrintsRequested).Append("\n");
            sb.Append("  IncidentItemDisposition: ").Append(IncidentItemDisposition).Append("\n");
            sb.Append("  IncidentRecoveredItem: ").Append(IncidentRecoveredItem).Append("\n");
            sb.Append("  IncidentRecoveredVehicleQuantity: ").Append(IncidentRecoveredVehicleQuantity).Append("\n");
            sb.Append("  IncidentReportingOfficial: ").Append(IncidentReportingOfficial).Append("\n");
            sb.Append("  IncidentResponseOfficial: ").Append(IncidentResponseOfficial).Append("\n");
            sb.Append("  IncidentResponseOrganization: ").Append(IncidentResponseOrganization).Append("\n");
            sb.Append("  IncidentSeizedItem: ").Append(IncidentSeizedItem).Append("\n");
            sb.Append("  IncidentServiceCall: ").Append(IncidentServiceCall).Append("\n");
            sb.Append("  IncidentSource: ").Append(IncidentSource).Append("\n");
            sb.Append("  IncidentStolenItem: ").Append(IncidentStolenItem).Append("\n");
            sb.Append("  IncidentStolenVehicleQuantity: ").Append(IncidentStolenVehicleQuantity).Append("\n");
            sb.Append("  IncidentSubject: ").Append(IncidentSubject).Append("\n");
            sb.Append("  IncidentSubjectOrganization: ").Append(IncidentSubjectOrganization).Append("\n");
            sb.Append("  IncidentSubjectWeapon: ").Append(IncidentSubjectWeapon).Append("\n");
            sb.Append("  IncidentSupervisingOfficial: ").Append(IncidentSupervisingOfficial).Append("\n");
            sb.Append("  IncidentSurroundingLocation: ").Append(IncidentSurroundingLocation).Append("\n");
            sb.Append("  IncidentTarget: ").Append(IncidentTarget).Append("\n");
            sb.Append("  IsIncidentTrafficAccidentInvolved: ").Append(IsIncidentTrafficAccidentInvolved).Append("\n");
            sb.Append("  IncidentDisseminationLevelCode: ").Append(IncidentDisseminationLevelCode).Append("\n");
            sb.Append("  IncidentDisseminationLevel: ").Append(IncidentDisseminationLevel).Append("\n");
            sb.Append("  IncidentVictim: ").Append(IncidentVictim).Append("\n");
            sb.Append("  IsIncidentWeaponInvolved: ").Append(IsIncidentWeaponInvolved).Append("\n");
            sb.Append("  IncidentWitness: ").Append(IncidentWitness).Append("\n");
            sb.Append("  IncidentEntryPoint: ").Append(IncidentEntryPoint).Append("\n");
            sb.Append("  IncidentExitPoint: ").Append(IncidentExitPoint).Append("\n");
            sb.Append("  IncidentFactor: ").Append(IncidentFactor).Append("\n");
            sb.Append("  IncidentForce: ").Append(IncidentForce).Append("\n");
            sb.Append("  IncidentLevelCode: ").Append(IncidentLevelCode).Append("\n");
            sb.Append("  IncidentLevel: ").Append(IncidentLevel).Append("\n");
            sb.Append("  IncidentStructuresEnteredQuantity: ").Append(IncidentStructuresEnteredQuantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JIncidentAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JIncidentAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JIncidentAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JIncidentAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IncidentLogIdentification == other.IncidentLogIdentification ||
                    IncidentLogIdentification != null &&
                    IncidentLogIdentification.SequenceEqual(other.IncidentLogIdentification)
                ) && 
                (
                    IsIncidentEvidenceHeld == other.IsIncidentEvidenceHeld ||
                    IsIncidentEvidenceHeld != null &&
                    IsIncidentEvidenceHeld.SequenceEqual(other.IsIncidentEvidenceHeld)
                ) && 
                (
                    IsIncidentCrisisResponseTeamActivated == other.IsIncidentCrisisResponseTeamActivated ||
                    IsIncidentCrisisResponseTeamActivated != null &&
                    IsIncidentCrisisResponseTeamActivated.SequenceEqual(other.IsIncidentCrisisResponseTeamActivated)
                ) && 
                (
                    IsIncidentCrisisOver == other.IsIncidentCrisisOver ||
                    IsIncidentCrisisOver != null &&
                    IsIncidentCrisisOver.SequenceEqual(other.IsIncidentCrisisOver)
                ) && 
                (
                    IsIncidentEmergencyServiceRequired == other.IsIncidentEmergencyServiceRequired ||
                    IsIncidentEmergencyServiceRequired != null &&
                    IsIncidentEmergencyServiceRequired.SequenceEqual(other.IsIncidentEmergencyServiceRequired)
                ) && 
                (
                    IncidentIssues == other.IncidentIssues ||
                    IncidentIssues != null &&
                    IncidentIssues.SequenceEqual(other.IncidentIssues)
                ) && 
                (
                    IsIncidentLawEnforcementSummoned == other.IsIncidentLawEnforcementSummoned ||
                    IsIncidentLawEnforcementSummoned != null &&
                    IsIncidentLawEnforcementSummoned.SequenceEqual(other.IsIncidentLawEnforcementSummoned)
                ) && 
                (
                    IncidentArrest == other.IncidentArrest ||
                    IncidentArrest != null &&
                    IncidentArrest.SequenceEqual(other.IncidentArrest)
                ) && 
                (
                    IncidentReviewPanel == other.IncidentReviewPanel ||
                    IncidentReviewPanel != null &&
                    IncidentReviewPanel.SequenceEqual(other.IncidentReviewPanel)
                ) && 
                (
                    IncidentParticipant == other.IncidentParticipant ||
                    IncidentParticipant != null &&
                    IncidentParticipant.SequenceEqual(other.IncidentParticipant)
                ) && 
                (
                    IncidentFacility == other.IncidentFacility ||
                    IncidentFacility != null &&
                    IncidentFacility.SequenceEqual(other.IncidentFacility)
                ) && 
                (
                    IncidentStaffMember == other.IncidentStaffMember ||
                    IncidentStaffMember != null &&
                    IncidentStaffMember.SequenceEqual(other.IncidentStaffMember)
                ) && 
                (
                    IncidentDrug == other.IncidentDrug ||
                    IncidentDrug != null &&
                    IncidentDrug.SequenceEqual(other.IncidentDrug)
                ) && 
                (
                    IncidentWeatherMmuccCode == other.IncidentWeatherMmuccCode ||
                    IncidentWeatherMmuccCode != null &&
                    IncidentWeatherMmuccCode.SequenceEqual(other.IncidentWeatherMmuccCode)
                ) && 
                (
                    IncidentWeather == other.IncidentWeather ||
                    IncidentWeather != null &&
                    IncidentWeather.SequenceEqual(other.IncidentWeather)
                ) && 
                (
                    IncidentAppliedForce == other.IncidentAppliedForce ||
                    IncidentAppliedForce != null &&
                    IncidentAppliedForce.SequenceEqual(other.IncidentAppliedForce)
                ) && 
                (
                    IncidentLighting == other.IncidentLighting ||
                    IncidentLighting != null &&
                    IncidentLighting.SequenceEqual(other.IncidentLighting)
                ) && 
                (
                    IsAmberAlertIssued == other.IsAmberAlertIssued ||
                    IsAmberAlertIssued != null &&
                    IsAmberAlertIssued.SequenceEqual(other.IsAmberAlertIssued)
                ) && 
                (
                    IncidentArrestCountQuantity == other.IncidentArrestCountQuantity ||
                    IncidentArrestCountQuantity != null &&
                    IncidentArrestCountQuantity.SequenceEqual(other.IncidentArrestCountQuantity)
                ) && 
                (
                    IsIncidentArrestMade == other.IsIncidentArrestMade ||
                    IsIncidentArrestMade != null &&
                    IsIncidentArrestMade.SequenceEqual(other.IsIncidentArrestMade)
                ) && 
                (
                    IncidentAssistingOfficial == other.IncidentAssistingOfficial ||
                    IncidentAssistingOfficial != null &&
                    IncidentAssistingOfficial.SequenceEqual(other.IncidentAssistingOfficial)
                ) && 
                (
                    IncidentCategoryCode == other.IncidentCategoryCode ||
                    IncidentCategoryCode != null &&
                    IncidentCategoryCode.SequenceEqual(other.IncidentCategoryCode)
                ) && 
                (
                    IncidentCategoryUcrCode == other.IncidentCategoryUcrCode ||
                    IncidentCategoryUcrCode != null &&
                    IncidentCategoryUcrCode.SequenceEqual(other.IncidentCategoryUcrCode)
                ) && 
                (
                    IncidentGeneralCategory == other.IncidentGeneralCategory ||
                    IncidentGeneralCategory != null &&
                    IncidentGeneralCategory.SequenceEqual(other.IncidentGeneralCategory)
                ) && 
                (
                    IsIncidentCriminal == other.IsIncidentCriminal ||
                    IsIncidentCriminal != null &&
                    IsIncidentCriminal.SequenceEqual(other.IsIncidentCriminal)
                ) && 
                (
                    IncidentDamagedItem == other.IncidentDamagedItem ||
                    IncidentDamagedItem != null &&
                    IncidentDamagedItem.SequenceEqual(other.IncidentDamagedItem)
                ) && 
                (
                    IncidentEvidence == other.IncidentEvidence ||
                    IncidentEvidence != null &&
                    IncidentEvidence.SequenceEqual(other.IncidentEvidence)
                ) && 
                (
                    IncidentExceptionalClearanceCode == other.IncidentExceptionalClearanceCode ||
                    IncidentExceptionalClearanceCode != null &&
                    IncidentExceptionalClearanceCode.SequenceEqual(other.IncidentExceptionalClearanceCode)
                ) && 
                (
                    IncidentExceptionalClearance == other.IncidentExceptionalClearance ||
                    IncidentExceptionalClearance != null &&
                    IncidentExceptionalClearance.SequenceEqual(other.IncidentExceptionalClearance)
                ) && 
                (
                    IncidentExceptionalClearanceDate == other.IncidentExceptionalClearanceDate ||
                    IncidentExceptionalClearanceDate != null &&
                    IncidentExceptionalClearanceDate.SequenceEqual(other.IncidentExceptionalClearanceDate)
                ) && 
                (
                    IsIncidentForceInvolved == other.IsIncidentForceInvolved ||
                    IsIncidentForceInvolved != null &&
                    IsIncidentForceInvolved.SequenceEqual(other.IsIncidentForceInvolved)
                ) && 
                (
                    IncidentForm == other.IncidentForm ||
                    IncidentForm != null &&
                    IncidentForm.SequenceEqual(other.IncidentForm)
                ) && 
                (
                    IncidentInjuryLevel == other.IncidentInjuryLevel ||
                    IncidentInjuryLevel != null &&
                    IncidentInjuryLevel.SequenceEqual(other.IncidentInjuryLevel)
                ) && 
                (
                    IncidentInvolvedItem == other.IncidentInvolvedItem ||
                    IncidentInvolvedItem != null &&
                    IncidentInvolvedItem.SequenceEqual(other.IncidentInvolvedItem)
                ) && 
                (
                    IncidentInvolvedStructure == other.IncidentInvolvedStructure ||
                    IncidentInvolvedStructure != null &&
                    IncidentInvolvedStructure.SequenceEqual(other.IncidentInvolvedStructure)
                ) && 
                (
                    IncidentMethodDescription == other.IncidentMethodDescription ||
                    IncidentMethodDescription != null &&
                    IncidentMethodDescription.SequenceEqual(other.IncidentMethodDescription)
                ) && 
                (
                    IsIncidentMinorInvolved == other.IsIncidentMinorInvolved ||
                    IsIncidentMinorInvolved != null &&
                    IsIncidentMinorInvolved.SequenceEqual(other.IsIncidentMinorInvolved)
                ) && 
                (
                    IncidentMissingPersonFound == other.IncidentMissingPersonFound ||
                    IncidentMissingPersonFound != null &&
                    IncidentMissingPersonFound.SequenceEqual(other.IncidentMissingPersonFound)
                ) && 
                (
                    IncidentNonPropertyItem == other.IncidentNonPropertyItem ||
                    IncidentNonPropertyItem != null &&
                    IncidentNonPropertyItem.SequenceEqual(other.IncidentNonPropertyItem)
                ) && 
                (
                    IsIncidentOfficialPresent == other.IsIncidentOfficialPresent ||
                    IsIncidentOfficialPresent != null &&
                    IsIncidentOfficialPresent.SequenceEqual(other.IsIncidentOfficialPresent)
                ) && 
                (
                    IsIncidentPrintsRequested == other.IsIncidentPrintsRequested ||
                    IsIncidentPrintsRequested != null &&
                    IsIncidentPrintsRequested.SequenceEqual(other.IsIncidentPrintsRequested)
                ) && 
                (
                    IncidentItemDisposition == other.IncidentItemDisposition ||
                    IncidentItemDisposition != null &&
                    IncidentItemDisposition.SequenceEqual(other.IncidentItemDisposition)
                ) && 
                (
                    IncidentRecoveredItem == other.IncidentRecoveredItem ||
                    IncidentRecoveredItem != null &&
                    IncidentRecoveredItem.SequenceEqual(other.IncidentRecoveredItem)
                ) && 
                (
                    IncidentRecoveredVehicleQuantity == other.IncidentRecoveredVehicleQuantity ||
                    IncidentRecoveredVehicleQuantity != null &&
                    IncidentRecoveredVehicleQuantity.SequenceEqual(other.IncidentRecoveredVehicleQuantity)
                ) && 
                (
                    IncidentReportingOfficial == other.IncidentReportingOfficial ||
                    IncidentReportingOfficial != null &&
                    IncidentReportingOfficial.SequenceEqual(other.IncidentReportingOfficial)
                ) && 
                (
                    IncidentResponseOfficial == other.IncidentResponseOfficial ||
                    IncidentResponseOfficial != null &&
                    IncidentResponseOfficial.SequenceEqual(other.IncidentResponseOfficial)
                ) && 
                (
                    IncidentResponseOrganization == other.IncidentResponseOrganization ||
                    IncidentResponseOrganization != null &&
                    IncidentResponseOrganization.SequenceEqual(other.IncidentResponseOrganization)
                ) && 
                (
                    IncidentSeizedItem == other.IncidentSeizedItem ||
                    IncidentSeizedItem != null &&
                    IncidentSeizedItem.SequenceEqual(other.IncidentSeizedItem)
                ) && 
                (
                    IncidentServiceCall == other.IncidentServiceCall ||
                    IncidentServiceCall != null &&
                    IncidentServiceCall.SequenceEqual(other.IncidentServiceCall)
                ) && 
                (
                    IncidentSource == other.IncidentSource ||
                    IncidentSource != null &&
                    IncidentSource.SequenceEqual(other.IncidentSource)
                ) && 
                (
                    IncidentStolenItem == other.IncidentStolenItem ||
                    IncidentStolenItem != null &&
                    IncidentStolenItem.SequenceEqual(other.IncidentStolenItem)
                ) && 
                (
                    IncidentStolenVehicleQuantity == other.IncidentStolenVehicleQuantity ||
                    IncidentStolenVehicleQuantity != null &&
                    IncidentStolenVehicleQuantity.SequenceEqual(other.IncidentStolenVehicleQuantity)
                ) && 
                (
                    IncidentSubject == other.IncidentSubject ||
                    IncidentSubject != null &&
                    IncidentSubject.SequenceEqual(other.IncidentSubject)
                ) && 
                (
                    IncidentSubjectOrganization == other.IncidentSubjectOrganization ||
                    IncidentSubjectOrganization != null &&
                    IncidentSubjectOrganization.SequenceEqual(other.IncidentSubjectOrganization)
                ) && 
                (
                    IncidentSubjectWeapon == other.IncidentSubjectWeapon ||
                    IncidentSubjectWeapon != null &&
                    IncidentSubjectWeapon.SequenceEqual(other.IncidentSubjectWeapon)
                ) && 
                (
                    IncidentSupervisingOfficial == other.IncidentSupervisingOfficial ||
                    IncidentSupervisingOfficial != null &&
                    IncidentSupervisingOfficial.SequenceEqual(other.IncidentSupervisingOfficial)
                ) && 
                (
                    IncidentSurroundingLocation == other.IncidentSurroundingLocation ||
                    IncidentSurroundingLocation != null &&
                    IncidentSurroundingLocation.SequenceEqual(other.IncidentSurroundingLocation)
                ) && 
                (
                    IncidentTarget == other.IncidentTarget ||
                    IncidentTarget != null &&
                    IncidentTarget.SequenceEqual(other.IncidentTarget)
                ) && 
                (
                    IsIncidentTrafficAccidentInvolved == other.IsIncidentTrafficAccidentInvolved ||
                    IsIncidentTrafficAccidentInvolved != null &&
                    IsIncidentTrafficAccidentInvolved.SequenceEqual(other.IsIncidentTrafficAccidentInvolved)
                ) && 
                (
                    IncidentDisseminationLevelCode == other.IncidentDisseminationLevelCode ||
                    IncidentDisseminationLevelCode != null &&
                    IncidentDisseminationLevelCode.SequenceEqual(other.IncidentDisseminationLevelCode)
                ) && 
                (
                    IncidentDisseminationLevel == other.IncidentDisseminationLevel ||
                    IncidentDisseminationLevel != null &&
                    IncidentDisseminationLevel.SequenceEqual(other.IncidentDisseminationLevel)
                ) && 
                (
                    IncidentVictim == other.IncidentVictim ||
                    IncidentVictim != null &&
                    IncidentVictim.SequenceEqual(other.IncidentVictim)
                ) && 
                (
                    IsIncidentWeaponInvolved == other.IsIncidentWeaponInvolved ||
                    IsIncidentWeaponInvolved != null &&
                    IsIncidentWeaponInvolved.SequenceEqual(other.IsIncidentWeaponInvolved)
                ) && 
                (
                    IncidentWitness == other.IncidentWitness ||
                    IncidentWitness != null &&
                    IncidentWitness.SequenceEqual(other.IncidentWitness)
                ) && 
                (
                    IncidentEntryPoint == other.IncidentEntryPoint ||
                    IncidentEntryPoint != null &&
                    IncidentEntryPoint.SequenceEqual(other.IncidentEntryPoint)
                ) && 
                (
                    IncidentExitPoint == other.IncidentExitPoint ||
                    IncidentExitPoint != null &&
                    IncidentExitPoint.SequenceEqual(other.IncidentExitPoint)
                ) && 
                (
                    IncidentFactor == other.IncidentFactor ||
                    IncidentFactor != null &&
                    IncidentFactor.SequenceEqual(other.IncidentFactor)
                ) && 
                (
                    IncidentForce == other.IncidentForce ||
                    IncidentForce != null &&
                    IncidentForce.SequenceEqual(other.IncidentForce)
                ) && 
                (
                    IncidentLevelCode == other.IncidentLevelCode ||
                    IncidentLevelCode != null &&
                    IncidentLevelCode.SequenceEqual(other.IncidentLevelCode)
                ) && 
                (
                    IncidentLevel == other.IncidentLevel ||
                    IncidentLevel != null &&
                    IncidentLevel.SequenceEqual(other.IncidentLevel)
                ) && 
                (
                    IncidentStructuresEnteredQuantity == other.IncidentStructuresEnteredQuantity ||
                    IncidentStructuresEnteredQuantity != null &&
                    IncidentStructuresEnteredQuantity.SequenceEqual(other.IncidentStructuresEnteredQuantity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IncidentLogIdentification != null)
                    hashCode = hashCode * 59 + IncidentLogIdentification.GetHashCode();
                    if (IsIncidentEvidenceHeld != null)
                    hashCode = hashCode * 59 + IsIncidentEvidenceHeld.GetHashCode();
                    if (IsIncidentCrisisResponseTeamActivated != null)
                    hashCode = hashCode * 59 + IsIncidentCrisisResponseTeamActivated.GetHashCode();
                    if (IsIncidentCrisisOver != null)
                    hashCode = hashCode * 59 + IsIncidentCrisisOver.GetHashCode();
                    if (IsIncidentEmergencyServiceRequired != null)
                    hashCode = hashCode * 59 + IsIncidentEmergencyServiceRequired.GetHashCode();
                    if (IncidentIssues != null)
                    hashCode = hashCode * 59 + IncidentIssues.GetHashCode();
                    if (IsIncidentLawEnforcementSummoned != null)
                    hashCode = hashCode * 59 + IsIncidentLawEnforcementSummoned.GetHashCode();
                    if (IncidentArrest != null)
                    hashCode = hashCode * 59 + IncidentArrest.GetHashCode();
                    if (IncidentReviewPanel != null)
                    hashCode = hashCode * 59 + IncidentReviewPanel.GetHashCode();
                    if (IncidentParticipant != null)
                    hashCode = hashCode * 59 + IncidentParticipant.GetHashCode();
                    if (IncidentFacility != null)
                    hashCode = hashCode * 59 + IncidentFacility.GetHashCode();
                    if (IncidentStaffMember != null)
                    hashCode = hashCode * 59 + IncidentStaffMember.GetHashCode();
                    if (IncidentDrug != null)
                    hashCode = hashCode * 59 + IncidentDrug.GetHashCode();
                    if (IncidentWeatherMmuccCode != null)
                    hashCode = hashCode * 59 + IncidentWeatherMmuccCode.GetHashCode();
                    if (IncidentWeather != null)
                    hashCode = hashCode * 59 + IncidentWeather.GetHashCode();
                    if (IncidentAppliedForce != null)
                    hashCode = hashCode * 59 + IncidentAppliedForce.GetHashCode();
                    if (IncidentLighting != null)
                    hashCode = hashCode * 59 + IncidentLighting.GetHashCode();
                    if (IsAmberAlertIssued != null)
                    hashCode = hashCode * 59 + IsAmberAlertIssued.GetHashCode();
                    if (IncidentArrestCountQuantity != null)
                    hashCode = hashCode * 59 + IncidentArrestCountQuantity.GetHashCode();
                    if (IsIncidentArrestMade != null)
                    hashCode = hashCode * 59 + IsIncidentArrestMade.GetHashCode();
                    if (IncidentAssistingOfficial != null)
                    hashCode = hashCode * 59 + IncidentAssistingOfficial.GetHashCode();
                    if (IncidentCategoryCode != null)
                    hashCode = hashCode * 59 + IncidentCategoryCode.GetHashCode();
                    if (IncidentCategoryUcrCode != null)
                    hashCode = hashCode * 59 + IncidentCategoryUcrCode.GetHashCode();
                    if (IncidentGeneralCategory != null)
                    hashCode = hashCode * 59 + IncidentGeneralCategory.GetHashCode();
                    if (IsIncidentCriminal != null)
                    hashCode = hashCode * 59 + IsIncidentCriminal.GetHashCode();
                    if (IncidentDamagedItem != null)
                    hashCode = hashCode * 59 + IncidentDamagedItem.GetHashCode();
                    if (IncidentEvidence != null)
                    hashCode = hashCode * 59 + IncidentEvidence.GetHashCode();
                    if (IncidentExceptionalClearanceCode != null)
                    hashCode = hashCode * 59 + IncidentExceptionalClearanceCode.GetHashCode();
                    if (IncidentExceptionalClearance != null)
                    hashCode = hashCode * 59 + IncidentExceptionalClearance.GetHashCode();
                    if (IncidentExceptionalClearanceDate != null)
                    hashCode = hashCode * 59 + IncidentExceptionalClearanceDate.GetHashCode();
                    if (IsIncidentForceInvolved != null)
                    hashCode = hashCode * 59 + IsIncidentForceInvolved.GetHashCode();
                    if (IncidentForm != null)
                    hashCode = hashCode * 59 + IncidentForm.GetHashCode();
                    if (IncidentInjuryLevel != null)
                    hashCode = hashCode * 59 + IncidentInjuryLevel.GetHashCode();
                    if (IncidentInvolvedItem != null)
                    hashCode = hashCode * 59 + IncidentInvolvedItem.GetHashCode();
                    if (IncidentInvolvedStructure != null)
                    hashCode = hashCode * 59 + IncidentInvolvedStructure.GetHashCode();
                    if (IncidentMethodDescription != null)
                    hashCode = hashCode * 59 + IncidentMethodDescription.GetHashCode();
                    if (IsIncidentMinorInvolved != null)
                    hashCode = hashCode * 59 + IsIncidentMinorInvolved.GetHashCode();
                    if (IncidentMissingPersonFound != null)
                    hashCode = hashCode * 59 + IncidentMissingPersonFound.GetHashCode();
                    if (IncidentNonPropertyItem != null)
                    hashCode = hashCode * 59 + IncidentNonPropertyItem.GetHashCode();
                    if (IsIncidentOfficialPresent != null)
                    hashCode = hashCode * 59 + IsIncidentOfficialPresent.GetHashCode();
                    if (IsIncidentPrintsRequested != null)
                    hashCode = hashCode * 59 + IsIncidentPrintsRequested.GetHashCode();
                    if (IncidentItemDisposition != null)
                    hashCode = hashCode * 59 + IncidentItemDisposition.GetHashCode();
                    if (IncidentRecoveredItem != null)
                    hashCode = hashCode * 59 + IncidentRecoveredItem.GetHashCode();
                    if (IncidentRecoveredVehicleQuantity != null)
                    hashCode = hashCode * 59 + IncidentRecoveredVehicleQuantity.GetHashCode();
                    if (IncidentReportingOfficial != null)
                    hashCode = hashCode * 59 + IncidentReportingOfficial.GetHashCode();
                    if (IncidentResponseOfficial != null)
                    hashCode = hashCode * 59 + IncidentResponseOfficial.GetHashCode();
                    if (IncidentResponseOrganization != null)
                    hashCode = hashCode * 59 + IncidentResponseOrganization.GetHashCode();
                    if (IncidentSeizedItem != null)
                    hashCode = hashCode * 59 + IncidentSeizedItem.GetHashCode();
                    if (IncidentServiceCall != null)
                    hashCode = hashCode * 59 + IncidentServiceCall.GetHashCode();
                    if (IncidentSource != null)
                    hashCode = hashCode * 59 + IncidentSource.GetHashCode();
                    if (IncidentStolenItem != null)
                    hashCode = hashCode * 59 + IncidentStolenItem.GetHashCode();
                    if (IncidentStolenVehicleQuantity != null)
                    hashCode = hashCode * 59 + IncidentStolenVehicleQuantity.GetHashCode();
                    if (IncidentSubject != null)
                    hashCode = hashCode * 59 + IncidentSubject.GetHashCode();
                    if (IncidentSubjectOrganization != null)
                    hashCode = hashCode * 59 + IncidentSubjectOrganization.GetHashCode();
                    if (IncidentSubjectWeapon != null)
                    hashCode = hashCode * 59 + IncidentSubjectWeapon.GetHashCode();
                    if (IncidentSupervisingOfficial != null)
                    hashCode = hashCode * 59 + IncidentSupervisingOfficial.GetHashCode();
                    if (IncidentSurroundingLocation != null)
                    hashCode = hashCode * 59 + IncidentSurroundingLocation.GetHashCode();
                    if (IncidentTarget != null)
                    hashCode = hashCode * 59 + IncidentTarget.GetHashCode();
                    if (IsIncidentTrafficAccidentInvolved != null)
                    hashCode = hashCode * 59 + IsIncidentTrafficAccidentInvolved.GetHashCode();
                    if (IncidentDisseminationLevelCode != null)
                    hashCode = hashCode * 59 + IncidentDisseminationLevelCode.GetHashCode();
                    if (IncidentDisseminationLevel != null)
                    hashCode = hashCode * 59 + IncidentDisseminationLevel.GetHashCode();
                    if (IncidentVictim != null)
                    hashCode = hashCode * 59 + IncidentVictim.GetHashCode();
                    if (IsIncidentWeaponInvolved != null)
                    hashCode = hashCode * 59 + IsIncidentWeaponInvolved.GetHashCode();
                    if (IncidentWitness != null)
                    hashCode = hashCode * 59 + IncidentWitness.GetHashCode();
                    if (IncidentEntryPoint != null)
                    hashCode = hashCode * 59 + IncidentEntryPoint.GetHashCode();
                    if (IncidentExitPoint != null)
                    hashCode = hashCode * 59 + IncidentExitPoint.GetHashCode();
                    if (IncidentFactor != null)
                    hashCode = hashCode * 59 + IncidentFactor.GetHashCode();
                    if (IncidentForce != null)
                    hashCode = hashCode * 59 + IncidentForce.GetHashCode();
                    if (IncidentLevelCode != null)
                    hashCode = hashCode * 59 + IncidentLevelCode.GetHashCode();
                    if (IncidentLevel != null)
                    hashCode = hashCode * 59 + IncidentLevel.GetHashCode();
                    if (IncidentStructuresEnteredQuantity != null)
                    hashCode = hashCode * 59 + IncidentStructuresEnteredQuantity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JIncidentAugmentationType left, JIncidentAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JIncidentAugmentationType left, JIncidentAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
