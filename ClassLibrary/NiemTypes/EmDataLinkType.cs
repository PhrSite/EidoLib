/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a structure that contains a data link
    /// </summary>
    [DataContract]
    public partial class EmDataLinkType : IEquatable<EmDataLinkType>
    { 
        /// <summary>
        /// A data element for the timestamp of an associated data link NIEM reference is em:DataLinkDateTime
        /// </summary>
        /// <value>A data element for the timestamp of an associated data link NIEM reference is em:DataLinkDateTime</value>

        [DataMember(Name="dateTime")]
        public List<NiemXsdateTime> DateTime { get; set; }

        /// <summary>
        /// A kind of data link, such as VIDEO, MAP, WEB, etc NIEM reference is em:DataLinkCategoryText
        /// </summary>
        /// <value>A kind of data link, such as VIDEO, MAP, WEB, etc NIEM reference is em:DataLinkCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A person who receives a call for service. NIEM reference is j:ServiceCallOperator
        /// </summary>
        /// <value>A person who receives a call for service. NIEM reference is j:ServiceCallOperator</value>

        [DataMember(Name="serviceCallOperator")]
        public List<NcPersonType> ServiceCallOperator { get; set; }

        /// <summary>
        /// A name of an organization. NIEM reference is nc:OrganizationName
        /// </summary>
        /// <value>A name of an organization. NIEM reference is nc:OrganizationName</value>

        [DataMember(Name="organizationName")]
        public List<NcTextType> OrganizationName { get; set; }

        /// <summary>
        /// An identification that references an organization. NIEM reference is nc:OrganizationIdentification
        /// </summary>
        /// <value>An identification that references an organization. NIEM reference is nc:OrganizationIdentification</value>

        [DataMember(Name="organizationIdentification")]
        public List<NcIdentificationType> OrganizationIdentification { get; set; }

        /// <summary>
        /// A number or string set by a data provider so that information that is sent can be retraced back to its source. NIEM reference is nc:SourceIDText
        /// </summary>
        /// <value>A number or string set by a data provider so that information that is sent can be retraced back to its source. NIEM reference is nc:SourceIDText</value>

        [DataMember(Name="sourceId")]
        public List<NcTextType> SourceId { get; set; }

        /// <summary>
        /// A kind of applicable restriction NIEM reference is em:RestrictionCategoryText
        /// </summary>
        /// <value>A kind of applicable restriction NIEM reference is em:RestrictionCategoryText</value>

        [DataMember(Name="restrictionCategory")]
        public List<NcTextType> RestrictionCategory { get; set; }

        /// <summary>
        /// An identifier representing a universal resource locator (URL). NIEM reference is nc:URLID
        /// </summary>
        /// <value>An identifier representing a universal resource locator (URL). NIEM reference is nc:URLID</value>

        [DataMember(Name="urlid")]
        public List<NiemXsanyURI> Urlid { get; set; }

        /// <summary>
        /// emDataLinkType JSON-LD context
        /// </summary>
        /// <value>emDataLinkType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemDataLinkTypeContextJsonldEnum for ../JSON-LD_Contexts/emDataLinkTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emDataLinkTypeContext.jsonld")]
            JSONLDContextsemDataLinkTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emDataLinkType JSON-LD context
        /// </summary>
        /// <value>emDataLinkType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmDataLinkType {\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ServiceCallOperator: ").Append(ServiceCallOperator).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationIdentification: ").Append(OrganizationIdentification).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  RestrictionCategory: ").Append(RestrictionCategory).Append("\n");
            sb.Append("  Urlid: ").Append(Urlid).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmDataLinkType)obj);
        }

        /// <summary>
        /// Returns true if EmDataLinkType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmDataLinkType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmDataLinkType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.SequenceEqual(other.DateTime)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    ServiceCallOperator == other.ServiceCallOperator ||
                    ServiceCallOperator != null &&
                    ServiceCallOperator.SequenceEqual(other.ServiceCallOperator)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.SequenceEqual(other.OrganizationName)
                ) && 
                (
                    OrganizationIdentification == other.OrganizationIdentification ||
                    OrganizationIdentification != null &&
                    OrganizationIdentification.SequenceEqual(other.OrganizationIdentification)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.SequenceEqual(other.SourceId)
                ) && 
                (
                    RestrictionCategory == other.RestrictionCategory ||
                    RestrictionCategory != null &&
                    RestrictionCategory.SequenceEqual(other.RestrictionCategory)
                ) && 
                (
                    Urlid == other.Urlid ||
                    Urlid != null &&
                    Urlid.SequenceEqual(other.Urlid)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (ServiceCallOperator != null)
                    hashCode = hashCode * 59 + ServiceCallOperator.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (OrganizationIdentification != null)
                    hashCode = hashCode * 59 + OrganizationIdentification.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (RestrictionCategory != null)
                    hashCode = hashCode * 59 + RestrictionCategory.GetHashCode();
                    if (Urlid != null)
                    hashCode = hashCode * 59 + Urlid.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmDataLinkType left, EmDataLinkType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmDataLinkType left, EmDataLinkType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
