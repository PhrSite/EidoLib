/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an organization.
    /// </summary>
    [DataContract]
    public partial class JOrganizationAugmentationType : IEquatable<JOrganizationAugmentationType>
    { 
        /// <summary>
        /// A name other than the primary one used by an organization. NIEM reference is j:OrganizationAlternateName
        /// </summary>
        /// <value>A name other than the primary one used by an organization. NIEM reference is j:OrganizationAlternateName</value>

        [DataMember(Name="organizationAlternateName")]
        public List<JOrganizationAlternateNameType> OrganizationAlternateName { get; set; }

        /// <summary>
        /// A license identification for an organization. NIEM reference is j:OrganizationLicenseIdentification
        /// </summary>
        /// <value>A license identification for an organization. NIEM reference is j:OrganizationLicenseIdentification</value>

        [DataMember(Name="organizationLicenseIdentification")]
        public List<NcIdentificationType> OrganizationLicenseIdentification { get; set; }

        /// <summary>
        /// A date to which the organizational unit is valid. NIEM reference is j:OrganizationValidDate
        /// </summary>
        /// <value>A date to which the organizational unit is valid. NIEM reference is j:OrganizationValidDate</value>

        [DataMember(Name="organizationValidDate")]
        public List<NcDateType> OrganizationValidDate { get; set; }

        /// <summary>
        /// An identification of a region or locality. NIEM reference is j:DistrictIdentification
        /// </summary>
        /// <value>An identification of a region or locality. NIEM reference is j:DistrictIdentification</value>

        [DataMember(Name="districtIdentification")]
        public List<NcIdentificationType> DistrictIdentification { get; set; }

        /// <summary>
        /// A Field Office that has jurisdiction over an area in which the ORI is located. NIEM reference is j:OrganizationFieldOfficeText
        /// </summary>
        /// <value>A Field Office that has jurisdiction over an area in which the ORI is located. NIEM reference is j:OrganizationFieldOfficeText</value>

        [DataMember(Name="organizationFieldOffice")]
        public List<NcTextType> OrganizationFieldOffice { get; set; }

        /// <summary>
        /// An area of service or jurisdiction an organization has over a region. NIEM reference is j:OrganizationJurisdiction
        /// </summary>
        /// <value>An area of service or jurisdiction an organization has over a region. NIEM reference is j:OrganizationJurisdiction</value>

        [DataMember(Name="organizationJurisdiction")]
        public List<NcJurisdictionType> OrganizationJurisdiction { get; set; }

        /// <summary>
        /// True if the status of an ORI is active; false if it is inactive. NIEM reference is j:AgencyActiveIndicator
        /// </summary>
        /// <value>True if the status of an ORI is active; false if it is inactive. NIEM reference is j:AgencyActiveIndicator</value>

        [DataMember(Name="isAgencyActive")]
        public List<NiemXsboolean> IsAgencyActive { get; set; }

        /// <summary>
        /// True if an agency is authorized to add or cancel a record; false otherwise. NIEM reference is j:AgencyAddCancelIndicator
        /// </summary>
        /// <value>True if an agency is authorized to add or cancel a record; false otherwise. NIEM reference is j:AgencyAddCancelIndicator</value>

        [DataMember(Name="isAgencyAddCancel")]
        public List<NiemXsboolean> IsAgencyAddCancel { get; set; }

        /// <summary>
        /// A baseline priority; values must be 0-12. NIEM reference is j:AgencyBaselinePriorityValue
        /// </summary>
        /// <value>A baseline priority; values must be 0-12. NIEM reference is j:AgencyBaselinePriorityValue</value>

        [DataMember(Name="agencyBaselinePriorityValue")]
        public List<NcNumericType> AgencyBaselinePriorityValue { get; set; }

        /// <summary>
        /// True if an agency is authorized to access criminal history information; false otherwise. NIEM reference is j:AgencyCHRIAuthorizedIndicator
        /// </summary>
        /// <value>True if an agency is authorized to access criminal history information; false otherwise. NIEM reference is j:AgencyCHRIAuthorizedIndicator</value>

        [DataMember(Name="isAgencyChriAuthorized")]
        public List<NiemXsboolean> IsAgencyChriAuthorized { get; set; }

        /// <summary>
        /// True if an agency is a control terminal; false otherwise. NIEM reference is j:AgencyControlTerminalIndicator
        /// </summary>
        /// <value>True if an agency is a control terminal; false otherwise. NIEM reference is j:AgencyControlTerminalIndicator</value>

        [DataMember(Name="isAgencyControlTerminal")]
        public List<NiemXsboolean> IsAgencyControlTerminal { get; set; }

        /// <summary>
        /// A availability of an agency. NIEM reference is j:AgencyServiceHoursCode
        /// </summary>
        /// <value>A availability of an agency. NIEM reference is j:AgencyServiceHoursCode</value>

        [DataMember(Name="agencyServiceHoursCode")]
        public List<NletsAgencyServiceHoursCodeType> AgencyServiceHoursCode { get; set; }

        /// <summary>
        /// An availability of an agency. NIEM reference is j:AgencyServiceHoursText
        /// </summary>
        /// <value>An availability of an agency. NIEM reference is j:AgencyServiceHoursText</value>

        [DataMember(Name="agencyServiceHours")]
        public List<NcTextType> AgencyServiceHours { get; set; }

        /// <summary>
        /// An agency&#x27;s access category to data. NIEM reference is j:AgencyAuthorizationCode
        /// </summary>
        /// <value>An agency&#x27;s access category to data. NIEM reference is j:AgencyAuthorizationCode</value>

        [DataMember(Name="agencyAuthorizationCode")]
        public List<NletsAgencyAuthorizationCodeType> AgencyAuthorizationCode { get; set; }

        /// <summary>
        /// An agency&#x27;s access category to data. NIEM reference is j:AgencyAuthorizationText
        /// </summary>
        /// <value>An agency&#x27;s access category to data. NIEM reference is j:AgencyAuthorizationText</value>

        [DataMember(Name="agencyAuthorization")]
        public List<NcTextType> AgencyAuthorization { get; set; }

        /// <summary>
        /// A governmental level of an organization. NIEM reference is j:OrganizationGovernmentLevelText
        /// </summary>
        /// <value>A governmental level of an organization. NIEM reference is j:OrganizationGovernmentLevelText</value>

        [DataMember(Name="organizationGovernmentLevel")]
        public List<NcTextType> OrganizationGovernmentLevel { get; set; }

        /// <summary>
        /// An identifier of an organization that is licensed by the government to sell firearms. NIEM reference is j:OrganizationFFLID
        /// </summary>
        /// <value>An identifier of an organization that is licensed by the government to sell firearms. NIEM reference is j:OrganizationFFLID</value>

        [DataMember(Name="organizationFflid")]
        public List<NiemXsstring> OrganizationFflid { get; set; }

        /// <summary>
        /// A unique nine character NCIC identification (ORI) assigned to a justice-related organization by the FBI CJIS Division. NIEM reference is j:OrganizationORIIdentification
        /// </summary>
        /// <value>A unique nine character NCIC identification (ORI) assigned to a justice-related organization by the FBI CJIS Division. NIEM reference is j:OrganizationORIIdentification</value>

        [DataMember(Name="organizationOriIdentification")]
        public List<NcIdentificationType> OrganizationOriIdentification { get; set; }

        /// <summary>
        /// jOrganizationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jOrganizationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjOrganizationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jOrganizationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jOrganizationAugmentationTypeContext.jsonld")]
            JSONLDContextsjOrganizationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jOrganizationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jOrganizationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JOrganizationAugmentationType {\n");
            sb.Append("  OrganizationAlternateName: ").Append(OrganizationAlternateName).Append("\n");
            sb.Append("  OrganizationLicenseIdentification: ").Append(OrganizationLicenseIdentification).Append("\n");
            sb.Append("  OrganizationValidDate: ").Append(OrganizationValidDate).Append("\n");
            sb.Append("  DistrictIdentification: ").Append(DistrictIdentification).Append("\n");
            sb.Append("  OrganizationFieldOffice: ").Append(OrganizationFieldOffice).Append("\n");
            sb.Append("  OrganizationJurisdiction: ").Append(OrganizationJurisdiction).Append("\n");
            sb.Append("  IsAgencyActive: ").Append(IsAgencyActive).Append("\n");
            sb.Append("  IsAgencyAddCancel: ").Append(IsAgencyAddCancel).Append("\n");
            sb.Append("  AgencyBaselinePriorityValue: ").Append(AgencyBaselinePriorityValue).Append("\n");
            sb.Append("  IsAgencyChriAuthorized: ").Append(IsAgencyChriAuthorized).Append("\n");
            sb.Append("  IsAgencyControlTerminal: ").Append(IsAgencyControlTerminal).Append("\n");
            sb.Append("  AgencyServiceHoursCode: ").Append(AgencyServiceHoursCode).Append("\n");
            sb.Append("  AgencyServiceHours: ").Append(AgencyServiceHours).Append("\n");
            sb.Append("  AgencyAuthorizationCode: ").Append(AgencyAuthorizationCode).Append("\n");
            sb.Append("  AgencyAuthorization: ").Append(AgencyAuthorization).Append("\n");
            sb.Append("  OrganizationGovernmentLevel: ").Append(OrganizationGovernmentLevel).Append("\n");
            sb.Append("  OrganizationFflid: ").Append(OrganizationFflid).Append("\n");
            sb.Append("  OrganizationOriIdentification: ").Append(OrganizationOriIdentification).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JOrganizationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JOrganizationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JOrganizationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JOrganizationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrganizationAlternateName == other.OrganizationAlternateName ||
                    OrganizationAlternateName != null &&
                    OrganizationAlternateName.SequenceEqual(other.OrganizationAlternateName)
                ) && 
                (
                    OrganizationLicenseIdentification == other.OrganizationLicenseIdentification ||
                    OrganizationLicenseIdentification != null &&
                    OrganizationLicenseIdentification.SequenceEqual(other.OrganizationLicenseIdentification)
                ) && 
                (
                    OrganizationValidDate == other.OrganizationValidDate ||
                    OrganizationValidDate != null &&
                    OrganizationValidDate.SequenceEqual(other.OrganizationValidDate)
                ) && 
                (
                    DistrictIdentification == other.DistrictIdentification ||
                    DistrictIdentification != null &&
                    DistrictIdentification.SequenceEqual(other.DistrictIdentification)
                ) && 
                (
                    OrganizationFieldOffice == other.OrganizationFieldOffice ||
                    OrganizationFieldOffice != null &&
                    OrganizationFieldOffice.SequenceEqual(other.OrganizationFieldOffice)
                ) && 
                (
                    OrganizationJurisdiction == other.OrganizationJurisdiction ||
                    OrganizationJurisdiction != null &&
                    OrganizationJurisdiction.SequenceEqual(other.OrganizationJurisdiction)
                ) && 
                (
                    IsAgencyActive == other.IsAgencyActive ||
                    IsAgencyActive != null &&
                    IsAgencyActive.SequenceEqual(other.IsAgencyActive)
                ) && 
                (
                    IsAgencyAddCancel == other.IsAgencyAddCancel ||
                    IsAgencyAddCancel != null &&
                    IsAgencyAddCancel.SequenceEqual(other.IsAgencyAddCancel)
                ) && 
                (
                    AgencyBaselinePriorityValue == other.AgencyBaselinePriorityValue ||
                    AgencyBaselinePriorityValue != null &&
                    AgencyBaselinePriorityValue.SequenceEqual(other.AgencyBaselinePriorityValue)
                ) && 
                (
                    IsAgencyChriAuthorized == other.IsAgencyChriAuthorized ||
                    IsAgencyChriAuthorized != null &&
                    IsAgencyChriAuthorized.SequenceEqual(other.IsAgencyChriAuthorized)
                ) && 
                (
                    IsAgencyControlTerminal == other.IsAgencyControlTerminal ||
                    IsAgencyControlTerminal != null &&
                    IsAgencyControlTerminal.SequenceEqual(other.IsAgencyControlTerminal)
                ) && 
                (
                    AgencyServiceHoursCode == other.AgencyServiceHoursCode ||
                    AgencyServiceHoursCode != null &&
                    AgencyServiceHoursCode.SequenceEqual(other.AgencyServiceHoursCode)
                ) && 
                (
                    AgencyServiceHours == other.AgencyServiceHours ||
                    AgencyServiceHours != null &&
                    AgencyServiceHours.SequenceEqual(other.AgencyServiceHours)
                ) && 
                (
                    AgencyAuthorizationCode == other.AgencyAuthorizationCode ||
                    AgencyAuthorizationCode != null &&
                    AgencyAuthorizationCode.SequenceEqual(other.AgencyAuthorizationCode)
                ) && 
                (
                    AgencyAuthorization == other.AgencyAuthorization ||
                    AgencyAuthorization != null &&
                    AgencyAuthorization.SequenceEqual(other.AgencyAuthorization)
                ) && 
                (
                    OrganizationGovernmentLevel == other.OrganizationGovernmentLevel ||
                    OrganizationGovernmentLevel != null &&
                    OrganizationGovernmentLevel.SequenceEqual(other.OrganizationGovernmentLevel)
                ) && 
                (
                    OrganizationFflid == other.OrganizationFflid ||
                    OrganizationFflid != null &&
                    OrganizationFflid.SequenceEqual(other.OrganizationFflid)
                ) && 
                (
                    OrganizationOriIdentification == other.OrganizationOriIdentification ||
                    OrganizationOriIdentification != null &&
                    OrganizationOriIdentification.SequenceEqual(other.OrganizationOriIdentification)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrganizationAlternateName != null)
                    hashCode = hashCode * 59 + OrganizationAlternateName.GetHashCode();
                    if (OrganizationLicenseIdentification != null)
                    hashCode = hashCode * 59 + OrganizationLicenseIdentification.GetHashCode();
                    if (OrganizationValidDate != null)
                    hashCode = hashCode * 59 + OrganizationValidDate.GetHashCode();
                    if (DistrictIdentification != null)
                    hashCode = hashCode * 59 + DistrictIdentification.GetHashCode();
                    if (OrganizationFieldOffice != null)
                    hashCode = hashCode * 59 + OrganizationFieldOffice.GetHashCode();
                    if (OrganizationJurisdiction != null)
                    hashCode = hashCode * 59 + OrganizationJurisdiction.GetHashCode();
                    if (IsAgencyActive != null)
                    hashCode = hashCode * 59 + IsAgencyActive.GetHashCode();
                    if (IsAgencyAddCancel != null)
                    hashCode = hashCode * 59 + IsAgencyAddCancel.GetHashCode();
                    if (AgencyBaselinePriorityValue != null)
                    hashCode = hashCode * 59 + AgencyBaselinePriorityValue.GetHashCode();
                    if (IsAgencyChriAuthorized != null)
                    hashCode = hashCode * 59 + IsAgencyChriAuthorized.GetHashCode();
                    if (IsAgencyControlTerminal != null)
                    hashCode = hashCode * 59 + IsAgencyControlTerminal.GetHashCode();
                    if (AgencyServiceHoursCode != null)
                    hashCode = hashCode * 59 + AgencyServiceHoursCode.GetHashCode();
                    if (AgencyServiceHours != null)
                    hashCode = hashCode * 59 + AgencyServiceHours.GetHashCode();
                    if (AgencyAuthorizationCode != null)
                    hashCode = hashCode * 59 + AgencyAuthorizationCode.GetHashCode();
                    if (AgencyAuthorization != null)
                    hashCode = hashCode * 59 + AgencyAuthorization.GetHashCode();
                    if (OrganizationGovernmentLevel != null)
                    hashCode = hashCode * 59 + OrganizationGovernmentLevel.GetHashCode();
                    if (OrganizationFflid != null)
                    hashCode = hashCode * 59 + OrganizationFflid.GetHashCode();
                    if (OrganizationOriIdentification != null)
                    hashCode = hashCode * 59 + OrganizationOriIdentification.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JOrganizationAugmentationType left, JOrganizationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JOrganizationAugmentationType left, JOrganizationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
