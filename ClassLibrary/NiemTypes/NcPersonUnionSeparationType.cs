/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a separation of the parties in a Person Union.
    /// </summary>
    [DataContract]
    public partial class NcPersonUnionSeparationType : NcActivityType, IEquatable<NcPersonUnionSeparationType>
    { 
        /// <summary>
        /// A date range during which the parties in a Person Union were separated. NIEM reference is nc:SeparationDateRange
        /// </summary>
        /// <value>A date range during which the parties in a Person Union were separated. NIEM reference is nc:SeparationDateRange</value>

        [DataMember(Name="separationDateRange")]
        public List<NcDateRangeType> SeparationDateRange { get; set; }

        /// <summary>
        /// A code that identifies the type of separation between the parties in a Person Union. NIEM reference is nc:SeparationCategoryCode
        /// </summary>
        /// <value>A code that identifies the type of separation between the parties in a Person Union. NIEM reference is nc:SeparationCategoryCode</value>

        [DataMember(Name="separationCategoryCode")]
        public List<NcSeparationCategoryCodeType> SeparationCategoryCode { get; set; }

        /// <summary>
        /// A kind of separation of the parties in a Person Union. NIEM reference is nc:SeparationCategoryText
        /// </summary>
        /// <value>A kind of separation of the parties in a Person Union. NIEM reference is nc:SeparationCategoryText</value>

        [DataMember(Name="separationCategory")]
        public List<NcTextType> SeparationCategory { get; set; }

        /// <summary>
        /// ncPersonUnionSeparationType JSON-LD context
        /// </summary>
        /// <value>ncPersonUnionSeparationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonUnionSeparationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonUnionSeparationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonUnionSeparationTypeContext.jsonld")]
            JSONLDContextsncPersonUnionSeparationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonUnionSeparationType JSON-LD context
        /// </summary>
        /// <value>ncPersonUnionSeparationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonUnionSeparationType {\n");
            sb.Append("  SeparationDateRange: ").Append(SeparationDateRange).Append("\n");
            sb.Append("  SeparationCategoryCode: ").Append(SeparationCategoryCode).Append("\n");
            sb.Append("  SeparationCategory: ").Append(SeparationCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonUnionSeparationType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonUnionSeparationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonUnionSeparationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonUnionSeparationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SeparationDateRange == other.SeparationDateRange ||
                    SeparationDateRange != null &&
                    SeparationDateRange.SequenceEqual(other.SeparationDateRange)
                ) && 
                (
                    SeparationCategoryCode == other.SeparationCategoryCode ||
                    SeparationCategoryCode != null &&
                    SeparationCategoryCode.SequenceEqual(other.SeparationCategoryCode)
                ) && 
                (
                    SeparationCategory == other.SeparationCategory ||
                    SeparationCategory != null &&
                    SeparationCategory.SequenceEqual(other.SeparationCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SeparationDateRange != null)
                    hashCode = hashCode * 59 + SeparationDateRange.GetHashCode();
                    if (SeparationCategoryCode != null)
                    hashCode = hashCode * 59 + SeparationCategoryCode.GetHashCode();
                    if (SeparationCategory != null)
                    hashCode = hashCode * 59 + SeparationCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonUnionSeparationType left, NcPersonUnionSeparationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonUnionSeparationType left, NcPersonUnionSeparationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
