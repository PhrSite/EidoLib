/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a detection and encoding of minutiae
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaeFeatureDetectionType : IEquatable<BiomMinutiaeFeatureDetectionType>
    { 
        /// <summary>
        /// A list of fields that correspond to the feature detection method coded NIEM reference is biom:MinutiaeFeatureDetectionFieldListText
        /// </summary>
        /// <value>A list of fields that correspond to the feature detection method coded NIEM reference is biom:MinutiaeFeatureDetectionFieldListText</value>

        [DataMember(Name="fieldList")]
        public List<NcTextType> FieldList { get; set; }

        /// <summary>
        /// A method by which minutiae features are detected and encoded NIEM reference is biom:MinutiaeFeatureDetectionMethodCode
        /// </summary>
        /// <value>A method by which minutiae features are detected and encoded NIEM reference is biom:MinutiaeFeatureDetectionMethodCode</value>

        [DataMember(Name="methodCode")]
        public List<BiomMinutiaeFeatureDetectionMethodCodeType> MethodCode { get; set; }

        /// <summary>
        /// An identifier for a vendor, or name of vendor of the minutiae extraction and encoding algorithm, from a registry table NIEM reference is biom:MinutiaeAlgorithmVendorID
        /// </summary>
        /// <value>An identifier for a vendor, or name of vendor of the minutiae extraction and encoding algorithm, from a registry table NIEM reference is biom:MinutiaeAlgorithmVendorID</value>

        [DataMember(Name="minutiaeAlgorithmVendorId")]
        public List<NcTextType> MinutiaeAlgorithmVendorId { get; set; }

        /// <summary>
        /// An identifier for a minutiae extraction and encoding algorithm NIEM reference is biom:MinutiaeAlgorithmID
        /// </summary>
        /// <value>An identifier for a minutiae extraction and encoding algorithm NIEM reference is biom:MinutiaeAlgorithmID</value>

        [DataMember(Name="minutiaeAlgorithmId")]
        public List<NcTextType> MinutiaeAlgorithmId { get; set; }

        /// <summary>
        /// A name for the latent examiner responsible for minutiae markup or verification NIEM reference is biom:MinutiaeExaminerName
        /// </summary>
        /// <value>A name for the latent examiner responsible for minutiae markup or verification NIEM reference is biom:MinutiaeExaminerName</value>

        [DataMember(Name="minutiaeExaminerName")]
        public List<NcPersonNameType> MinutiaeExaminerName { get; set; }

        /// <summary>
        /// A name of an organization. NIEM reference is nc:OrganizationName
        /// </summary>
        /// <value>A name of an organization. NIEM reference is nc:OrganizationName</value>

        [DataMember(Name="organizationName")]
        public List<NcTextType> OrganizationName { get; set; }

        /// <summary>
        /// A date/time of the minutiae feature detection NIEM reference is biom:MinutiaeFeatureDetectionDateTime
        /// </summary>
        /// <value>A date/time of the minutiae feature detection NIEM reference is biom:MinutiaeFeatureDetectionDateTime</value>

        [DataMember(Name="dateTime")]
        public List<NcZuluDateTimeType> DateTime { get; set; }

        /// <summary>
        /// A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText
        /// </summary>
        /// <value>A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText</value>

        [DataMember(Name="minutiaeComment")]
        public List<NcTextType> MinutiaeComment { get; set; }

        /// <summary>
        /// biomMinutiaeFeatureDetectionType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeFeatureDetectionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaeFeatureDetectionTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaeFeatureDetectionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaeFeatureDetectionTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaeFeatureDetectionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaeFeatureDetectionType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeFeatureDetectionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaeFeatureDetectionType {\n");
            sb.Append("  FieldList: ").Append(FieldList).Append("\n");
            sb.Append("  MethodCode: ").Append(MethodCode).Append("\n");
            sb.Append("  MinutiaeAlgorithmVendorId: ").Append(MinutiaeAlgorithmVendorId).Append("\n");
            sb.Append("  MinutiaeAlgorithmId: ").Append(MinutiaeAlgorithmId).Append("\n");
            sb.Append("  MinutiaeExaminerName: ").Append(MinutiaeExaminerName).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  MinutiaeComment: ").Append(MinutiaeComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaeFeatureDetectionType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaeFeatureDetectionType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaeFeatureDetectionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaeFeatureDetectionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FieldList == other.FieldList ||
                    FieldList != null &&
                    FieldList.SequenceEqual(other.FieldList)
                ) && 
                (
                    MethodCode == other.MethodCode ||
                    MethodCode != null &&
                    MethodCode.SequenceEqual(other.MethodCode)
                ) && 
                (
                    MinutiaeAlgorithmVendorId == other.MinutiaeAlgorithmVendorId ||
                    MinutiaeAlgorithmVendorId != null &&
                    MinutiaeAlgorithmVendorId.SequenceEqual(other.MinutiaeAlgorithmVendorId)
                ) && 
                (
                    MinutiaeAlgorithmId == other.MinutiaeAlgorithmId ||
                    MinutiaeAlgorithmId != null &&
                    MinutiaeAlgorithmId.SequenceEqual(other.MinutiaeAlgorithmId)
                ) && 
                (
                    MinutiaeExaminerName == other.MinutiaeExaminerName ||
                    MinutiaeExaminerName != null &&
                    MinutiaeExaminerName.SequenceEqual(other.MinutiaeExaminerName)
                ) && 
                (
                    OrganizationName == other.OrganizationName ||
                    OrganizationName != null &&
                    OrganizationName.SequenceEqual(other.OrganizationName)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.SequenceEqual(other.DateTime)
                ) && 
                (
                    MinutiaeComment == other.MinutiaeComment ||
                    MinutiaeComment != null &&
                    MinutiaeComment.SequenceEqual(other.MinutiaeComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FieldList != null)
                    hashCode = hashCode * 59 + FieldList.GetHashCode();
                    if (MethodCode != null)
                    hashCode = hashCode * 59 + MethodCode.GetHashCode();
                    if (MinutiaeAlgorithmVendorId != null)
                    hashCode = hashCode * 59 + MinutiaeAlgorithmVendorId.GetHashCode();
                    if (MinutiaeAlgorithmId != null)
                    hashCode = hashCode * 59 + MinutiaeAlgorithmId.GetHashCode();
                    if (MinutiaeExaminerName != null)
                    hashCode = hashCode * 59 + MinutiaeExaminerName.GetHashCode();
                    if (OrganizationName != null)
                    hashCode = hashCode * 59 + OrganizationName.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (MinutiaeComment != null)
                    hashCode = hashCode * 59 + MinutiaeComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaeFeatureDetectionType left, BiomMinutiaeFeatureDetectionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaeFeatureDetectionType left, BiomMinutiaeFeatureDetectionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
