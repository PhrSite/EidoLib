/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an alert event details
    /// </summary>
    [DataContract]
    public partial class EmAlertEventDetailsType : IEquatable<EmAlertEventDetailsType>
    { 
        /// <summary>
        /// A description of the intended audience of the alert message NIEM reference is em:AlertEventDetailsAudienceDescriptionText
        /// </summary>
        /// <value>A description of the intended audience of the alert message NIEM reference is em:AlertEventDetailsAudienceDescriptionText</value>

        [DataMember(Name="audienceDescription")]
        public List<NcTextType> AudienceDescription { get; set; }

        /// <summary>
        /// An identifier for the event type of the alert message NIEM reference is em:AlertEventDetailsSystemRecordID
        /// </summary>
        /// <value>An identifier for the event type of the alert message NIEM reference is em:AlertEventDetailsSystemRecordID</value>

        [DataMember(Name="systemRecordId")]
        public List<NcIdentificationType> SystemRecordId { get; set; }

        /// <summary>
        /// A description of the incident/event/situation associated with the Alert message NIEM reference is em:AlertEventDetailsDescriptionText
        /// </summary>
        /// <value>A description of the incident/event/situation associated with the Alert message NIEM reference is em:AlertEventDetailsDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A headline of the alert message. A brief human-readable headline. Note that some displays (for example, short messaging service devices) may only present this headline; it SHOULD be made as direct and actionable as possible while remaining short. 1 NIEM reference is em:AlertEventDetailsHeadlineText
        /// </summary>
        /// <value>A headline of the alert message. A brief human-readable headline. Note that some displays (for example, short messaging service devices) may only present this headline; it SHOULD be made as direct and actionable as possible while remaining short. 1 NIEM reference is em:AlertEventDetailsHeadlineText</value>

        [DataMember(Name="headline")]
        public List<NcTextType> Headline { get; set; }

        /// <summary>
        /// A description of  recommended action to be taken by recipients of the alert message. An extended human readable instruction to targeted recipients. (If different instructions are intended for different recipients, they should be represented by use of multiple info blocks. See CAP specification for details.) NIEM reference is em:AlertEventDetailsInstructionsDescriptionText
        /// </summary>
        /// <value>A description of  recommended action to be taken by recipients of the alert message. An extended human readable instruction to targeted recipients. (If different instructions are intended for different recipients, they should be represented by use of multiple info blocks. See CAP specification for details.) NIEM reference is em:AlertEventDetailsInstructionsDescriptionText</value>

        [DataMember(Name="instructionsDescription")]
        public List<NcTextType> InstructionsDescription { get; set; }

        /// <summary>
        /// An expected time of the beginning of the subject event of the alert message NIEM reference is em:AlertEventDetailsOnsetDateTime
        /// </summary>
        /// <value>An expected time of the beginning of the subject event of the alert message NIEM reference is em:AlertEventDetailsOnsetDateTime</value>

        [DataMember(Name="onsetDateTime")]
        public List<NiemXsdateTime> OnsetDateTime { get; set; }

        /// <summary>
        /// A code denoting the urgency of the subject event of the alert message NIEM reference is em:AlertEventDetailsUrgencyCode
        /// </summary>
        /// <value>A code denoting the urgency of the subject event of the alert message NIEM reference is em:AlertEventDetailsUrgencyCode</value>

        [DataMember(Name="urgencyCode")]
        public List<EmAlertEventDetailsUrgencyCodeType> UrgencyCode { get; set; }

        /// <summary>
        /// A code denoting the severity of the subject event of the alert message NIEM reference is em:AlertEventDetailsSeverityCode
        /// </summary>
        /// <value>A code denoting the severity of the subject event of the alert message NIEM reference is em:AlertEventDetailsSeverityCode</value>

        [DataMember(Name="severityCode")]
        public List<EmAlertEventDetailsSeverityCodeType> SeverityCode { get; set; }

        /// <summary>
        /// A code denoting the category of the subject event of the alert message NIEM reference is em:AlertEventDetailsCategoryCode
        /// </summary>
        /// <value>A code denoting the category of the subject event of the alert message NIEM reference is em:AlertEventDetailsCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<EmAlertEventDetailsCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A code denoting the certainty of the subject event of the alert message NIEM reference is em:AlertEventDetailsCertaintyCode
        /// </summary>
        /// <value>A code denoting the certainty of the subject event of the alert message NIEM reference is em:AlertEventDetailsCertaintyCode</value>

        [DataMember(Name="certaintyCode")]
        public List<EmAlertEventDetailsCertaintyCodeType> CertaintyCode { get; set; }

        /// <summary>
        /// A code denoting the type of action recommended for the target audience NIEM reference is em:AlertEventDetailsResponseRecommendationCode
        /// </summary>
        /// <value>A code denoting the type of action recommended for the target audience NIEM reference is em:AlertEventDetailsResponseRecommendationCode</value>

        [DataMember(Name="responseRecommendationCode")]
        public List<EmAlertEventDetailsResponseRecommendationCodeType> ResponseRecommendationCode { get; set; }

        /// <summary>
        /// emAlertEventDetailsType JSON-LD context
        /// </summary>
        /// <value>emAlertEventDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsemAlertEventDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/emAlertEventDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/emAlertEventDetailsTypeContext.jsonld")]
            JSONLDContextsemAlertEventDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// emAlertEventDetailsType JSON-LD context
        /// </summary>
        /// <value>emAlertEventDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmAlertEventDetailsType {\n");
            sb.Append("  AudienceDescription: ").Append(AudienceDescription).Append("\n");
            sb.Append("  SystemRecordId: ").Append(SystemRecordId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Headline: ").Append(Headline).Append("\n");
            sb.Append("  InstructionsDescription: ").Append(InstructionsDescription).Append("\n");
            sb.Append("  OnsetDateTime: ").Append(OnsetDateTime).Append("\n");
            sb.Append("  UrgencyCode: ").Append(UrgencyCode).Append("\n");
            sb.Append("  SeverityCode: ").Append(SeverityCode).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CertaintyCode: ").Append(CertaintyCode).Append("\n");
            sb.Append("  ResponseRecommendationCode: ").Append(ResponseRecommendationCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EmAlertEventDetailsType)obj);
        }

        /// <summary>
        /// Returns true if EmAlertEventDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of EmAlertEventDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmAlertEventDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AudienceDescription == other.AudienceDescription ||
                    AudienceDescription != null &&
                    AudienceDescription.SequenceEqual(other.AudienceDescription)
                ) && 
                (
                    SystemRecordId == other.SystemRecordId ||
                    SystemRecordId != null &&
                    SystemRecordId.SequenceEqual(other.SystemRecordId)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Headline == other.Headline ||
                    Headline != null &&
                    Headline.SequenceEqual(other.Headline)
                ) && 
                (
                    InstructionsDescription == other.InstructionsDescription ||
                    InstructionsDescription != null &&
                    InstructionsDescription.SequenceEqual(other.InstructionsDescription)
                ) && 
                (
                    OnsetDateTime == other.OnsetDateTime ||
                    OnsetDateTime != null &&
                    OnsetDateTime.SequenceEqual(other.OnsetDateTime)
                ) && 
                (
                    UrgencyCode == other.UrgencyCode ||
                    UrgencyCode != null &&
                    UrgencyCode.SequenceEqual(other.UrgencyCode)
                ) && 
                (
                    SeverityCode == other.SeverityCode ||
                    SeverityCode != null &&
                    SeverityCode.SequenceEqual(other.SeverityCode)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CertaintyCode == other.CertaintyCode ||
                    CertaintyCode != null &&
                    CertaintyCode.SequenceEqual(other.CertaintyCode)
                ) && 
                (
                    ResponseRecommendationCode == other.ResponseRecommendationCode ||
                    ResponseRecommendationCode != null &&
                    ResponseRecommendationCode.SequenceEqual(other.ResponseRecommendationCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AudienceDescription != null)
                    hashCode = hashCode * 59 + AudienceDescription.GetHashCode();
                    if (SystemRecordId != null)
                    hashCode = hashCode * 59 + SystemRecordId.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Headline != null)
                    hashCode = hashCode * 59 + Headline.GetHashCode();
                    if (InstructionsDescription != null)
                    hashCode = hashCode * 59 + InstructionsDescription.GetHashCode();
                    if (OnsetDateTime != null)
                    hashCode = hashCode * 59 + OnsetDateTime.GetHashCode();
                    if (UrgencyCode != null)
                    hashCode = hashCode * 59 + UrgencyCode.GetHashCode();
                    if (SeverityCode != null)
                    hashCode = hashCode * 59 + SeverityCode.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CertaintyCode != null)
                    hashCode = hashCode * 59 + CertaintyCode.GetHashCode();
                    if (ResponseRecommendationCode != null)
                    hashCode = hashCode * 59 + ResponseRecommendationCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EmAlertEventDetailsType left, EmAlertEventDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EmAlertEventDetailsType left, EmAlertEventDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
