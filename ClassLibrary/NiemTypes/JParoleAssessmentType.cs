/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a process of determining a subject&#x27;s suitability for parole.
    /// </summary>
    [DataContract]
    public partial class JParoleAssessmentType : NcAssessmentType, IEquatable<JParoleAssessmentType>
    { 
        /// <summary>
        /// A number representing the subject&#x27;s parole review score for pro-social affiliation. NIEM reference is j:ParoleAssessmentProSocialAffiliationScoreValue
        /// </summary>
        /// <value>A number representing the subject&#x27;s parole review score for pro-social affiliation. NIEM reference is j:ParoleAssessmentProSocialAffiliationScoreValue</value>

        [DataMember(Name="proSocialAffiliationScoreValue")]
        public List<NcNumericType> ProSocialAffiliationScoreValue { get; set; }

        /// <summary>
        /// A staff person who serves as a unit supervisor. NIEM reference is j:ParoleAssessmentUnitSupervisor
        /// </summary>
        /// <value>A staff person who serves as a unit supervisor. NIEM reference is j:ParoleAssessmentUnitSupervisor</value>

        [DataMember(Name="unitSupervisor")]
        public List<NcEntityType> UnitSupervisor { get; set; }

        /// <summary>
        /// A comment or score from the parolee dynamic profile review. NIEM reference is j:ParoleAssessmentTotalObjectiveScoreText
        /// </summary>
        /// <value>A comment or score from the parolee dynamic profile review. NIEM reference is j:ParoleAssessmentTotalObjectiveScoreText</value>

        [DataMember(Name="totalObjectiveScore")]
        public List<NcTextType> TotalObjectiveScore { get; set; }

        /// <summary>
        /// A kind of need identified for a subject with respect to their suitability for parole. NIEM reference is j:ParoleAssessmentNeed
        /// </summary>
        /// <value>A kind of need identified for a subject with respect to their suitability for parole. NIEM reference is j:ParoleAssessmentNeed</value>

        [DataMember(Name="need")]
        public List<JNeedType> Need { get; set; }

        /// <summary>
        /// A score indicating how well a parolee met the objective of structuring the parolees time around pro-social activities geared towards self-reliance. activities is not evident. NIEM reference is j:ParoleAssessmentEmploymentObjectiveScoreValue
        /// </summary>
        /// <value>A score indicating how well a parolee met the objective of structuring the parolees time around pro-social activities geared towards self-reliance. activities is not evident. NIEM reference is j:ParoleAssessmentEmploymentObjectiveScoreValue</value>

        [DataMember(Name="employmentObjectiveScoreValue")]
        public List<NcNumericType> EmploymentObjectiveScoreValue { get; set; }

        /// <summary>
        /// A score indicating how well a parolee met the objective of participating in referred programming for the parolees top three criminogenic needs. NIEM reference is j:ParoleAssessmentCriminogenicNeedsScoreValue
        /// </summary>
        /// <value>A score indicating how well a parolee met the objective of participating in referred programming for the parolees top three criminogenic needs. NIEM reference is j:ParoleAssessmentCriminogenicNeedsScoreValue</value>

        [DataMember(Name="criminogenicNeedsScoreValue")]
        public List<NcNumericType> CriminogenicNeedsScoreValue { get; set; }

        /// <summary>
        /// A review of a subject&#x27;s criminal history as a factor of suitability for parole. NIEM reference is j:ParoleAssessmentCriminalHistorySummary
        /// </summary>
        /// <value>A review of a subject&#x27;s criminal history as a factor of suitability for parole. NIEM reference is j:ParoleAssessmentCriminalHistorySummary</value>

        [DataMember(Name="criminalHistorySummary")]
        public List<JPersonCriminalHistorySummaryType> CriminalHistorySummary { get; set; }

        /// <summary>
        /// A number representing the subject&#x27;s parole review score for residence stability. NIEM reference is j:ParoleAssessmentResidenceObjectiveScoreValue
        /// </summary>
        /// <value>A number representing the subject&#x27;s parole review score for residence stability. NIEM reference is j:ParoleAssessmentResidenceObjectiveScoreValue</value>

        [DataMember(Name="residenceObjectiveScoreValue")]
        public List<NcNumericType> ResidenceObjectiveScoreValue { get; set; }

        /// <summary>
        /// A comment on the parole assessment by the parole agent. NIEM reference is j:ParoleAssessmentComment
        /// </summary>
        /// <value>A comment on the parole assessment by the parole agent. NIEM reference is j:ParoleAssessmentComment</value>

        [DataMember(Name="comment")]
        public List<NcCommentType> Comment { get; set; }

        /// <summary>
        /// jParoleAssessmentType JSON-LD context
        /// </summary>
        /// <value>jParoleAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjParoleAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jParoleAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jParoleAssessmentTypeContext.jsonld")]
            JSONLDContextsjParoleAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jParoleAssessmentType JSON-LD context
        /// </summary>
        /// <value>jParoleAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JParoleAssessmentType {\n");
            sb.Append("  ProSocialAffiliationScoreValue: ").Append(ProSocialAffiliationScoreValue).Append("\n");
            sb.Append("  UnitSupervisor: ").Append(UnitSupervisor).Append("\n");
            sb.Append("  TotalObjectiveScore: ").Append(TotalObjectiveScore).Append("\n");
            sb.Append("  Need: ").Append(Need).Append("\n");
            sb.Append("  EmploymentObjectiveScoreValue: ").Append(EmploymentObjectiveScoreValue).Append("\n");
            sb.Append("  CriminogenicNeedsScoreValue: ").Append(CriminogenicNeedsScoreValue).Append("\n");
            sb.Append("  CriminalHistorySummary: ").Append(CriminalHistorySummary).Append("\n");
            sb.Append("  ResidenceObjectiveScoreValue: ").Append(ResidenceObjectiveScoreValue).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JParoleAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JParoleAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JParoleAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JParoleAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProSocialAffiliationScoreValue == other.ProSocialAffiliationScoreValue ||
                    ProSocialAffiliationScoreValue != null &&
                    ProSocialAffiliationScoreValue.SequenceEqual(other.ProSocialAffiliationScoreValue)
                ) && 
                (
                    UnitSupervisor == other.UnitSupervisor ||
                    UnitSupervisor != null &&
                    UnitSupervisor.SequenceEqual(other.UnitSupervisor)
                ) && 
                (
                    TotalObjectiveScore == other.TotalObjectiveScore ||
                    TotalObjectiveScore != null &&
                    TotalObjectiveScore.SequenceEqual(other.TotalObjectiveScore)
                ) && 
                (
                    Need == other.Need ||
                    Need != null &&
                    Need.SequenceEqual(other.Need)
                ) && 
                (
                    EmploymentObjectiveScoreValue == other.EmploymentObjectiveScoreValue ||
                    EmploymentObjectiveScoreValue != null &&
                    EmploymentObjectiveScoreValue.SequenceEqual(other.EmploymentObjectiveScoreValue)
                ) && 
                (
                    CriminogenicNeedsScoreValue == other.CriminogenicNeedsScoreValue ||
                    CriminogenicNeedsScoreValue != null &&
                    CriminogenicNeedsScoreValue.SequenceEqual(other.CriminogenicNeedsScoreValue)
                ) && 
                (
                    CriminalHistorySummary == other.CriminalHistorySummary ||
                    CriminalHistorySummary != null &&
                    CriminalHistorySummary.SequenceEqual(other.CriminalHistorySummary)
                ) && 
                (
                    ResidenceObjectiveScoreValue == other.ResidenceObjectiveScoreValue ||
                    ResidenceObjectiveScoreValue != null &&
                    ResidenceObjectiveScoreValue.SequenceEqual(other.ResidenceObjectiveScoreValue)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProSocialAffiliationScoreValue != null)
                    hashCode = hashCode * 59 + ProSocialAffiliationScoreValue.GetHashCode();
                    if (UnitSupervisor != null)
                    hashCode = hashCode * 59 + UnitSupervisor.GetHashCode();
                    if (TotalObjectiveScore != null)
                    hashCode = hashCode * 59 + TotalObjectiveScore.GetHashCode();
                    if (Need != null)
                    hashCode = hashCode * 59 + Need.GetHashCode();
                    if (EmploymentObjectiveScoreValue != null)
                    hashCode = hashCode * 59 + EmploymentObjectiveScoreValue.GetHashCode();
                    if (CriminogenicNeedsScoreValue != null)
                    hashCode = hashCode * 59 + CriminogenicNeedsScoreValue.GetHashCode();
                    if (CriminalHistorySummary != null)
                    hashCode = hashCode * 59 + CriminalHistorySummary.GetHashCode();
                    if (ResidenceObjectiveScoreValue != null)
                    hashCode = hashCode * 59 + ResidenceObjectiveScoreValue.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JParoleAssessmentType left, JParoleAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JParoleAssessmentType left, JParoleAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
