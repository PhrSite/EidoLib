/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a recommendation of a person to an activity, program, or product.
    /// </summary>
    [DataContract]
    public partial class NcReferralType : NcActivityType, IEquatable<NcReferralType>
    { 
        /// <summary>
        /// An activity or program to which a person is directed to attend or perform. NIEM reference is nc:ReferralActivity
        /// </summary>
        /// <value>An activity or program to which a person is directed to attend or perform. NIEM reference is nc:ReferralActivity</value>

        [DataMember(Name="activity")]
        public List<NcActivityType> Activity { get; set; }

        /// <summary>
        /// An entity which recommends a person to an activity, program, or product. NIEM reference is nc:ReferralIssuer
        /// </summary>
        /// <value>An entity which recommends a person to an activity, program, or product. NIEM reference is nc:ReferralIssuer</value>

        [DataMember(Name="issuer")]
        public List<NcEntityType> Issuer { get; set; }

        /// <summary>
        /// True if a referral is required; false if a referral is optional. NIEM reference is nc:ReferralMandatoryIndicator
        /// </summary>
        /// <value>True if a referral is required; false if a referral is optional. NIEM reference is nc:ReferralMandatoryIndicator</value>

        [DataMember(Name="isMandatory")]
        public List<NiemXsboolean> IsMandatory { get; set; }

        /// <summary>
        /// An entity which is responsible for ensuring that a person follows a referral. NIEM reference is nc:ReferralSupervisor
        /// </summary>
        /// <value>An entity which is responsible for ensuring that a person follows a referral. NIEM reference is nc:ReferralSupervisor</value>

        [DataMember(Name="supervisor")]
        public List<NcEntityType> Supervisor { get; set; }

        /// <summary>
        /// A property item to which a person has been directed. NIEM reference is nc:ReferralItem
        /// </summary>
        /// <value>A property item to which a person has been directed. NIEM reference is nc:ReferralItem</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// An entity to which a person has been referred. NIEM reference is nc:ReferralEntity
        /// </summary>
        /// <value>An entity to which a person has been referred. NIEM reference is nc:ReferralEntity</value>

        [DataMember(Name="entity")]
        public List<NcEntityType> Entity { get; set; }

        /// <summary>
        /// A person who is being directed to a relevant service or product. NIEM reference is nc:ReferralPerson
        /// </summary>
        /// <value>A person who is being directed to a relevant service or product. NIEM reference is nc:ReferralPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// Additional information about a referral. NIEM reference is j:ReferralAugmentation
        /// </summary>
        /// <value>Additional information about a referral. NIEM reference is j:ReferralAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JReferralAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncReferralType JSON-LD context
        /// </summary>
        /// <value>ncReferralType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncReferralTypeContextJsonldEnum for ../JSON-LD_Contexts/ncReferralTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncReferralTypeContext.jsonld")]
            JSONLDContextsncReferralTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncReferralType JSON-LD context
        /// </summary>
        /// <value>ncReferralType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcReferralType {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  IsMandatory: ").Append(IsMandatory).Append("\n");
            sb.Append("  Supervisor: ").Append(Supervisor).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcReferralType)obj);
        }

        /// <summary>
        /// Returns true if NcReferralType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcReferralType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcReferralType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.SequenceEqual(other.Activity)
                ) && 
                (
                    Issuer == other.Issuer ||
                    Issuer != null &&
                    Issuer.SequenceEqual(other.Issuer)
                ) && 
                (
                    IsMandatory == other.IsMandatory ||
                    IsMandatory != null &&
                    IsMandatory.SequenceEqual(other.IsMandatory)
                ) && 
                (
                    Supervisor == other.Supervisor ||
                    Supervisor != null &&
                    Supervisor.SequenceEqual(other.Supervisor)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    Entity == other.Entity ||
                    Entity != null &&
                    Entity.SequenceEqual(other.Entity)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (Issuer != null)
                    hashCode = hashCode * 59 + Issuer.GetHashCode();
                    if (IsMandatory != null)
                    hashCode = hashCode * 59 + IsMandatory.GetHashCode();
                    if (Supervisor != null)
                    hashCode = hashCode * 59 + Supervisor.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (Entity != null)
                    hashCode = hashCode * 59 + Entity.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcReferralType left, NcReferralType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcReferralType left, NcReferralType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
