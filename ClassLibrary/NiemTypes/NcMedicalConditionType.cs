/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a state of health, on-going or present.
    /// </summary>
    [DataContract]
    public partial class NcMedicalConditionType : IEquatable<NcMedicalConditionType>
    { 
        /// <summary>
        /// A doctor who treats a person for a medical condition. NIEM reference is nc:MedicalConditionDoctor
        /// </summary>
        /// <value>A doctor who treats a person for a medical condition. NIEM reference is nc:MedicalConditionDoctor</value>

        [DataMember(Name="doctor")]
        public List<NcPersonType> Doctor { get; set; }

        /// <summary>
        /// A state of health, on-going or present. NIEM reference is nc:MedicalConditionText
        /// </summary>
        /// <value>A state of health, on-going or present. NIEM reference is nc:MedicalConditionText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A trigger that can initiate the onset of a medical condition. NIEM reference is nc:MedicalConditionCauseText
        /// </summary>
        /// <value>A trigger that can initiate the onset of a medical condition. NIEM reference is nc:MedicalConditionCauseText</value>

        [DataMember(Name="cause")]
        public List<NcTextType> Cause { get; set; }

        /// <summary>
        /// A description of a medical condition. NIEM reference is nc:MedicalConditionDescriptionText
        /// </summary>
        /// <value>A description of a medical condition. NIEM reference is nc:MedicalConditionDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// True if a medical condition currently exists; false otherwise. NIEM reference is nc:MedicalConditionPresentIndicator
        /// </summary>
        /// <value>True if a medical condition currently exists; false otherwise. NIEM reference is nc:MedicalConditionPresentIndicator</value>

        [DataMember(Name="isPresent")]
        public List<NiemXsboolean> IsPresent { get; set; }

        /// <summary>
        /// A degree to which a medical condition is affecting a person. NIEM reference is nc:MedicalConditionSeverityText
        /// </summary>
        /// <value>A degree to which a medical condition is affecting a person. NIEM reference is nc:MedicalConditionSeverityText</value>

        [DataMember(Name="severity")]
        public List<NcTextType> Severity { get; set; }

        /// <summary>
        /// A date range for the start and end of a medical condition. NIEM reference is nc:MedicalConditionDateRange
        /// </summary>
        /// <value>A date range for the start and end of a medical condition. NIEM reference is nc:MedicalConditionDateRange</value>

        [DataMember(Name="dateRange")]
        public List<NcDateRangeType> DateRange { get; set; }

        /// <summary>
        /// Additional information about a medical condition. NIEM reference is scr:MedicalConditionAugmentation
        /// </summary>
        /// <value>Additional information about a medical condition. NIEM reference is scr:MedicalConditionAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<ScrMedicalConditionAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncMedicalConditionType JSON-LD context
        /// </summary>
        /// <value>ncMedicalConditionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncMedicalConditionTypeContextJsonldEnum for ../JSON-LD_Contexts/ncMedicalConditionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncMedicalConditionTypeContext.jsonld")]
            JSONLDContextsncMedicalConditionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncMedicalConditionType JSON-LD context
        /// </summary>
        /// <value>ncMedicalConditionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcMedicalConditionType {\n");
            sb.Append("  Doctor: ").Append(Doctor).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsPresent: ").Append(IsPresent).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  DateRange: ").Append(DateRange).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcMedicalConditionType)obj);
        }

        /// <summary>
        /// Returns true if NcMedicalConditionType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcMedicalConditionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcMedicalConditionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Doctor == other.Doctor ||
                    Doctor != null &&
                    Doctor.SequenceEqual(other.Doctor)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    Cause == other.Cause ||
                    Cause != null &&
                    Cause.SequenceEqual(other.Cause)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    IsPresent == other.IsPresent ||
                    IsPresent != null &&
                    IsPresent.SequenceEqual(other.IsPresent)
                ) && 
                (
                    Severity == other.Severity ||
                    Severity != null &&
                    Severity.SequenceEqual(other.Severity)
                ) && 
                (
                    DateRange == other.DateRange ||
                    DateRange != null &&
                    DateRange.SequenceEqual(other.DateRange)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Doctor != null)
                    hashCode = hashCode * 59 + Doctor.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Cause != null)
                    hashCode = hashCode * 59 + Cause.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsPresent != null)
                    hashCode = hashCode * 59 + IsPresent.GetHashCode();
                    if (Severity != null)
                    hashCode = hashCode * 59 + Severity.GetHashCode();
                    if (DateRange != null)
                    hashCode = hashCode * 59 + DateRange.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcMedicalConditionType left, NcMedicalConditionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcMedicalConditionType left, NcMedicalConditionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
