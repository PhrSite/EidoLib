/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a forensic dental and oral record detail
    /// </summary>
    [DataContract]
    public partial class BiomForensicDentalOralDetailType : IEquatable<BiomForensicDentalOralDetailType>
    { 
        /// <summary>
        /// A collection of a biometric sample. NIEM reference is biom:BiometricCapture
        /// </summary>
        /// <value>A collection of a biometric sample. NIEM reference is biom:BiometricCapture</value>

        [DataMember(Name="biometricCapture")]
        public List<BiomBiometricCaptureType> BiometricCapture { get; set; }

        /// <summary>
        /// A set of information regarding the forensic setting information that carried out the analysis of the dental and oral data to identify or confirm the identity of the subject. NIEM reference is biom:ForensicDentalSetting
        /// </summary>
        /// <value>A set of information regarding the forensic setting information that carried out the analysis of the dental and oral data to identify or confirm the identity of the subject. NIEM reference is biom:ForensicDentalSetting</value>

        [DataMember(Name="forensicDentalSetting")]
        public List<BiomForensicDentalSettingType> ForensicDentalSetting { get; set; }

        /// <summary>
        /// A set of information regarding status of the individual at the time when the relevant data was recorded. NIEM reference is biom:DentalSubjectInformation
        /// </summary>
        /// <value>A set of information regarding status of the individual at the time when the relevant data was recorded. NIEM reference is biom:DentalSubjectInformation</value>

        [DataMember(Name="dentalSubjectInformation")]
        public List<BiomDentalSubjectInformationType> DentalSubjectInformation { get; set; }

        /// <summary>
        /// A data collection schema that was used for the original recording of dental information. NIEM reference is biom:OriginalDentalEncodingSystemInformation
        /// </summary>
        /// <value>A data collection schema that was used for the original recording of dental information. NIEM reference is biom:OriginalDentalEncodingSystemInformation</value>

        [DataMember(Name="originalDentalEncodingSystemInformation")]
        public List<BiomDentalEncodingSystemInformationType> OriginalDentalEncodingSystemInformation { get; set; }

        /// <summary>
        /// A code to describe the data collection schema that was used for the transmittal recording of dental information. NIEM reference is biom:TransmittalDentalEncodingSystemInformation
        /// </summary>
        /// <value>A code to describe the data collection schema that was used for the transmittal recording of dental information. NIEM reference is biom:TransmittalDentalEncodingSystemInformation</value>

        [DataMember(Name="transmittalDentalEncodingSystemInformation")]
        public List<BiomDentalEncodingSystemInformationType> TransmittalDentalEncodingSystemInformation { get; set; }

        /// <summary>
        /// A description of the prior dental history of the subject, if known. NIEM reference is biom:DentalHistoryDataDetail
        /// </summary>
        /// <value>A description of the prior dental history of the subject, if known. NIEM reference is biom:DentalHistoryDataDetail</value>

        [DataMember(Name="dentalHistoryDataDetail")]
        public List<BiomDentalHistoryDataInformationType> DentalHistoryDataDetail { get; set; }

        /// <summary>
        /// A container for information about the teeth of a subject NIEM reference is biom:ToothDataDetail
        /// </summary>
        /// <value>A container for information about the teeth of a subject NIEM reference is biom:ToothDataDetail</value>

        [DataMember(Name="toothDataDetail")]
        public List<BiomToothDataInformationType> ToothDataDetail { get; set; }

        /// <summary>
        /// A container for information about the entry of information concerning the mouth. NIEM reference is biom:MouthDataDetail
        /// </summary>
        /// <value>A container for information about the entry of information concerning the mouth. NIEM reference is biom:MouthDataDetail</value>

        [DataMember(Name="mouthDataDetail")]
        public List<BiomMouthDataInformationType> MouthDataDetail { get; set; }

        /// <summary>
        /// A container for information about the entry of information concerning the dental casts and impressions. NIEM reference is biom:DentalStudyToothImprintDetail
        /// </summary>
        /// <value>A container for information about the entry of information concerning the dental casts and impressions. NIEM reference is biom:DentalStudyToothImprintDetail</value>

        [DataMember(Name="dentalStudyToothImprintDetail")]
        public List<BiomDentalStudyToothImprintInformationType> DentalStudyToothImprintDetail { get; set; }

        /// <summary>
        /// A comment regarding a forensic dental sample NIEM reference is biom:ForensicDentalCommentText
        /// </summary>
        /// <value>A comment regarding a forensic dental sample NIEM reference is biom:ForensicDentalCommentText</value>

        [DataMember(Name="forensicDentalComment")]
        public List<NcTextType> ForensicDentalComment { get; set; }

        /// <summary>
        /// biomForensicDentalOralDetailType JSON-LD context
        /// </summary>
        /// <value>biomForensicDentalOralDetailType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomForensicDentalOralDetailTypeContextJsonldEnum for ../JSON-LD_Contexts/biomForensicDentalOralDetailTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomForensicDentalOralDetailTypeContext.jsonld")]
            JSONLDContextsbiomForensicDentalOralDetailTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomForensicDentalOralDetailType JSON-LD context
        /// </summary>
        /// <value>biomForensicDentalOralDetailType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomForensicDentalOralDetailType {\n");
            sb.Append("  BiometricCapture: ").Append(BiometricCapture).Append("\n");
            sb.Append("  ForensicDentalSetting: ").Append(ForensicDentalSetting).Append("\n");
            sb.Append("  DentalSubjectInformation: ").Append(DentalSubjectInformation).Append("\n");
            sb.Append("  OriginalDentalEncodingSystemInformation: ").Append(OriginalDentalEncodingSystemInformation).Append("\n");
            sb.Append("  TransmittalDentalEncodingSystemInformation: ").Append(TransmittalDentalEncodingSystemInformation).Append("\n");
            sb.Append("  DentalHistoryDataDetail: ").Append(DentalHistoryDataDetail).Append("\n");
            sb.Append("  ToothDataDetail: ").Append(ToothDataDetail).Append("\n");
            sb.Append("  MouthDataDetail: ").Append(MouthDataDetail).Append("\n");
            sb.Append("  DentalStudyToothImprintDetail: ").Append(DentalStudyToothImprintDetail).Append("\n");
            sb.Append("  ForensicDentalComment: ").Append(ForensicDentalComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomForensicDentalOralDetailType)obj);
        }

        /// <summary>
        /// Returns true if BiomForensicDentalOralDetailType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomForensicDentalOralDetailType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomForensicDentalOralDetailType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BiometricCapture == other.BiometricCapture ||
                    BiometricCapture != null &&
                    BiometricCapture.SequenceEqual(other.BiometricCapture)
                ) && 
                (
                    ForensicDentalSetting == other.ForensicDentalSetting ||
                    ForensicDentalSetting != null &&
                    ForensicDentalSetting.SequenceEqual(other.ForensicDentalSetting)
                ) && 
                (
                    DentalSubjectInformation == other.DentalSubjectInformation ||
                    DentalSubjectInformation != null &&
                    DentalSubjectInformation.SequenceEqual(other.DentalSubjectInformation)
                ) && 
                (
                    OriginalDentalEncodingSystemInformation == other.OriginalDentalEncodingSystemInformation ||
                    OriginalDentalEncodingSystemInformation != null &&
                    OriginalDentalEncodingSystemInformation.SequenceEqual(other.OriginalDentalEncodingSystemInformation)
                ) && 
                (
                    TransmittalDentalEncodingSystemInformation == other.TransmittalDentalEncodingSystemInformation ||
                    TransmittalDentalEncodingSystemInformation != null &&
                    TransmittalDentalEncodingSystemInformation.SequenceEqual(other.TransmittalDentalEncodingSystemInformation)
                ) && 
                (
                    DentalHistoryDataDetail == other.DentalHistoryDataDetail ||
                    DentalHistoryDataDetail != null &&
                    DentalHistoryDataDetail.SequenceEqual(other.DentalHistoryDataDetail)
                ) && 
                (
                    ToothDataDetail == other.ToothDataDetail ||
                    ToothDataDetail != null &&
                    ToothDataDetail.SequenceEqual(other.ToothDataDetail)
                ) && 
                (
                    MouthDataDetail == other.MouthDataDetail ||
                    MouthDataDetail != null &&
                    MouthDataDetail.SequenceEqual(other.MouthDataDetail)
                ) && 
                (
                    DentalStudyToothImprintDetail == other.DentalStudyToothImprintDetail ||
                    DentalStudyToothImprintDetail != null &&
                    DentalStudyToothImprintDetail.SequenceEqual(other.DentalStudyToothImprintDetail)
                ) && 
                (
                    ForensicDentalComment == other.ForensicDentalComment ||
                    ForensicDentalComment != null &&
                    ForensicDentalComment.SequenceEqual(other.ForensicDentalComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BiometricCapture != null)
                    hashCode = hashCode * 59 + BiometricCapture.GetHashCode();
                    if (ForensicDentalSetting != null)
                    hashCode = hashCode * 59 + ForensicDentalSetting.GetHashCode();
                    if (DentalSubjectInformation != null)
                    hashCode = hashCode * 59 + DentalSubjectInformation.GetHashCode();
                    if (OriginalDentalEncodingSystemInformation != null)
                    hashCode = hashCode * 59 + OriginalDentalEncodingSystemInformation.GetHashCode();
                    if (TransmittalDentalEncodingSystemInformation != null)
                    hashCode = hashCode * 59 + TransmittalDentalEncodingSystemInformation.GetHashCode();
                    if (DentalHistoryDataDetail != null)
                    hashCode = hashCode * 59 + DentalHistoryDataDetail.GetHashCode();
                    if (ToothDataDetail != null)
                    hashCode = hashCode * 59 + ToothDataDetail.GetHashCode();
                    if (MouthDataDetail != null)
                    hashCode = hashCode * 59 + MouthDataDetail.GetHashCode();
                    if (DentalStudyToothImprintDetail != null)
                    hashCode = hashCode * 59 + DentalStudyToothImprintDetail.GetHashCode();
                    if (ForensicDentalComment != null)
                    hashCode = hashCode * 59 + ForensicDentalComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomForensicDentalOralDetailType left, BiomForensicDentalOralDetailType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomForensicDentalOralDetailType left, BiomForensicDentalOralDetailType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
