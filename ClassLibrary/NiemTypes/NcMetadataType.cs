/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for information that further qualifies primary data; data about data.
    /// </summary>
    [DataContract]
    public partial class NcMetadataType : IEquatable<NcMetadataType>
    { 
        /// <summary>
        /// A warning or caution about the information. NIEM reference is nc:CaveatText
        /// </summary>
        /// <value>A warning or caution about the information. NIEM reference is nc:CaveatText</value>

        [DataMember(Name="caveat")]
        public List<NcTextType> Caveat { get; set; }

        /// <summary>
        /// An identifier generated locally within a processing system used to identify sub-records within an entity of interest record. NIEM reference is nc:AdministrativeID
        /// </summary>
        /// <value>An identifier generated locally within a processing system used to identify sub-records within an entity of interest record. NIEM reference is nc:AdministrativeID</value>

        [DataMember(Name="administrativeId")]
        public List<NiemXsstring> AdministrativeId { get; set; }

        /// <summary>
        /// A set of allowable recipients of information; dissemination statement or instructions. NIEM reference is nc:DistributionText
        /// </summary>
        /// <value>A set of allowable recipients of information; dissemination statement or instructions. NIEM reference is nc:DistributionText</value>

        [DataMember(Name="distribution")]
        public List<NcTextType> Distribution { get; set; }

        /// <summary>
        /// A date that information take effect. NIEM reference is nc:EffectiveDate
        /// </summary>
        /// <value>A date that information take effect. NIEM reference is nc:EffectiveDate</value>

        [DataMember(Name="effectiveDate")]
        public List<NcDateType> EffectiveDate { get; set; }

        /// <summary>
        /// A date after which information is no longer valid. NIEM reference is nc:ExpirationDate
        /// </summary>
        /// <value>A date after which information is no longer valid. NIEM reference is nc:ExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// A date information was last modified. NIEM reference is nc:LastUpdatedDate
        /// </summary>
        /// <value>A date information was last modified. NIEM reference is nc:LastUpdatedDate</value>

        [DataMember(Name="lastUpdatedDate")]
        public List<NcDateType> LastUpdatedDate { get; set; }

        /// <summary>
        /// A date information was last checked for accuracy. NIEM reference is nc:LastVerifiedDate
        /// </summary>
        /// <value>A date information was last checked for accuracy. NIEM reference is nc:LastVerifiedDate</value>

        [DataMember(Name="lastVerifiedDate")]
        public List<NcDateType> LastVerifiedDate { get; set; }

        /// <summary>
        /// A decimal value that indicates computed likelihood that what the content is true or accurate. This value is based on a calculation of probability of occurrence or truth. NIEM reference is nc:ProbabilityPercent
        /// </summary>
        /// <value>A decimal value that indicates computed likelihood that what the content is true or accurate. This value is based on a calculation of probability of occurrence or truth. NIEM reference is nc:ProbabilityPercent</value>

        [DataMember(Name="probabilityPercent")]
        public List<NiemXsdecimal> ProbabilityPercent { get; set; }

        /// <summary>
        /// A remark, explanation, or observation regarding the accuracy or trustworthiness of the information. NIEM reference is nc:QualityComment
        /// </summary>
        /// <value>A remark, explanation, or observation regarding the accuracy or trustworthiness of the information. NIEM reference is nc:QualityComment</value>

        [DataMember(Name="qualityComment")]
        public List<NcCommentType> QualityComment { get; set; }

        /// <summary>
        /// A value that indicates belief that content is accurate or trustworthy. NIEM reference is nc:ConfidencePercent
        /// </summary>
        /// <value>A value that indicates belief that content is accurate or trustworthy. NIEM reference is nc:ConfidencePercent</value>

        [DataMember(Name="confidencePercent")]
        public List<NiemXsdecimal> ConfidencePercent { get; set; }

        /// <summary>
        /// A date information was observed, measured, identified, or became known. NIEM reference is nc:ReportedDate
        /// </summary>
        /// <value>A date information was observed, measured, identified, or became known. NIEM reference is nc:ReportedDate</value>

        [DataMember(Name="reportedDate")]
        public List<NcDateType> ReportedDate { get; set; }

        /// <summary>
        /// A name, identifier, or reference of an organization that provided the information. NIEM reference is nc:ReportingOrganizationText
        /// </summary>
        /// <value>A name, identifier, or reference of an organization that provided the information. NIEM reference is nc:ReportingOrganizationText</value>

        [DataMember(Name="reportingOrganization")]
        public List<NcTextType> ReportingOrganization { get; set; }

        /// <summary>
        /// A type, responsibility, or role of a person who provided the information. NIEM reference is nc:ReportingPersonRoleText
        /// </summary>
        /// <value>A type, responsibility, or role of a person who provided the information. NIEM reference is nc:ReportingPersonRoleText</value>

        [DataMember(Name="reportingPersonRole")]
        public List<NcTextType> ReportingPersonRole { get; set; }

        /// <summary>
        /// A name, identifier, or reference of a person who provided the information. NIEM reference is nc:ReportingPersonText
        /// </summary>
        /// <value>A name, identifier, or reference of a person who provided the information. NIEM reference is nc:ReportingPersonText</value>

        [DataMember(Name="reportingPerson")]
        public List<NcTextType> ReportingPerson { get; set; }

        /// <summary>
        /// A sensitivity level of the information. NIEM reference is nc:SensitivityText
        /// </summary>
        /// <value>A sensitivity level of the information. NIEM reference is nc:SensitivityText</value>

        [DataMember(Name="sensitivity")]
        public List<NcTextType> Sensitivity { get; set; }

        /// <summary>
        /// A name of an entity primarily responsible for generating or producing the information. NIEM reference is nc:CreatorName
        /// </summary>
        /// <value>A name of an entity primarily responsible for generating or producing the information. NIEM reference is nc:CreatorName</value>

        [DataMember(Name="creatorName")]
        public List<NcTextType> CreatorName { get; set; }

        /// <summary>
        /// A description of the information. NIEM reference is nc:DescriptionText
        /// </summary>
        /// <value>A description of the information. NIEM reference is nc:DescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A number or string set by a data provider so that information that is sent can be retraced back to its source. NIEM reference is nc:SourceIDText
        /// </summary>
        /// <value>A number or string set by a data provider so that information that is sent can be retraced back to its source. NIEM reference is nc:SourceIDText</value>

        [DataMember(Name="sourceId")]
        public List<NcTextType> SourceId { get; set; }

        /// <summary>
        /// A person who can answer questions about the information. NIEM reference is nc:SourceContactPersonText
        /// </summary>
        /// <value>A person who can answer questions about the information. NIEM reference is nc:SourceContactPersonText</value>

        [DataMember(Name="sourceContactPerson")]
        public List<NcTextType> SourceContactPerson { get; set; }

        /// <summary>
        /// A name of an entity responsible for the publication of the information. NIEM reference is nc:PublisherName
        /// </summary>
        /// <value>A name of an entity responsible for the publication of the information. NIEM reference is nc:PublisherName</value>

        [DataMember(Name="publisherName")]
        public List<NcTextType> PublisherName { get; set; }

        /// <summary>
        /// A date the information was first released for dissemination. NIEM reference is nc:ReleaseDate
        /// </summary>
        /// <value>A date the information was first released for dissemination. NIEM reference is nc:ReleaseDate</value>

        [DataMember(Name="releaseDate")]
        public List<NcDateType> ReleaseDate { get; set; }

        /// <summary>
        /// An identifier assigned to the repository from which the information originated. NIEM reference is nc:RepositoryID
        /// </summary>
        /// <value>An identifier assigned to the repository from which the information originated. NIEM reference is nc:RepositoryID</value>

        [DataMember(Name="repositoryId")]
        public List<NiemXsstring> RepositoryId { get; set; }

        /// <summary>
        /// A name, identifier, or reference of a resource from which the information was taken. NIEM reference is nc:SourceText
        /// </summary>
        /// <value>A name, identifier, or reference of a resource from which the information was taken. NIEM reference is nc:SourceText</value>

        [DataMember(Name="source")]
        public List<NcTextType> Source { get; set; }

        /// <summary>
        /// A system of words or symbols used for communication. NIEM reference is nc:LanguageCode
        /// </summary>
        /// <value>A system of words or symbols used for communication. NIEM reference is nc:LanguageCode</value>

        [DataMember(Name="languageCode")]
        public List<Iso6393LanguageCodeType> LanguageCode { get; set; }

        /// <summary>
        /// A name of a system of words or symbols used for communication. NIEM reference is nc:LanguageName
        /// </summary>
        /// <value>A name of a system of words or symbols used for communication. NIEM reference is nc:LanguageName</value>

        [DataMember(Name="languageName")]
        public List<NcTextType> LanguageName { get; set; }

        /// <summary>
        /// A comment, note, or remark. NIEM reference is nc:Comment
        /// </summary>
        /// <value>A comment, note, or remark. NIEM reference is nc:Comment</value>

        [DataMember(Name="comment")]
        public List<NcCommentType> Comment { get; set; }

        /// <summary>
        /// ncMetadataType JSON-LD context
        /// </summary>
        /// <value>ncMetadataType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncMetadataTypeContextJsonldEnum for ../JSON-LD_Contexts/ncMetadataTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncMetadataTypeContext.jsonld")]
            JSONLDContextsncMetadataTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncMetadataType JSON-LD context
        /// </summary>
        /// <value>ncMetadataType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcMetadataType {\n");
            sb.Append("  Caveat: ").Append(Caveat).Append("\n");
            sb.Append("  AdministrativeId: ").Append(AdministrativeId).Append("\n");
            sb.Append("  Distribution: ").Append(Distribution).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  LastUpdatedDate: ").Append(LastUpdatedDate).Append("\n");
            sb.Append("  LastVerifiedDate: ").Append(LastVerifiedDate).Append("\n");
            sb.Append("  ProbabilityPercent: ").Append(ProbabilityPercent).Append("\n");
            sb.Append("  QualityComment: ").Append(QualityComment).Append("\n");
            sb.Append("  ConfidencePercent: ").Append(ConfidencePercent).Append("\n");
            sb.Append("  ReportedDate: ").Append(ReportedDate).Append("\n");
            sb.Append("  ReportingOrganization: ").Append(ReportingOrganization).Append("\n");
            sb.Append("  ReportingPersonRole: ").Append(ReportingPersonRole).Append("\n");
            sb.Append("  ReportingPerson: ").Append(ReportingPerson).Append("\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("  CreatorName: ").Append(CreatorName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  SourceContactPerson: ").Append(SourceContactPerson).Append("\n");
            sb.Append("  PublisherName: ").Append(PublisherName).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  RepositoryId: ").Append(RepositoryId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageName: ").Append(LanguageName).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcMetadataType)obj);
        }

        /// <summary>
        /// Returns true if NcMetadataType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcMetadataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcMetadataType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Caveat == other.Caveat ||
                    Caveat != null &&
                    Caveat.SequenceEqual(other.Caveat)
                ) && 
                (
                    AdministrativeId == other.AdministrativeId ||
                    AdministrativeId != null &&
                    AdministrativeId.SequenceEqual(other.AdministrativeId)
                ) && 
                (
                    Distribution == other.Distribution ||
                    Distribution != null &&
                    Distribution.SequenceEqual(other.Distribution)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.SequenceEqual(other.EffectiveDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    LastUpdatedDate == other.LastUpdatedDate ||
                    LastUpdatedDate != null &&
                    LastUpdatedDate.SequenceEqual(other.LastUpdatedDate)
                ) && 
                (
                    LastVerifiedDate == other.LastVerifiedDate ||
                    LastVerifiedDate != null &&
                    LastVerifiedDate.SequenceEqual(other.LastVerifiedDate)
                ) && 
                (
                    ProbabilityPercent == other.ProbabilityPercent ||
                    ProbabilityPercent != null &&
                    ProbabilityPercent.SequenceEqual(other.ProbabilityPercent)
                ) && 
                (
                    QualityComment == other.QualityComment ||
                    QualityComment != null &&
                    QualityComment.SequenceEqual(other.QualityComment)
                ) && 
                (
                    ConfidencePercent == other.ConfidencePercent ||
                    ConfidencePercent != null &&
                    ConfidencePercent.SequenceEqual(other.ConfidencePercent)
                ) && 
                (
                    ReportedDate == other.ReportedDate ||
                    ReportedDate != null &&
                    ReportedDate.SequenceEqual(other.ReportedDate)
                ) && 
                (
                    ReportingOrganization == other.ReportingOrganization ||
                    ReportingOrganization != null &&
                    ReportingOrganization.SequenceEqual(other.ReportingOrganization)
                ) && 
                (
                    ReportingPersonRole == other.ReportingPersonRole ||
                    ReportingPersonRole != null &&
                    ReportingPersonRole.SequenceEqual(other.ReportingPersonRole)
                ) && 
                (
                    ReportingPerson == other.ReportingPerson ||
                    ReportingPerson != null &&
                    ReportingPerson.SequenceEqual(other.ReportingPerson)
                ) && 
                (
                    Sensitivity == other.Sensitivity ||
                    Sensitivity != null &&
                    Sensitivity.SequenceEqual(other.Sensitivity)
                ) && 
                (
                    CreatorName == other.CreatorName ||
                    CreatorName != null &&
                    CreatorName.SequenceEqual(other.CreatorName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    SourceId == other.SourceId ||
                    SourceId != null &&
                    SourceId.SequenceEqual(other.SourceId)
                ) && 
                (
                    SourceContactPerson == other.SourceContactPerson ||
                    SourceContactPerson != null &&
                    SourceContactPerson.SequenceEqual(other.SourceContactPerson)
                ) && 
                (
                    PublisherName == other.PublisherName ||
                    PublisherName != null &&
                    PublisherName.SequenceEqual(other.PublisherName)
                ) && 
                (
                    ReleaseDate == other.ReleaseDate ||
                    ReleaseDate != null &&
                    ReleaseDate.SequenceEqual(other.ReleaseDate)
                ) && 
                (
                    RepositoryId == other.RepositoryId ||
                    RepositoryId != null &&
                    RepositoryId.SequenceEqual(other.RepositoryId)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.SequenceEqual(other.Source)
                ) && 
                (
                    LanguageCode == other.LanguageCode ||
                    LanguageCode != null &&
                    LanguageCode.SequenceEqual(other.LanguageCode)
                ) && 
                (
                    LanguageName == other.LanguageName ||
                    LanguageName != null &&
                    LanguageName.SequenceEqual(other.LanguageName)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Caveat != null)
                    hashCode = hashCode * 59 + Caveat.GetHashCode();
                    if (AdministrativeId != null)
                    hashCode = hashCode * 59 + AdministrativeId.GetHashCode();
                    if (Distribution != null)
                    hashCode = hashCode * 59 + Distribution.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (LastUpdatedDate != null)
                    hashCode = hashCode * 59 + LastUpdatedDate.GetHashCode();
                    if (LastVerifiedDate != null)
                    hashCode = hashCode * 59 + LastVerifiedDate.GetHashCode();
                    if (ProbabilityPercent != null)
                    hashCode = hashCode * 59 + ProbabilityPercent.GetHashCode();
                    if (QualityComment != null)
                    hashCode = hashCode * 59 + QualityComment.GetHashCode();
                    if (ConfidencePercent != null)
                    hashCode = hashCode * 59 + ConfidencePercent.GetHashCode();
                    if (ReportedDate != null)
                    hashCode = hashCode * 59 + ReportedDate.GetHashCode();
                    if (ReportingOrganization != null)
                    hashCode = hashCode * 59 + ReportingOrganization.GetHashCode();
                    if (ReportingPersonRole != null)
                    hashCode = hashCode * 59 + ReportingPersonRole.GetHashCode();
                    if (ReportingPerson != null)
                    hashCode = hashCode * 59 + ReportingPerson.GetHashCode();
                    if (Sensitivity != null)
                    hashCode = hashCode * 59 + Sensitivity.GetHashCode();
                    if (CreatorName != null)
                    hashCode = hashCode * 59 + CreatorName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (SourceId != null)
                    hashCode = hashCode * 59 + SourceId.GetHashCode();
                    if (SourceContactPerson != null)
                    hashCode = hashCode * 59 + SourceContactPerson.GetHashCode();
                    if (PublisherName != null)
                    hashCode = hashCode * 59 + PublisherName.GetHashCode();
                    if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                    if (RepositoryId != null)
                    hashCode = hashCode * 59 + RepositoryId.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                    if (LanguageName != null)
                    hashCode = hashCode * 59 + LanguageName.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcMetadataType left, NcMetadataType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcMetadataType left, NcMetadataType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
