/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a description of DNA mitochondrial data
    /// </summary>
    [DataContract]
    public partial class BiomDNAMitochondrialDataType : IEquatable<BiomDNAMitochondrialDataType>
    { 
        /// <summary>
        /// A kind of DNA codes for mitochondrial DNA region HV1 NIEM reference is biom:DNAMitoControlRegion1Text
        /// </summary>
        /// <value>A kind of DNA codes for mitochondrial DNA region HV1 NIEM reference is biom:DNAMitoControlRegion1Text</value>

        [DataMember(Name="dnaMitoControlRegion1")]
        public List<NcTextType> DnaMitoControlRegion1 { get; set; }

        /// <summary>
        /// A kind of DNA codes for mitochondrial DNA regions HV2 and HV3 NIEM reference is biom:DNAMitoControlRegion2Text
        /// </summary>
        /// <value>A kind of DNA codes for mitochondrial DNA regions HV2 and HV3 NIEM reference is biom:DNAMitoControlRegion2Text</value>

        [DataMember(Name="dnaMitoControlRegion2")]
        public List<NcTextType> DnaMitoControlRegion2 { get; set; }

        /// <summary>
        /// A number indicating the mitochondrial DNA base composition starting point, where the primer pair starts interrogating the mitochondrial DNA NIEM reference is biom:DNAMitoBaseStartNumeric
        /// </summary>
        /// <value>A number indicating the mitochondrial DNA base composition starting point, where the primer pair starts interrogating the mitochondrial DNA NIEM reference is biom:DNAMitoBaseStartNumeric</value>

        [DataMember(Name="dnaMitoBaseStartNumeric")]
        public List<NiemXspositiveInteger> DnaMitoBaseStartNumeric { get; set; }

        /// <summary>
        /// A number indicating the mitochondrial DNA base composition ending point, where the primer pair stops interrogating the mitochondrial DNA NIEM reference is biom:DNAMitoBaseEndNumeric
        /// </summary>
        /// <value>A number indicating the mitochondrial DNA base composition ending point, where the primer pair stops interrogating the mitochondrial DNA NIEM reference is biom:DNAMitoBaseEndNumeric</value>

        [DataMember(Name="dnaMitoBaseEndNumeric")]
        public List<NiemXspositiveInteger> DnaMitoBaseEndNumeric { get; set; }

        /// <summary>
        /// A count of the mitochondrial DNA base composition adenines in the region being amplified NIEM reference is biom:DNAMitoBaseAdenineQuantity
        /// </summary>
        /// <value>A count of the mitochondrial DNA base composition adenines in the region being amplified NIEM reference is biom:DNAMitoBaseAdenineQuantity</value>

        [DataMember(Name="dnaMitoBaseAdenineQuantity")]
        public List<BiomInteger1to99Type> DnaMitoBaseAdenineQuantity { get; set; }

        /// <summary>
        /// A count of the mitochondrial DNA base composition guanines in the region being amplified NIEM reference is biom:DNAMitoBaseGuanineQuantity
        /// </summary>
        /// <value>A count of the mitochondrial DNA base composition guanines in the region being amplified NIEM reference is biom:DNAMitoBaseGuanineQuantity</value>

        [DataMember(Name="dnaMitoBaseGuanineQuantity")]
        public List<BiomInteger1to99Type> DnaMitoBaseGuanineQuantity { get; set; }

        /// <summary>
        /// A count of the mitochondrial DNA base composition cytosines in the region being amplified NIEM reference is biom:DNAMitoBaseCytosineQuantity
        /// </summary>
        /// <value>A count of the mitochondrial DNA base composition cytosines in the region being amplified NIEM reference is biom:DNAMitoBaseCytosineQuantity</value>

        [DataMember(Name="dnaMitoBaseCytosineQuantity")]
        public List<BiomInteger1to99Type> DnaMitoBaseCytosineQuantity { get; set; }

        /// <summary>
        /// A count of the mitochondrial DNA base composition thymines in the region being amplified NIEM reference is biom:DNAMitoBaseThymineQuantity
        /// </summary>
        /// <value>A count of the mitochondrial DNA base composition thymines in the region being amplified NIEM reference is biom:DNAMitoBaseThymineQuantity</value>

        [DataMember(Name="dnaMitoBaseThymineQuantity")]
        public List<BiomInteger1to99Type> DnaMitoBaseThymineQuantity { get; set; }

        /// <summary>
        /// biomDNAMitochondrialDataType JSON-LD context
        /// </summary>
        /// <value>biomDNAMitochondrialDataType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDNAMitochondrialDataTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDNAMitochondrialDataTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDNAMitochondrialDataTypeContext.jsonld")]
            JSONLDContextsbiomDNAMitochondrialDataTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDNAMitochondrialDataType JSON-LD context
        /// </summary>
        /// <value>biomDNAMitochondrialDataType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDNAMitochondrialDataType {\n");
            sb.Append("  DnaMitoControlRegion1: ").Append(DnaMitoControlRegion1).Append("\n");
            sb.Append("  DnaMitoControlRegion2: ").Append(DnaMitoControlRegion2).Append("\n");
            sb.Append("  DnaMitoBaseStartNumeric: ").Append(DnaMitoBaseStartNumeric).Append("\n");
            sb.Append("  DnaMitoBaseEndNumeric: ").Append(DnaMitoBaseEndNumeric).Append("\n");
            sb.Append("  DnaMitoBaseAdenineQuantity: ").Append(DnaMitoBaseAdenineQuantity).Append("\n");
            sb.Append("  DnaMitoBaseGuanineQuantity: ").Append(DnaMitoBaseGuanineQuantity).Append("\n");
            sb.Append("  DnaMitoBaseCytosineQuantity: ").Append(DnaMitoBaseCytosineQuantity).Append("\n");
            sb.Append("  DnaMitoBaseThymineQuantity: ").Append(DnaMitoBaseThymineQuantity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDNAMitochondrialDataType)obj);
        }

        /// <summary>
        /// Returns true if BiomDNAMitochondrialDataType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDNAMitochondrialDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDNAMitochondrialDataType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DnaMitoControlRegion1 == other.DnaMitoControlRegion1 ||
                    DnaMitoControlRegion1 != null &&
                    DnaMitoControlRegion1.SequenceEqual(other.DnaMitoControlRegion1)
                ) && 
                (
                    DnaMitoControlRegion2 == other.DnaMitoControlRegion2 ||
                    DnaMitoControlRegion2 != null &&
                    DnaMitoControlRegion2.SequenceEqual(other.DnaMitoControlRegion2)
                ) && 
                (
                    DnaMitoBaseStartNumeric == other.DnaMitoBaseStartNumeric ||
                    DnaMitoBaseStartNumeric != null &&
                    DnaMitoBaseStartNumeric.SequenceEqual(other.DnaMitoBaseStartNumeric)
                ) && 
                (
                    DnaMitoBaseEndNumeric == other.DnaMitoBaseEndNumeric ||
                    DnaMitoBaseEndNumeric != null &&
                    DnaMitoBaseEndNumeric.SequenceEqual(other.DnaMitoBaseEndNumeric)
                ) && 
                (
                    DnaMitoBaseAdenineQuantity == other.DnaMitoBaseAdenineQuantity ||
                    DnaMitoBaseAdenineQuantity != null &&
                    DnaMitoBaseAdenineQuantity.SequenceEqual(other.DnaMitoBaseAdenineQuantity)
                ) && 
                (
                    DnaMitoBaseGuanineQuantity == other.DnaMitoBaseGuanineQuantity ||
                    DnaMitoBaseGuanineQuantity != null &&
                    DnaMitoBaseGuanineQuantity.SequenceEqual(other.DnaMitoBaseGuanineQuantity)
                ) && 
                (
                    DnaMitoBaseCytosineQuantity == other.DnaMitoBaseCytosineQuantity ||
                    DnaMitoBaseCytosineQuantity != null &&
                    DnaMitoBaseCytosineQuantity.SequenceEqual(other.DnaMitoBaseCytosineQuantity)
                ) && 
                (
                    DnaMitoBaseThymineQuantity == other.DnaMitoBaseThymineQuantity ||
                    DnaMitoBaseThymineQuantity != null &&
                    DnaMitoBaseThymineQuantity.SequenceEqual(other.DnaMitoBaseThymineQuantity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DnaMitoControlRegion1 != null)
                    hashCode = hashCode * 59 + DnaMitoControlRegion1.GetHashCode();
                    if (DnaMitoControlRegion2 != null)
                    hashCode = hashCode * 59 + DnaMitoControlRegion2.GetHashCode();
                    if (DnaMitoBaseStartNumeric != null)
                    hashCode = hashCode * 59 + DnaMitoBaseStartNumeric.GetHashCode();
                    if (DnaMitoBaseEndNumeric != null)
                    hashCode = hashCode * 59 + DnaMitoBaseEndNumeric.GetHashCode();
                    if (DnaMitoBaseAdenineQuantity != null)
                    hashCode = hashCode * 59 + DnaMitoBaseAdenineQuantity.GetHashCode();
                    if (DnaMitoBaseGuanineQuantity != null)
                    hashCode = hashCode * 59 + DnaMitoBaseGuanineQuantity.GetHashCode();
                    if (DnaMitoBaseCytosineQuantity != null)
                    hashCode = hashCode * 59 + DnaMitoBaseCytosineQuantity.GetHashCode();
                    if (DnaMitoBaseThymineQuantity != null)
                    hashCode = hashCode * 59 + DnaMitoBaseThymineQuantity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDNAMitochondrialDataType left, BiomDNAMitochondrialDataType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDNAMitochondrialDataType left, BiomDNAMitochondrialDataType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
