/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a conveyance.
    /// </summary>
    [DataContract]
    public partial class CbrnConveyanceAugmentationType : IEquatable<CbrnConveyanceAugmentationType>
    { 
        /// <summary>
        /// An identifier of a kind of a conveyance.  For example: Ship, Airplane, Truck, etc. NIEM reference is cbrn:ConveyanceKindCode
        /// </summary>
        /// <value>An identifier of a kind of a conveyance.  For example: Ship, Airplane, Truck, etc. NIEM reference is cbrn:ConveyanceKindCode</value>

        [DataMember(Name="conveyanceKindCode")]
        public List<CbrnclConveyanceKindCodeType> ConveyanceKindCode { get; set; }

        /// <summary>
        /// A description of conveyance weight, such as gross weight, axle weight, etc., this element is used to provide the description that is applicable to the value provided by the Conveyance weight measure. NIEM reference is cbrn:ConveyanceWeightDescriptionText
        /// </summary>
        /// <value>A description of conveyance weight, such as gross weight, axle weight, etc., this element is used to provide the description that is applicable to the value provided by the Conveyance weight measure. NIEM reference is cbrn:ConveyanceWeightDescriptionText</value>

        [DataMember(Name="conveyanceWeightDescription")]
        public List<NcTextType> ConveyanceWeightDescription { get; set; }

        /// <summary>
        /// cbrnConveyanceAugmentationType JSON-LD context
        /// </summary>
        /// <value>cbrnConveyanceAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextscbrnConveyanceAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/cbrnConveyanceAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/cbrnConveyanceAugmentationTypeContext.jsonld")]
            JSONLDContextscbrnConveyanceAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// cbrnConveyanceAugmentationType JSON-LD context
        /// </summary>
        /// <value>cbrnConveyanceAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CbrnConveyanceAugmentationType {\n");
            sb.Append("  ConveyanceKindCode: ").Append(ConveyanceKindCode).Append("\n");
            sb.Append("  ConveyanceWeightDescription: ").Append(ConveyanceWeightDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CbrnConveyanceAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if CbrnConveyanceAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of CbrnConveyanceAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CbrnConveyanceAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConveyanceKindCode == other.ConveyanceKindCode ||
                    ConveyanceKindCode != null &&
                    ConveyanceKindCode.SequenceEqual(other.ConveyanceKindCode)
                ) && 
                (
                    ConveyanceWeightDescription == other.ConveyanceWeightDescription ||
                    ConveyanceWeightDescription != null &&
                    ConveyanceWeightDescription.SequenceEqual(other.ConveyanceWeightDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConveyanceKindCode != null)
                    hashCode = hashCode * 59 + ConveyanceKindCode.GetHashCode();
                    if (ConveyanceWeightDescription != null)
                    hashCode = hashCode * 59 + ConveyanceWeightDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CbrnConveyanceAugmentationType left, CbrnConveyanceAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CbrnConveyanceAugmentationType left, CbrnConveyanceAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
