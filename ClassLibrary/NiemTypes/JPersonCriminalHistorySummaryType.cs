/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a quantitative sketch or simplification of a person&#x27;s criminal history encompassing arrest and conviction offenses.
    /// </summary>
    [DataContract]
    public partial class JPersonCriminalHistorySummaryType : NcActivityType, IEquatable<JPersonCriminalHistorySummaryType>
    { 
        /// <summary>
        /// True if a person has been arrested for a sexual offense; false otherwise. NIEM reference is j:SexualOffenseArrestIndicator
        /// </summary>
        /// <value>True if a person has been arrested for a sexual offense; false otherwise. NIEM reference is j:SexualOffenseArrestIndicator</value>

        [DataMember(Name="isSexualOffenseArrest")]
        public List<NiemXsboolean> IsSexualOffenseArrest { get; set; }

        /// <summary>
        /// A summary of a type of offense. NIEM reference is j:OffenseSummary
        /// </summary>
        /// <value>A summary of a type of offense. NIEM reference is j:OffenseSummary</value>

        [DataMember(Name="offenseSummary")]
        public List<JOffenseSummaryType> OffenseSummary { get; set; }

        /// <summary>
        /// A description of the violator class as assigned by the DEA. NIEM reference is j:DEAViolatorClassText
        /// </summary>
        /// <value>A description of the violator class as assigned by the DEA. NIEM reference is j:DEAViolatorClassText</value>

        [DataMember(Name="deaViolatorClass")]
        public List<NcTextType> DeaViolatorClass { get; set; }

        /// <summary>
        /// True if a person is a registered sexual offender; false otherwise. NIEM reference is j:RegisteredSexualOffenderIndicator
        /// </summary>
        /// <value>True if a person is a registered sexual offender; false otherwise. NIEM reference is j:RegisteredSexualOffenderIndicator</value>

        [DataMember(Name="isRegisteredSexualOffender")]
        public List<NiemXsboolean> IsRegisteredSexualOffender { get; set; }

        /// <summary>
        /// True if a person is presently in violation of their requirement to register; false otherwise. NIEM reference is j:RegisteredSexualOffenderAbsconderIndicator
        /// </summary>
        /// <value>True if a person is presently in violation of their requirement to register; false otherwise. NIEM reference is j:RegisteredSexualOffenderAbsconderIndicator</value>

        [DataMember(Name="isRegisteredSexualOffenderAbsconder")]
        public List<NiemXsboolean> IsRegisteredSexualOffenderAbsconder { get; set; }

        /// <summary>
        /// A kind of classification given to a person as a result of criminal history summary evaluation. NIEM reference is j:CriminalHistorySummaryClassificationCategoryText
        /// </summary>
        /// <value>A kind of classification given to a person as a result of criminal history summary evaluation. NIEM reference is j:CriminalHistorySummaryClassificationCategoryText</value>

        [DataMember(Name="criminalHistorySummaryClassificationCategory")]
        public List<NcTextType> CriminalHistorySummaryClassificationCategory { get; set; }

        /// <summary>
        /// True if a person has been convicted of a sexual offense; false otherwise. NIEM reference is j:SexualOffenseConvictionIndicator
        /// </summary>
        /// <value>True if a person has been convicted of a sexual offense; false otherwise. NIEM reference is j:SexualOffenseConvictionIndicator</value>

        [DataMember(Name="isSexualOffenseConviction")]
        public List<NiemXsboolean> IsSexualOffenseConviction { get; set; }

        /// <summary>
        /// True if a person has a violence related arrest or conviction in his or her criminal history; false otherwise. NIEM reference is j:ViolenceHistoryIndicator
        /// </summary>
        /// <value>True if a person has a violence related arrest or conviction in his or her criminal history; false otherwise. NIEM reference is j:ViolenceHistoryIndicator</value>

        [DataMember(Name="isViolenceHistory")]
        public List<NiemXsboolean> IsViolenceHistory { get; set; }

        /// <summary>
        /// A score assigned based on assessment of a subject&#x27;s criminal history. NIEM reference is j:SubjectClassificationAssessmentCriminalHistoryScoreText
        /// </summary>
        /// <value>A score assigned based on assessment of a subject&#x27;s criminal history. NIEM reference is j:SubjectClassificationAssessmentCriminalHistoryScoreText</value>

        [DataMember(Name="subjectClassificationAssessmentCriminalHistoryScore")]
        public List<NcTextType> SubjectClassificationAssessmentCriminalHistoryScore { get; set; }

        /// <summary>
        /// A description of the type of criminal activities engaged in by a subject as assigned by the DEA. NIEM reference is j:GDEPDescriptionText
        /// </summary>
        /// <value>A description of the type of criminal activities engaged in by a subject as assigned by the DEA. NIEM reference is j:GDEPDescriptionText</value>

        [DataMember(Name="gdepDescription")]
        public List<NcTextType> GdepDescription { get; set; }

        /// <summary>
        /// jPersonCriminalHistorySummaryType JSON-LD context
        /// </summary>
        /// <value>jPersonCriminalHistorySummaryType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjPersonCriminalHistorySummaryTypeContextJsonldEnum for ../JSON-LD_Contexts/jPersonCriminalHistorySummaryTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jPersonCriminalHistorySummaryTypeContext.jsonld")]
            JSONLDContextsjPersonCriminalHistorySummaryTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jPersonCriminalHistorySummaryType JSON-LD context
        /// </summary>
        /// <value>jPersonCriminalHistorySummaryType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JPersonCriminalHistorySummaryType {\n");
            sb.Append("  IsSexualOffenseArrest: ").Append(IsSexualOffenseArrest).Append("\n");
            sb.Append("  OffenseSummary: ").Append(OffenseSummary).Append("\n");
            sb.Append("  DeaViolatorClass: ").Append(DeaViolatorClass).Append("\n");
            sb.Append("  IsRegisteredSexualOffender: ").Append(IsRegisteredSexualOffender).Append("\n");
            sb.Append("  IsRegisteredSexualOffenderAbsconder: ").Append(IsRegisteredSexualOffenderAbsconder).Append("\n");
            sb.Append("  CriminalHistorySummaryClassificationCategory: ").Append(CriminalHistorySummaryClassificationCategory).Append("\n");
            sb.Append("  IsSexualOffenseConviction: ").Append(IsSexualOffenseConviction).Append("\n");
            sb.Append("  IsViolenceHistory: ").Append(IsViolenceHistory).Append("\n");
            sb.Append("  SubjectClassificationAssessmentCriminalHistoryScore: ").Append(SubjectClassificationAssessmentCriminalHistoryScore).Append("\n");
            sb.Append("  GdepDescription: ").Append(GdepDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JPersonCriminalHistorySummaryType)obj);
        }

        /// <summary>
        /// Returns true if JPersonCriminalHistorySummaryType instances are equal
        /// </summary>
        /// <param name="other">Instance of JPersonCriminalHistorySummaryType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JPersonCriminalHistorySummaryType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsSexualOffenseArrest == other.IsSexualOffenseArrest ||
                    IsSexualOffenseArrest != null &&
                    IsSexualOffenseArrest.SequenceEqual(other.IsSexualOffenseArrest)
                ) && 
                (
                    OffenseSummary == other.OffenseSummary ||
                    OffenseSummary != null &&
                    OffenseSummary.SequenceEqual(other.OffenseSummary)
                ) && 
                (
                    DeaViolatorClass == other.DeaViolatorClass ||
                    DeaViolatorClass != null &&
                    DeaViolatorClass.SequenceEqual(other.DeaViolatorClass)
                ) && 
                (
                    IsRegisteredSexualOffender == other.IsRegisteredSexualOffender ||
                    IsRegisteredSexualOffender != null &&
                    IsRegisteredSexualOffender.SequenceEqual(other.IsRegisteredSexualOffender)
                ) && 
                (
                    IsRegisteredSexualOffenderAbsconder == other.IsRegisteredSexualOffenderAbsconder ||
                    IsRegisteredSexualOffenderAbsconder != null &&
                    IsRegisteredSexualOffenderAbsconder.SequenceEqual(other.IsRegisteredSexualOffenderAbsconder)
                ) && 
                (
                    CriminalHistorySummaryClassificationCategory == other.CriminalHistorySummaryClassificationCategory ||
                    CriminalHistorySummaryClassificationCategory != null &&
                    CriminalHistorySummaryClassificationCategory.SequenceEqual(other.CriminalHistorySummaryClassificationCategory)
                ) && 
                (
                    IsSexualOffenseConviction == other.IsSexualOffenseConviction ||
                    IsSexualOffenseConviction != null &&
                    IsSexualOffenseConviction.SequenceEqual(other.IsSexualOffenseConviction)
                ) && 
                (
                    IsViolenceHistory == other.IsViolenceHistory ||
                    IsViolenceHistory != null &&
                    IsViolenceHistory.SequenceEqual(other.IsViolenceHistory)
                ) && 
                (
                    SubjectClassificationAssessmentCriminalHistoryScore == other.SubjectClassificationAssessmentCriminalHistoryScore ||
                    SubjectClassificationAssessmentCriminalHistoryScore != null &&
                    SubjectClassificationAssessmentCriminalHistoryScore.SequenceEqual(other.SubjectClassificationAssessmentCriminalHistoryScore)
                ) && 
                (
                    GdepDescription == other.GdepDescription ||
                    GdepDescription != null &&
                    GdepDescription.SequenceEqual(other.GdepDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsSexualOffenseArrest != null)
                    hashCode = hashCode * 59 + IsSexualOffenseArrest.GetHashCode();
                    if (OffenseSummary != null)
                    hashCode = hashCode * 59 + OffenseSummary.GetHashCode();
                    if (DeaViolatorClass != null)
                    hashCode = hashCode * 59 + DeaViolatorClass.GetHashCode();
                    if (IsRegisteredSexualOffender != null)
                    hashCode = hashCode * 59 + IsRegisteredSexualOffender.GetHashCode();
                    if (IsRegisteredSexualOffenderAbsconder != null)
                    hashCode = hashCode * 59 + IsRegisteredSexualOffenderAbsconder.GetHashCode();
                    if (CriminalHistorySummaryClassificationCategory != null)
                    hashCode = hashCode * 59 + CriminalHistorySummaryClassificationCategory.GetHashCode();
                    if (IsSexualOffenseConviction != null)
                    hashCode = hashCode * 59 + IsSexualOffenseConviction.GetHashCode();
                    if (IsViolenceHistory != null)
                    hashCode = hashCode * 59 + IsViolenceHistory.GetHashCode();
                    if (SubjectClassificationAssessmentCriminalHistoryScore != null)
                    hashCode = hashCode * 59 + SubjectClassificationAssessmentCriminalHistoryScore.GetHashCode();
                    if (GdepDescription != null)
                    hashCode = hashCode * 59 + GdepDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JPersonCriminalHistorySummaryType left, JPersonCriminalHistorySummaryType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JPersonCriminalHistorySummaryType left, JPersonCriminalHistorySummaryType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
