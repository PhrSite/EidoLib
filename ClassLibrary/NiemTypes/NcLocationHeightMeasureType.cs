/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a measurement of the height of a location relative to a reference point.
    /// </summary>
    [DataContract]
    public partial class NcLocationHeightMeasureType : NcMeasureType, IEquatable<NcLocationHeightMeasureType>
    { 
        /// <summary>
        /// A code that describes the relationship of a two- or three-dimensional coordinate system to the shape of the Earth. NIEM reference is nc:LocationHeightVerticalDatumCode
        /// </summary>
        /// <value>A code that describes the relationship of a two- or three-dimensional coordinate system to the shape of the Earth. NIEM reference is nc:LocationHeightVerticalDatumCode</value>

        [DataMember(Name="locationHeightVerticalDatumCode")]
        public List<NgaVerticalDatumCodeType> LocationHeightVerticalDatumCode { get; set; }

        /// <summary>
        /// A vertical datum system used to designate the reference point for a height measurement. NIEM reference is nc:LocationHeightVerticalDatumText
        /// </summary>
        /// <value>A vertical datum system used to designate the reference point for a height measurement. NIEM reference is nc:LocationHeightVerticalDatumText</value>

        [DataMember(Name="locationHeightVerticalDatum")]
        public List<NcTextType> LocationHeightVerticalDatum { get; set; }

        /// <summary>
        /// Additional information about a location height. NIEM reference is nc-4.0.1:LocationHeightMeasureAugmentation
        /// </summary>
        /// <value>Additional information about a location height. NIEM reference is nc-4.0.1:LocationHeightMeasureAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<Nc401LocationHeightMeasureAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncLocationHeightMeasureType JSON-LD context
        /// </summary>
        /// <value>ncLocationHeightMeasureType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncLocationHeightMeasureTypeContextJsonldEnum for ../JSON-LD_Contexts/ncLocationHeightMeasureTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncLocationHeightMeasureTypeContext.jsonld")]
            JSONLDContextsncLocationHeightMeasureTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncLocationHeightMeasureType JSON-LD context
        /// </summary>
        /// <value>ncLocationHeightMeasureType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcLocationHeightMeasureType {\n");
            sb.Append("  LocationHeightVerticalDatumCode: ").Append(LocationHeightVerticalDatumCode).Append("\n");
            sb.Append("  LocationHeightVerticalDatum: ").Append(LocationHeightVerticalDatum).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcLocationHeightMeasureType)obj);
        }

        /// <summary>
        /// Returns true if NcLocationHeightMeasureType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcLocationHeightMeasureType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcLocationHeightMeasureType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationHeightVerticalDatumCode == other.LocationHeightVerticalDatumCode ||
                    LocationHeightVerticalDatumCode != null &&
                    LocationHeightVerticalDatumCode.SequenceEqual(other.LocationHeightVerticalDatumCode)
                ) && 
                (
                    LocationHeightVerticalDatum == other.LocationHeightVerticalDatum ||
                    LocationHeightVerticalDatum != null &&
                    LocationHeightVerticalDatum.SequenceEqual(other.LocationHeightVerticalDatum)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationHeightVerticalDatumCode != null)
                    hashCode = hashCode * 59 + LocationHeightVerticalDatumCode.GetHashCode();
                    if (LocationHeightVerticalDatum != null)
                    hashCode = hashCode * 59 + LocationHeightVerticalDatum.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcLocationHeightMeasureType left, NcLocationHeightMeasureType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcLocationHeightMeasureType left, NcLocationHeightMeasureType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
