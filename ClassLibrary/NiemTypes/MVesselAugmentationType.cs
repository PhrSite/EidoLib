/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type that supplements nc:VesselType.
    /// </summary>
    [DataContract]
    public partial class MVesselAugmentationType : IEquatable<MVesselAugmentationType>
    { 
        /// <summary>
        /// A summary of activities of note in which a vessel has participated. NIEM reference is m:VesselActivityHistorySummaryText
        /// </summary>
        /// <value>A summary of activities of note in which a vessel has participated. NIEM reference is m:VesselActivityHistorySummaryText</value>

        [DataMember(Name="vesselActivityHistorySummary")]
        public List<NcTextType> VesselActivityHistorySummary { get; set; }

        /// <summary>
        /// A measure of the beam (breadth) of a vessel. NIEM reference is m:VesselBeamMeasure
        /// </summary>
        /// <value>A measure of the beam (breadth) of a vessel. NIEM reference is m:VesselBeamMeasure</value>

        [DataMember(Name="vesselBeamMeasure")]
        public List<NcLengthMeasureType> VesselBeamMeasure { get; set; }

        /// <summary>
        /// A date (or year) a vessel was built. NIEM reference is m:VesselBuildDate
        /// </summary>
        /// <value>A date (or year) a vessel was built. NIEM reference is m:VesselBuildDate</value>

        [DataMember(Name="vesselBuildDate")]
        public List<NcDateType> VesselBuildDate { get; set; }

        /// <summary>
        /// A call sign for a vessel. NIEM reference is m:VesselCallSignText
        /// </summary>
        /// <value>A call sign for a vessel. NIEM reference is m:VesselCallSignText</value>

        [DataMember(Name="vesselCallSign")]
        public List<NcTextType> VesselCallSign { get; set; }

        /// <summary>
        /// A description of cargo capabilities of a vessel. NIEM reference is m:VesselCargoCapabilityText
        /// </summary>
        /// <value>A description of cargo capabilities of a vessel. NIEM reference is m:VesselCargoCapabilityText</value>

        [DataMember(Name="vesselCargoCapability")]
        public List<NcTextType> VesselCargoCapability { get; set; }

        /// <summary>
        /// A kind of cargo that a vessel is carrying. Cargo types may be categorized as DG&#x3D;Dangerous Goods, HS&#x3D;Harmful Substances, or MP&#x3D;Marine Pollutants. NIEM reference is m:VesselCargoCategoryText
        /// </summary>
        /// <value>A kind of cargo that a vessel is carrying. Cargo types may be categorized as DG&#x3D;Dangerous Goods, HS&#x3D;Harmful Substances, or MP&#x3D;Marine Pollutants. NIEM reference is m:VesselCargoCategoryText</value>

        [DataMember(Name="vesselCargoCategory")]
        public List<NcTextType> VesselCargoCategory { get; set; }

        /// <summary>
        /// True if a vessel is carrying cargo; false otherwise. NIEM reference is m:VesselCargoOnBoardIndicator
        /// </summary>
        /// <value>True if a vessel is carrying cargo; false otherwise. NIEM reference is m:VesselCargoOnBoardIndicator</value>

        [DataMember(Name="isVesselCargoOnBoard")]
        public List<NiemXsboolean> IsVesselCargoOnBoard { get; set; }

        /// <summary>
        /// A kind of vessel based upon the purpose for which the vessel was designed or built. NIEM reference is m:VesselCategoryText
        /// </summary>
        /// <value>A kind of vessel based upon the purpose for which the vessel was designed or built. NIEM reference is m:VesselCategoryText</value>

        [DataMember(Name="vesselCategory")]
        public List<NcTextType> VesselCategory { get; set; }

        /// <summary>
        /// True if a vessel is Certain Dangerous Cargo (CDC) capable; false otherwise. NIEM reference is m:VesselCDCCapableIndicator
        /// </summary>
        /// <value>True if a vessel is Certain Dangerous Cargo (CDC) capable; false otherwise. NIEM reference is m:VesselCDCCapableIndicator</value>

        [DataMember(Name="isVesselCdcCapable")]
        public List<NiemXsboolean> IsVesselCdcCapable { get; set; }

        /// <summary>
        /// True if a vessel is carrying hazardous or Certain Dangerous Cargo (CDC); false otherwise. NIEM reference is m:VesselCDCCargoOnBoardIndicator
        /// </summary>
        /// <value>True if a vessel is carrying hazardous or Certain Dangerous Cargo (CDC); false otherwise. NIEM reference is m:VesselCDCCargoOnBoardIndicator</value>

        [DataMember(Name="isVesselCdcCargoOnBoard")]
        public List<NiemXsboolean> IsVesselCdcCargoOnBoard { get; set; }

        /// <summary>
        /// A responsible party for the Certificate of Financial Responsibility for a vessel. NIEM reference is m:VesselCertificateOfFinancialResponsibilityOperator
        /// </summary>
        /// <value>A responsible party for the Certificate of Financial Responsibility for a vessel. NIEM reference is m:VesselCertificateOfFinancialResponsibilityOperator</value>

        [DataMember(Name="vesselCertificateOfFinancialResponsibilityOperator")]
        public List<NcEntityType> VesselCertificateOfFinancialResponsibilityOperator { get; set; }

        /// <summary>
        /// An entity that chartered a vessel. NIEM reference is m:VesselCharterer
        /// </summary>
        /// <value>An entity that chartered a vessel. NIEM reference is m:VesselCharterer</value>

        [DataMember(Name="vesselCharterer")]
        public List<NcEntityType> VesselCharterer { get; set; }

        /// <summary>
        /// A class or category of a vessel. NIEM reference is m:VesselClassText
        /// </summary>
        /// <value>A class or category of a vessel. NIEM reference is m:VesselClassText</value>

        [DataMember(Name="vesselClass")]
        public List<NcTextType> VesselClass { get; set; }

        /// <summary>
        /// A name of a classification society for a vessel. NIEM reference is m:VesselClassificationSocietyName
        /// </summary>
        /// <value>A name of a classification society for a vessel. NIEM reference is m:VesselClassificationSocietyName</value>

        [DataMember(Name="vesselClassificationSocietyName")]
        public List<NcProperNameTextType> VesselClassificationSocietyName { get; set; }

        /// <summary>
        /// A means of contacting a vessel. NIEM reference is m:VesselContactInformation
        /// </summary>
        /// <value>A means of contacting a vessel. NIEM reference is m:VesselContactInformation</value>

        [DataMember(Name="vesselContactInformation")]
        public List<NcContactInformationType> VesselContactInformation { get; set; }

        /// <summary>
        /// A number of cranes on a vessel. NIEM reference is m:VesselCraneQuantity
        /// </summary>
        /// <value>A number of cranes on a vessel. NIEM reference is m:VesselCraneQuantity</value>

        [DataMember(Name="vesselCraneQuantity")]
        public List<NcQuantityType> VesselCraneQuantity { get; set; }

        /// <summary>
        /// A measure of the range of a vessel while travelling at cruise speed. NIEM reference is m:VesselCruiseRangeMeasure
        /// </summary>
        /// <value>A measure of the range of a vessel while travelling at cruise speed. NIEM reference is m:VesselCruiseRangeMeasure</value>

        [DataMember(Name="vesselCruiseRangeMeasure")]
        public List<NcLengthMeasureType> VesselCruiseRangeMeasure { get; set; }

        /// <summary>
        /// A measure of the cruise speed of a vessel. NIEM reference is m:VesselCruiseSpeedMeasure
        /// </summary>
        /// <value>A measure of the cruise speed of a vessel. NIEM reference is m:VesselCruiseSpeedMeasure</value>

        [DataMember(Name="vesselCruiseSpeedMeasure")]
        public List<NcSpeedMeasureType> VesselCruiseSpeedMeasure { get; set; }

        /// <summary>
        /// True if a vessel has at least one crew member qualified to meet 46 U.S.C Secs 3507, 3508; false otherwise. NIEM reference is m:VesselCVSSAOnBoardIndicator
        /// </summary>
        /// <value>True if a vessel has at least one crew member qualified to meet 46 U.S.C Secs 3507, 3508; false otherwise. NIEM reference is m:VesselCVSSAOnBoardIndicator</value>

        [DataMember(Name="isVesselCvssaOnBoard")]
        public List<NiemXsboolean> IsVesselCvssaOnBoard { get; set; }

        /// <summary>
        /// A measure of the total carrying capacity of a vessel. NIEM reference is m:VesselDeadWeightMeasure
        /// </summary>
        /// <value>A measure of the total carrying capacity of a vessel. NIEM reference is m:VesselDeadWeightMeasure</value>

        [DataMember(Name="vesselDeadWeightMeasure")]
        public List<NcWeightMeasureType> VesselDeadWeightMeasure { get; set; }

        /// <summary>
        /// A deck configuration of a vessel. NIEM reference is m:VesselDeckConfigurationText
        /// </summary>
        /// <value>A deck configuration of a vessel. NIEM reference is m:VesselDeckConfigurationText</value>

        [DataMember(Name="vesselDeckConfiguration")]
        public List<NcTextType> VesselDeckConfiguration { get; set; }

        /// <summary>
        /// A piece of equipment on the deck of a vessel. NIEM reference is m:VesselDeckEquipment
        /// </summary>
        /// <value>A piece of equipment on the deck of a vessel. NIEM reference is m:VesselDeckEquipment</value>

        [DataMember(Name="vesselDeckEquipment")]
        public List<NcItemType> VesselDeckEquipment { get; set; }

        /// <summary>
        /// A description of a vessel. NIEM reference is m:VesselDescriptionText
        /// </summary>
        /// <value>A description of a vessel. NIEM reference is m:VesselDescriptionText</value>

        [DataMember(Name="vesselDescription")]
        public List<NcTextType> VesselDescription { get; set; }

        /// <summary>
        /// A weight of a vessel when empty. NIEM reference is m:VesselDisplacementMeasure
        /// </summary>
        /// <value>A weight of a vessel when empty. NIEM reference is m:VesselDisplacementMeasure</value>

        [DataMember(Name="vesselDisplacementMeasure")]
        public List<NcVolumeMeasureType> VesselDisplacementMeasure { get; set; }

        /// <summary>
        /// A Document of Compliance (DOC) Certificate for a vessel. NIEM reference is m:VesselDOCCertificate
        /// </summary>
        /// <value>A Document of Compliance (DOC) Certificate for a vessel. NIEM reference is m:VesselDOCCertificate</value>

        [DataMember(Name="vesselDocCertificate")]
        public List<MCertificateType> VesselDocCertificate { get; set; }

        /// <summary>
        /// A measure of the draft of a vessel when fully loaded. NIEM reference is m:VesselDraftMeasure
        /// </summary>
        /// <value>A measure of the draft of a vessel when fully loaded. NIEM reference is m:VesselDraftMeasure</value>

        [DataMember(Name="vesselDraftMeasure")]
        public List<NcLengthMeasureType> VesselDraftMeasure { get; set; }

        /// <summary>
        /// A measure of the draft of a vessel when unloaded. NIEM reference is m:VesselDraftUnloadedMeasure
        /// </summary>
        /// <value>A measure of the draft of a vessel when unloaded. NIEM reference is m:VesselDraftUnloadedMeasure</value>

        [DataMember(Name="vesselDraftUnloadedMeasure")]
        public List<NcLengthMeasureType> VesselDraftUnloadedMeasure { get; set; }

        /// <summary>
        /// A piece of electronic equipment on a vessel. NIEM reference is m:VesselElectronicEquipment
        /// </summary>
        /// <value>A piece of electronic equipment on a vessel. NIEM reference is m:VesselElectronicEquipment</value>

        [DataMember(Name="vesselElectronicEquipment")]
        public List<NcItemType> VesselElectronicEquipment { get; set; }

        /// <summary>
        /// An extent of time that, under normal conditions, a vessel can operate without support. NIEM reference is m:VesselEnduranceMeasure
        /// </summary>
        /// <value>An extent of time that, under normal conditions, a vessel can operate without support. NIEM reference is m:VesselEnduranceMeasure</value>

        [DataMember(Name="vesselEnduranceMeasure")]
        public List<NcTimeMeasureType> VesselEnduranceMeasure { get; set; }

        /// <summary>
        /// A description of the kind of engines on a vessel. NIEM reference is m:VesselEngineCategoryDescriptionText
        /// </summary>
        /// <value>A description of the kind of engines on a vessel. NIEM reference is m:VesselEngineCategoryDescriptionText</value>

        [DataMember(Name="vesselEngineCategoryDescription")]
        public List<NcTextType> VesselEngineCategoryDescription { get; set; }

        /// <summary>
        /// A measure of the rate at which a vessel consumes fuel. NIEM reference is m:VesselFuelConsumptionRateMeasure
        /// </summary>
        /// <value>A measure of the rate at which a vessel consumes fuel. NIEM reference is m:VesselFuelConsumptionRateMeasure</value>

        [DataMember(Name="vesselFuelConsumptionRateMeasure")]
        public List<NcConsumptionRateMeasureType> VesselFuelConsumptionRateMeasure { get; set; }

        /// <summary>
        /// A kind of fuel a vessel uses. NIEM reference is m:VesselFuelCategoryText
        /// </summary>
        /// <value>A kind of fuel a vessel uses. NIEM reference is m:VesselFuelCategoryText</value>

        [DataMember(Name="vesselFuelCategory")]
        public List<NcTextType> VesselFuelCategory { get; set; }

        /// <summary>
        /// A gross tonnage (GT) of a vessel, described as a unitless index related to the overall internal volume of a vessel. NIEM reference is m:VesselGrossTonnageValue
        /// </summary>
        /// <value>A gross tonnage (GT) of a vessel, described as a unitless index related to the overall internal volume of a vessel. NIEM reference is m:VesselGrossTonnageValue</value>

        [DataMember(Name="vesselGrossTonnageValue")]
        public List<NiemXsnonNegativeInteger> VesselGrossTonnageValue { get; set; }

        /// <summary>
        /// A hailing port of a vessel. NIEM reference is m:VesselHailingPort
        /// </summary>
        /// <value>A hailing port of a vessel. NIEM reference is m:VesselHailingPort</value>

        [DataMember(Name="vesselHailingPort")]
        public List<MPortType> VesselHailingPort { get; set; }

        /// <summary>
        /// A number of helicopter pads on a vessel. NIEM reference is m:VesselHeloPadQuantity
        /// </summary>
        /// <value>A number of helicopter pads on a vessel. NIEM reference is m:VesselHeloPadQuantity</value>

        [DataMember(Name="vesselHeloPadQuantity")]
        public List<NcQuantityType> VesselHeloPadQuantity { get; set; }

        /// <summary>
        /// A Hull Identification Number (HIN) for a vessel. NIEM reference is m:VesselHINText
        /// </summary>
        /// <value>A Hull Identification Number (HIN) for a vessel. NIEM reference is m:VesselHINText</value>

        [DataMember(Name="vesselHin")]
        public List<NcTextType> VesselHin { get; set; }

        /// <summary>
        /// A number of holds in a vessel. NIEM reference is m:VesselHoldsQuantity
        /// </summary>
        /// <value>A number of holds in a vessel. NIEM reference is m:VesselHoldsQuantity</value>

        [DataMember(Name="vesselHoldsQuantity")]
        public List<NcQuantityType> VesselHoldsQuantity { get; set; }

        /// <summary>
        /// A home port of a vessel. NIEM reference is m:VesselHomePort
        /// </summary>
        /// <value>A home port of a vessel. NIEM reference is m:VesselHomePort</value>

        [DataMember(Name="vesselHomePort")]
        public List<MPortType> VesselHomePort { get; set; }

        /// <summary>
        /// A kind of a hull of a vessel. NIEM reference is m:VesselHullCategoryText
        /// </summary>
        /// <value>A kind of a hull of a vessel. NIEM reference is m:VesselHullCategoryText</value>

        [DataMember(Name="vesselHullCategory")]
        public List<NcTextType> VesselHullCategory { get; set; }

        /// <summary>
        /// A primary color of a hull of a vessel. NIEM reference is m:VesselHullColorCode
        /// </summary>
        /// <value>A primary color of a hull of a vessel. NIEM reference is m:VesselHullColorCode</value>

        [DataMember(Name="vesselHullColorCode")]
        public List<NcicVCOCodeType> VesselHullColorCode { get; set; }

        /// <summary>
        /// A primary color of a hull of a vessel. NIEM reference is m:VesselHullColorText
        /// </summary>
        /// <value>A primary color of a hull of a vessel. NIEM reference is m:VesselHullColorText</value>

        [DataMember(Name="vesselHullColor")]
        public List<NcTextType> VesselHullColor { get; set; }

        /// <summary>
        /// A hull number of a vessel. NIEM reference is m:VesselHullNumberText
        /// </summary>
        /// <value>A hull number of a vessel. NIEM reference is m:VesselHullNumberText</value>

        [DataMember(Name="vesselHullNumber")]
        public List<NcTextType> VesselHullNumber { get; set; }

        /// <summary>
        /// An identification of a vessel. NIEM reference is m:VesselIdentification
        /// </summary>
        /// <value>An identification of a vessel. NIEM reference is m:VesselIdentification</value>

        [DataMember(Name="vesselIdentification")]
        public List<NcIdentificationType> VesselIdentification { get; set; }

        /// <summary>
        /// An image of a vessel. NIEM reference is m:VesselImage
        /// </summary>
        /// <value>An image of a vessel. NIEM reference is m:VesselImage</value>

        [DataMember(Name="vesselImage")]
        public List<NcImageType> VesselImage { get; set; }

        /// <summary>
        /// A summary of activities of note in which crew or passengers have participated.  Examples include illegal or suspicious activities on the part of the passengers and, if applicable, vessels on which the passenger has previously traveled, vessels on which the passenger regularly traveled or travels, etc. NIEM reference is m:VesselIncidentHistorySummaryText
        /// </summary>
        /// <value>A summary of activities of note in which crew or passengers have participated.  Examples include illegal or suspicious activities on the part of the passengers and, if applicable, vessels on which the passenger has previously traveled, vessels on which the passenger regularly traveled or travels, etc. NIEM reference is m:VesselIncidentHistorySummaryText</value>

        [DataMember(Name="vesselIncidentHistorySummary")]
        public List<NcTextType> VesselIncidentHistorySummary { get; set; }

        /// <summary>
        /// An International Maritime Organization Number (IMO number) of a vessel. NIEM reference is m:VesselIMONumberText
        /// </summary>
        /// <value>An International Maritime Organization Number (IMO number) of a vessel. NIEM reference is m:VesselIMONumberText</value>

        [DataMember(Name="vesselImoNumber")]
        public List<NcTextType> VesselImoNumber { get; set; }

        /// <summary>
        /// An International Registered Call Sign (IRCS) of a vessel. NIEM reference is m:VesselIRCSText
        /// </summary>
        /// <value>An International Registered Call Sign (IRCS) of a vessel. NIEM reference is m:VesselIRCSText</value>

        [DataMember(Name="vesselIrcs")]
        public List<NcTextType> VesselIrcs { get; set; }

        /// <summary>
        /// An International Safety Management (ISM) Code of a vessel. NIEM reference is m:VesselISMCodeText
        /// </summary>
        /// <value>An International Safety Management (ISM) Code of a vessel. NIEM reference is m:VesselISMCodeText</value>

        [DataMember(Name="vesselIsmCode")]
        public List<NcTextType> VesselIsmCode { get; set; }

        /// <summary>
        /// An International Ship Security Certificate (ISSC) for a vessel. NIEM reference is m:VesselISSC
        /// </summary>
        /// <value>An International Ship Security Certificate (ISSC) for a vessel. NIEM reference is m:VesselISSC</value>

        [DataMember(Name="vesselIssc")]
        public List<MInternationalShipSecurityCertificateType> VesselIssc { get; set; }

        /// <summary>
        /// A date (or year) the keel of a vessel was laid. NIEM reference is m:VesselKeelDate
        /// </summary>
        /// <value>A date (or year) the keel of a vessel was laid. NIEM reference is m:VesselKeelDate</value>

        [DataMember(Name="vesselKeelDate")]
        public List<NcDateType> VesselKeelDate { get; set; }

        /// <summary>
        /// A location of a vessel. NIEM reference is m:VesselLocation
        /// </summary>
        /// <value>A location of a vessel. NIEM reference is m:VesselLocation</value>

        [DataMember(Name="vesselLocation")]
        public List<NcLocationType> VesselLocation { get; set; }

        /// <summary>
        /// An entity that manages a vessel. NIEM reference is m:VesselManager
        /// </summary>
        /// <value>An entity that manages a vessel. NIEM reference is m:VesselManager</value>

        [DataMember(Name="vesselManager")]
        public List<NcEntityType> VesselManager { get; set; }

        /// <summary>
        /// A measure of the height of the tallest (highest) mast of a vessel. NIEM reference is m:VesselMastHeightMeasure
        /// </summary>
        /// <value>A measure of the height of the tallest (highest) mast of a vessel. NIEM reference is m:VesselMastHeightMeasure</value>

        [DataMember(Name="vesselMastHeightMeasure")]
        public List<NcLengthMeasureType> VesselMastHeightMeasure { get; set; }

        /// <summary>
        /// A maximum number of crew members that can be aboard a vessel. NIEM reference is m:VesselMaximumCrewQuantity
        /// </summary>
        /// <value>A maximum number of crew members that can be aboard a vessel. NIEM reference is m:VesselMaximumCrewQuantity</value>

        [DataMember(Name="vesselMaximumCrewQuantity")]
        public List<NcQuantityType> VesselMaximumCrewQuantity { get; set; }

        /// <summary>
        /// A measure of the maximum range of a vessel. NIEM reference is m:VesselMaximumRangeMeasure
        /// </summary>
        /// <value>A measure of the maximum range of a vessel. NIEM reference is m:VesselMaximumRangeMeasure</value>

        [DataMember(Name="vesselMaximumRangeMeasure")]
        public List<NcLengthMeasureType> VesselMaximumRangeMeasure { get; set; }

        /// <summary>
        /// A measure of the draft of a vessel when fully loaded. NIEM reference is m:VesselMaximumStaticDraftMeasure
        /// </summary>
        /// <value>A measure of the draft of a vessel when fully loaded. NIEM reference is m:VesselMaximumStaticDraftMeasure</value>

        [DataMember(Name="vesselMaximumStaticDraftMeasure")]
        public List<NcLengthMeasureType> VesselMaximumStaticDraftMeasure { get; set; }

        /// <summary>
        /// A measure of the maximum speed of a vessel. NIEM reference is m:VesselMaximumSpeedMeasure
        /// </summary>
        /// <value>A measure of the maximum speed of a vessel. NIEM reference is m:VesselMaximumSpeedMeasure</value>

        [DataMember(Name="vesselMaximumSpeedMeasure")]
        public List<NcSpeedMeasureType> VesselMaximumSpeedMeasure { get; set; }

        /// <summary>
        /// A maximum number of passengers that are legally or safely permitted to be aboard a vessel. NIEM reference is m:VesselMaximumPassengerQuantity
        /// </summary>
        /// <value>A maximum number of passengers that are legally or safely permitted to be aboard a vessel. NIEM reference is m:VesselMaximumPassengerQuantity</value>

        [DataMember(Name="vesselMaximumPassengerQuantity")]
        public List<NcQuantityType> VesselMaximumPassengerQuantity { get; set; }

        /// <summary>
        /// A Maritime Mobile Service Identity (MMSI) of a vessel. NIEM reference is m:VesselMMSIText
        /// </summary>
        /// <value>A Maritime Mobile Service Identity (MMSI) of a vessel. NIEM reference is m:VesselMMSIText</value>

        [DataMember(Name="vesselMmsi")]
        public List<NcTextType> VesselMmsi { get; set; }

        /// <summary>
        /// A set of details of the geospatial movement activities of a vessel. NIEM reference is m:VesselMovementDetails
        /// </summary>
        /// <value>A set of details of the geospatial movement activities of a vessel. NIEM reference is m:VesselMovementDetails</value>

        [DataMember(Name="vesselMovementDetails")]
        public List<MVesselMovementDetailsType> VesselMovementDetails { get; set; }

        /// <summary>
        /// A name of a vessel. NIEM reference is m:VesselName
        /// </summary>
        /// <value>A name of a vessel. NIEM reference is m:VesselName</value>

        [DataMember(Name="vesselName")]
        public List<NcProperNameTextType> VesselName { get; set; }

        /// <summary>
        /// A national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagISO3166Alpha2Code
        /// </summary>
        /// <value>A national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagISO3166Alpha2Code</value>

        [DataMember(Name="vesselNationalFlagIso3166Alpha2Code")]
        public List<Iso3166CountryAlpha2CodeType> VesselNationalFlagIso3166Alpha2Code { get; set; }

        /// <summary>
        /// A national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagText
        /// </summary>
        /// <value>A national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagText</value>

        [DataMember(Name="vesselNationalFlag")]
        public List<NcTextType> VesselNationalFlag { get; set; }

        /// <summary>
        /// An image of a national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagImage
        /// </summary>
        /// <value>An image of a national flag under which a vessel sails. NIEM reference is m:VesselNationalFlagImage</value>

        [DataMember(Name="vesselNationalFlagImage")]
        public List<NcImageType> VesselNationalFlagImage { get; set; }

        /// <summary>
        /// A navigational status of a vessel. NIEM reference is m:VesselNavigationStatus
        /// </summary>
        /// <value>A navigational status of a vessel. NIEM reference is m:VesselNavigationStatus</value>

        [DataMember(Name="vesselNavigationStatus")]
        public List<NcStatusType> VesselNavigationStatus { get; set; }

        /// <summary>
        /// A measure of the total internal volume of a vessel that is used for cargo. NIEM reference is m:VesselNetTonnageVolumeMeasure
        /// </summary>
        /// <value>A measure of the total internal volume of a vessel that is used for cargo. NIEM reference is m:VesselNetTonnageVolumeMeasure</value>

        [DataMember(Name="vesselNetTonnageVolumeMeasure")]
        public List<NcVolumeMeasureType> VesselNetTonnageVolumeMeasure { get; set; }

        /// <summary>
        /// An identification of a Non-Tank Vessel Response Plan (NTVRP). NIEM reference is m:VesselNonTankVesselResponsePlanIdentification
        /// </summary>
        /// <value>An identification of a Non-Tank Vessel Response Plan (NTVRP). NIEM reference is m:VesselNonTankVesselResponsePlanIdentification</value>

        [DataMember(Name="vesselNonTankVesselResponsePlanIdentification")]
        public List<NcIdentificationType> VesselNonTankVesselResponsePlanIdentification { get; set; }

        /// <summary>
        /// True if a vessel has a Non-Tank Vessel Response Plan (NTVRP) per 33 CFR 151,155,160; false otherwise. NIEM reference is m:VesselNonTankVesselResponsePlanIndicator
        /// </summary>
        /// <value>True if a vessel has a Non-Tank Vessel Response Plan (NTVRP) per 33 CFR 151,155,160; false otherwise. NIEM reference is m:VesselNonTankVesselResponsePlanIndicator</value>

        [DataMember(Name="isVesselNonTankVesselResponsePlan")]
        public List<NiemXsboolean> IsVesselNonTankVesselResponsePlan { get; set; }

        /// <summary>
        /// An Official United States Coast Guard Number (USCG Official Number) of a vessel. NIEM reference is m:VesselOfficialCoastGuardNumberText
        /// </summary>
        /// <value>An Official United States Coast Guard Number (USCG Official Number) of a vessel. NIEM reference is m:VesselOfficialCoastGuardNumberText</value>

        [DataMember(Name="vesselOfficialCoastGuardNumber")]
        public List<NcTextType> VesselOfficialCoastGuardNumber { get; set; }

        /// <summary>
        /// A code indicating the Operational Condition of Equipment (OCE) of a vessel. NIEM reference is m:VesselOperationalConditionOfEquipmentCode
        /// </summary>
        /// <value>A code indicating the Operational Condition of Equipment (OCE) of a vessel. NIEM reference is m:VesselOperationalConditionOfEquipmentCode</value>

        [DataMember(Name="vesselOperationalConditionOfEquipmentCode")]
        public List<MVesselOperationalConditionOfEquipmentCodeType> VesselOperationalConditionOfEquipmentCode { get; set; }

        /// <summary>
        /// A description of the Operational Condition of Equipment (OCE) of a vessel. NIEM reference is m:VesselOperationalConditionOfEquipmentDescriptionText
        /// </summary>
        /// <value>A description of the Operational Condition of Equipment (OCE) of a vessel. NIEM reference is m:VesselOperationalConditionOfEquipmentDescriptionText</value>

        [DataMember(Name="vesselOperationalConditionOfEquipmentDescription")]
        public List<NcTextType> VesselOperationalConditionOfEquipmentDescription { get; set; }

        /// <summary>
        /// An entity that is responsible for the day-to-day operations and travels of a vessel. NIEM reference is m:VesselOperator
        /// </summary>
        /// <value>An entity that is responsible for the day-to-day operations and travels of a vessel. NIEM reference is m:VesselOperator</value>

        [DataMember(Name="vesselOperator")]
        public List<NcEntityType> VesselOperator { get; set; }

        /// <summary>
        /// A measure of the overall length of a vessel. NIEM reference is m:VesselOverallLengthMeasure
        /// </summary>
        /// <value>A measure of the overall length of a vessel. NIEM reference is m:VesselOverallLengthMeasure</value>

        [DataMember(Name="vesselOverallLengthMeasure")]
        public List<NcLengthMeasureType> VesselOverallLengthMeasure { get; set; }

        /// <summary>
        /// An entity that owns a vessel. NIEM reference is m:VesselOwner
        /// </summary>
        /// <value>An entity that owns a vessel. NIEM reference is m:VesselOwner</value>

        [DataMember(Name="vesselOwner")]
        public List<NcEntityType> VesselOwner { get; set; }

        /// <summary>
        /// A number of ramps on a vessel. NIEM reference is m:VesselRampQuantity
        /// </summary>
        /// <value>A number of ramps on a vessel. NIEM reference is m:VesselRampQuantity</value>

        [DataMember(Name="vesselRampQuantity")]
        public List<NcQuantityType> VesselRampQuantity { get; set; }

        /// <summary>
        /// A Safety Management Certificate (SMC) for a vessel. NIEM reference is m:VesselSafetyManagementCertificate
        /// </summary>
        /// <value>A Safety Management Certificate (SMC) for a vessel. NIEM reference is m:VesselSafetyManagementCertificate</value>

        [DataMember(Name="vesselSafetyManagementCertificate")]
        public List<MCertificateType> VesselSafetyManagementCertificate { get; set; }

        /// <summary>
        /// A Ship Control Number (SCONUM) of a vessel. NIEM reference is m:VesselSCONUMText
        /// </summary>
        /// <value>A Ship Control Number (SCONUM) of a vessel. NIEM reference is m:VesselSCONUMText</value>

        [DataMember(Name="vesselSconum")]
        public List<NcTextType> VesselSconum { get; set; }

        /// <summary>
        /// A number of shafts on a vessel. NIEM reference is m:VesselShaftQuantity
        /// </summary>
        /// <value>A number of shafts on a vessel. NIEM reference is m:VesselShaftQuantity</value>

        [DataMember(Name="vesselShaftQuantity")]
        public List<NcQuantityType> VesselShaftQuantity { get; set; }

        /// <summary>
        /// A number of stacks on a vessel. NIEM reference is m:VesselStackQuantity
        /// </summary>
        /// <value>A number of stacks on a vessel. NIEM reference is m:VesselStackQuantity</value>

        [DataMember(Name="vesselStackQuantity")]
        public List<NcQuantityType> VesselStackQuantity { get; set; }

        /// <summary>
        /// An identification of a vessel given by a government. NIEM reference is m:VesselStateIdentification
        /// </summary>
        /// <value>An identification of a vessel given by a government. NIEM reference is m:VesselStateIdentification</value>

        [DataMember(Name="vesselStateIdentification")]
        public List<NcIdentificationType> VesselStateIdentification { get; set; }

        /// <summary>
        /// A kind of vessel, a subcategory of VesselCategoryText. NIEM reference is m:VesselSubCategoryText
        /// </summary>
        /// <value>A kind of vessel, a subcategory of VesselCategoryText. NIEM reference is m:VesselSubCategoryText</value>

        [DataMember(Name="vesselSubCategory")]
        public List<NcTextType> VesselSubCategory { get; set; }

        /// <summary>
        /// A primary color of a superstructure of a vessel. NIEM reference is m:VesselSuperstructureColorCode
        /// </summary>
        /// <value>A primary color of a superstructure of a vessel. NIEM reference is m:VesselSuperstructureColorCode</value>

        [DataMember(Name="vesselSuperstructureColorCode")]
        public List<NcicVCOCodeType> VesselSuperstructureColorCode { get; set; }

        /// <summary>
        /// A primary color of a superstructure of a vessel. NIEM reference is m:VesselSuperstructureColorText
        /// </summary>
        /// <value>A primary color of a superstructure of a vessel. NIEM reference is m:VesselSuperstructureColorText</value>

        [DataMember(Name="vesselSuperstructureColor")]
        public List<NcTextType> VesselSuperstructureColor { get; set; }

        /// <summary>
        /// A location of a superstructure on a vessel. NIEM reference is m:VesselSuperstructureLocation
        /// </summary>
        /// <value>A location of a superstructure on a vessel. NIEM reference is m:VesselSuperstructureLocation</value>

        [DataMember(Name="vesselSuperstructureLocation")]
        public List<MLocationOnVesselType> VesselSuperstructureLocation { get; set; }

        /// <summary>
        /// A US Transportation Command (USTRANSCOM) Reference Data Model (TRDM) unique identifier for a vessel. NIEM reference is m:VesselTRDMText
        /// </summary>
        /// <value>A US Transportation Command (USTRANSCOM) Reference Data Model (TRDM) unique identifier for a vessel. NIEM reference is m:VesselTRDMText</value>

        [DataMember(Name="vesselTrdm")]
        public List<NcTextType> VesselTrdm { get; set; }

        /// <summary>
        /// A summary of illegal activities in which the vessel has participated during the previous 5 years. NIEM reference is m:VesselViolationHistorySummaryText
        /// </summary>
        /// <value>A summary of illegal activities in which the vessel has participated during the previous 5 years. NIEM reference is m:VesselViolationHistorySummaryText</value>

        [DataMember(Name="vesselViolationHistorySummary")]
        public List<NcTextType> VesselViolationHistorySummary { get; set; }

        /// <summary>
        /// A journey of a vessel from one place to another. NIEM reference is m:VesselVoyage
        /// </summary>
        /// <value>A journey of a vessel from one place to another. NIEM reference is m:VesselVoyage</value>

        [DataMember(Name="vesselVoyage")]
        public List<MVoyageType> VesselVoyage { get; set; }

        /// <summary>
        /// mVesselAugmentationType JSON-LD context
        /// </summary>
        /// <value>mVesselAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmVesselAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/mVesselAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mVesselAugmentationTypeContext.jsonld")]
            JSONLDContextsmVesselAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mVesselAugmentationType JSON-LD context
        /// </summary>
        /// <value>mVesselAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MVesselAugmentationType {\n");
            sb.Append("  VesselActivityHistorySummary: ").Append(VesselActivityHistorySummary).Append("\n");
            sb.Append("  VesselBeamMeasure: ").Append(VesselBeamMeasure).Append("\n");
            sb.Append("  VesselBuildDate: ").Append(VesselBuildDate).Append("\n");
            sb.Append("  VesselCallSign: ").Append(VesselCallSign).Append("\n");
            sb.Append("  VesselCargoCapability: ").Append(VesselCargoCapability).Append("\n");
            sb.Append("  VesselCargoCategory: ").Append(VesselCargoCategory).Append("\n");
            sb.Append("  IsVesselCargoOnBoard: ").Append(IsVesselCargoOnBoard).Append("\n");
            sb.Append("  VesselCategory: ").Append(VesselCategory).Append("\n");
            sb.Append("  IsVesselCdcCapable: ").Append(IsVesselCdcCapable).Append("\n");
            sb.Append("  IsVesselCdcCargoOnBoard: ").Append(IsVesselCdcCargoOnBoard).Append("\n");
            sb.Append("  VesselCertificateOfFinancialResponsibilityOperator: ").Append(VesselCertificateOfFinancialResponsibilityOperator).Append("\n");
            sb.Append("  VesselCharterer: ").Append(VesselCharterer).Append("\n");
            sb.Append("  VesselClass: ").Append(VesselClass).Append("\n");
            sb.Append("  VesselClassificationSocietyName: ").Append(VesselClassificationSocietyName).Append("\n");
            sb.Append("  VesselContactInformation: ").Append(VesselContactInformation).Append("\n");
            sb.Append("  VesselCraneQuantity: ").Append(VesselCraneQuantity).Append("\n");
            sb.Append("  VesselCruiseRangeMeasure: ").Append(VesselCruiseRangeMeasure).Append("\n");
            sb.Append("  VesselCruiseSpeedMeasure: ").Append(VesselCruiseSpeedMeasure).Append("\n");
            sb.Append("  IsVesselCvssaOnBoard: ").Append(IsVesselCvssaOnBoard).Append("\n");
            sb.Append("  VesselDeadWeightMeasure: ").Append(VesselDeadWeightMeasure).Append("\n");
            sb.Append("  VesselDeckConfiguration: ").Append(VesselDeckConfiguration).Append("\n");
            sb.Append("  VesselDeckEquipment: ").Append(VesselDeckEquipment).Append("\n");
            sb.Append("  VesselDescription: ").Append(VesselDescription).Append("\n");
            sb.Append("  VesselDisplacementMeasure: ").Append(VesselDisplacementMeasure).Append("\n");
            sb.Append("  VesselDocCertificate: ").Append(VesselDocCertificate).Append("\n");
            sb.Append("  VesselDraftMeasure: ").Append(VesselDraftMeasure).Append("\n");
            sb.Append("  VesselDraftUnloadedMeasure: ").Append(VesselDraftUnloadedMeasure).Append("\n");
            sb.Append("  VesselElectronicEquipment: ").Append(VesselElectronicEquipment).Append("\n");
            sb.Append("  VesselEnduranceMeasure: ").Append(VesselEnduranceMeasure).Append("\n");
            sb.Append("  VesselEngineCategoryDescription: ").Append(VesselEngineCategoryDescription).Append("\n");
            sb.Append("  VesselFuelConsumptionRateMeasure: ").Append(VesselFuelConsumptionRateMeasure).Append("\n");
            sb.Append("  VesselFuelCategory: ").Append(VesselFuelCategory).Append("\n");
            sb.Append("  VesselGrossTonnageValue: ").Append(VesselGrossTonnageValue).Append("\n");
            sb.Append("  VesselHailingPort: ").Append(VesselHailingPort).Append("\n");
            sb.Append("  VesselHeloPadQuantity: ").Append(VesselHeloPadQuantity).Append("\n");
            sb.Append("  VesselHin: ").Append(VesselHin).Append("\n");
            sb.Append("  VesselHoldsQuantity: ").Append(VesselHoldsQuantity).Append("\n");
            sb.Append("  VesselHomePort: ").Append(VesselHomePort).Append("\n");
            sb.Append("  VesselHullCategory: ").Append(VesselHullCategory).Append("\n");
            sb.Append("  VesselHullColorCode: ").Append(VesselHullColorCode).Append("\n");
            sb.Append("  VesselHullColor: ").Append(VesselHullColor).Append("\n");
            sb.Append("  VesselHullNumber: ").Append(VesselHullNumber).Append("\n");
            sb.Append("  VesselIdentification: ").Append(VesselIdentification).Append("\n");
            sb.Append("  VesselImage: ").Append(VesselImage).Append("\n");
            sb.Append("  VesselIncidentHistorySummary: ").Append(VesselIncidentHistorySummary).Append("\n");
            sb.Append("  VesselImoNumber: ").Append(VesselImoNumber).Append("\n");
            sb.Append("  VesselIrcs: ").Append(VesselIrcs).Append("\n");
            sb.Append("  VesselIsmCode: ").Append(VesselIsmCode).Append("\n");
            sb.Append("  VesselIssc: ").Append(VesselIssc).Append("\n");
            sb.Append("  VesselKeelDate: ").Append(VesselKeelDate).Append("\n");
            sb.Append("  VesselLocation: ").Append(VesselLocation).Append("\n");
            sb.Append("  VesselManager: ").Append(VesselManager).Append("\n");
            sb.Append("  VesselMastHeightMeasure: ").Append(VesselMastHeightMeasure).Append("\n");
            sb.Append("  VesselMaximumCrewQuantity: ").Append(VesselMaximumCrewQuantity).Append("\n");
            sb.Append("  VesselMaximumRangeMeasure: ").Append(VesselMaximumRangeMeasure).Append("\n");
            sb.Append("  VesselMaximumStaticDraftMeasure: ").Append(VesselMaximumStaticDraftMeasure).Append("\n");
            sb.Append("  VesselMaximumSpeedMeasure: ").Append(VesselMaximumSpeedMeasure).Append("\n");
            sb.Append("  VesselMaximumPassengerQuantity: ").Append(VesselMaximumPassengerQuantity).Append("\n");
            sb.Append("  VesselMmsi: ").Append(VesselMmsi).Append("\n");
            sb.Append("  VesselMovementDetails: ").Append(VesselMovementDetails).Append("\n");
            sb.Append("  VesselName: ").Append(VesselName).Append("\n");
            sb.Append("  VesselNationalFlagIso3166Alpha2Code: ").Append(VesselNationalFlagIso3166Alpha2Code).Append("\n");
            sb.Append("  VesselNationalFlag: ").Append(VesselNationalFlag).Append("\n");
            sb.Append("  VesselNationalFlagImage: ").Append(VesselNationalFlagImage).Append("\n");
            sb.Append("  VesselNavigationStatus: ").Append(VesselNavigationStatus).Append("\n");
            sb.Append("  VesselNetTonnageVolumeMeasure: ").Append(VesselNetTonnageVolumeMeasure).Append("\n");
            sb.Append("  VesselNonTankVesselResponsePlanIdentification: ").Append(VesselNonTankVesselResponsePlanIdentification).Append("\n");
            sb.Append("  IsVesselNonTankVesselResponsePlan: ").Append(IsVesselNonTankVesselResponsePlan).Append("\n");
            sb.Append("  VesselOfficialCoastGuardNumber: ").Append(VesselOfficialCoastGuardNumber).Append("\n");
            sb.Append("  VesselOperationalConditionOfEquipmentCode: ").Append(VesselOperationalConditionOfEquipmentCode).Append("\n");
            sb.Append("  VesselOperationalConditionOfEquipmentDescription: ").Append(VesselOperationalConditionOfEquipmentDescription).Append("\n");
            sb.Append("  VesselOperator: ").Append(VesselOperator).Append("\n");
            sb.Append("  VesselOverallLengthMeasure: ").Append(VesselOverallLengthMeasure).Append("\n");
            sb.Append("  VesselOwner: ").Append(VesselOwner).Append("\n");
            sb.Append("  VesselRampQuantity: ").Append(VesselRampQuantity).Append("\n");
            sb.Append("  VesselSafetyManagementCertificate: ").Append(VesselSafetyManagementCertificate).Append("\n");
            sb.Append("  VesselSconum: ").Append(VesselSconum).Append("\n");
            sb.Append("  VesselShaftQuantity: ").Append(VesselShaftQuantity).Append("\n");
            sb.Append("  VesselStackQuantity: ").Append(VesselStackQuantity).Append("\n");
            sb.Append("  VesselStateIdentification: ").Append(VesselStateIdentification).Append("\n");
            sb.Append("  VesselSubCategory: ").Append(VesselSubCategory).Append("\n");
            sb.Append("  VesselSuperstructureColorCode: ").Append(VesselSuperstructureColorCode).Append("\n");
            sb.Append("  VesselSuperstructureColor: ").Append(VesselSuperstructureColor).Append("\n");
            sb.Append("  VesselSuperstructureLocation: ").Append(VesselSuperstructureLocation).Append("\n");
            sb.Append("  VesselTrdm: ").Append(VesselTrdm).Append("\n");
            sb.Append("  VesselViolationHistorySummary: ").Append(VesselViolationHistorySummary).Append("\n");
            sb.Append("  VesselVoyage: ").Append(VesselVoyage).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MVesselAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if MVesselAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of MVesselAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MVesselAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VesselActivityHistorySummary == other.VesselActivityHistorySummary ||
                    VesselActivityHistorySummary != null &&
                    VesselActivityHistorySummary.SequenceEqual(other.VesselActivityHistorySummary)
                ) && 
                (
                    VesselBeamMeasure == other.VesselBeamMeasure ||
                    VesselBeamMeasure != null &&
                    VesselBeamMeasure.SequenceEqual(other.VesselBeamMeasure)
                ) && 
                (
                    VesselBuildDate == other.VesselBuildDate ||
                    VesselBuildDate != null &&
                    VesselBuildDate.SequenceEqual(other.VesselBuildDate)
                ) && 
                (
                    VesselCallSign == other.VesselCallSign ||
                    VesselCallSign != null &&
                    VesselCallSign.SequenceEqual(other.VesselCallSign)
                ) && 
                (
                    VesselCargoCapability == other.VesselCargoCapability ||
                    VesselCargoCapability != null &&
                    VesselCargoCapability.SequenceEqual(other.VesselCargoCapability)
                ) && 
                (
                    VesselCargoCategory == other.VesselCargoCategory ||
                    VesselCargoCategory != null &&
                    VesselCargoCategory.SequenceEqual(other.VesselCargoCategory)
                ) && 
                (
                    IsVesselCargoOnBoard == other.IsVesselCargoOnBoard ||
                    IsVesselCargoOnBoard != null &&
                    IsVesselCargoOnBoard.SequenceEqual(other.IsVesselCargoOnBoard)
                ) && 
                (
                    VesselCategory == other.VesselCategory ||
                    VesselCategory != null &&
                    VesselCategory.SequenceEqual(other.VesselCategory)
                ) && 
                (
                    IsVesselCdcCapable == other.IsVesselCdcCapable ||
                    IsVesselCdcCapable != null &&
                    IsVesselCdcCapable.SequenceEqual(other.IsVesselCdcCapable)
                ) && 
                (
                    IsVesselCdcCargoOnBoard == other.IsVesselCdcCargoOnBoard ||
                    IsVesselCdcCargoOnBoard != null &&
                    IsVesselCdcCargoOnBoard.SequenceEqual(other.IsVesselCdcCargoOnBoard)
                ) && 
                (
                    VesselCertificateOfFinancialResponsibilityOperator == other.VesselCertificateOfFinancialResponsibilityOperator ||
                    VesselCertificateOfFinancialResponsibilityOperator != null &&
                    VesselCertificateOfFinancialResponsibilityOperator.SequenceEqual(other.VesselCertificateOfFinancialResponsibilityOperator)
                ) && 
                (
                    VesselCharterer == other.VesselCharterer ||
                    VesselCharterer != null &&
                    VesselCharterer.SequenceEqual(other.VesselCharterer)
                ) && 
                (
                    VesselClass == other.VesselClass ||
                    VesselClass != null &&
                    VesselClass.SequenceEqual(other.VesselClass)
                ) && 
                (
                    VesselClassificationSocietyName == other.VesselClassificationSocietyName ||
                    VesselClassificationSocietyName != null &&
                    VesselClassificationSocietyName.SequenceEqual(other.VesselClassificationSocietyName)
                ) && 
                (
                    VesselContactInformation == other.VesselContactInformation ||
                    VesselContactInformation != null &&
                    VesselContactInformation.SequenceEqual(other.VesselContactInformation)
                ) && 
                (
                    VesselCraneQuantity == other.VesselCraneQuantity ||
                    VesselCraneQuantity != null &&
                    VesselCraneQuantity.SequenceEqual(other.VesselCraneQuantity)
                ) && 
                (
                    VesselCruiseRangeMeasure == other.VesselCruiseRangeMeasure ||
                    VesselCruiseRangeMeasure != null &&
                    VesselCruiseRangeMeasure.SequenceEqual(other.VesselCruiseRangeMeasure)
                ) && 
                (
                    VesselCruiseSpeedMeasure == other.VesselCruiseSpeedMeasure ||
                    VesselCruiseSpeedMeasure != null &&
                    VesselCruiseSpeedMeasure.SequenceEqual(other.VesselCruiseSpeedMeasure)
                ) && 
                (
                    IsVesselCvssaOnBoard == other.IsVesselCvssaOnBoard ||
                    IsVesselCvssaOnBoard != null &&
                    IsVesselCvssaOnBoard.SequenceEqual(other.IsVesselCvssaOnBoard)
                ) && 
                (
                    VesselDeadWeightMeasure == other.VesselDeadWeightMeasure ||
                    VesselDeadWeightMeasure != null &&
                    VesselDeadWeightMeasure.SequenceEqual(other.VesselDeadWeightMeasure)
                ) && 
                (
                    VesselDeckConfiguration == other.VesselDeckConfiguration ||
                    VesselDeckConfiguration != null &&
                    VesselDeckConfiguration.SequenceEqual(other.VesselDeckConfiguration)
                ) && 
                (
                    VesselDeckEquipment == other.VesselDeckEquipment ||
                    VesselDeckEquipment != null &&
                    VesselDeckEquipment.SequenceEqual(other.VesselDeckEquipment)
                ) && 
                (
                    VesselDescription == other.VesselDescription ||
                    VesselDescription != null &&
                    VesselDescription.SequenceEqual(other.VesselDescription)
                ) && 
                (
                    VesselDisplacementMeasure == other.VesselDisplacementMeasure ||
                    VesselDisplacementMeasure != null &&
                    VesselDisplacementMeasure.SequenceEqual(other.VesselDisplacementMeasure)
                ) && 
                (
                    VesselDocCertificate == other.VesselDocCertificate ||
                    VesselDocCertificate != null &&
                    VesselDocCertificate.SequenceEqual(other.VesselDocCertificate)
                ) && 
                (
                    VesselDraftMeasure == other.VesselDraftMeasure ||
                    VesselDraftMeasure != null &&
                    VesselDraftMeasure.SequenceEqual(other.VesselDraftMeasure)
                ) && 
                (
                    VesselDraftUnloadedMeasure == other.VesselDraftUnloadedMeasure ||
                    VesselDraftUnloadedMeasure != null &&
                    VesselDraftUnloadedMeasure.SequenceEqual(other.VesselDraftUnloadedMeasure)
                ) && 
                (
                    VesselElectronicEquipment == other.VesselElectronicEquipment ||
                    VesselElectronicEquipment != null &&
                    VesselElectronicEquipment.SequenceEqual(other.VesselElectronicEquipment)
                ) && 
                (
                    VesselEnduranceMeasure == other.VesselEnduranceMeasure ||
                    VesselEnduranceMeasure != null &&
                    VesselEnduranceMeasure.SequenceEqual(other.VesselEnduranceMeasure)
                ) && 
                (
                    VesselEngineCategoryDescription == other.VesselEngineCategoryDescription ||
                    VesselEngineCategoryDescription != null &&
                    VesselEngineCategoryDescription.SequenceEqual(other.VesselEngineCategoryDescription)
                ) && 
                (
                    VesselFuelConsumptionRateMeasure == other.VesselFuelConsumptionRateMeasure ||
                    VesselFuelConsumptionRateMeasure != null &&
                    VesselFuelConsumptionRateMeasure.SequenceEqual(other.VesselFuelConsumptionRateMeasure)
                ) && 
                (
                    VesselFuelCategory == other.VesselFuelCategory ||
                    VesselFuelCategory != null &&
                    VesselFuelCategory.SequenceEqual(other.VesselFuelCategory)
                ) && 
                (
                    VesselGrossTonnageValue == other.VesselGrossTonnageValue ||
                    VesselGrossTonnageValue != null &&
                    VesselGrossTonnageValue.SequenceEqual(other.VesselGrossTonnageValue)
                ) && 
                (
                    VesselHailingPort == other.VesselHailingPort ||
                    VesselHailingPort != null &&
                    VesselHailingPort.SequenceEqual(other.VesselHailingPort)
                ) && 
                (
                    VesselHeloPadQuantity == other.VesselHeloPadQuantity ||
                    VesselHeloPadQuantity != null &&
                    VesselHeloPadQuantity.SequenceEqual(other.VesselHeloPadQuantity)
                ) && 
                (
                    VesselHin == other.VesselHin ||
                    VesselHin != null &&
                    VesselHin.SequenceEqual(other.VesselHin)
                ) && 
                (
                    VesselHoldsQuantity == other.VesselHoldsQuantity ||
                    VesselHoldsQuantity != null &&
                    VesselHoldsQuantity.SequenceEqual(other.VesselHoldsQuantity)
                ) && 
                (
                    VesselHomePort == other.VesselHomePort ||
                    VesselHomePort != null &&
                    VesselHomePort.SequenceEqual(other.VesselHomePort)
                ) && 
                (
                    VesselHullCategory == other.VesselHullCategory ||
                    VesselHullCategory != null &&
                    VesselHullCategory.SequenceEqual(other.VesselHullCategory)
                ) && 
                (
                    VesselHullColorCode == other.VesselHullColorCode ||
                    VesselHullColorCode != null &&
                    VesselHullColorCode.SequenceEqual(other.VesselHullColorCode)
                ) && 
                (
                    VesselHullColor == other.VesselHullColor ||
                    VesselHullColor != null &&
                    VesselHullColor.SequenceEqual(other.VesselHullColor)
                ) && 
                (
                    VesselHullNumber == other.VesselHullNumber ||
                    VesselHullNumber != null &&
                    VesselHullNumber.SequenceEqual(other.VesselHullNumber)
                ) && 
                (
                    VesselIdentification == other.VesselIdentification ||
                    VesselIdentification != null &&
                    VesselIdentification.SequenceEqual(other.VesselIdentification)
                ) && 
                (
                    VesselImage == other.VesselImage ||
                    VesselImage != null &&
                    VesselImage.SequenceEqual(other.VesselImage)
                ) && 
                (
                    VesselIncidentHistorySummary == other.VesselIncidentHistorySummary ||
                    VesselIncidentHistorySummary != null &&
                    VesselIncidentHistorySummary.SequenceEqual(other.VesselIncidentHistorySummary)
                ) && 
                (
                    VesselImoNumber == other.VesselImoNumber ||
                    VesselImoNumber != null &&
                    VesselImoNumber.SequenceEqual(other.VesselImoNumber)
                ) && 
                (
                    VesselIrcs == other.VesselIrcs ||
                    VesselIrcs != null &&
                    VesselIrcs.SequenceEqual(other.VesselIrcs)
                ) && 
                (
                    VesselIsmCode == other.VesselIsmCode ||
                    VesselIsmCode != null &&
                    VesselIsmCode.SequenceEqual(other.VesselIsmCode)
                ) && 
                (
                    VesselIssc == other.VesselIssc ||
                    VesselIssc != null &&
                    VesselIssc.SequenceEqual(other.VesselIssc)
                ) && 
                (
                    VesselKeelDate == other.VesselKeelDate ||
                    VesselKeelDate != null &&
                    VesselKeelDate.SequenceEqual(other.VesselKeelDate)
                ) && 
                (
                    VesselLocation == other.VesselLocation ||
                    VesselLocation != null &&
                    VesselLocation.SequenceEqual(other.VesselLocation)
                ) && 
                (
                    VesselManager == other.VesselManager ||
                    VesselManager != null &&
                    VesselManager.SequenceEqual(other.VesselManager)
                ) && 
                (
                    VesselMastHeightMeasure == other.VesselMastHeightMeasure ||
                    VesselMastHeightMeasure != null &&
                    VesselMastHeightMeasure.SequenceEqual(other.VesselMastHeightMeasure)
                ) && 
                (
                    VesselMaximumCrewQuantity == other.VesselMaximumCrewQuantity ||
                    VesselMaximumCrewQuantity != null &&
                    VesselMaximumCrewQuantity.SequenceEqual(other.VesselMaximumCrewQuantity)
                ) && 
                (
                    VesselMaximumRangeMeasure == other.VesselMaximumRangeMeasure ||
                    VesselMaximumRangeMeasure != null &&
                    VesselMaximumRangeMeasure.SequenceEqual(other.VesselMaximumRangeMeasure)
                ) && 
                (
                    VesselMaximumStaticDraftMeasure == other.VesselMaximumStaticDraftMeasure ||
                    VesselMaximumStaticDraftMeasure != null &&
                    VesselMaximumStaticDraftMeasure.SequenceEqual(other.VesselMaximumStaticDraftMeasure)
                ) && 
                (
                    VesselMaximumSpeedMeasure == other.VesselMaximumSpeedMeasure ||
                    VesselMaximumSpeedMeasure != null &&
                    VesselMaximumSpeedMeasure.SequenceEqual(other.VesselMaximumSpeedMeasure)
                ) && 
                (
                    VesselMaximumPassengerQuantity == other.VesselMaximumPassengerQuantity ||
                    VesselMaximumPassengerQuantity != null &&
                    VesselMaximumPassengerQuantity.SequenceEqual(other.VesselMaximumPassengerQuantity)
                ) && 
                (
                    VesselMmsi == other.VesselMmsi ||
                    VesselMmsi != null &&
                    VesselMmsi.SequenceEqual(other.VesselMmsi)
                ) && 
                (
                    VesselMovementDetails == other.VesselMovementDetails ||
                    VesselMovementDetails != null &&
                    VesselMovementDetails.SequenceEqual(other.VesselMovementDetails)
                ) && 
                (
                    VesselName == other.VesselName ||
                    VesselName != null &&
                    VesselName.SequenceEqual(other.VesselName)
                ) && 
                (
                    VesselNationalFlagIso3166Alpha2Code == other.VesselNationalFlagIso3166Alpha2Code ||
                    VesselNationalFlagIso3166Alpha2Code != null &&
                    VesselNationalFlagIso3166Alpha2Code.SequenceEqual(other.VesselNationalFlagIso3166Alpha2Code)
                ) && 
                (
                    VesselNationalFlag == other.VesselNationalFlag ||
                    VesselNationalFlag != null &&
                    VesselNationalFlag.SequenceEqual(other.VesselNationalFlag)
                ) && 
                (
                    VesselNationalFlagImage == other.VesselNationalFlagImage ||
                    VesselNationalFlagImage != null &&
                    VesselNationalFlagImage.SequenceEqual(other.VesselNationalFlagImage)
                ) && 
                (
                    VesselNavigationStatus == other.VesselNavigationStatus ||
                    VesselNavigationStatus != null &&
                    VesselNavigationStatus.SequenceEqual(other.VesselNavigationStatus)
                ) && 
                (
                    VesselNetTonnageVolumeMeasure == other.VesselNetTonnageVolumeMeasure ||
                    VesselNetTonnageVolumeMeasure != null &&
                    VesselNetTonnageVolumeMeasure.SequenceEqual(other.VesselNetTonnageVolumeMeasure)
                ) && 
                (
                    VesselNonTankVesselResponsePlanIdentification == other.VesselNonTankVesselResponsePlanIdentification ||
                    VesselNonTankVesselResponsePlanIdentification != null &&
                    VesselNonTankVesselResponsePlanIdentification.SequenceEqual(other.VesselNonTankVesselResponsePlanIdentification)
                ) && 
                (
                    IsVesselNonTankVesselResponsePlan == other.IsVesselNonTankVesselResponsePlan ||
                    IsVesselNonTankVesselResponsePlan != null &&
                    IsVesselNonTankVesselResponsePlan.SequenceEqual(other.IsVesselNonTankVesselResponsePlan)
                ) && 
                (
                    VesselOfficialCoastGuardNumber == other.VesselOfficialCoastGuardNumber ||
                    VesselOfficialCoastGuardNumber != null &&
                    VesselOfficialCoastGuardNumber.SequenceEqual(other.VesselOfficialCoastGuardNumber)
                ) && 
                (
                    VesselOperationalConditionOfEquipmentCode == other.VesselOperationalConditionOfEquipmentCode ||
                    VesselOperationalConditionOfEquipmentCode != null &&
                    VesselOperationalConditionOfEquipmentCode.SequenceEqual(other.VesselOperationalConditionOfEquipmentCode)
                ) && 
                (
                    VesselOperationalConditionOfEquipmentDescription == other.VesselOperationalConditionOfEquipmentDescription ||
                    VesselOperationalConditionOfEquipmentDescription != null &&
                    VesselOperationalConditionOfEquipmentDescription.SequenceEqual(other.VesselOperationalConditionOfEquipmentDescription)
                ) && 
                (
                    VesselOperator == other.VesselOperator ||
                    VesselOperator != null &&
                    VesselOperator.SequenceEqual(other.VesselOperator)
                ) && 
                (
                    VesselOverallLengthMeasure == other.VesselOverallLengthMeasure ||
                    VesselOverallLengthMeasure != null &&
                    VesselOverallLengthMeasure.SequenceEqual(other.VesselOverallLengthMeasure)
                ) && 
                (
                    VesselOwner == other.VesselOwner ||
                    VesselOwner != null &&
                    VesselOwner.SequenceEqual(other.VesselOwner)
                ) && 
                (
                    VesselRampQuantity == other.VesselRampQuantity ||
                    VesselRampQuantity != null &&
                    VesselRampQuantity.SequenceEqual(other.VesselRampQuantity)
                ) && 
                (
                    VesselSafetyManagementCertificate == other.VesselSafetyManagementCertificate ||
                    VesselSafetyManagementCertificate != null &&
                    VesselSafetyManagementCertificate.SequenceEqual(other.VesselSafetyManagementCertificate)
                ) && 
                (
                    VesselSconum == other.VesselSconum ||
                    VesselSconum != null &&
                    VesselSconum.SequenceEqual(other.VesselSconum)
                ) && 
                (
                    VesselShaftQuantity == other.VesselShaftQuantity ||
                    VesselShaftQuantity != null &&
                    VesselShaftQuantity.SequenceEqual(other.VesselShaftQuantity)
                ) && 
                (
                    VesselStackQuantity == other.VesselStackQuantity ||
                    VesselStackQuantity != null &&
                    VesselStackQuantity.SequenceEqual(other.VesselStackQuantity)
                ) && 
                (
                    VesselStateIdentification == other.VesselStateIdentification ||
                    VesselStateIdentification != null &&
                    VesselStateIdentification.SequenceEqual(other.VesselStateIdentification)
                ) && 
                (
                    VesselSubCategory == other.VesselSubCategory ||
                    VesselSubCategory != null &&
                    VesselSubCategory.SequenceEqual(other.VesselSubCategory)
                ) && 
                (
                    VesselSuperstructureColorCode == other.VesselSuperstructureColorCode ||
                    VesselSuperstructureColorCode != null &&
                    VesselSuperstructureColorCode.SequenceEqual(other.VesselSuperstructureColorCode)
                ) && 
                (
                    VesselSuperstructureColor == other.VesselSuperstructureColor ||
                    VesselSuperstructureColor != null &&
                    VesselSuperstructureColor.SequenceEqual(other.VesselSuperstructureColor)
                ) && 
                (
                    VesselSuperstructureLocation == other.VesselSuperstructureLocation ||
                    VesselSuperstructureLocation != null &&
                    VesselSuperstructureLocation.SequenceEqual(other.VesselSuperstructureLocation)
                ) && 
                (
                    VesselTrdm == other.VesselTrdm ||
                    VesselTrdm != null &&
                    VesselTrdm.SequenceEqual(other.VesselTrdm)
                ) && 
                (
                    VesselViolationHistorySummary == other.VesselViolationHistorySummary ||
                    VesselViolationHistorySummary != null &&
                    VesselViolationHistorySummary.SequenceEqual(other.VesselViolationHistorySummary)
                ) && 
                (
                    VesselVoyage == other.VesselVoyage ||
                    VesselVoyage != null &&
                    VesselVoyage.SequenceEqual(other.VesselVoyage)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VesselActivityHistorySummary != null)
                    hashCode = hashCode * 59 + VesselActivityHistorySummary.GetHashCode();
                    if (VesselBeamMeasure != null)
                    hashCode = hashCode * 59 + VesselBeamMeasure.GetHashCode();
                    if (VesselBuildDate != null)
                    hashCode = hashCode * 59 + VesselBuildDate.GetHashCode();
                    if (VesselCallSign != null)
                    hashCode = hashCode * 59 + VesselCallSign.GetHashCode();
                    if (VesselCargoCapability != null)
                    hashCode = hashCode * 59 + VesselCargoCapability.GetHashCode();
                    if (VesselCargoCategory != null)
                    hashCode = hashCode * 59 + VesselCargoCategory.GetHashCode();
                    if (IsVesselCargoOnBoard != null)
                    hashCode = hashCode * 59 + IsVesselCargoOnBoard.GetHashCode();
                    if (VesselCategory != null)
                    hashCode = hashCode * 59 + VesselCategory.GetHashCode();
                    if (IsVesselCdcCapable != null)
                    hashCode = hashCode * 59 + IsVesselCdcCapable.GetHashCode();
                    if (IsVesselCdcCargoOnBoard != null)
                    hashCode = hashCode * 59 + IsVesselCdcCargoOnBoard.GetHashCode();
                    if (VesselCertificateOfFinancialResponsibilityOperator != null)
                    hashCode = hashCode * 59 + VesselCertificateOfFinancialResponsibilityOperator.GetHashCode();
                    if (VesselCharterer != null)
                    hashCode = hashCode * 59 + VesselCharterer.GetHashCode();
                    if (VesselClass != null)
                    hashCode = hashCode * 59 + VesselClass.GetHashCode();
                    if (VesselClassificationSocietyName != null)
                    hashCode = hashCode * 59 + VesselClassificationSocietyName.GetHashCode();
                    if (VesselContactInformation != null)
                    hashCode = hashCode * 59 + VesselContactInformation.GetHashCode();
                    if (VesselCraneQuantity != null)
                    hashCode = hashCode * 59 + VesselCraneQuantity.GetHashCode();
                    if (VesselCruiseRangeMeasure != null)
                    hashCode = hashCode * 59 + VesselCruiseRangeMeasure.GetHashCode();
                    if (VesselCruiseSpeedMeasure != null)
                    hashCode = hashCode * 59 + VesselCruiseSpeedMeasure.GetHashCode();
                    if (IsVesselCvssaOnBoard != null)
                    hashCode = hashCode * 59 + IsVesselCvssaOnBoard.GetHashCode();
                    if (VesselDeadWeightMeasure != null)
                    hashCode = hashCode * 59 + VesselDeadWeightMeasure.GetHashCode();
                    if (VesselDeckConfiguration != null)
                    hashCode = hashCode * 59 + VesselDeckConfiguration.GetHashCode();
                    if (VesselDeckEquipment != null)
                    hashCode = hashCode * 59 + VesselDeckEquipment.GetHashCode();
                    if (VesselDescription != null)
                    hashCode = hashCode * 59 + VesselDescription.GetHashCode();
                    if (VesselDisplacementMeasure != null)
                    hashCode = hashCode * 59 + VesselDisplacementMeasure.GetHashCode();
                    if (VesselDocCertificate != null)
                    hashCode = hashCode * 59 + VesselDocCertificate.GetHashCode();
                    if (VesselDraftMeasure != null)
                    hashCode = hashCode * 59 + VesselDraftMeasure.GetHashCode();
                    if (VesselDraftUnloadedMeasure != null)
                    hashCode = hashCode * 59 + VesselDraftUnloadedMeasure.GetHashCode();
                    if (VesselElectronicEquipment != null)
                    hashCode = hashCode * 59 + VesselElectronicEquipment.GetHashCode();
                    if (VesselEnduranceMeasure != null)
                    hashCode = hashCode * 59 + VesselEnduranceMeasure.GetHashCode();
                    if (VesselEngineCategoryDescription != null)
                    hashCode = hashCode * 59 + VesselEngineCategoryDescription.GetHashCode();
                    if (VesselFuelConsumptionRateMeasure != null)
                    hashCode = hashCode * 59 + VesselFuelConsumptionRateMeasure.GetHashCode();
                    if (VesselFuelCategory != null)
                    hashCode = hashCode * 59 + VesselFuelCategory.GetHashCode();
                    if (VesselGrossTonnageValue != null)
                    hashCode = hashCode * 59 + VesselGrossTonnageValue.GetHashCode();
                    if (VesselHailingPort != null)
                    hashCode = hashCode * 59 + VesselHailingPort.GetHashCode();
                    if (VesselHeloPadQuantity != null)
                    hashCode = hashCode * 59 + VesselHeloPadQuantity.GetHashCode();
                    if (VesselHin != null)
                    hashCode = hashCode * 59 + VesselHin.GetHashCode();
                    if (VesselHoldsQuantity != null)
                    hashCode = hashCode * 59 + VesselHoldsQuantity.GetHashCode();
                    if (VesselHomePort != null)
                    hashCode = hashCode * 59 + VesselHomePort.GetHashCode();
                    if (VesselHullCategory != null)
                    hashCode = hashCode * 59 + VesselHullCategory.GetHashCode();
                    if (VesselHullColorCode != null)
                    hashCode = hashCode * 59 + VesselHullColorCode.GetHashCode();
                    if (VesselHullColor != null)
                    hashCode = hashCode * 59 + VesselHullColor.GetHashCode();
                    if (VesselHullNumber != null)
                    hashCode = hashCode * 59 + VesselHullNumber.GetHashCode();
                    if (VesselIdentification != null)
                    hashCode = hashCode * 59 + VesselIdentification.GetHashCode();
                    if (VesselImage != null)
                    hashCode = hashCode * 59 + VesselImage.GetHashCode();
                    if (VesselIncidentHistorySummary != null)
                    hashCode = hashCode * 59 + VesselIncidentHistorySummary.GetHashCode();
                    if (VesselImoNumber != null)
                    hashCode = hashCode * 59 + VesselImoNumber.GetHashCode();
                    if (VesselIrcs != null)
                    hashCode = hashCode * 59 + VesselIrcs.GetHashCode();
                    if (VesselIsmCode != null)
                    hashCode = hashCode * 59 + VesselIsmCode.GetHashCode();
                    if (VesselIssc != null)
                    hashCode = hashCode * 59 + VesselIssc.GetHashCode();
                    if (VesselKeelDate != null)
                    hashCode = hashCode * 59 + VesselKeelDate.GetHashCode();
                    if (VesselLocation != null)
                    hashCode = hashCode * 59 + VesselLocation.GetHashCode();
                    if (VesselManager != null)
                    hashCode = hashCode * 59 + VesselManager.GetHashCode();
                    if (VesselMastHeightMeasure != null)
                    hashCode = hashCode * 59 + VesselMastHeightMeasure.GetHashCode();
                    if (VesselMaximumCrewQuantity != null)
                    hashCode = hashCode * 59 + VesselMaximumCrewQuantity.GetHashCode();
                    if (VesselMaximumRangeMeasure != null)
                    hashCode = hashCode * 59 + VesselMaximumRangeMeasure.GetHashCode();
                    if (VesselMaximumStaticDraftMeasure != null)
                    hashCode = hashCode * 59 + VesselMaximumStaticDraftMeasure.GetHashCode();
                    if (VesselMaximumSpeedMeasure != null)
                    hashCode = hashCode * 59 + VesselMaximumSpeedMeasure.GetHashCode();
                    if (VesselMaximumPassengerQuantity != null)
                    hashCode = hashCode * 59 + VesselMaximumPassengerQuantity.GetHashCode();
                    if (VesselMmsi != null)
                    hashCode = hashCode * 59 + VesselMmsi.GetHashCode();
                    if (VesselMovementDetails != null)
                    hashCode = hashCode * 59 + VesselMovementDetails.GetHashCode();
                    if (VesselName != null)
                    hashCode = hashCode * 59 + VesselName.GetHashCode();
                    if (VesselNationalFlagIso3166Alpha2Code != null)
                    hashCode = hashCode * 59 + VesselNationalFlagIso3166Alpha2Code.GetHashCode();
                    if (VesselNationalFlag != null)
                    hashCode = hashCode * 59 + VesselNationalFlag.GetHashCode();
                    if (VesselNationalFlagImage != null)
                    hashCode = hashCode * 59 + VesselNationalFlagImage.GetHashCode();
                    if (VesselNavigationStatus != null)
                    hashCode = hashCode * 59 + VesselNavigationStatus.GetHashCode();
                    if (VesselNetTonnageVolumeMeasure != null)
                    hashCode = hashCode * 59 + VesselNetTonnageVolumeMeasure.GetHashCode();
                    if (VesselNonTankVesselResponsePlanIdentification != null)
                    hashCode = hashCode * 59 + VesselNonTankVesselResponsePlanIdentification.GetHashCode();
                    if (IsVesselNonTankVesselResponsePlan != null)
                    hashCode = hashCode * 59 + IsVesselNonTankVesselResponsePlan.GetHashCode();
                    if (VesselOfficialCoastGuardNumber != null)
                    hashCode = hashCode * 59 + VesselOfficialCoastGuardNumber.GetHashCode();
                    if (VesselOperationalConditionOfEquipmentCode != null)
                    hashCode = hashCode * 59 + VesselOperationalConditionOfEquipmentCode.GetHashCode();
                    if (VesselOperationalConditionOfEquipmentDescription != null)
                    hashCode = hashCode * 59 + VesselOperationalConditionOfEquipmentDescription.GetHashCode();
                    if (VesselOperator != null)
                    hashCode = hashCode * 59 + VesselOperator.GetHashCode();
                    if (VesselOverallLengthMeasure != null)
                    hashCode = hashCode * 59 + VesselOverallLengthMeasure.GetHashCode();
                    if (VesselOwner != null)
                    hashCode = hashCode * 59 + VesselOwner.GetHashCode();
                    if (VesselRampQuantity != null)
                    hashCode = hashCode * 59 + VesselRampQuantity.GetHashCode();
                    if (VesselSafetyManagementCertificate != null)
                    hashCode = hashCode * 59 + VesselSafetyManagementCertificate.GetHashCode();
                    if (VesselSconum != null)
                    hashCode = hashCode * 59 + VesselSconum.GetHashCode();
                    if (VesselShaftQuantity != null)
                    hashCode = hashCode * 59 + VesselShaftQuantity.GetHashCode();
                    if (VesselStackQuantity != null)
                    hashCode = hashCode * 59 + VesselStackQuantity.GetHashCode();
                    if (VesselStateIdentification != null)
                    hashCode = hashCode * 59 + VesselStateIdentification.GetHashCode();
                    if (VesselSubCategory != null)
                    hashCode = hashCode * 59 + VesselSubCategory.GetHashCode();
                    if (VesselSuperstructureColorCode != null)
                    hashCode = hashCode * 59 + VesselSuperstructureColorCode.GetHashCode();
                    if (VesselSuperstructureColor != null)
                    hashCode = hashCode * 59 + VesselSuperstructureColor.GetHashCode();
                    if (VesselSuperstructureLocation != null)
                    hashCode = hashCode * 59 + VesselSuperstructureLocation.GetHashCode();
                    if (VesselTrdm != null)
                    hashCode = hashCode * 59 + VesselTrdm.GetHashCode();
                    if (VesselViolationHistorySummary != null)
                    hashCode = hashCode * 59 + VesselViolationHistorySummary.GetHashCode();
                    if (VesselVoyage != null)
                    hashCode = hashCode * 59 + VesselVoyage.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MVesselAugmentationType left, MVesselAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MVesselAugmentationType left, MVesselAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
