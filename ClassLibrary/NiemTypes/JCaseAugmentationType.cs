/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a case.
    /// </summary>
    [DataContract]
    public partial class JCaseAugmentationType : IEquatable<JCaseAugmentationType>
    { 
        /// <summary>
        /// An expected date of review of the case. NIEM reference is j:CaseReviewDueDate
        /// </summary>
        /// <value>An expected date of review of the case. NIEM reference is j:CaseReviewDueDate</value>

        [DataMember(Name="caseReviewDueDate")]
        public List<NcDateType> CaseReviewDueDate { get; set; }

        /// <summary>
        /// A monetary amount approved for bail. NIEM reference is j:BailSetAmount
        /// </summary>
        /// <value>A monetary amount approved for bail. NIEM reference is j:BailSetAmount</value>

        [DataMember(Name="bailSetAmount")]
        public List<NcAmountType> BailSetAmount { get; set; }

        /// <summary>
        /// A monetary amount approved for bond. NIEM reference is j:BailBondAmount
        /// </summary>
        /// <value>A monetary amount approved for bond. NIEM reference is j:BailBondAmount</value>

        [DataMember(Name="bailBondAmount")]
        public List<NcAmountType> BailBondAmount { get; set; }

        /// <summary>
        /// An action and events related to a case. NIEM reference is j:CaseActivity
        /// </summary>
        /// <value>An action and events related to a case. NIEM reference is j:CaseActivity</value>

        [DataMember(Name="caseActivity")]
        public List<NcActivityType> CaseActivity { get; set; }

        /// <summary>
        /// A pre-trial hearing on a case. NIEM reference is j:CaseConference
        /// </summary>
        /// <value>A pre-trial hearing on a case. NIEM reference is j:CaseConference</value>

        [DataMember(Name="caseConference")]
        public List<NcActivityType> CaseConference { get; set; }

        /// <summary>
        /// A date a person was sentenced. NIEM reference is j:SentenceDate
        /// </summary>
        /// <value>A date a person was sentenced. NIEM reference is j:SentenceDate</value>

        [DataMember(Name="sentenceDate")]
        public List<NcDateType> SentenceDate { get; set; }

        /// <summary>
        /// An authority to which a person is remanded into custody as a part of a judgment. NIEM reference is j:CommittedToAuthorityText
        /// </summary>
        /// <value>An authority to which a person is remanded into custody as a part of a judgment. NIEM reference is j:CommittedToAuthorityText</value>

        [DataMember(Name="committedToAuthority")]
        public List<NcTextType> CommittedToAuthority { get; set; }

        /// <summary>
        /// A date when a person is received by the subject committed authority. NIEM reference is j:CommitDate
        /// </summary>
        /// <value>A date when a person is received by the subject committed authority. NIEM reference is j:CommitDate</value>

        [DataMember(Name="commitDate")]
        public List<NcDateType> CommitDate { get; set; }

        /// <summary>
        /// A determined strategy for a subject&#x27;s case. NIEM reference is j:CasePlan
        /// </summary>
        /// <value>A determined strategy for a subject&#x27;s case. NIEM reference is j:CasePlan</value>

        [DataMember(Name="casePlan")]
        public List<JPlanType> CasePlan { get; set; }

        /// <summary>
        /// True if the counsel for the defendant was appointed by the court; false otherwise. NIEM reference is j:CaseDefenseAttorneyCourtAppointedIndicator
        /// </summary>
        /// <value>True if the counsel for the defendant was appointed by the court; false otherwise. NIEM reference is j:CaseDefenseAttorneyCourtAppointedIndicator</value>

        [DataMember(Name="isCaseDefenseAttorneyCourtAppointed")]
        public List<NiemXsboolean> IsCaseDefenseAttorneyCourtAppointed { get; set; }

        /// <summary>
        /// A charge different than the original charge a person is being tried for in a court of law. NIEM reference is j:CaseAmendedCharge
        /// </summary>
        /// <value>A charge different than the original charge a person is being tried for in a court of law. NIEM reference is j:CaseAmendedCharge</value>

        [DataMember(Name="caseAmendedCharge")]
        public List<JChargeType> CaseAmendedCharge { get; set; }

        /// <summary>
        /// A date where subject proceeds directly to court, without being able to post bond. Similar to a Failure to Appear NIEM reference is j:CaseCapiasDate
        /// </summary>
        /// <value>A date where subject proceeds directly to court, without being able to post bond. Similar to a Failure to Appear NIEM reference is j:CaseCapiasDate</value>

        [DataMember(Name="caseCapiasDate")]
        public List<NcDateType> CaseCapiasDate { get; set; }

        /// <summary>
        /// A charge or accusation a person is being tried for in a court of law. NIEM reference is j:CaseCharge
        /// </summary>
        /// <value>A charge or accusation a person is being tried for in a court of law. NIEM reference is j:CaseCharge</value>

        [DataMember(Name="caseCharge")]
        public List<JChargeType> CaseCharge { get; set; }

        /// <summary>
        /// A date a court case is set to resume after being postponed. NIEM reference is j:CaseContinuanceDate
        /// </summary>
        /// <value>A date a court case is set to resume after being postponed. NIEM reference is j:CaseContinuanceDate</value>

        [DataMember(Name="caseContinuanceDate")]
        public List<NcDateType> CaseContinuanceDate { get; set; }

        /// <summary>
        /// A court of law in which the case is being tried. NIEM reference is j:CaseCourt
        /// </summary>
        /// <value>A court of law in which the case is being tried. NIEM reference is j:CaseCourt</value>

        [DataMember(Name="caseCourt")]
        public List<JCourtType> CaseCourt { get; set; }

        /// <summary>
        /// A court occurrence related to a case. NIEM reference is j:CaseCourtEvent
        /// </summary>
        /// <value>A court occurrence related to a case. NIEM reference is j:CaseCourtEvent</value>

        [DataMember(Name="caseCourtEvent")]
        public List<JCourtEventType> CaseCourtEvent { get; set; }

        /// <summary>
        /// A number of defendants being tried at once for a case. NIEM reference is j:CaseDefendantQuantityText
        /// </summary>
        /// <value>A number of defendants being tried at once for a case. NIEM reference is j:CaseDefendantQuantityText</value>

        [DataMember(Name="caseDefendantQuantity")]
        public List<NcTextType> CaseDefendantQuantity { get; set; }

        /// <summary>
        /// True if a defendant waived the right to have a defense attorney and is representing him or her self; false otherwise. NIEM reference is j:CaseDefendantSelfRepresentationIndicator
        /// </summary>
        /// <value>True if a defendant waived the right to have a defense attorney and is representing him or her self; false otherwise. NIEM reference is j:CaseDefendantSelfRepresentationIndicator</value>

        [DataMember(Name="isCaseDefendantSelfRepresentation")]
        public List<NiemXsboolean> IsCaseDefendantSelfRepresentation { get; set; }

        /// <summary>
        /// An entity being charged or sued in a court of law. NIEM reference is j:CaseDefendantParty
        /// </summary>
        /// <value>An entity being charged or sued in a court of law. NIEM reference is j:CaseDefendantParty</value>

        [DataMember(Name="caseDefendantParty")]
        public List<NcEntityType> CaseDefendantParty { get; set; }

        /// <summary>
        /// An attorney who defends a case. NIEM reference is j:CaseDefenseAttorney
        /// </summary>
        /// <value>An attorney who defends a case. NIEM reference is j:CaseDefenseAttorney</value>

        [DataMember(Name="caseDefenseAttorney")]
        public List<JCaseOfficialType> CaseDefenseAttorney { get; set; }

        /// <summary>
        /// True if the case involves domestic violence; false otherwise. NIEM reference is j:CaseDomesticViolenceIndicator
        /// </summary>
        /// <value>True if the case involves domestic violence; false otherwise. NIEM reference is j:CaseDomesticViolenceIndicator</value>

        [DataMember(Name="isCaseDomesticViolence")]
        public List<NiemXsboolean> IsCaseDomesticViolence { get; set; }

        /// <summary>
        /// True if the case involves a person who was driving with the presence of illegal or unprescribed prescription drugs in his or her system; false otherwise. NIEM reference is j:CaseDrivingImpairedIndicator
        /// </summary>
        /// <value>True if the case involves a person who was driving with the presence of illegal or unprescribed prescription drugs in his or her system; false otherwise. NIEM reference is j:CaseDrivingImpairedIndicator</value>

        [DataMember(Name="isCaseDrivingImpaired")]
        public List<NiemXsboolean> IsCaseDrivingImpaired { get; set; }

        /// <summary>
        /// True if a case involves a person who was driving with blood alcohol level that is higher than the law allows; false otherwise. NIEM reference is j:CaseDrivingIntoxicatedIndicator
        /// </summary>
        /// <value>True if a case involves a person who was driving with blood alcohol level that is higher than the law allows; false otherwise. NIEM reference is j:CaseDrivingIntoxicatedIndicator</value>

        [DataMember(Name="isCaseDrivingIntoxicated")]
        public List<NiemXsboolean> IsCaseDrivingIntoxicated { get; set; }

        /// <summary>
        /// An item admitted in court as evidence. NIEM reference is j:CaseExhibit
        /// </summary>
        /// <value>An item admitted in court as evidence. NIEM reference is j:CaseExhibit</value>

        [DataMember(Name="caseExhibit")]
        public List<JExhibitType> CaseExhibit { get; set; }

        /// <summary>
        /// An appearance before a judicial official conducted in person, by telephone, or by video.  NIEM reference is j:CaseHearing
        /// </summary>
        /// <value>An appearance before a judicial official conducted in person, by telephone, or by video.  NIEM reference is j:CaseHearing</value>

        [DataMember(Name="caseHearing")]
        public List<JCourtEventType> CaseHearing { get; set; }

        /// <summary>
        /// True if new trial information may be entered from an appellate ruling/decision; false otherwise. NIEM reference is j:CaseInformationAdmissibleIndicator
        /// </summary>
        /// <value>True if new trial information may be entered from an appellate ruling/decision; false otherwise. NIEM reference is j:CaseInformationAdmissibleIndicator</value>

        [DataMember(Name="isCaseInformationAdmissible")]
        public List<NiemXsboolean> IsCaseInformationAdmissible { get; set; }

        /// <summary>
        /// A piece of new trial information that may be admissible in court. NIEM reference is j:CaseInformationAdmissibleText
        /// </summary>
        /// <value>A piece of new trial information that may be admissible in court. NIEM reference is j:CaseInformationAdmissibleText</value>

        [DataMember(Name="caseInformationAdmissible")]
        public List<NcTextType> CaseInformationAdmissible { get; set; }

        /// <summary>
        /// A piece of new trial information that is not admissible in court. NIEM reference is j:CaseInformationInadmissibleText
        /// </summary>
        /// <value>A piece of new trial information that is not admissible in court. NIEM reference is j:CaseInformationInadmissibleText</value>

        [DataMember(Name="caseInformationInadmissible")]
        public List<NcTextType> CaseInformationInadmissible { get; set; }

        /// <summary>
        /// An entity that brings charges or a suit against another in a court of law. Can be either a victim in a criminal case or a plaintiff in a civil case. NIEM reference is j:CaseInitiatingParty
        /// </summary>
        /// <value>An entity that brings charges or a suit against another in a court of law. Can be either a victim in a criminal case or a plaintiff in a civil case. NIEM reference is j:CaseInitiatingParty</value>

        [DataMember(Name="caseInitiatingParty")]
        public List<NcEntityType> CaseInitiatingParty { get; set; }

        /// <summary>
        /// A judicial official assigned to a case. NIEM reference is j:CaseJudge
        /// </summary>
        /// <value>A judicial official assigned to a case. NIEM reference is j:CaseJudge</value>

        [DataMember(Name="caseJudge")]
        public List<JCaseOfficialType> CaseJudge { get; set; }

        /// <summary>
        /// An empaneled juror or an alternate juror. NIEM reference is j:CaseJuror
        /// </summary>
        /// <value>An empaneled juror or an alternate juror. NIEM reference is j:CaseJuror</value>

        [DataMember(Name="caseJuror")]
        public List<JJurorType> CaseJuror { get; set; }

        /// <summary>
        /// A description of a case at a previous stage. NIEM reference is j:CaseLineageCase
        /// </summary>
        /// <value>A description of a case at a previous stage. NIEM reference is j:CaseLineageCase</value>

        [DataMember(Name="caseLineageCase")]
        public List<NcCaseType> CaseLineageCase { get; set; }

        /// <summary>
        /// A justice official&#x27;s involvement in a court case. NIEM reference is j:CaseOfficial
        /// </summary>
        /// <value>A justice official&#x27;s involvement in a court case. NIEM reference is j:CaseOfficial</value>

        [DataMember(Name="caseOfficial")]
        public List<JCaseOfficialType> CaseOfficial { get; set; }

        /// <summary>
        /// A court that originally heard or tried a case before it was transferred or appealed. NIEM reference is j:CaseOriginalCourt
        /// </summary>
        /// <value>A court that originally heard or tried a case before it was transferred or appealed. NIEM reference is j:CaseOriginalCourt</value>

        [DataMember(Name="caseOriginalCourt")]
        public List<JCourtType> CaseOriginalCourt { get; set; }

        /// <summary>
        /// A miscellaneous entity involved in a court case. NIEM reference is j:CaseOtherEntity
        /// </summary>
        /// <value>A miscellaneous entity involved in a court case. NIEM reference is j:CaseOtherEntity</value>

        [DataMember(Name="caseOtherEntity")]
        public List<NcEntityType> CaseOtherEntity { get; set; }

        /// <summary>
        /// A miscellaneous identification for a case. NIEM reference is j:CaseOtherIdentification
        /// </summary>
        /// <value>A miscellaneous identification for a case. NIEM reference is j:CaseOtherIdentification</value>

        [DataMember(Name="caseOtherIdentification")]
        public List<NcIdentificationType> CaseOtherIdentification { get; set; }

        /// <summary>
        /// A miscellaneous person or organization involved in a court case. NIEM reference is j:CaseOtherOfficial
        /// </summary>
        /// <value>A miscellaneous person or organization involved in a court case. NIEM reference is j:CaseOtherOfficial</value>

        [DataMember(Name="caseOtherOfficial")]
        public List<JCaseOfficialType> CaseOtherOfficial { get; set; }

        /// <summary>
        /// A court event or activity that is postponed or pending. NIEM reference is j:CasePendingCourtEvent
        /// </summary>
        /// <value>A court event or activity that is postponed or pending. NIEM reference is j:CasePendingCourtEvent</value>

        [DataMember(Name="casePendingCourtEvent")]
        public List<JCourtEventType> CasePendingCourtEvent { get; set; }

        /// <summary>
        /// A kind of case proceeding. NIEM reference is j:CaseProceedingCategoryText
        /// </summary>
        /// <value>A kind of case proceeding. NIEM reference is j:CaseProceedingCategoryText</value>

        [DataMember(Name="caseProceedingCategory")]
        public List<NcTextType> CaseProceedingCategory { get; set; }

        /// <summary>
        /// An attorney who prosecutes a case. NIEM reference is j:CaseProsecutionAttorney
        /// </summary>
        /// <value>An attorney who prosecutes a case. NIEM reference is j:CaseProsecutionAttorney</value>

        [DataMember(Name="caseProsecutionAttorney")]
        public List<JCaseOfficialType> CaseProsecutionAttorney { get; set; }

        /// <summary>
        /// True if a Domestic Violence Protection Order or Anti-Harassment Order is filed with the Judgment and Sentence; false otherwise. NIEM reference is j:CaseProtectionOrderIndicator
        /// </summary>
        /// <value>True if a Domestic Violence Protection Order or Anti-Harassment Order is filed with the Judgment and Sentence; false otherwise. NIEM reference is j:CaseProtectionOrderIndicator</value>

        [DataMember(Name="isCaseProtectionOrder")]
        public List<NiemXsboolean> IsCaseProtectionOrder { get; set; }

        /// <summary>
        /// A date a restriction is placed on a person by a court order. NIEM reference is j:CaseRestrictionDate
        /// </summary>
        /// <value>A date a restriction is placed on a person by a court order. NIEM reference is j:CaseRestrictionDate</value>

        [DataMember(Name="caseRestrictionDate")]
        public List<NcDateType> CaseRestrictionDate { get; set; }

        /// <summary>
        /// A restriction imposed upon a party. NIEM reference is j:CaseRestrictionText
        /// </summary>
        /// <value>A restriction imposed upon a party. NIEM reference is j:CaseRestrictionText</value>

        [DataMember(Name="caseRestriction")]
        public List<NcTextType> CaseRestriction { get; set; }

        /// <summary>
        /// A level of case security required from low to high NIEM reference is j:CaseSecurityText
        /// </summary>
        /// <value>A level of case security required from low to high NIEM reference is j:CaseSecurityText</value>

        [DataMember(Name="caseSecurity")]
        public List<NcTextType> CaseSecurity { get; set; }

        /// <summary>
        /// A stage of termination for a case. NIEM reference is j:CaseTerminationStageText
        /// </summary>
        /// <value>A stage of termination for a case. NIEM reference is j:CaseTerminationStageText</value>

        [DataMember(Name="caseTerminationStage")]
        public List<NcTextType> CaseTerminationStage { get; set; }

        /// <summary>
        /// A kind of termination for a case. NIEM reference is j:CaseTerminationCategoryText
        /// </summary>
        /// <value>A kind of termination for a case. NIEM reference is j:CaseTerminationCategoryText</value>

        [DataMember(Name="caseTerminationCategory")]
        public List<NcTextType> CaseTerminationCategory { get; set; }

        /// <summary>
        /// A kind of hearing during which the final disposition of a case is determined. NIEM reference is j:CaseTrial
        /// </summary>
        /// <value>A kind of hearing during which the final disposition of a case is determined. NIEM reference is j:CaseTrial</value>

        [DataMember(Name="caseTrial")]
        public List<JCourtEventType> CaseTrial { get; set; }

        /// <summary>
        /// True if a verdict is given by judge or jury; false otherwise. NIEM reference is j:CaseVerdictGivenIndicator
        /// </summary>
        /// <value>True if a verdict is given by judge or jury; false otherwise. NIEM reference is j:CaseVerdictGivenIndicator</value>

        [DataMember(Name="isCaseVerdictGiven")]
        public List<NiemXsboolean> IsCaseVerdictGiven { get; set; }

        /// <summary>
        /// True if a victim is not or was not willing to prosecute; false otherwise. NIEM reference is j:CaseVictimNotProsecutingIndicator
        /// </summary>
        /// <value>True if a victim is not or was not willing to prosecute; false otherwise. NIEM reference is j:CaseVictimNotProsecutingIndicator</value>

        [DataMember(Name="isCaseVictimNotProsecuting")]
        public List<NiemXsboolean> IsCaseVictimNotProsecuting { get; set; }

        /// <summary>
        /// A person/entity who has information relating to the activity or who testifies in court. NIEM reference is j:CaseWitness
        /// </summary>
        /// <value>A person/entity who has information relating to the activity or who testifies in court. NIEM reference is j:CaseWitness</value>

        [DataMember(Name="caseWitness")]
        public List<JWitnessType> CaseWitness { get; set; }

        /// <summary>
        /// A severity of a case. NIEM reference is j:CaseSeverityText
        /// </summary>
        /// <value>A severity of a case. NIEM reference is j:CaseSeverityText</value>

        [DataMember(Name="caseSeverity")]
        public List<NcTextType> CaseSeverity { get; set; }

        /// <summary>
        /// A set of requirements placed on a person convicted in a case to report to a supervising agency. NIEM reference is j:CaseConvictionReportingRequirements
        /// </summary>
        /// <value>A set of requirements placed on a person convicted in a case to report to a supervising agency. NIEM reference is j:CaseConvictionReportingRequirements</value>

        [DataMember(Name="caseConvictionReportingRequirements")]
        public List<JCaseConvictionReportingRequirementsType> CaseConvictionReportingRequirements { get; set; }

        /// <summary>
        /// An attorney in a court case representing the party that is required to answer a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. NIEM reference is j:CaseRespondentAttorney
        /// </summary>
        /// <value>An attorney in a court case representing the party that is required to answer a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. NIEM reference is j:CaseRespondentAttorney</value>

        [DataMember(Name="caseRespondentAttorney")]
        public List<JCaseOfficialType> CaseRespondentAttorney { get; set; }

        /// <summary>
        /// An entity in a court case that is required to answer a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. In such matters the moving party (the one filing the petition) is usually called the petitioner. Thus, the respondent is equivalent to a defendant in a lawsuit. On an appeal, the party who must respond to an appeal by the losing party in the trial court (called appellant) in the appeals court. The accused in a domestic violence case or civil action; a person responding to a Request or Petition for Protection filed by a petitioner. NIEM reference is j:CaseRespondentParty
        /// </summary>
        /// <value>An entity in a court case that is required to answer a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. In such matters the moving party (the one filing the petition) is usually called the petitioner. Thus, the respondent is equivalent to a defendant in a lawsuit. On an appeal, the party who must respond to an appeal by the losing party in the trial court (called appellant) in the appeals court. The accused in a domestic violence case or civil action; a person responding to a Request or Petition for Protection filed by a petitioner. NIEM reference is j:CaseRespondentParty</value>

        [DataMember(Name="caseRespondentParty")]
        public List<NcEntityType> CaseRespondentParty { get; set; }

        /// <summary>
        /// An attorney in a court case representing the party that filed a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. Representative of the party seeking action from the court.  In s NIEM reference is j:CaseInitiatingAttorney
        /// </summary>
        /// <value>An attorney in a court case representing the party that filed a petition for a court order or writ requiring the respondent to take some action, halt an activity or obey a courts direction. Representative of the party seeking action from the court.  In s NIEM reference is j:CaseInitiatingAttorney</value>

        [DataMember(Name="caseInitiatingAttorney")]
        public List<JCaseOfficialType> CaseInitiatingAttorney { get; set; }

        /// <summary>
        /// jCaseAugmentationType JSON-LD context
        /// </summary>
        /// <value>jCaseAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCaseAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jCaseAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCaseAugmentationTypeContext.jsonld")]
            JSONLDContextsjCaseAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCaseAugmentationType JSON-LD context
        /// </summary>
        /// <value>jCaseAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCaseAugmentationType {\n");
            sb.Append("  CaseReviewDueDate: ").Append(CaseReviewDueDate).Append("\n");
            sb.Append("  BailSetAmount: ").Append(BailSetAmount).Append("\n");
            sb.Append("  BailBondAmount: ").Append(BailBondAmount).Append("\n");
            sb.Append("  CaseActivity: ").Append(CaseActivity).Append("\n");
            sb.Append("  CaseConference: ").Append(CaseConference).Append("\n");
            sb.Append("  SentenceDate: ").Append(SentenceDate).Append("\n");
            sb.Append("  CommittedToAuthority: ").Append(CommittedToAuthority).Append("\n");
            sb.Append("  CommitDate: ").Append(CommitDate).Append("\n");
            sb.Append("  CasePlan: ").Append(CasePlan).Append("\n");
            sb.Append("  IsCaseDefenseAttorneyCourtAppointed: ").Append(IsCaseDefenseAttorneyCourtAppointed).Append("\n");
            sb.Append("  CaseAmendedCharge: ").Append(CaseAmendedCharge).Append("\n");
            sb.Append("  CaseCapiasDate: ").Append(CaseCapiasDate).Append("\n");
            sb.Append("  CaseCharge: ").Append(CaseCharge).Append("\n");
            sb.Append("  CaseContinuanceDate: ").Append(CaseContinuanceDate).Append("\n");
            sb.Append("  CaseCourt: ").Append(CaseCourt).Append("\n");
            sb.Append("  CaseCourtEvent: ").Append(CaseCourtEvent).Append("\n");
            sb.Append("  CaseDefendantQuantity: ").Append(CaseDefendantQuantity).Append("\n");
            sb.Append("  IsCaseDefendantSelfRepresentation: ").Append(IsCaseDefendantSelfRepresentation).Append("\n");
            sb.Append("  CaseDefendantParty: ").Append(CaseDefendantParty).Append("\n");
            sb.Append("  CaseDefenseAttorney: ").Append(CaseDefenseAttorney).Append("\n");
            sb.Append("  IsCaseDomesticViolence: ").Append(IsCaseDomesticViolence).Append("\n");
            sb.Append("  IsCaseDrivingImpaired: ").Append(IsCaseDrivingImpaired).Append("\n");
            sb.Append("  IsCaseDrivingIntoxicated: ").Append(IsCaseDrivingIntoxicated).Append("\n");
            sb.Append("  CaseExhibit: ").Append(CaseExhibit).Append("\n");
            sb.Append("  CaseHearing: ").Append(CaseHearing).Append("\n");
            sb.Append("  IsCaseInformationAdmissible: ").Append(IsCaseInformationAdmissible).Append("\n");
            sb.Append("  CaseInformationAdmissible: ").Append(CaseInformationAdmissible).Append("\n");
            sb.Append("  CaseInformationInadmissible: ").Append(CaseInformationInadmissible).Append("\n");
            sb.Append("  CaseInitiatingParty: ").Append(CaseInitiatingParty).Append("\n");
            sb.Append("  CaseJudge: ").Append(CaseJudge).Append("\n");
            sb.Append("  CaseJuror: ").Append(CaseJuror).Append("\n");
            sb.Append("  CaseLineageCase: ").Append(CaseLineageCase).Append("\n");
            sb.Append("  CaseOfficial: ").Append(CaseOfficial).Append("\n");
            sb.Append("  CaseOriginalCourt: ").Append(CaseOriginalCourt).Append("\n");
            sb.Append("  CaseOtherEntity: ").Append(CaseOtherEntity).Append("\n");
            sb.Append("  CaseOtherIdentification: ").Append(CaseOtherIdentification).Append("\n");
            sb.Append("  CaseOtherOfficial: ").Append(CaseOtherOfficial).Append("\n");
            sb.Append("  CasePendingCourtEvent: ").Append(CasePendingCourtEvent).Append("\n");
            sb.Append("  CaseProceedingCategory: ").Append(CaseProceedingCategory).Append("\n");
            sb.Append("  CaseProsecutionAttorney: ").Append(CaseProsecutionAttorney).Append("\n");
            sb.Append("  IsCaseProtectionOrder: ").Append(IsCaseProtectionOrder).Append("\n");
            sb.Append("  CaseRestrictionDate: ").Append(CaseRestrictionDate).Append("\n");
            sb.Append("  CaseRestriction: ").Append(CaseRestriction).Append("\n");
            sb.Append("  CaseSecurity: ").Append(CaseSecurity).Append("\n");
            sb.Append("  CaseTerminationStage: ").Append(CaseTerminationStage).Append("\n");
            sb.Append("  CaseTerminationCategory: ").Append(CaseTerminationCategory).Append("\n");
            sb.Append("  CaseTrial: ").Append(CaseTrial).Append("\n");
            sb.Append("  IsCaseVerdictGiven: ").Append(IsCaseVerdictGiven).Append("\n");
            sb.Append("  IsCaseVictimNotProsecuting: ").Append(IsCaseVictimNotProsecuting).Append("\n");
            sb.Append("  CaseWitness: ").Append(CaseWitness).Append("\n");
            sb.Append("  CaseSeverity: ").Append(CaseSeverity).Append("\n");
            sb.Append("  CaseConvictionReportingRequirements: ").Append(CaseConvictionReportingRequirements).Append("\n");
            sb.Append("  CaseRespondentAttorney: ").Append(CaseRespondentAttorney).Append("\n");
            sb.Append("  CaseRespondentParty: ").Append(CaseRespondentParty).Append("\n");
            sb.Append("  CaseInitiatingAttorney: ").Append(CaseInitiatingAttorney).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCaseAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JCaseAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCaseAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCaseAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CaseReviewDueDate == other.CaseReviewDueDate ||
                    CaseReviewDueDate != null &&
                    CaseReviewDueDate.SequenceEqual(other.CaseReviewDueDate)
                ) && 
                (
                    BailSetAmount == other.BailSetAmount ||
                    BailSetAmount != null &&
                    BailSetAmount.SequenceEqual(other.BailSetAmount)
                ) && 
                (
                    BailBondAmount == other.BailBondAmount ||
                    BailBondAmount != null &&
                    BailBondAmount.SequenceEqual(other.BailBondAmount)
                ) && 
                (
                    CaseActivity == other.CaseActivity ||
                    CaseActivity != null &&
                    CaseActivity.SequenceEqual(other.CaseActivity)
                ) && 
                (
                    CaseConference == other.CaseConference ||
                    CaseConference != null &&
                    CaseConference.SequenceEqual(other.CaseConference)
                ) && 
                (
                    SentenceDate == other.SentenceDate ||
                    SentenceDate != null &&
                    SentenceDate.SequenceEqual(other.SentenceDate)
                ) && 
                (
                    CommittedToAuthority == other.CommittedToAuthority ||
                    CommittedToAuthority != null &&
                    CommittedToAuthority.SequenceEqual(other.CommittedToAuthority)
                ) && 
                (
                    CommitDate == other.CommitDate ||
                    CommitDate != null &&
                    CommitDate.SequenceEqual(other.CommitDate)
                ) && 
                (
                    CasePlan == other.CasePlan ||
                    CasePlan != null &&
                    CasePlan.SequenceEqual(other.CasePlan)
                ) && 
                (
                    IsCaseDefenseAttorneyCourtAppointed == other.IsCaseDefenseAttorneyCourtAppointed ||
                    IsCaseDefenseAttorneyCourtAppointed != null &&
                    IsCaseDefenseAttorneyCourtAppointed.SequenceEqual(other.IsCaseDefenseAttorneyCourtAppointed)
                ) && 
                (
                    CaseAmendedCharge == other.CaseAmendedCharge ||
                    CaseAmendedCharge != null &&
                    CaseAmendedCharge.SequenceEqual(other.CaseAmendedCharge)
                ) && 
                (
                    CaseCapiasDate == other.CaseCapiasDate ||
                    CaseCapiasDate != null &&
                    CaseCapiasDate.SequenceEqual(other.CaseCapiasDate)
                ) && 
                (
                    CaseCharge == other.CaseCharge ||
                    CaseCharge != null &&
                    CaseCharge.SequenceEqual(other.CaseCharge)
                ) && 
                (
                    CaseContinuanceDate == other.CaseContinuanceDate ||
                    CaseContinuanceDate != null &&
                    CaseContinuanceDate.SequenceEqual(other.CaseContinuanceDate)
                ) && 
                (
                    CaseCourt == other.CaseCourt ||
                    CaseCourt != null &&
                    CaseCourt.SequenceEqual(other.CaseCourt)
                ) && 
                (
                    CaseCourtEvent == other.CaseCourtEvent ||
                    CaseCourtEvent != null &&
                    CaseCourtEvent.SequenceEqual(other.CaseCourtEvent)
                ) && 
                (
                    CaseDefendantQuantity == other.CaseDefendantQuantity ||
                    CaseDefendantQuantity != null &&
                    CaseDefendantQuantity.SequenceEqual(other.CaseDefendantQuantity)
                ) && 
                (
                    IsCaseDefendantSelfRepresentation == other.IsCaseDefendantSelfRepresentation ||
                    IsCaseDefendantSelfRepresentation != null &&
                    IsCaseDefendantSelfRepresentation.SequenceEqual(other.IsCaseDefendantSelfRepresentation)
                ) && 
                (
                    CaseDefendantParty == other.CaseDefendantParty ||
                    CaseDefendantParty != null &&
                    CaseDefendantParty.SequenceEqual(other.CaseDefendantParty)
                ) && 
                (
                    CaseDefenseAttorney == other.CaseDefenseAttorney ||
                    CaseDefenseAttorney != null &&
                    CaseDefenseAttorney.SequenceEqual(other.CaseDefenseAttorney)
                ) && 
                (
                    IsCaseDomesticViolence == other.IsCaseDomesticViolence ||
                    IsCaseDomesticViolence != null &&
                    IsCaseDomesticViolence.SequenceEqual(other.IsCaseDomesticViolence)
                ) && 
                (
                    IsCaseDrivingImpaired == other.IsCaseDrivingImpaired ||
                    IsCaseDrivingImpaired != null &&
                    IsCaseDrivingImpaired.SequenceEqual(other.IsCaseDrivingImpaired)
                ) && 
                (
                    IsCaseDrivingIntoxicated == other.IsCaseDrivingIntoxicated ||
                    IsCaseDrivingIntoxicated != null &&
                    IsCaseDrivingIntoxicated.SequenceEqual(other.IsCaseDrivingIntoxicated)
                ) && 
                (
                    CaseExhibit == other.CaseExhibit ||
                    CaseExhibit != null &&
                    CaseExhibit.SequenceEqual(other.CaseExhibit)
                ) && 
                (
                    CaseHearing == other.CaseHearing ||
                    CaseHearing != null &&
                    CaseHearing.SequenceEqual(other.CaseHearing)
                ) && 
                (
                    IsCaseInformationAdmissible == other.IsCaseInformationAdmissible ||
                    IsCaseInformationAdmissible != null &&
                    IsCaseInformationAdmissible.SequenceEqual(other.IsCaseInformationAdmissible)
                ) && 
                (
                    CaseInformationAdmissible == other.CaseInformationAdmissible ||
                    CaseInformationAdmissible != null &&
                    CaseInformationAdmissible.SequenceEqual(other.CaseInformationAdmissible)
                ) && 
                (
                    CaseInformationInadmissible == other.CaseInformationInadmissible ||
                    CaseInformationInadmissible != null &&
                    CaseInformationInadmissible.SequenceEqual(other.CaseInformationInadmissible)
                ) && 
                (
                    CaseInitiatingParty == other.CaseInitiatingParty ||
                    CaseInitiatingParty != null &&
                    CaseInitiatingParty.SequenceEqual(other.CaseInitiatingParty)
                ) && 
                (
                    CaseJudge == other.CaseJudge ||
                    CaseJudge != null &&
                    CaseJudge.SequenceEqual(other.CaseJudge)
                ) && 
                (
                    CaseJuror == other.CaseJuror ||
                    CaseJuror != null &&
                    CaseJuror.SequenceEqual(other.CaseJuror)
                ) && 
                (
                    CaseLineageCase == other.CaseLineageCase ||
                    CaseLineageCase != null &&
                    CaseLineageCase.SequenceEqual(other.CaseLineageCase)
                ) && 
                (
                    CaseOfficial == other.CaseOfficial ||
                    CaseOfficial != null &&
                    CaseOfficial.SequenceEqual(other.CaseOfficial)
                ) && 
                (
                    CaseOriginalCourt == other.CaseOriginalCourt ||
                    CaseOriginalCourt != null &&
                    CaseOriginalCourt.SequenceEqual(other.CaseOriginalCourt)
                ) && 
                (
                    CaseOtherEntity == other.CaseOtherEntity ||
                    CaseOtherEntity != null &&
                    CaseOtherEntity.SequenceEqual(other.CaseOtherEntity)
                ) && 
                (
                    CaseOtherIdentification == other.CaseOtherIdentification ||
                    CaseOtherIdentification != null &&
                    CaseOtherIdentification.SequenceEqual(other.CaseOtherIdentification)
                ) && 
                (
                    CaseOtherOfficial == other.CaseOtherOfficial ||
                    CaseOtherOfficial != null &&
                    CaseOtherOfficial.SequenceEqual(other.CaseOtherOfficial)
                ) && 
                (
                    CasePendingCourtEvent == other.CasePendingCourtEvent ||
                    CasePendingCourtEvent != null &&
                    CasePendingCourtEvent.SequenceEqual(other.CasePendingCourtEvent)
                ) && 
                (
                    CaseProceedingCategory == other.CaseProceedingCategory ||
                    CaseProceedingCategory != null &&
                    CaseProceedingCategory.SequenceEqual(other.CaseProceedingCategory)
                ) && 
                (
                    CaseProsecutionAttorney == other.CaseProsecutionAttorney ||
                    CaseProsecutionAttorney != null &&
                    CaseProsecutionAttorney.SequenceEqual(other.CaseProsecutionAttorney)
                ) && 
                (
                    IsCaseProtectionOrder == other.IsCaseProtectionOrder ||
                    IsCaseProtectionOrder != null &&
                    IsCaseProtectionOrder.SequenceEqual(other.IsCaseProtectionOrder)
                ) && 
                (
                    CaseRestrictionDate == other.CaseRestrictionDate ||
                    CaseRestrictionDate != null &&
                    CaseRestrictionDate.SequenceEqual(other.CaseRestrictionDate)
                ) && 
                (
                    CaseRestriction == other.CaseRestriction ||
                    CaseRestriction != null &&
                    CaseRestriction.SequenceEqual(other.CaseRestriction)
                ) && 
                (
                    CaseSecurity == other.CaseSecurity ||
                    CaseSecurity != null &&
                    CaseSecurity.SequenceEqual(other.CaseSecurity)
                ) && 
                (
                    CaseTerminationStage == other.CaseTerminationStage ||
                    CaseTerminationStage != null &&
                    CaseTerminationStage.SequenceEqual(other.CaseTerminationStage)
                ) && 
                (
                    CaseTerminationCategory == other.CaseTerminationCategory ||
                    CaseTerminationCategory != null &&
                    CaseTerminationCategory.SequenceEqual(other.CaseTerminationCategory)
                ) && 
                (
                    CaseTrial == other.CaseTrial ||
                    CaseTrial != null &&
                    CaseTrial.SequenceEqual(other.CaseTrial)
                ) && 
                (
                    IsCaseVerdictGiven == other.IsCaseVerdictGiven ||
                    IsCaseVerdictGiven != null &&
                    IsCaseVerdictGiven.SequenceEqual(other.IsCaseVerdictGiven)
                ) && 
                (
                    IsCaseVictimNotProsecuting == other.IsCaseVictimNotProsecuting ||
                    IsCaseVictimNotProsecuting != null &&
                    IsCaseVictimNotProsecuting.SequenceEqual(other.IsCaseVictimNotProsecuting)
                ) && 
                (
                    CaseWitness == other.CaseWitness ||
                    CaseWitness != null &&
                    CaseWitness.SequenceEqual(other.CaseWitness)
                ) && 
                (
                    CaseSeverity == other.CaseSeverity ||
                    CaseSeverity != null &&
                    CaseSeverity.SequenceEqual(other.CaseSeverity)
                ) && 
                (
                    CaseConvictionReportingRequirements == other.CaseConvictionReportingRequirements ||
                    CaseConvictionReportingRequirements != null &&
                    CaseConvictionReportingRequirements.SequenceEqual(other.CaseConvictionReportingRequirements)
                ) && 
                (
                    CaseRespondentAttorney == other.CaseRespondentAttorney ||
                    CaseRespondentAttorney != null &&
                    CaseRespondentAttorney.SequenceEqual(other.CaseRespondentAttorney)
                ) && 
                (
                    CaseRespondentParty == other.CaseRespondentParty ||
                    CaseRespondentParty != null &&
                    CaseRespondentParty.SequenceEqual(other.CaseRespondentParty)
                ) && 
                (
                    CaseInitiatingAttorney == other.CaseInitiatingAttorney ||
                    CaseInitiatingAttorney != null &&
                    CaseInitiatingAttorney.SequenceEqual(other.CaseInitiatingAttorney)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CaseReviewDueDate != null)
                    hashCode = hashCode * 59 + CaseReviewDueDate.GetHashCode();
                    if (BailSetAmount != null)
                    hashCode = hashCode * 59 + BailSetAmount.GetHashCode();
                    if (BailBondAmount != null)
                    hashCode = hashCode * 59 + BailBondAmount.GetHashCode();
                    if (CaseActivity != null)
                    hashCode = hashCode * 59 + CaseActivity.GetHashCode();
                    if (CaseConference != null)
                    hashCode = hashCode * 59 + CaseConference.GetHashCode();
                    if (SentenceDate != null)
                    hashCode = hashCode * 59 + SentenceDate.GetHashCode();
                    if (CommittedToAuthority != null)
                    hashCode = hashCode * 59 + CommittedToAuthority.GetHashCode();
                    if (CommitDate != null)
                    hashCode = hashCode * 59 + CommitDate.GetHashCode();
                    if (CasePlan != null)
                    hashCode = hashCode * 59 + CasePlan.GetHashCode();
                    if (IsCaseDefenseAttorneyCourtAppointed != null)
                    hashCode = hashCode * 59 + IsCaseDefenseAttorneyCourtAppointed.GetHashCode();
                    if (CaseAmendedCharge != null)
                    hashCode = hashCode * 59 + CaseAmendedCharge.GetHashCode();
                    if (CaseCapiasDate != null)
                    hashCode = hashCode * 59 + CaseCapiasDate.GetHashCode();
                    if (CaseCharge != null)
                    hashCode = hashCode * 59 + CaseCharge.GetHashCode();
                    if (CaseContinuanceDate != null)
                    hashCode = hashCode * 59 + CaseContinuanceDate.GetHashCode();
                    if (CaseCourt != null)
                    hashCode = hashCode * 59 + CaseCourt.GetHashCode();
                    if (CaseCourtEvent != null)
                    hashCode = hashCode * 59 + CaseCourtEvent.GetHashCode();
                    if (CaseDefendantQuantity != null)
                    hashCode = hashCode * 59 + CaseDefendantQuantity.GetHashCode();
                    if (IsCaseDefendantSelfRepresentation != null)
                    hashCode = hashCode * 59 + IsCaseDefendantSelfRepresentation.GetHashCode();
                    if (CaseDefendantParty != null)
                    hashCode = hashCode * 59 + CaseDefendantParty.GetHashCode();
                    if (CaseDefenseAttorney != null)
                    hashCode = hashCode * 59 + CaseDefenseAttorney.GetHashCode();
                    if (IsCaseDomesticViolence != null)
                    hashCode = hashCode * 59 + IsCaseDomesticViolence.GetHashCode();
                    if (IsCaseDrivingImpaired != null)
                    hashCode = hashCode * 59 + IsCaseDrivingImpaired.GetHashCode();
                    if (IsCaseDrivingIntoxicated != null)
                    hashCode = hashCode * 59 + IsCaseDrivingIntoxicated.GetHashCode();
                    if (CaseExhibit != null)
                    hashCode = hashCode * 59 + CaseExhibit.GetHashCode();
                    if (CaseHearing != null)
                    hashCode = hashCode * 59 + CaseHearing.GetHashCode();
                    if (IsCaseInformationAdmissible != null)
                    hashCode = hashCode * 59 + IsCaseInformationAdmissible.GetHashCode();
                    if (CaseInformationAdmissible != null)
                    hashCode = hashCode * 59 + CaseInformationAdmissible.GetHashCode();
                    if (CaseInformationInadmissible != null)
                    hashCode = hashCode * 59 + CaseInformationInadmissible.GetHashCode();
                    if (CaseInitiatingParty != null)
                    hashCode = hashCode * 59 + CaseInitiatingParty.GetHashCode();
                    if (CaseJudge != null)
                    hashCode = hashCode * 59 + CaseJudge.GetHashCode();
                    if (CaseJuror != null)
                    hashCode = hashCode * 59 + CaseJuror.GetHashCode();
                    if (CaseLineageCase != null)
                    hashCode = hashCode * 59 + CaseLineageCase.GetHashCode();
                    if (CaseOfficial != null)
                    hashCode = hashCode * 59 + CaseOfficial.GetHashCode();
                    if (CaseOriginalCourt != null)
                    hashCode = hashCode * 59 + CaseOriginalCourt.GetHashCode();
                    if (CaseOtherEntity != null)
                    hashCode = hashCode * 59 + CaseOtherEntity.GetHashCode();
                    if (CaseOtherIdentification != null)
                    hashCode = hashCode * 59 + CaseOtherIdentification.GetHashCode();
                    if (CaseOtherOfficial != null)
                    hashCode = hashCode * 59 + CaseOtherOfficial.GetHashCode();
                    if (CasePendingCourtEvent != null)
                    hashCode = hashCode * 59 + CasePendingCourtEvent.GetHashCode();
                    if (CaseProceedingCategory != null)
                    hashCode = hashCode * 59 + CaseProceedingCategory.GetHashCode();
                    if (CaseProsecutionAttorney != null)
                    hashCode = hashCode * 59 + CaseProsecutionAttorney.GetHashCode();
                    if (IsCaseProtectionOrder != null)
                    hashCode = hashCode * 59 + IsCaseProtectionOrder.GetHashCode();
                    if (CaseRestrictionDate != null)
                    hashCode = hashCode * 59 + CaseRestrictionDate.GetHashCode();
                    if (CaseRestriction != null)
                    hashCode = hashCode * 59 + CaseRestriction.GetHashCode();
                    if (CaseSecurity != null)
                    hashCode = hashCode * 59 + CaseSecurity.GetHashCode();
                    if (CaseTerminationStage != null)
                    hashCode = hashCode * 59 + CaseTerminationStage.GetHashCode();
                    if (CaseTerminationCategory != null)
                    hashCode = hashCode * 59 + CaseTerminationCategory.GetHashCode();
                    if (CaseTrial != null)
                    hashCode = hashCode * 59 + CaseTrial.GetHashCode();
                    if (IsCaseVerdictGiven != null)
                    hashCode = hashCode * 59 + IsCaseVerdictGiven.GetHashCode();
                    if (IsCaseVictimNotProsecuting != null)
                    hashCode = hashCode * 59 + IsCaseVictimNotProsecuting.GetHashCode();
                    if (CaseWitness != null)
                    hashCode = hashCode * 59 + CaseWitness.GetHashCode();
                    if (CaseSeverity != null)
                    hashCode = hashCode * 59 + CaseSeverity.GetHashCode();
                    if (CaseConvictionReportingRequirements != null)
                    hashCode = hashCode * 59 + CaseConvictionReportingRequirements.GetHashCode();
                    if (CaseRespondentAttorney != null)
                    hashCode = hashCode * 59 + CaseRespondentAttorney.GetHashCode();
                    if (CaseRespondentParty != null)
                    hashCode = hashCode * 59 + CaseRespondentParty.GetHashCode();
                    if (CaseInitiatingAttorney != null)
                    hashCode = hashCode * 59 + CaseInitiatingAttorney.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCaseAugmentationType left, JCaseAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCaseAugmentationType left, JCaseAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
