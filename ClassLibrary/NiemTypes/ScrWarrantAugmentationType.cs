/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a warrant.
    /// </summary>
    [DataContract]
    public partial class ScrWarrantAugmentationType : IEquatable<ScrWarrantAugmentationType>
    { 
        /// <summary>
        /// A formal allegation that a specific person has committed a specific offense. NIEM reference is j:Charge
        /// </summary>
        /// <value>A formal allegation that a specific person has committed a specific offense. NIEM reference is j:Charge</value>

        [DataMember(Name="charge")]
        public List<JChargeType> Charge { get; set; }

        /// <summary>
        /// An identification value for the warrant number. NIEM reference is scr:WarrantIdentification
        /// </summary>
        /// <value>An identification value for the warrant number. NIEM reference is scr:WarrantIdentification</value>

        [DataMember(Name="warrantIdentification")]
        public List<NcIdentificationType> WarrantIdentification { get; set; }

        /// <summary>
        /// A date that the warrant offense occurred. Format is MMDDYY. NIEM reference is scr:WarrantOffenseOccurredDate
        /// </summary>
        /// <value>A date that the warrant offense occurred. Format is MMDDYY. NIEM reference is scr:WarrantOffenseOccurredDate</value>

        [DataMember(Name="warrantOffenseOccurredDate")]
        public List<NcDateType> WarrantOffenseOccurredDate { get; set; }

        /// <summary>
        /// A date on which DHS demanded a WARRANT to be served to an individual to facilitate deportation. NIEM reference is scr:WarrantDeportDemandDate
        /// </summary>
        /// <value>A date on which DHS demanded a WARRANT to be served to an individual to facilitate deportation. NIEM reference is scr:WarrantDeportDemandDate</value>

        [DataMember(Name="warrantDeportDemandDate")]
        public List<NcDateType> WarrantDeportDemandDate { get; set; }

        /// <summary>
        /// A date on which DHS served a WARRANT to an individual to facilitate deportation. NIEM reference is scr:WarrantDeportServeDate
        /// </summary>
        /// <value>A date on which DHS served a WARRANT to an individual to facilitate deportation. NIEM reference is scr:WarrantDeportServeDate</value>

        [DataMember(Name="warrantDeportServeDate")]
        public List<NcDateType> WarrantDeportServeDate { get; set; }

        /// <summary>
        /// A date on which the individual must appear for deportation as a result of the WARRANT. NIEM reference is scr:WarrantDeportSurrenderDate
        /// </summary>
        /// <value>A date on which the individual must appear for deportation as a result of the WARRANT. NIEM reference is scr:WarrantDeportSurrenderDate</value>

        [DataMember(Name="warrantDeportSurrenderDate")]
        public List<NcDateType> WarrantDeportSurrenderDate { get; set; }

        /// <summary>
        /// A classification of a warrant. NIEM reference is scr:WarrantClassification
        /// </summary>
        /// <value>A classification of a warrant. NIEM reference is scr:WarrantClassification</value>

        [DataMember(Name="warrantClassification")]
        public List<ScrWarrantClassificationType> WarrantClassification { get; set; }

        /// <summary>
        /// scrWarrantAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrWarrantAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsscrWarrantAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/scrWarrantAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/scrWarrantAugmentationTypeContext.jsonld")]
            JSONLDContextsscrWarrantAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// scrWarrantAugmentationType JSON-LD context
        /// </summary>
        /// <value>scrWarrantAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScrWarrantAugmentationType {\n");
            sb.Append("  Charge: ").Append(Charge).Append("\n");
            sb.Append("  WarrantIdentification: ").Append(WarrantIdentification).Append("\n");
            sb.Append("  WarrantOffenseOccurredDate: ").Append(WarrantOffenseOccurredDate).Append("\n");
            sb.Append("  WarrantDeportDemandDate: ").Append(WarrantDeportDemandDate).Append("\n");
            sb.Append("  WarrantDeportServeDate: ").Append(WarrantDeportServeDate).Append("\n");
            sb.Append("  WarrantDeportSurrenderDate: ").Append(WarrantDeportSurrenderDate).Append("\n");
            sb.Append("  WarrantClassification: ").Append(WarrantClassification).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScrWarrantAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if ScrWarrantAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of ScrWarrantAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScrWarrantAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Charge == other.Charge ||
                    Charge != null &&
                    Charge.SequenceEqual(other.Charge)
                ) && 
                (
                    WarrantIdentification == other.WarrantIdentification ||
                    WarrantIdentification != null &&
                    WarrantIdentification.SequenceEqual(other.WarrantIdentification)
                ) && 
                (
                    WarrantOffenseOccurredDate == other.WarrantOffenseOccurredDate ||
                    WarrantOffenseOccurredDate != null &&
                    WarrantOffenseOccurredDate.SequenceEqual(other.WarrantOffenseOccurredDate)
                ) && 
                (
                    WarrantDeportDemandDate == other.WarrantDeportDemandDate ||
                    WarrantDeportDemandDate != null &&
                    WarrantDeportDemandDate.SequenceEqual(other.WarrantDeportDemandDate)
                ) && 
                (
                    WarrantDeportServeDate == other.WarrantDeportServeDate ||
                    WarrantDeportServeDate != null &&
                    WarrantDeportServeDate.SequenceEqual(other.WarrantDeportServeDate)
                ) && 
                (
                    WarrantDeportSurrenderDate == other.WarrantDeportSurrenderDate ||
                    WarrantDeportSurrenderDate != null &&
                    WarrantDeportSurrenderDate.SequenceEqual(other.WarrantDeportSurrenderDate)
                ) && 
                (
                    WarrantClassification == other.WarrantClassification ||
                    WarrantClassification != null &&
                    WarrantClassification.SequenceEqual(other.WarrantClassification)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Charge != null)
                    hashCode = hashCode * 59 + Charge.GetHashCode();
                    if (WarrantIdentification != null)
                    hashCode = hashCode * 59 + WarrantIdentification.GetHashCode();
                    if (WarrantOffenseOccurredDate != null)
                    hashCode = hashCode * 59 + WarrantOffenseOccurredDate.GetHashCode();
                    if (WarrantDeportDemandDate != null)
                    hashCode = hashCode * 59 + WarrantDeportDemandDate.GetHashCode();
                    if (WarrantDeportServeDate != null)
                    hashCode = hashCode * 59 + WarrantDeportServeDate.GetHashCode();
                    if (WarrantDeportSurrenderDate != null)
                    hashCode = hashCode * 59 + WarrantDeportSurrenderDate.GetHashCode();
                    if (WarrantClassification != null)
                    hashCode = hashCode * 59 + WarrantClassification.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScrWarrantAugmentationType left, ScrWarrantAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScrWarrantAugmentationType left, ScrWarrantAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
