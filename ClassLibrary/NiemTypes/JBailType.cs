/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details of a commitment made to secure the release of a subject being held in custody and suspected of a crime.
    /// </summary>
    [DataContract]
    public partial class JBailType : NcActivityType, IEquatable<JBailType>
    { 
        /// <summary>
        /// A description of a condition that must be met in order for a subject to post bail. NIEM reference is j:BailConditionDescriptionText
        /// </summary>
        /// <value>A description of a condition that must be met in order for a subject to post bail. NIEM reference is j:BailConditionDescriptionText</value>

        [DataMember(Name="conditionDescription")]
        public List<NcTextType> ConditionDescription { get; set; }

        /// <summary>
        /// A date of a court hearing to determine the bail to be set. NIEM reference is j:BailHearingDate
        /// </summary>
        /// <value>A date of a court hearing to determine the bail to be set. NIEM reference is j:BailHearingDate</value>

        [DataMember(Name="hearingDate")]
        public List<NcDateType> HearingDate { get; set; }

        /// <summary>
        /// An amount of bail paid. NIEM reference is j:BailPostedAmount
        /// </summary>
        /// <value>An amount of bail paid. NIEM reference is j:BailPostedAmount</value>

        [DataMember(Name="postedAmount")]
        public List<NcAmountType> PostedAmount { get; set; }

        /// <summary>
        /// A bond that was posted for bail. NIEM reference is j:BailPostedBond
        /// </summary>
        /// <value>A bond that was posted for bail. NIEM reference is j:BailPostedBond</value>

        [DataMember(Name="postedBond")]
        public List<JBailBondType> PostedBond { get; set; }

        /// <summary>
        /// A date a subject posts or secures bail. NIEM reference is j:BailPostedDate
        /// </summary>
        /// <value>A date a subject posts or secures bail. NIEM reference is j:BailPostedDate</value>

        [DataMember(Name="postedDate")]
        public List<NcDateType> PostedDate { get; set; }

        /// <summary>
        /// A description of the bail requirement set at a court hearing. NIEM reference is j:BailRequirementText
        /// </summary>
        /// <value>A description of the bail requirement set at a court hearing. NIEM reference is j:BailRequirementText</value>

        [DataMember(Name="requirement")]
        public List<NcTextType> Requirement { get; set; }

        /// <summary>
        /// A date bail is revoked. NIEM reference is j:BailRevokedDate
        /// </summary>
        /// <value>A date bail is revoked. NIEM reference is j:BailRevokedDate</value>

        [DataMember(Name="revokedDate")]
        public List<NcDateType> RevokedDate { get; set; }

        /// <summary>
        /// An amount of bail set for defendant. NIEM reference is j:BailSetAmountText
        /// </summary>
        /// <value>An amount of bail set for defendant. NIEM reference is j:BailSetAmountText</value>

        [DataMember(Name="setAmountText")]
        public List<NcTextType> SetAmountText { get; set; }

        /// <summary>
        /// A monetary amount approved for bail. NIEM reference is j:BailSetAmount
        /// </summary>
        /// <value>A monetary amount approved for bail. NIEM reference is j:BailSetAmount</value>

        [DataMember(Name="setAmount")]
        public List<NcAmountType> SetAmount { get; set; }

        /// <summary>
        /// A court that assigns a bail to a subject. NIEM reference is j:BailSetCourt
        /// </summary>
        /// <value>A court that assigns a bail to a subject. NIEM reference is j:BailSetCourt</value>

        [DataMember(Name="setCourt")]
        public List<JCourtType> SetCourt { get; set; }

        /// <summary>
        /// A person who is assigned bail. NIEM reference is j:BailSubject
        /// </summary>
        /// <value>A person who is assigned bail. NIEM reference is j:BailSubject</value>

        [DataMember(Name="subject")]
        public List<JSubjectType> Subject { get; set; }

        /// <summary>
        /// jBailType JSON-LD context
        /// </summary>
        /// <value>jBailType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjBailTypeContextJsonldEnum for ../JSON-LD_Contexts/jBailTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jBailTypeContext.jsonld")]
            JSONLDContextsjBailTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jBailType JSON-LD context
        /// </summary>
        /// <value>jBailType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JBailType {\n");
            sb.Append("  ConditionDescription: ").Append(ConditionDescription).Append("\n");
            sb.Append("  HearingDate: ").Append(HearingDate).Append("\n");
            sb.Append("  PostedAmount: ").Append(PostedAmount).Append("\n");
            sb.Append("  PostedBond: ").Append(PostedBond).Append("\n");
            sb.Append("  PostedDate: ").Append(PostedDate).Append("\n");
            sb.Append("  Requirement: ").Append(Requirement).Append("\n");
            sb.Append("  RevokedDate: ").Append(RevokedDate).Append("\n");
            sb.Append("  SetAmountText: ").Append(SetAmountText).Append("\n");
            sb.Append("  SetAmount: ").Append(SetAmount).Append("\n");
            sb.Append("  SetCourt: ").Append(SetCourt).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JBailType)obj);
        }

        /// <summary>
        /// Returns true if JBailType instances are equal
        /// </summary>
        /// <param name="other">Instance of JBailType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JBailType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConditionDescription == other.ConditionDescription ||
                    ConditionDescription != null &&
                    ConditionDescription.SequenceEqual(other.ConditionDescription)
                ) && 
                (
                    HearingDate == other.HearingDate ||
                    HearingDate != null &&
                    HearingDate.SequenceEqual(other.HearingDate)
                ) && 
                (
                    PostedAmount == other.PostedAmount ||
                    PostedAmount != null &&
                    PostedAmount.SequenceEqual(other.PostedAmount)
                ) && 
                (
                    PostedBond == other.PostedBond ||
                    PostedBond != null &&
                    PostedBond.SequenceEqual(other.PostedBond)
                ) && 
                (
                    PostedDate == other.PostedDate ||
                    PostedDate != null &&
                    PostedDate.SequenceEqual(other.PostedDate)
                ) && 
                (
                    Requirement == other.Requirement ||
                    Requirement != null &&
                    Requirement.SequenceEqual(other.Requirement)
                ) && 
                (
                    RevokedDate == other.RevokedDate ||
                    RevokedDate != null &&
                    RevokedDate.SequenceEqual(other.RevokedDate)
                ) && 
                (
                    SetAmountText == other.SetAmountText ||
                    SetAmountText != null &&
                    SetAmountText.SequenceEqual(other.SetAmountText)
                ) && 
                (
                    SetAmount == other.SetAmount ||
                    SetAmount != null &&
                    SetAmount.SequenceEqual(other.SetAmount)
                ) && 
                (
                    SetCourt == other.SetCourt ||
                    SetCourt != null &&
                    SetCourt.SequenceEqual(other.SetCourt)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConditionDescription != null)
                    hashCode = hashCode * 59 + ConditionDescription.GetHashCode();
                    if (HearingDate != null)
                    hashCode = hashCode * 59 + HearingDate.GetHashCode();
                    if (PostedAmount != null)
                    hashCode = hashCode * 59 + PostedAmount.GetHashCode();
                    if (PostedBond != null)
                    hashCode = hashCode * 59 + PostedBond.GetHashCode();
                    if (PostedDate != null)
                    hashCode = hashCode * 59 + PostedDate.GetHashCode();
                    if (Requirement != null)
                    hashCode = hashCode * 59 + Requirement.GetHashCode();
                    if (RevokedDate != null)
                    hashCode = hashCode * 59 + RevokedDate.GetHashCode();
                    if (SetAmountText != null)
                    hashCode = hashCode * 59 + SetAmountText.GetHashCode();
                    if (SetAmount != null)
                    hashCode = hashCode * 59 + SetAmount.GetHashCode();
                    if (SetCourt != null)
                    hashCode = hashCode * 59 + SetCourt.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JBailType left, JBailType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JBailType left, JBailType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
