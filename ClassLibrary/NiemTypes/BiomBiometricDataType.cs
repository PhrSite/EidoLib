/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a representation of the identifying Biometric in.
    /// </summary>
    [DataContract]
    public partial class BiomBiometricDataType : IEquatable<BiomBiometricDataType>
    { 
        /// <summary>
        /// An identifier used to uniquely refer to a biometric. NIEM reference is biom:BiometricID
        /// </summary>
        /// <value>An identifier used to uniquely refer to a biometric. NIEM reference is biom:BiometricID</value>

        [DataMember(Name="biometricId")]
        public List<NcIdentificationType> BiometricId { get; set; }

        /// <summary>
        /// A kind of record, for example 1 for Type-1, 14 for Type-14 NIEM reference is biom:ANSIRecordCategoryCode
        /// </summary>
        /// <value>A kind of record, for example 1 for Type-1, 14 for Type-14 NIEM reference is biom:ANSIRecordCategoryCode</value>

        [DataMember(Name="ansiRecordCategoryCode")]
        public List<BiomANSIRecordCategoryCodeType> AnsiRecordCategoryCode { get; set; }

        /// <summary>
        /// A classification of the kind of person Biometric. NIEM reference is biom:BiometricClassification
        /// </summary>
        /// <value>A classification of the kind of person Biometric. NIEM reference is biom:BiometricClassification</value>

        [DataMember(Name="biometricClassification")]
        public List<BiomBiometricClassificationType> BiometricClassification { get; set; }

        /// <summary>
        /// A representation or an encoding of the DNA data of a biological sample. This may be the biological sample from a person (e.g. sample from an insurgent), or a mixed biological sample that may contain biological material from the person of interest (e NIEM reference is biom:DNASample
        /// </summary>
        /// <value>A representation or an encoding of the DNA data of a biological sample. This may be the biological sample from a person (e.g. sample from an insurgent), or a mixed biological sample that may contain biological material from the person of interest (e NIEM reference is biom:DNASample</value>

        [DataMember(Name="dnaSample")]
        public List<BiomDNASampleType> DnaSample { get; set; }

        /// <summary>
        /// A forensic dental and oral record detail NIEM reference is biom:ForensicDentalOralDetail
        /// </summary>
        /// <value>A forensic dental and oral record detail NIEM reference is biom:ForensicDentalOralDetail</value>

        [DataMember(Name="forensicDentalOralDetail")]
        public List<BiomForensicDentalOralDetailType> ForensicDentalOralDetail { get; set; }

        /// <summary>
        /// A Forensic and Investigatory Voice Detail NIEM reference is biom:ForensicInvestigatoryVoiceDetail
        /// </summary>
        /// <value>A Forensic and Investigatory Voice Detail NIEM reference is biom:ForensicInvestigatoryVoiceDetail</value>

        [DataMember(Name="forensicInvestigatoryVoiceDetail")]
        public List<BiomForensicInvestigatoryVoiceDetailType> ForensicInvestigatoryVoiceDetail { get; set; }

        /// <summary>
        /// A minutiae record NIEM reference is biom:Minutiae
        /// </summary>
        /// <value>A minutiae record NIEM reference is biom:Minutiae</value>

        [DataMember(Name="minutiae")]
        public List<BiomMinutiaeType> Minutiae { get; set; }

        /// <summary>
        /// A kind of non-photographic imagery details NIEM reference is biom:NonPhotographicImageryDetail
        /// </summary>
        /// <value>A kind of non-photographic imagery details NIEM reference is biom:NonPhotographicImageryDetail</value>

        [DataMember(Name="nonPhotographicImageryDetail")]
        public List<BiomNonPhotographicImageryDetailType> NonPhotographicImageryDetail { get; set; }

        /// <summary>
        /// A description of scars, marks, or tattoos visible in a transmitted image NIEM reference is biom:PhysicalFeatureDescriptionDetail
        /// </summary>
        /// <value>A description of scars, marks, or tattoos visible in a transmitted image NIEM reference is biom:PhysicalFeatureDescriptionDetail</value>

        [DataMember(Name="physicalFeatureDescriptionDetail")]
        public List<BiomPhysicalFeatureDescriptionType> PhysicalFeatureDescriptionDetail { get; set; }

        /// <summary>
        /// An image of a biometric representing associated context elsewhere in a transaction package NIEM reference is biom:BiometricContextImage
        /// </summary>
        /// <value>An image of a biometric representing associated context elsewhere in a transaction package NIEM reference is biom:BiometricContextImage</value>

        [DataMember(Name="biometricContextImage")]
        public List<BiomSegmentedImageType> BiometricContextImage { get; set; }

        /// <summary>
        /// An image of a CBEFF record NIEM reference is biom:CBEFFImage
        /// </summary>
        /// <value>An image of a CBEFF record NIEM reference is biom:CBEFFImage</value>

        [DataMember(Name="cbeffImage")]
        public List<BiomCBEFFImageType> CbeffImage { get; set; }

        /// <summary>
        /// An image of screenshot of a DNA electropherogram NIEM reference is biom:DNAElectropherogramScreenshotImage
        /// </summary>
        /// <value>An image of screenshot of a DNA electropherogram NIEM reference is biom:DNAElectropherogramScreenshotImage</value>

        [DataMember(Name="dnaElectropherogramScreenshotImage")]
        public List<BiomImageType> DnaElectropherogramScreenshotImage { get; set; }

        /// <summary>
        /// An image of a human face NIEM reference is biom:FaceImage
        /// </summary>
        /// <value>An image of a human face NIEM reference is biom:FaceImage</value>

        [DataMember(Name="faceImage")]
        public List<BiomFaceImageType> FaceImage { get; set; }

        /// <summary>
        /// A detailing of the metadata for an image of a fingerprint NIEM reference is biom:FingerImpressionImageDetail
        /// </summary>
        /// <value>A detailing of the metadata for an image of a fingerprint NIEM reference is biom:FingerImpressionImageDetail</value>

        [DataMember(Name="fingerImpressionImageDetail")]
        public List<BiomFingerImpressionImageDetailType> FingerImpressionImageDetail { get; set; }

        /// <summary>
        /// An image of a fingerprint NIEM reference is biom:FingerprintImage
        /// </summary>
        /// <value>An image of a fingerprint NIEM reference is biom:FingerprintImage</value>

        [DataMember(Name="fingerprintImage")]
        public List<BiomFingerprintImageType> FingerprintImage { get; set; }

        /// <summary>
        /// A set of details about a friction ridge print, which may represent a fingerprint, palm print, or plantar print NIEM reference is biom:FrictionRidgeDetail
        /// </summary>
        /// <value>A set of details about a friction ridge print, which may represent a fingerprint, palm print, or plantar print NIEM reference is biom:FrictionRidgeDetail</value>

        [DataMember(Name="frictionRidgeDetail")]
        public List<BiomFrictionRidgeDetailType> FrictionRidgeDetail { get; set; }

        /// <summary>
        /// A set of details about an image of iris NIEM reference is biom:IrisImageDetail
        /// </summary>
        /// <value>A set of details about an image of iris NIEM reference is biom:IrisImageDetail</value>

        [DataMember(Name="irisImageDetail")]
        public List<BiomIrisImageDetailType> IrisImageDetail { get; set; }

        /// <summary>
        /// A set of details about an image of a palm print NIEM reference is biom:PalmPrintImageDetail
        /// </summary>
        /// <value>A set of details about an image of a palm print NIEM reference is biom:PalmPrintImageDetail</value>

        [DataMember(Name="palmPrintImageDetail")]
        public List<BiomPalmPrintImageDetailType> PalmPrintImageDetail { get; set; }

        /// <summary>
        /// An image of a physical feature NIEM reference is biom:PhysicalFeatureImage
        /// </summary>
        /// <value>An image of a physical feature NIEM reference is biom:PhysicalFeatureImage</value>

        [DataMember(Name="physicalFeatureImage")]
        public List<BiomPhysicalFeatureImageType> PhysicalFeatureImage { get; set; }

        /// <summary>
        /// A set of details about an image of a plantar (footprint) NIEM reference is biom:PlantarImageDetail
        /// </summary>
        /// <value>A set of details about an image of a plantar (footprint) NIEM reference is biom:PlantarImageDetail</value>

        [DataMember(Name="plantarImageDetail")]
        public List<BiomPlantarImageDetailType> PlantarImageDetail { get; set; }

        /// <summary>
        /// A set of details about an image of a biometric subject used for testing NIEM reference is biom:TestImageDetail
        /// </summary>
        /// <value>A set of details about an image of a biometric subject used for testing NIEM reference is biom:TestImageDetail</value>

        [DataMember(Name="testImageDetail")]
        public List<BiomImageType> TestImageDetail { get; set; }

        /// <summary>
        /// A collection of a biometric sample. NIEM reference is biom:BiometricCapture
        /// </summary>
        /// <value>A collection of a biometric sample. NIEM reference is biom:BiometricCapture</value>

        [DataMember(Name="biometricCapture")]
        public List<BiomBiometricCaptureType> BiometricCapture { get; set; }

        /// <summary>
        /// A method used to encode a biometric. NIEM reference is biom:BiometricEncodingMethodText
        /// </summary>
        /// <value>A method used to encode a biometric. NIEM reference is biom:BiometricEncodingMethodText</value>

        [DataMember(Name="biometricEncodingMethod")]
        public List<NcTextType> BiometricEncodingMethod { get; set; }

        /// <summary>
        /// A description of a biometric. NIEM reference is biom:BiometricDescriptionText
        /// </summary>
        /// <value>A description of a biometric. NIEM reference is biom:BiometricDescriptionText</value>

        [DataMember(Name="biometricDescription")]
        public List<NcTextType> BiometricDescription { get; set; }

        /// <summary>
        /// A status of a biometric sample. NIEM reference is biom:BiometricStatus
        /// </summary>
        /// <value>A status of a biometric sample. NIEM reference is biom:BiometricStatus</value>

        [DataMember(Name="biometricStatus")]
        public List<NcStatusType> BiometricStatus { get; set; }

        /// <summary>
        /// A binary representation of a biometric sample. NIEM reference is biom:BiometricBinary
        /// </summary>
        /// <value>A binary representation of a biometric sample. NIEM reference is biom:BiometricBinary</value>

        [DataMember(Name="biometricBinary")]
        public List<NcBinaryType> BiometricBinary { get; set; }

        /// <summary>
        /// An analysis of a biometric sample. NIEM reference is biom:BiometricLabAnalysisText
        /// </summary>
        /// <value>An analysis of a biometric sample. NIEM reference is biom:BiometricLabAnalysisText</value>

        [DataMember(Name="biometricLabAnalysis")]
        public List<NcTextType> BiometricLabAnalysis { get; set; }

        /// <summary>
        /// An entity that collected a biometric sample. NIEM reference is biom:BiometricCapturer
        /// </summary>
        /// <value>An entity that collected a biometric sample. NIEM reference is biom:BiometricCapturer</value>

        [DataMember(Name="biometricCapturer")]
        public List<NcEntityType> BiometricCapturer { get; set; }

        /// <summary>
        /// An entity that tested a biometric sample. NIEM reference is biom:BiometricTester
        /// </summary>
        /// <value>An entity that tested a biometric sample. NIEM reference is biom:BiometricTester</value>

        [DataMember(Name="biometricTester")]
        public List<NcEntityType> BiometricTester { get; set; }

        /// <summary>
        /// A method used to test a biometric sample. NIEM reference is biom:BiometricTestMethodText
        /// </summary>
        /// <value>A method used to test a biometric sample. NIEM reference is biom:BiometricTestMethodText</value>

        [DataMember(Name="biometricTestMethod")]
        public List<NcTextType> BiometricTestMethod { get; set; }

        /// <summary>
        /// A date a biometric sample was tested. NIEM reference is biom:BiometricTestDate
        /// </summary>
        /// <value>A date a biometric sample was tested. NIEM reference is biom:BiometricTestDate</value>

        [DataMember(Name="biometricTestDate")]
        public List<NcDateType> BiometricTestDate { get; set; }

        /// <summary>
        /// A description of how a biometric sample was tested. NIEM reference is biom:BiometricTestDescriptionText
        /// </summary>
        /// <value>A description of how a biometric sample was tested. NIEM reference is biom:BiometricTestDescriptionText</value>

        [DataMember(Name="biometricTestDescription")]
        public List<NcTextType> BiometricTestDescription { get; set; }

        /// <summary>
        /// A description of the storage of a biometric sample. NIEM reference is biom:BiometricRepositoryOrganization
        /// </summary>
        /// <value>A description of the storage of a biometric sample. NIEM reference is biom:BiometricRepositoryOrganization</value>

        [DataMember(Name="biometricRepositoryOrganization")]
        public List<NcOrganizationType> BiometricRepositoryOrganization { get; set; }

        /// <summary>
        /// A description of the storage of a biometric sample. NIEM reference is biom:BiometricRepositoryDescriptionText
        /// </summary>
        /// <value>A description of the storage of a biometric sample. NIEM reference is biom:BiometricRepositoryDescriptionText</value>

        [DataMember(Name="biometricRepositoryDescription")]
        public List<NcTextType> BiometricRepositoryDescription { get; set; }

        /// <summary>
        /// A description of the believed accuracy of a biometric identification. NIEM reference is biom:BiometricAccuracyDescriptionText
        /// </summary>
        /// <value>A description of the believed accuracy of a biometric identification. NIEM reference is biom:BiometricAccuracyDescriptionText</value>

        [DataMember(Name="biometricAccuracyDescription")]
        public List<NcTextType> BiometricAccuracyDescription { get; set; }

        /// <summary>
        /// An acceptance level of the accuracy and readability of the recorded PERSON BIOMETRIC NIEM reference is biom:QualityThresholdText
        /// </summary>
        /// <value>An acceptance level of the accuracy and readability of the recorded PERSON BIOMETRIC NIEM reference is biom:QualityThresholdText</value>

        [DataMember(Name="qualityThreshold")]
        public List<NcTextType> QualityThreshold { get; set; }

        /// <summary>
        /// A textual representation of the value of a biometric. NIEM reference is biom:BiometricValueText
        /// </summary>
        /// <value>A textual representation of the value of a biometric. NIEM reference is biom:BiometricValueText</value>

        [DataMember(Name="biometricValue")]
        public List<NcTextType> BiometricValue { get; set; }

        /// <summary>
        /// A quality score of the accuracy and readability of the recorded PERSON BIOMETRIC NIEM reference is biom:QualityConfidenceLevelText
        /// </summary>
        /// <value>A quality score of the accuracy and readability of the recorded PERSON BIOMETRIC NIEM reference is biom:QualityConfidenceLevelText</value>

        [DataMember(Name="qualityConfidenceLevel")]
        public List<NcTextType> QualityConfidenceLevel { get; set; }

        /// <summary>
        /// biomBiometricDataType JSON-LD context
        /// </summary>
        /// <value>biomBiometricDataType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomBiometricDataTypeContextJsonldEnum for ../JSON-LD_Contexts/biomBiometricDataTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomBiometricDataTypeContext.jsonld")]
            JSONLDContextsbiomBiometricDataTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomBiometricDataType JSON-LD context
        /// </summary>
        /// <value>biomBiometricDataType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomBiometricDataType {\n");
            sb.Append("  BiometricId: ").Append(BiometricId).Append("\n");
            sb.Append("  AnsiRecordCategoryCode: ").Append(AnsiRecordCategoryCode).Append("\n");
            sb.Append("  BiometricClassification: ").Append(BiometricClassification).Append("\n");
            sb.Append("  DnaSample: ").Append(DnaSample).Append("\n");
            sb.Append("  ForensicDentalOralDetail: ").Append(ForensicDentalOralDetail).Append("\n");
            sb.Append("  ForensicInvestigatoryVoiceDetail: ").Append(ForensicInvestigatoryVoiceDetail).Append("\n");
            sb.Append("  Minutiae: ").Append(Minutiae).Append("\n");
            sb.Append("  NonPhotographicImageryDetail: ").Append(NonPhotographicImageryDetail).Append("\n");
            sb.Append("  PhysicalFeatureDescriptionDetail: ").Append(PhysicalFeatureDescriptionDetail).Append("\n");
            sb.Append("  BiometricContextImage: ").Append(BiometricContextImage).Append("\n");
            sb.Append("  CbeffImage: ").Append(CbeffImage).Append("\n");
            sb.Append("  DnaElectropherogramScreenshotImage: ").Append(DnaElectropherogramScreenshotImage).Append("\n");
            sb.Append("  FaceImage: ").Append(FaceImage).Append("\n");
            sb.Append("  FingerImpressionImageDetail: ").Append(FingerImpressionImageDetail).Append("\n");
            sb.Append("  FingerprintImage: ").Append(FingerprintImage).Append("\n");
            sb.Append("  FrictionRidgeDetail: ").Append(FrictionRidgeDetail).Append("\n");
            sb.Append("  IrisImageDetail: ").Append(IrisImageDetail).Append("\n");
            sb.Append("  PalmPrintImageDetail: ").Append(PalmPrintImageDetail).Append("\n");
            sb.Append("  PhysicalFeatureImage: ").Append(PhysicalFeatureImage).Append("\n");
            sb.Append("  PlantarImageDetail: ").Append(PlantarImageDetail).Append("\n");
            sb.Append("  TestImageDetail: ").Append(TestImageDetail).Append("\n");
            sb.Append("  BiometricCapture: ").Append(BiometricCapture).Append("\n");
            sb.Append("  BiometricEncodingMethod: ").Append(BiometricEncodingMethod).Append("\n");
            sb.Append("  BiometricDescription: ").Append(BiometricDescription).Append("\n");
            sb.Append("  BiometricStatus: ").Append(BiometricStatus).Append("\n");
            sb.Append("  BiometricBinary: ").Append(BiometricBinary).Append("\n");
            sb.Append("  BiometricLabAnalysis: ").Append(BiometricLabAnalysis).Append("\n");
            sb.Append("  BiometricCapturer: ").Append(BiometricCapturer).Append("\n");
            sb.Append("  BiometricTester: ").Append(BiometricTester).Append("\n");
            sb.Append("  BiometricTestMethod: ").Append(BiometricTestMethod).Append("\n");
            sb.Append("  BiometricTestDate: ").Append(BiometricTestDate).Append("\n");
            sb.Append("  BiometricTestDescription: ").Append(BiometricTestDescription).Append("\n");
            sb.Append("  BiometricRepositoryOrganization: ").Append(BiometricRepositoryOrganization).Append("\n");
            sb.Append("  BiometricRepositoryDescription: ").Append(BiometricRepositoryDescription).Append("\n");
            sb.Append("  BiometricAccuracyDescription: ").Append(BiometricAccuracyDescription).Append("\n");
            sb.Append("  QualityThreshold: ").Append(QualityThreshold).Append("\n");
            sb.Append("  BiometricValue: ").Append(BiometricValue).Append("\n");
            sb.Append("  QualityConfidenceLevel: ").Append(QualityConfidenceLevel).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomBiometricDataType)obj);
        }

        /// <summary>
        /// Returns true if BiomBiometricDataType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomBiometricDataType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomBiometricDataType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BiometricId == other.BiometricId ||
                    BiometricId != null &&
                    BiometricId.SequenceEqual(other.BiometricId)
                ) && 
                (
                    AnsiRecordCategoryCode == other.AnsiRecordCategoryCode ||
                    AnsiRecordCategoryCode != null &&
                    AnsiRecordCategoryCode.SequenceEqual(other.AnsiRecordCategoryCode)
                ) && 
                (
                    BiometricClassification == other.BiometricClassification ||
                    BiometricClassification != null &&
                    BiometricClassification.SequenceEqual(other.BiometricClassification)
                ) && 
                (
                    DnaSample == other.DnaSample ||
                    DnaSample != null &&
                    DnaSample.SequenceEqual(other.DnaSample)
                ) && 
                (
                    ForensicDentalOralDetail == other.ForensicDentalOralDetail ||
                    ForensicDentalOralDetail != null &&
                    ForensicDentalOralDetail.SequenceEqual(other.ForensicDentalOralDetail)
                ) && 
                (
                    ForensicInvestigatoryVoiceDetail == other.ForensicInvestigatoryVoiceDetail ||
                    ForensicInvestigatoryVoiceDetail != null &&
                    ForensicInvestigatoryVoiceDetail.SequenceEqual(other.ForensicInvestigatoryVoiceDetail)
                ) && 
                (
                    Minutiae == other.Minutiae ||
                    Minutiae != null &&
                    Minutiae.SequenceEqual(other.Minutiae)
                ) && 
                (
                    NonPhotographicImageryDetail == other.NonPhotographicImageryDetail ||
                    NonPhotographicImageryDetail != null &&
                    NonPhotographicImageryDetail.SequenceEqual(other.NonPhotographicImageryDetail)
                ) && 
                (
                    PhysicalFeatureDescriptionDetail == other.PhysicalFeatureDescriptionDetail ||
                    PhysicalFeatureDescriptionDetail != null &&
                    PhysicalFeatureDescriptionDetail.SequenceEqual(other.PhysicalFeatureDescriptionDetail)
                ) && 
                (
                    BiometricContextImage == other.BiometricContextImage ||
                    BiometricContextImage != null &&
                    BiometricContextImage.SequenceEqual(other.BiometricContextImage)
                ) && 
                (
                    CbeffImage == other.CbeffImage ||
                    CbeffImage != null &&
                    CbeffImage.SequenceEqual(other.CbeffImage)
                ) && 
                (
                    DnaElectropherogramScreenshotImage == other.DnaElectropherogramScreenshotImage ||
                    DnaElectropherogramScreenshotImage != null &&
                    DnaElectropherogramScreenshotImage.SequenceEqual(other.DnaElectropherogramScreenshotImage)
                ) && 
                (
                    FaceImage == other.FaceImage ||
                    FaceImage != null &&
                    FaceImage.SequenceEqual(other.FaceImage)
                ) && 
                (
                    FingerImpressionImageDetail == other.FingerImpressionImageDetail ||
                    FingerImpressionImageDetail != null &&
                    FingerImpressionImageDetail.SequenceEqual(other.FingerImpressionImageDetail)
                ) && 
                (
                    FingerprintImage == other.FingerprintImage ||
                    FingerprintImage != null &&
                    FingerprintImage.SequenceEqual(other.FingerprintImage)
                ) && 
                (
                    FrictionRidgeDetail == other.FrictionRidgeDetail ||
                    FrictionRidgeDetail != null &&
                    FrictionRidgeDetail.SequenceEqual(other.FrictionRidgeDetail)
                ) && 
                (
                    IrisImageDetail == other.IrisImageDetail ||
                    IrisImageDetail != null &&
                    IrisImageDetail.SequenceEqual(other.IrisImageDetail)
                ) && 
                (
                    PalmPrintImageDetail == other.PalmPrintImageDetail ||
                    PalmPrintImageDetail != null &&
                    PalmPrintImageDetail.SequenceEqual(other.PalmPrintImageDetail)
                ) && 
                (
                    PhysicalFeatureImage == other.PhysicalFeatureImage ||
                    PhysicalFeatureImage != null &&
                    PhysicalFeatureImage.SequenceEqual(other.PhysicalFeatureImage)
                ) && 
                (
                    PlantarImageDetail == other.PlantarImageDetail ||
                    PlantarImageDetail != null &&
                    PlantarImageDetail.SequenceEqual(other.PlantarImageDetail)
                ) && 
                (
                    TestImageDetail == other.TestImageDetail ||
                    TestImageDetail != null &&
                    TestImageDetail.SequenceEqual(other.TestImageDetail)
                ) && 
                (
                    BiometricCapture == other.BiometricCapture ||
                    BiometricCapture != null &&
                    BiometricCapture.SequenceEqual(other.BiometricCapture)
                ) && 
                (
                    BiometricEncodingMethod == other.BiometricEncodingMethod ||
                    BiometricEncodingMethod != null &&
                    BiometricEncodingMethod.SequenceEqual(other.BiometricEncodingMethod)
                ) && 
                (
                    BiometricDescription == other.BiometricDescription ||
                    BiometricDescription != null &&
                    BiometricDescription.SequenceEqual(other.BiometricDescription)
                ) && 
                (
                    BiometricStatus == other.BiometricStatus ||
                    BiometricStatus != null &&
                    BiometricStatus.SequenceEqual(other.BiometricStatus)
                ) && 
                (
                    BiometricBinary == other.BiometricBinary ||
                    BiometricBinary != null &&
                    BiometricBinary.SequenceEqual(other.BiometricBinary)
                ) && 
                (
                    BiometricLabAnalysis == other.BiometricLabAnalysis ||
                    BiometricLabAnalysis != null &&
                    BiometricLabAnalysis.SequenceEqual(other.BiometricLabAnalysis)
                ) && 
                (
                    BiometricCapturer == other.BiometricCapturer ||
                    BiometricCapturer != null &&
                    BiometricCapturer.SequenceEqual(other.BiometricCapturer)
                ) && 
                (
                    BiometricTester == other.BiometricTester ||
                    BiometricTester != null &&
                    BiometricTester.SequenceEqual(other.BiometricTester)
                ) && 
                (
                    BiometricTestMethod == other.BiometricTestMethod ||
                    BiometricTestMethod != null &&
                    BiometricTestMethod.SequenceEqual(other.BiometricTestMethod)
                ) && 
                (
                    BiometricTestDate == other.BiometricTestDate ||
                    BiometricTestDate != null &&
                    BiometricTestDate.SequenceEqual(other.BiometricTestDate)
                ) && 
                (
                    BiometricTestDescription == other.BiometricTestDescription ||
                    BiometricTestDescription != null &&
                    BiometricTestDescription.SequenceEqual(other.BiometricTestDescription)
                ) && 
                (
                    BiometricRepositoryOrganization == other.BiometricRepositoryOrganization ||
                    BiometricRepositoryOrganization != null &&
                    BiometricRepositoryOrganization.SequenceEqual(other.BiometricRepositoryOrganization)
                ) && 
                (
                    BiometricRepositoryDescription == other.BiometricRepositoryDescription ||
                    BiometricRepositoryDescription != null &&
                    BiometricRepositoryDescription.SequenceEqual(other.BiometricRepositoryDescription)
                ) && 
                (
                    BiometricAccuracyDescription == other.BiometricAccuracyDescription ||
                    BiometricAccuracyDescription != null &&
                    BiometricAccuracyDescription.SequenceEqual(other.BiometricAccuracyDescription)
                ) && 
                (
                    QualityThreshold == other.QualityThreshold ||
                    QualityThreshold != null &&
                    QualityThreshold.SequenceEqual(other.QualityThreshold)
                ) && 
                (
                    BiometricValue == other.BiometricValue ||
                    BiometricValue != null &&
                    BiometricValue.SequenceEqual(other.BiometricValue)
                ) && 
                (
                    QualityConfidenceLevel == other.QualityConfidenceLevel ||
                    QualityConfidenceLevel != null &&
                    QualityConfidenceLevel.SequenceEqual(other.QualityConfidenceLevel)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BiometricId != null)
                    hashCode = hashCode * 59 + BiometricId.GetHashCode();
                    if (AnsiRecordCategoryCode != null)
                    hashCode = hashCode * 59 + AnsiRecordCategoryCode.GetHashCode();
                    if (BiometricClassification != null)
                    hashCode = hashCode * 59 + BiometricClassification.GetHashCode();
                    if (DnaSample != null)
                    hashCode = hashCode * 59 + DnaSample.GetHashCode();
                    if (ForensicDentalOralDetail != null)
                    hashCode = hashCode * 59 + ForensicDentalOralDetail.GetHashCode();
                    if (ForensicInvestigatoryVoiceDetail != null)
                    hashCode = hashCode * 59 + ForensicInvestigatoryVoiceDetail.GetHashCode();
                    if (Minutiae != null)
                    hashCode = hashCode * 59 + Minutiae.GetHashCode();
                    if (NonPhotographicImageryDetail != null)
                    hashCode = hashCode * 59 + NonPhotographicImageryDetail.GetHashCode();
                    if (PhysicalFeatureDescriptionDetail != null)
                    hashCode = hashCode * 59 + PhysicalFeatureDescriptionDetail.GetHashCode();
                    if (BiometricContextImage != null)
                    hashCode = hashCode * 59 + BiometricContextImage.GetHashCode();
                    if (CbeffImage != null)
                    hashCode = hashCode * 59 + CbeffImage.GetHashCode();
                    if (DnaElectropherogramScreenshotImage != null)
                    hashCode = hashCode * 59 + DnaElectropherogramScreenshotImage.GetHashCode();
                    if (FaceImage != null)
                    hashCode = hashCode * 59 + FaceImage.GetHashCode();
                    if (FingerImpressionImageDetail != null)
                    hashCode = hashCode * 59 + FingerImpressionImageDetail.GetHashCode();
                    if (FingerprintImage != null)
                    hashCode = hashCode * 59 + FingerprintImage.GetHashCode();
                    if (FrictionRidgeDetail != null)
                    hashCode = hashCode * 59 + FrictionRidgeDetail.GetHashCode();
                    if (IrisImageDetail != null)
                    hashCode = hashCode * 59 + IrisImageDetail.GetHashCode();
                    if (PalmPrintImageDetail != null)
                    hashCode = hashCode * 59 + PalmPrintImageDetail.GetHashCode();
                    if (PhysicalFeatureImage != null)
                    hashCode = hashCode * 59 + PhysicalFeatureImage.GetHashCode();
                    if (PlantarImageDetail != null)
                    hashCode = hashCode * 59 + PlantarImageDetail.GetHashCode();
                    if (TestImageDetail != null)
                    hashCode = hashCode * 59 + TestImageDetail.GetHashCode();
                    if (BiometricCapture != null)
                    hashCode = hashCode * 59 + BiometricCapture.GetHashCode();
                    if (BiometricEncodingMethod != null)
                    hashCode = hashCode * 59 + BiometricEncodingMethod.GetHashCode();
                    if (BiometricDescription != null)
                    hashCode = hashCode * 59 + BiometricDescription.GetHashCode();
                    if (BiometricStatus != null)
                    hashCode = hashCode * 59 + BiometricStatus.GetHashCode();
                    if (BiometricBinary != null)
                    hashCode = hashCode * 59 + BiometricBinary.GetHashCode();
                    if (BiometricLabAnalysis != null)
                    hashCode = hashCode * 59 + BiometricLabAnalysis.GetHashCode();
                    if (BiometricCapturer != null)
                    hashCode = hashCode * 59 + BiometricCapturer.GetHashCode();
                    if (BiometricTester != null)
                    hashCode = hashCode * 59 + BiometricTester.GetHashCode();
                    if (BiometricTestMethod != null)
                    hashCode = hashCode * 59 + BiometricTestMethod.GetHashCode();
                    if (BiometricTestDate != null)
                    hashCode = hashCode * 59 + BiometricTestDate.GetHashCode();
                    if (BiometricTestDescription != null)
                    hashCode = hashCode * 59 + BiometricTestDescription.GetHashCode();
                    if (BiometricRepositoryOrganization != null)
                    hashCode = hashCode * 59 + BiometricRepositoryOrganization.GetHashCode();
                    if (BiometricRepositoryDescription != null)
                    hashCode = hashCode * 59 + BiometricRepositoryDescription.GetHashCode();
                    if (BiometricAccuracyDescription != null)
                    hashCode = hashCode * 59 + BiometricAccuracyDescription.GetHashCode();
                    if (QualityThreshold != null)
                    hashCode = hashCode * 59 + QualityThreshold.GetHashCode();
                    if (BiometricValue != null)
                    hashCode = hashCode * 59 + BiometricValue.GetHashCode();
                    if (QualityConfidenceLevel != null)
                    hashCode = hashCode * 59 + QualityConfidenceLevel.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomBiometricDataType left, BiomBiometricDataType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomBiometricDataType left, BiomBiometricDataType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
