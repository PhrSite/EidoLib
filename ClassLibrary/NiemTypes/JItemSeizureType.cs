/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the removal of property from the possession of a person or organization.
    /// </summary>
    [DataContract]
    public partial class JItemSeizureType : NcActivityType, IEquatable<JItemSeizureType>
    { 
        /// <summary>
        /// A property item was processed or handled after being seized. NIEM reference is j:ItemSeizureDisposition
        /// </summary>
        /// <value>A property item was processed or handled after being seized. NIEM reference is j:ItemSeizureDisposition</value>

        [DataMember(Name="disposition")]
        public List<NcDispositionType> Disposition { get; set; }

        /// <summary>
        /// A location where an item was removed from the possession of the owner for official purposes. NIEM reference is j:ItemSeizedLocation
        /// </summary>
        /// <value>A location where an item was removed from the possession of the owner for official purposes. NIEM reference is j:ItemSeizedLocation</value>

        [DataMember(Name="itemSeizedLocation")]
        public List<NcLocationType> ItemSeizedLocation { get; set; }

        /// <summary>
        /// A method by which a property item was removed from a person&#x27;s possession and taken into custody. NIEM reference is j:ItemSeizureMethodText
        /// </summary>
        /// <value>A method by which a property item was removed from a person&#x27;s possession and taken into custody. NIEM reference is j:ItemSeizureMethodText</value>

        [DataMember(Name="method")]
        public List<NcTextType> Method { get; set; }

        /// <summary>
        /// A person who owns a property item that was seized. NIEM reference is j:ItemSeizureOwningPerson
        /// </summary>
        /// <value>A person who owns a property item that was seized. NIEM reference is j:ItemSeizureOwningPerson</value>

        [DataMember(Name="owningPerson")]
        public List<NcPersonType> OwningPerson { get; set; }

        /// <summary>
        /// A person who had possession of a property item when it was seized. NIEM reference is j:ItemSeizurePossessingPerson
        /// </summary>
        /// <value>A person who had possession of a property item when it was seized. NIEM reference is j:ItemSeizurePossessingPerson</value>

        [DataMember(Name="possessingPerson")]
        public List<NcPersonType> PossessingPerson { get; set; }

        /// <summary>
        /// A property item that was seized. NIEM reference is j:ItemSeizureItem
        /// </summary>
        /// <value>A property item that was seized. NIEM reference is j:ItemSeizureItem</value>

        [DataMember(Name="item")]
        public List<NcItemType> Item { get; set; }

        /// <summary>
        /// A condition that, if met, will allow a seized property item to be released back to its owner. NIEM reference is j:ItemSeizureReleaseConditionText
        /// </summary>
        /// <value>A condition that, if met, will allow a seized property item to be released back to its owner. NIEM reference is j:ItemSeizureReleaseConditionText</value>

        [DataMember(Name="releaseCondition")]
        public List<NcTextType> ReleaseCondition { get; set; }

        /// <summary>
        /// A warrant that was required to remove property from a person&#x27;s possession. NIEM reference is j:ItemSeizureWarrant
        /// </summary>
        /// <value>A warrant that was required to remove property from a person&#x27;s possession. NIEM reference is j:ItemSeizureWarrant</value>

        [DataMember(Name="warrant")]
        public List<JWarrantType> Warrant { get; set; }

        /// <summary>
        /// An entity which removes an item from the possession of the owner for official purposes. NIEM reference is j:ItemSeizerEntity
        /// </summary>
        /// <value>An entity which removes an item from the possession of the owner for official purposes. NIEM reference is j:ItemSeizerEntity</value>

        [DataMember(Name="itemSeizerEntity")]
        public List<NcEntityType> ItemSeizerEntity { get; set; }

        /// <summary>
        /// A peace official that seized a property item. NIEM reference is j:ItemSeizingEnforcementOfficial
        /// </summary>
        /// <value>A peace official that seized a property item. NIEM reference is j:ItemSeizingEnforcementOfficial</value>

        [DataMember(Name="itemSeizingEnforcementOfficial")]
        public List<JEnforcementOfficialType> ItemSeizingEnforcementOfficial { get; set; }

        /// <summary>
        /// jItemSeizureType JSON-LD context
        /// </summary>
        /// <value>jItemSeizureType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjItemSeizureTypeContextJsonldEnum for ../JSON-LD_Contexts/jItemSeizureTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jItemSeizureTypeContext.jsonld")]
            JSONLDContextsjItemSeizureTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jItemSeizureType JSON-LD context
        /// </summary>
        /// <value>jItemSeizureType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JItemSeizureType {\n");
            sb.Append("  Disposition: ").Append(Disposition).Append("\n");
            sb.Append("  ItemSeizedLocation: ").Append(ItemSeizedLocation).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OwningPerson: ").Append(OwningPerson).Append("\n");
            sb.Append("  PossessingPerson: ").Append(PossessingPerson).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  ReleaseCondition: ").Append(ReleaseCondition).Append("\n");
            sb.Append("  Warrant: ").Append(Warrant).Append("\n");
            sb.Append("  ItemSeizerEntity: ").Append(ItemSeizerEntity).Append("\n");
            sb.Append("  ItemSeizingEnforcementOfficial: ").Append(ItemSeizingEnforcementOfficial).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JItemSeizureType)obj);
        }

        /// <summary>
        /// Returns true if JItemSeizureType instances are equal
        /// </summary>
        /// <param name="other">Instance of JItemSeizureType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JItemSeizureType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Disposition == other.Disposition ||
                    Disposition != null &&
                    Disposition.SequenceEqual(other.Disposition)
                ) && 
                (
                    ItemSeizedLocation == other.ItemSeizedLocation ||
                    ItemSeizedLocation != null &&
                    ItemSeizedLocation.SequenceEqual(other.ItemSeizedLocation)
                ) && 
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.SequenceEqual(other.Method)
                ) && 
                (
                    OwningPerson == other.OwningPerson ||
                    OwningPerson != null &&
                    OwningPerson.SequenceEqual(other.OwningPerson)
                ) && 
                (
                    PossessingPerson == other.PossessingPerson ||
                    PossessingPerson != null &&
                    PossessingPerson.SequenceEqual(other.PossessingPerson)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.SequenceEqual(other.Item)
                ) && 
                (
                    ReleaseCondition == other.ReleaseCondition ||
                    ReleaseCondition != null &&
                    ReleaseCondition.SequenceEqual(other.ReleaseCondition)
                ) && 
                (
                    Warrant == other.Warrant ||
                    Warrant != null &&
                    Warrant.SequenceEqual(other.Warrant)
                ) && 
                (
                    ItemSeizerEntity == other.ItemSeizerEntity ||
                    ItemSeizerEntity != null &&
                    ItemSeizerEntity.SequenceEqual(other.ItemSeizerEntity)
                ) && 
                (
                    ItemSeizingEnforcementOfficial == other.ItemSeizingEnforcementOfficial ||
                    ItemSeizingEnforcementOfficial != null &&
                    ItemSeizingEnforcementOfficial.SequenceEqual(other.ItemSeizingEnforcementOfficial)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Disposition != null)
                    hashCode = hashCode * 59 + Disposition.GetHashCode();
                    if (ItemSeizedLocation != null)
                    hashCode = hashCode * 59 + ItemSeizedLocation.GetHashCode();
                    if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                    if (OwningPerson != null)
                    hashCode = hashCode * 59 + OwningPerson.GetHashCode();
                    if (PossessingPerson != null)
                    hashCode = hashCode * 59 + PossessingPerson.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (ReleaseCondition != null)
                    hashCode = hashCode * 59 + ReleaseCondition.GetHashCode();
                    if (Warrant != null)
                    hashCode = hashCode * 59 + Warrant.GetHashCode();
                    if (ItemSeizerEntity != null)
                    hashCode = hashCode * 59 + ItemSeizerEntity.GetHashCode();
                    if (ItemSeizingEnforcementOfficial != null)
                    hashCode = hashCode * 59 + ItemSeizingEnforcementOfficial.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JItemSeizureType left, JItemSeizureType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JItemSeizureType left, JItemSeizureType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
