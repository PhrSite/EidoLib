/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type used to give an assessment of the characteristics of a voice within the segment, including intelligibility, emotional state and impairment.
    /// </summary>
    [DataContract]
    public partial class BiomSegmentSpeakerCharacteristicsInformationType : IEquatable<BiomSegmentSpeakerCharacteristicsInformationType>
    { 
        /// <summary>
        /// A list of segment identifiers. NIEM reference is biom:SegmentIDList
        /// </summary>
        /// <value>A list of segment identifiers. NIEM reference is biom:SegmentIDList</value>

        [DataMember(Name="segmentIdList")]
        public List<BiomSegmentIDListType> SegmentIdList { get; set; }

        /// <summary>
        /// A list of speaker identifiers. NIEM reference is biom:SpeakerList
        /// </summary>
        /// <value>A list of speaker identifiers. NIEM reference is biom:SpeakerList</value>

        [DataMember(Name="speakerList")]
        public List<BiomSpeakerListType> SpeakerList { get; set; }

        /// <summary>
        /// A list of Type-2 records referenced in a transaction. NIEM reference is biom:Type2CrossReferenceList
        /// </summary>
        /// <value>A list of Type-2 records referenced in a transaction. NIEM reference is biom:Type2CrossReferenceList</value>

        [DataMember(Name="type2CrossReferenceList")]
        public List<BiomType2CrossReferenceListType> Type2CrossReferenceList { get; set; }

        /// <summary>
        /// An indication of the observed / perceived level of neurological diminishment across a speech segment. NIEM reference is biom:ImpairmentValue
        /// </summary>
        /// <value>An indication of the observed / perceived level of neurological diminishment across a speech segment. NIEM reference is biom:ImpairmentValue</value>

        [DataMember(Name="impairmentValue")]
        public List<BiomInteger0To5Type> ImpairmentValue { get; set; }

        /// <summary>
        /// A 3 character ISO 639-3 code for the dominant spoken language. NIEM reference is biom:DominantSpokenLanguageCode
        /// </summary>
        /// <value>A 3 character ISO 639-3 code for the dominant spoken language. NIEM reference is biom:DominantSpokenLanguageCode</value>

        [DataMember(Name="dominantSpokenLanguageCode")]
        public List<Iso6393LanguageCodeType> DominantSpokenLanguageCode { get; set; }

        /// <summary>
        /// An indication of the fluency with which a language is spoken. NIEM reference is biom:LanguageProficiencyValue
        /// </summary>
        /// <value>An indication of the fluency with which a language is spoken. NIEM reference is biom:LanguageProficiencyValue</value>

        [DataMember(Name="languageProficiencyValue")]
        public List<BiomInteger0To9Type> LanguageProficiencyValue { get; set; }

        /// <summary>
        /// A description of style of speech. NIEM reference is biom:SpeechStyleCode
        /// </summary>
        /// <value>A description of style of speech. NIEM reference is biom:SpeechStyleCode</value>

        [DataMember(Name="speechStyleCode")]
        public List<BiomSpeechStyleCodeType> SpeechStyleCode { get; set; }

        /// <summary>
        /// An indication for the comprehensibility of speech. NIEM reference is biom:IntelligibilityValue
        /// </summary>
        /// <value>An indication for the comprehensibility of speech. NIEM reference is biom:IntelligibilityValue</value>

        [DataMember(Name="intelligibilityValue")]
        public List<BiomInteger0To9Type> IntelligibilityValue { get; set; }

        /// <summary>
        /// An indication for the degree of familiarity between the data subject and the interlocutor. NIEM reference is biom:FamiliarityValue
        /// </summary>
        /// <value>An indication for the degree of familiarity between the data subject and the interlocutor. NIEM reference is biom:FamiliarityValue</value>

        [DataMember(Name="familiarityValue")]
        public List<BiomInteger0To5Type> FamiliarityValue { get; set; }

        /// <summary>
        /// A comment noting any observable health issues impacting the data subject during the recording time segment. NIEM reference is biom:HealthCommentText
        /// </summary>
        /// <value>A comment noting any observable health issues impacting the data subject during the recording time segment. NIEM reference is biom:HealthCommentText</value>

        [DataMember(Name="healthComment")]
        public List<NcTextType> HealthComment { get; set; }

        /// <summary>
        /// An identifier that estimates of the emotional state of the data subject across the audio time segment. NIEM reference is biom:EmotionalStateCode
        /// </summary>
        /// <value>An identifier that estimates of the emotional state of the data subject across the audio time segment. NIEM reference is biom:EmotionalStateCode</value>

        [DataMember(Name="emotionalStateCode")]
        public List<BiomEmotionalStateCodeType> EmotionalStateCode { get; set; }

        /// <summary>
        /// An estimation of perceived vocal effort across the audio time segment. NIEM reference is biom:VocalEffortValue
        /// </summary>
        /// <value>An estimation of perceived vocal effort across the audio time segment. NIEM reference is biom:VocalEffortValue</value>

        [DataMember(Name="vocalEffortValue")]
        public List<BiomInteger0To5Type> VocalEffortValue { get; set; }

        /// <summary>
        /// A code assessing the predominant vocal style across the audio time segment. NIEM reference is biom:VocalStyleCode
        /// </summary>
        /// <value>A code assessing the predominant vocal style across the audio time segment. NIEM reference is biom:VocalStyleCode</value>

        [DataMember(Name="vocalStyleCode")]
        public List<BiomVocalStyleCodeType> VocalStyleCode { get; set; }

        /// <summary>
        /// An indication of whether a data subject is aware that a recording is being made. NIEM reference is biom:RecordingAwarenessCode
        /// </summary>
        /// <value>An indication of whether a data subject is aware that a recording is being made. NIEM reference is biom:RecordingAwarenessCode</value>

        [DataMember(Name="recordingAwarenessCode")]
        public List<BiomRecordingAwarenessCodeType> RecordingAwarenessCode { get; set; }

        /// <summary>
        /// A script used for read, prompted or repeated speech. NIEM reference is biom:ScriptText
        /// </summary>
        /// <value>A script used for read, prompted or repeated speech. NIEM reference is biom:ScriptText</value>

        [DataMember(Name="script")]
        public List<NcTextType> Script { get; set; }

        /// <summary>
        /// A comment used to give additional information about the speech quality assessment process. NIEM reference is biom:SpeechCharacteristicsCommentText
        /// </summary>
        /// <value>A comment used to give additional information about the speech quality assessment process. NIEM reference is biom:SpeechCharacteristicsCommentText</value>

        [DataMember(Name="speechCharacteristicsComment")]
        public List<NcTextType> SpeechCharacteristicsComment { get; set; }

        /// <summary>
        /// biomSegmentSpeakerCharacteristicsInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentSpeakerCharacteristicsInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomSegmentSpeakerCharacteristicsInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomSegmentSpeakerCharacteristicsInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomSegmentSpeakerCharacteristicsInformationTypeContext.jsonld")]
            JSONLDContextsbiomSegmentSpeakerCharacteristicsInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomSegmentSpeakerCharacteristicsInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentSpeakerCharacteristicsInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomSegmentSpeakerCharacteristicsInformationType {\n");
            sb.Append("  SegmentIdList: ").Append(SegmentIdList).Append("\n");
            sb.Append("  SpeakerList: ").Append(SpeakerList).Append("\n");
            sb.Append("  Type2CrossReferenceList: ").Append(Type2CrossReferenceList).Append("\n");
            sb.Append("  ImpairmentValue: ").Append(ImpairmentValue).Append("\n");
            sb.Append("  DominantSpokenLanguageCode: ").Append(DominantSpokenLanguageCode).Append("\n");
            sb.Append("  LanguageProficiencyValue: ").Append(LanguageProficiencyValue).Append("\n");
            sb.Append("  SpeechStyleCode: ").Append(SpeechStyleCode).Append("\n");
            sb.Append("  IntelligibilityValue: ").Append(IntelligibilityValue).Append("\n");
            sb.Append("  FamiliarityValue: ").Append(FamiliarityValue).Append("\n");
            sb.Append("  HealthComment: ").Append(HealthComment).Append("\n");
            sb.Append("  EmotionalStateCode: ").Append(EmotionalStateCode).Append("\n");
            sb.Append("  VocalEffortValue: ").Append(VocalEffortValue).Append("\n");
            sb.Append("  VocalStyleCode: ").Append(VocalStyleCode).Append("\n");
            sb.Append("  RecordingAwarenessCode: ").Append(RecordingAwarenessCode).Append("\n");
            sb.Append("  Script: ").Append(Script).Append("\n");
            sb.Append("  SpeechCharacteristicsComment: ").Append(SpeechCharacteristicsComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomSegmentSpeakerCharacteristicsInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomSegmentSpeakerCharacteristicsInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomSegmentSpeakerCharacteristicsInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomSegmentSpeakerCharacteristicsInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SegmentIdList == other.SegmentIdList ||
                    SegmentIdList != null &&
                    SegmentIdList.SequenceEqual(other.SegmentIdList)
                ) && 
                (
                    SpeakerList == other.SpeakerList ||
                    SpeakerList != null &&
                    SpeakerList.SequenceEqual(other.SpeakerList)
                ) && 
                (
                    Type2CrossReferenceList == other.Type2CrossReferenceList ||
                    Type2CrossReferenceList != null &&
                    Type2CrossReferenceList.SequenceEqual(other.Type2CrossReferenceList)
                ) && 
                (
                    ImpairmentValue == other.ImpairmentValue ||
                    ImpairmentValue != null &&
                    ImpairmentValue.SequenceEqual(other.ImpairmentValue)
                ) && 
                (
                    DominantSpokenLanguageCode == other.DominantSpokenLanguageCode ||
                    DominantSpokenLanguageCode != null &&
                    DominantSpokenLanguageCode.SequenceEqual(other.DominantSpokenLanguageCode)
                ) && 
                (
                    LanguageProficiencyValue == other.LanguageProficiencyValue ||
                    LanguageProficiencyValue != null &&
                    LanguageProficiencyValue.SequenceEqual(other.LanguageProficiencyValue)
                ) && 
                (
                    SpeechStyleCode == other.SpeechStyleCode ||
                    SpeechStyleCode != null &&
                    SpeechStyleCode.SequenceEqual(other.SpeechStyleCode)
                ) && 
                (
                    IntelligibilityValue == other.IntelligibilityValue ||
                    IntelligibilityValue != null &&
                    IntelligibilityValue.SequenceEqual(other.IntelligibilityValue)
                ) && 
                (
                    FamiliarityValue == other.FamiliarityValue ||
                    FamiliarityValue != null &&
                    FamiliarityValue.SequenceEqual(other.FamiliarityValue)
                ) && 
                (
                    HealthComment == other.HealthComment ||
                    HealthComment != null &&
                    HealthComment.SequenceEqual(other.HealthComment)
                ) && 
                (
                    EmotionalStateCode == other.EmotionalStateCode ||
                    EmotionalStateCode != null &&
                    EmotionalStateCode.SequenceEqual(other.EmotionalStateCode)
                ) && 
                (
                    VocalEffortValue == other.VocalEffortValue ||
                    VocalEffortValue != null &&
                    VocalEffortValue.SequenceEqual(other.VocalEffortValue)
                ) && 
                (
                    VocalStyleCode == other.VocalStyleCode ||
                    VocalStyleCode != null &&
                    VocalStyleCode.SequenceEqual(other.VocalStyleCode)
                ) && 
                (
                    RecordingAwarenessCode == other.RecordingAwarenessCode ||
                    RecordingAwarenessCode != null &&
                    RecordingAwarenessCode.SequenceEqual(other.RecordingAwarenessCode)
                ) && 
                (
                    Script == other.Script ||
                    Script != null &&
                    Script.SequenceEqual(other.Script)
                ) && 
                (
                    SpeechCharacteristicsComment == other.SpeechCharacteristicsComment ||
                    SpeechCharacteristicsComment != null &&
                    SpeechCharacteristicsComment.SequenceEqual(other.SpeechCharacteristicsComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SegmentIdList != null)
                    hashCode = hashCode * 59 + SegmentIdList.GetHashCode();
                    if (SpeakerList != null)
                    hashCode = hashCode * 59 + SpeakerList.GetHashCode();
                    if (Type2CrossReferenceList != null)
                    hashCode = hashCode * 59 + Type2CrossReferenceList.GetHashCode();
                    if (ImpairmentValue != null)
                    hashCode = hashCode * 59 + ImpairmentValue.GetHashCode();
                    if (DominantSpokenLanguageCode != null)
                    hashCode = hashCode * 59 + DominantSpokenLanguageCode.GetHashCode();
                    if (LanguageProficiencyValue != null)
                    hashCode = hashCode * 59 + LanguageProficiencyValue.GetHashCode();
                    if (SpeechStyleCode != null)
                    hashCode = hashCode * 59 + SpeechStyleCode.GetHashCode();
                    if (IntelligibilityValue != null)
                    hashCode = hashCode * 59 + IntelligibilityValue.GetHashCode();
                    if (FamiliarityValue != null)
                    hashCode = hashCode * 59 + FamiliarityValue.GetHashCode();
                    if (HealthComment != null)
                    hashCode = hashCode * 59 + HealthComment.GetHashCode();
                    if (EmotionalStateCode != null)
                    hashCode = hashCode * 59 + EmotionalStateCode.GetHashCode();
                    if (VocalEffortValue != null)
                    hashCode = hashCode * 59 + VocalEffortValue.GetHashCode();
                    if (VocalStyleCode != null)
                    hashCode = hashCode * 59 + VocalStyleCode.GetHashCode();
                    if (RecordingAwarenessCode != null)
                    hashCode = hashCode * 59 + RecordingAwarenessCode.GetHashCode();
                    if (Script != null)
                    hashCode = hashCode * 59 + Script.GetHashCode();
                    if (SpeechCharacteristicsComment != null)
                    hashCode = hashCode * 59 + SpeechCharacteristicsComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomSegmentSpeakerCharacteristicsInformationType left, BiomSegmentSpeakerCharacteristicsInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomSegmentSpeakerCharacteristicsInformationType left, BiomSegmentSpeakerCharacteristicsInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
