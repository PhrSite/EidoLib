/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a DNA genotype allele pair
    /// </summary>
    [DataContract]
    public partial class BiomDNAGenotypeAllelePairType : IEquatable<BiomDNAGenotypeAllelePairType>
    { 
        /// <summary>
        /// An identifier for a reference number of a DNA locus NIEM reference is biom:DNALocusReferenceID
        /// </summary>
        /// <value>An identifier for a reference number of a DNA locus NIEM reference is biom:DNALocusReferenceID</value>

        [DataMember(Name="dnaLocusReferenceId")]
        public List<BiomInteger1to999Type> DnaLocusReferenceId { get; set; }

        /// <summary>
        /// A kind of characters denoting the allele pair data NIEM reference is biom:DNAGenotypeAllelePairText
        /// </summary>
        /// <value>A kind of characters denoting the allele pair data NIEM reference is biom:DNAGenotypeAllelePairText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A probability of an individual having these alleles at a single locus. The frequency of the individual alleles is based on population statistics data. This probability can be calculated by various formulas that consider if the locus is homozygous or NIEM reference is biom:DNALocusGenotypeProbabilityValue
        /// </summary>
        /// <value>A probability of an individual having these alleles at a single locus. The frequency of the individual alleles is based on population statistics data. This probability can be calculated by various formulas that consider if the locus is homozygous or NIEM reference is biom:DNALocusGenotypeProbabilityValue</value>

        [DataMember(Name="dnaLocusGenotypeProbabilityValue")]
        public List<BiomLocusGenotypeProbabilityValueType> DnaLocusGenotypeProbabilityValue { get; set; }

        /// <summary>
        /// biomDNAGenotypeAllelePairType JSON-LD context
        /// </summary>
        /// <value>biomDNAGenotypeAllelePairType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDNAGenotypeAllelePairTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDNAGenotypeAllelePairTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDNAGenotypeAllelePairTypeContext.jsonld")]
            JSONLDContextsbiomDNAGenotypeAllelePairTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDNAGenotypeAllelePairType JSON-LD context
        /// </summary>
        /// <value>biomDNAGenotypeAllelePairType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDNAGenotypeAllelePairType {\n");
            sb.Append("  DnaLocusReferenceId: ").Append(DnaLocusReferenceId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  DnaLocusGenotypeProbabilityValue: ").Append(DnaLocusGenotypeProbabilityValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDNAGenotypeAllelePairType)obj);
        }

        /// <summary>
        /// Returns true if BiomDNAGenotypeAllelePairType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDNAGenotypeAllelePairType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDNAGenotypeAllelePairType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DnaLocusReferenceId == other.DnaLocusReferenceId ||
                    DnaLocusReferenceId != null &&
                    DnaLocusReferenceId.SequenceEqual(other.DnaLocusReferenceId)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    DnaLocusGenotypeProbabilityValue == other.DnaLocusGenotypeProbabilityValue ||
                    DnaLocusGenotypeProbabilityValue != null &&
                    DnaLocusGenotypeProbabilityValue.SequenceEqual(other.DnaLocusGenotypeProbabilityValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DnaLocusReferenceId != null)
                    hashCode = hashCode * 59 + DnaLocusReferenceId.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (DnaLocusGenotypeProbabilityValue != null)
                    hashCode = hashCode * 59 + DnaLocusGenotypeProbabilityValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDNAGenotypeAllelePairType left, BiomDNAGenotypeAllelePairType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDNAGenotypeAllelePairType left, BiomDNAGenotypeAllelePairType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
