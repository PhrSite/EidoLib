/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a record of academic achievement for a subject.
    /// </summary>
    [DataContract]
    public partial class JAcademicRecordType : IEquatable<JAcademicRecordType>
    { 
        /// <summary>
        /// A description of a diploma received. NIEM reference is j:AcademicRecordDiplomaDescriptionText
        /// </summary>
        /// <value>A description of a diploma received. NIEM reference is j:AcademicRecordDiplomaDescriptionText</value>

        [DataMember(Name="diplomaDescription")]
        public List<NcTextType> DiplomaDescription { get; set; }

        /// <summary>
        /// A number of academic credits required by a subject. NIEM reference is j:AcademicRecordCreditsNeededNumeric
        /// </summary>
        /// <value>A number of academic credits required by a subject. NIEM reference is j:AcademicRecordCreditsNeededNumeric</value>

        [DataMember(Name="creditsNeededNumeric")]
        public List<NcNumericType> CreditsNeededNumeric { get; set; }

        /// <summary>
        /// A calendar year for which records are being recorded. NIEM reference is j:AcademicRecordYearDate
        /// </summary>
        /// <value>A calendar year for which records are being recorded. NIEM reference is j:AcademicRecordYearDate</value>

        [DataMember(Name="yearDate")]
        public List<NiemXsgYear> YearDate { get; set; }

        /// <summary>
        /// A number of total academic units completed. NIEM reference is j:AcademicRecordUnitsTotalNumeric
        /// </summary>
        /// <value>A number of total academic units completed. NIEM reference is j:AcademicRecordUnitsTotalNumeric</value>

        [DataMember(Name="unitsTotalNumeric")]
        public List<NcNumericType> UnitsTotalNumeric { get; set; }

        /// <summary>
        /// True if subject was ever expelled from school; false otherwise. NIEM reference is j:AcademicRecordExpelledFromSchoolIndicator
        /// </summary>
        /// <value>True if subject was ever expelled from school; false otherwise. NIEM reference is j:AcademicRecordExpelledFromSchoolIndicator</value>

        [DataMember(Name="isExpelledFromSchool")]
        public List<NiemXsboolean> IsExpelledFromSchool { get; set; }

        /// <summary>
        /// A number of academic credits earned by a subject. NIEM reference is j:AcademicRecordCreditsEarnedNumeric
        /// </summary>
        /// <value>A number of academic credits earned by a subject. NIEM reference is j:AcademicRecordCreditsEarnedNumeric</value>

        [DataMember(Name="creditsEarnedNumeric")]
        public List<NcNumericType> CreditsEarnedNumeric { get; set; }

        /// <summary>
        /// A date a diploma was awarded. NIEM reference is j:AcademicRecordDiplomaReceivedDate
        /// </summary>
        /// <value>A date a diploma was awarded. NIEM reference is j:AcademicRecordDiplomaReceivedDate</value>

        [DataMember(Name="diplomaReceivedDate")]
        public List<NcDateType> DiplomaReceivedDate { get; set; }

        /// <summary>
        /// A date on which the training information was entered. NIEM reference is j:AcademicRecordRecordedDate
        /// </summary>
        /// <value>A date on which the training information was entered. NIEM reference is j:AcademicRecordRecordedDate</value>

        [DataMember(Name="recordedDate")]
        public List<NcDateType> RecordedDate { get; set; }

        /// <summary>
        /// jAcademicRecordType JSON-LD context
        /// </summary>
        /// <value>jAcademicRecordType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjAcademicRecordTypeContextJsonldEnum for ../JSON-LD_Contexts/jAcademicRecordTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jAcademicRecordTypeContext.jsonld")]
            JSONLDContextsjAcademicRecordTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jAcademicRecordType JSON-LD context
        /// </summary>
        /// <value>jAcademicRecordType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JAcademicRecordType {\n");
            sb.Append("  DiplomaDescription: ").Append(DiplomaDescription).Append("\n");
            sb.Append("  CreditsNeededNumeric: ").Append(CreditsNeededNumeric).Append("\n");
            sb.Append("  YearDate: ").Append(YearDate).Append("\n");
            sb.Append("  UnitsTotalNumeric: ").Append(UnitsTotalNumeric).Append("\n");
            sb.Append("  IsExpelledFromSchool: ").Append(IsExpelledFromSchool).Append("\n");
            sb.Append("  CreditsEarnedNumeric: ").Append(CreditsEarnedNumeric).Append("\n");
            sb.Append("  DiplomaReceivedDate: ").Append(DiplomaReceivedDate).Append("\n");
            sb.Append("  RecordedDate: ").Append(RecordedDate).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JAcademicRecordType)obj);
        }

        /// <summary>
        /// Returns true if JAcademicRecordType instances are equal
        /// </summary>
        /// <param name="other">Instance of JAcademicRecordType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JAcademicRecordType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DiplomaDescription == other.DiplomaDescription ||
                    DiplomaDescription != null &&
                    DiplomaDescription.SequenceEqual(other.DiplomaDescription)
                ) && 
                (
                    CreditsNeededNumeric == other.CreditsNeededNumeric ||
                    CreditsNeededNumeric != null &&
                    CreditsNeededNumeric.SequenceEqual(other.CreditsNeededNumeric)
                ) && 
                (
                    YearDate == other.YearDate ||
                    YearDate != null &&
                    YearDate.SequenceEqual(other.YearDate)
                ) && 
                (
                    UnitsTotalNumeric == other.UnitsTotalNumeric ||
                    UnitsTotalNumeric != null &&
                    UnitsTotalNumeric.SequenceEqual(other.UnitsTotalNumeric)
                ) && 
                (
                    IsExpelledFromSchool == other.IsExpelledFromSchool ||
                    IsExpelledFromSchool != null &&
                    IsExpelledFromSchool.SequenceEqual(other.IsExpelledFromSchool)
                ) && 
                (
                    CreditsEarnedNumeric == other.CreditsEarnedNumeric ||
                    CreditsEarnedNumeric != null &&
                    CreditsEarnedNumeric.SequenceEqual(other.CreditsEarnedNumeric)
                ) && 
                (
                    DiplomaReceivedDate == other.DiplomaReceivedDate ||
                    DiplomaReceivedDate != null &&
                    DiplomaReceivedDate.SequenceEqual(other.DiplomaReceivedDate)
                ) && 
                (
                    RecordedDate == other.RecordedDate ||
                    RecordedDate != null &&
                    RecordedDate.SequenceEqual(other.RecordedDate)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DiplomaDescription != null)
                    hashCode = hashCode * 59 + DiplomaDescription.GetHashCode();
                    if (CreditsNeededNumeric != null)
                    hashCode = hashCode * 59 + CreditsNeededNumeric.GetHashCode();
                    if (YearDate != null)
                    hashCode = hashCode * 59 + YearDate.GetHashCode();
                    if (UnitsTotalNumeric != null)
                    hashCode = hashCode * 59 + UnitsTotalNumeric.GetHashCode();
                    if (IsExpelledFromSchool != null)
                    hashCode = hashCode * 59 + IsExpelledFromSchool.GetHashCode();
                    if (CreditsEarnedNumeric != null)
                    hashCode = hashCode * 59 + CreditsEarnedNumeric.GetHashCode();
                    if (DiplomaReceivedDate != null)
                    hashCode = hashCode * 59 + DiplomaReceivedDate.GetHashCode();
                    if (RecordedDate != null)
                    hashCode = hashCode * 59 + RecordedDate.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JAcademicRecordType left, JAcademicRecordType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JAcademicRecordType left, JAcademicRecordType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
