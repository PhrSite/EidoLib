/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a detailed description of why an agency placed the person in its repository or why the data on the person is being exchanged.
    /// </summary>
    [DataContract]
    public partial class IntelAgencySubjectInterestType : IEquatable<IntelAgencySubjectInterestType>
    { 
        /// <summary>
        /// A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationCode
        /// </summary>
        /// <value>A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationCode</value>

        [DataMember(Name="subjectCautionInformationCode")]
        public List<NcicCMCCodeType> SubjectCautionInformationCode { get; set; }

        /// <summary>
        /// A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationText
        /// </summary>
        /// <value>A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationText</value>

        [DataMember(Name="subjectCautionInformation")]
        public List<NcTextType> SubjectCautionInformation { get; set; }

        /// <summary>
        /// A name of a government organization that has specified an interest in this person, or has issued a warning or handling instructions regarding this person. NIEM reference is intel:AgencyName
        /// </summary>
        /// <value>A name of a government organization that has specified an interest in this person, or has issued a warning or handling instructions regarding this person. NIEM reference is intel:AgencyName</value>

        [DataMember(Name="agencyName")]
        public List<NcTextType> AgencyName { get; set; }

        /// <summary>
        /// A grouping of persons by the reason they are of interest to intelligence. NIEM reference is intel:AgencyInterestCategory
        /// </summary>
        /// <value>A grouping of persons by the reason they are of interest to intelligence. NIEM reference is intel:AgencyInterestCategory</value>

        [DataMember(Name="agencyInterestCategory")]
        public List<IntelAgencyInterestCategoryType> AgencyInterestCategory { get; set; }

        /// <summary>
        /// An action to take on contact with the person. NIEM reference is intel:AgencySubjectHandling
        /// </summary>
        /// <value>An action to take on contact with the person. NIEM reference is intel:AgencySubjectHandling</value>

        [DataMember(Name="agencySubjectHandling")]
        public List<IntelAgencySubjectHandlingType> AgencySubjectHandling { get; set; }

        /// <summary>
        /// A reason why the person has been added to a terrorist watch list by a government organization. NIEM reference is intel:SubjectReasonOnListText
        /// </summary>
        /// <value>A reason why the person has been added to a terrorist watch list by a government organization. NIEM reference is intel:SubjectReasonOnListText</value>

        [DataMember(Name="subjectReasonOnList")]
        public List<NcTextType> SubjectReasonOnList { get; set; }

        /// <summary>
        /// intelAgencySubjectInterestType JSON-LD context
        /// </summary>
        /// <value>intelAgencySubjectInterestType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsintelAgencySubjectInterestTypeContextJsonldEnum for ../JSON-LD_Contexts/intelAgencySubjectInterestTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/intelAgencySubjectInterestTypeContext.jsonld")]
            JSONLDContextsintelAgencySubjectInterestTypeContextJsonldEnum = 0        }

        /// <summary>
        /// intelAgencySubjectInterestType JSON-LD context
        /// </summary>
        /// <value>intelAgencySubjectInterestType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IntelAgencySubjectInterestType {\n");
            sb.Append("  SubjectCautionInformationCode: ").Append(SubjectCautionInformationCode).Append("\n");
            sb.Append("  SubjectCautionInformation: ").Append(SubjectCautionInformation).Append("\n");
            sb.Append("  AgencyName: ").Append(AgencyName).Append("\n");
            sb.Append("  AgencyInterestCategory: ").Append(AgencyInterestCategory).Append("\n");
            sb.Append("  AgencySubjectHandling: ").Append(AgencySubjectHandling).Append("\n");
            sb.Append("  SubjectReasonOnList: ").Append(SubjectReasonOnList).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IntelAgencySubjectInterestType)obj);
        }

        /// <summary>
        /// Returns true if IntelAgencySubjectInterestType instances are equal
        /// </summary>
        /// <param name="other">Instance of IntelAgencySubjectInterestType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntelAgencySubjectInterestType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SubjectCautionInformationCode == other.SubjectCautionInformationCode ||
                    SubjectCautionInformationCode != null &&
                    SubjectCautionInformationCode.SequenceEqual(other.SubjectCautionInformationCode)
                ) && 
                (
                    SubjectCautionInformation == other.SubjectCautionInformation ||
                    SubjectCautionInformation != null &&
                    SubjectCautionInformation.SequenceEqual(other.SubjectCautionInformation)
                ) && 
                (
                    AgencyName == other.AgencyName ||
                    AgencyName != null &&
                    AgencyName.SequenceEqual(other.AgencyName)
                ) && 
                (
                    AgencyInterestCategory == other.AgencyInterestCategory ||
                    AgencyInterestCategory != null &&
                    AgencyInterestCategory.SequenceEqual(other.AgencyInterestCategory)
                ) && 
                (
                    AgencySubjectHandling == other.AgencySubjectHandling ||
                    AgencySubjectHandling != null &&
                    AgencySubjectHandling.SequenceEqual(other.AgencySubjectHandling)
                ) && 
                (
                    SubjectReasonOnList == other.SubjectReasonOnList ||
                    SubjectReasonOnList != null &&
                    SubjectReasonOnList.SequenceEqual(other.SubjectReasonOnList)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SubjectCautionInformationCode != null)
                    hashCode = hashCode * 59 + SubjectCautionInformationCode.GetHashCode();
                    if (SubjectCautionInformation != null)
                    hashCode = hashCode * 59 + SubjectCautionInformation.GetHashCode();
                    if (AgencyName != null)
                    hashCode = hashCode * 59 + AgencyName.GetHashCode();
                    if (AgencyInterestCategory != null)
                    hashCode = hashCode * 59 + AgencyInterestCategory.GetHashCode();
                    if (AgencySubjectHandling != null)
                    hashCode = hashCode * 59 + AgencySubjectHandling.GetHashCode();
                    if (SubjectReasonOnList != null)
                    hashCode = hashCode * 59 + SubjectReasonOnList.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IntelAgencySubjectInterestType left, IntelAgencySubjectInterestType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IntelAgencySubjectInterestType left, IntelAgencySubjectInterestType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
