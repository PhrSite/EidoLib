/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a prominent or easily identifiable aspect of something or someone.
    /// </summary>
    [DataContract]
    public partial class NcPhysicalFeatureType : IEquatable<NcPhysicalFeatureType>
    { 
        /// <summary>
        /// A general kind of physical feature. NIEM reference is nc:PhysicalFeatureGeneralCategoryText
        /// </summary>
        /// <value>A general kind of physical feature. NIEM reference is nc:PhysicalFeatureGeneralCategoryText</value>

        [DataMember(Name="generalCategory")]
        public List<NcTextType> GeneralCategory { get; set; }

        /// <summary>
        /// A visible, atypical distinguishing trait, property or quality of a person. NIEM reference is intel:PhysicalFeatureCategoryCodeText
        /// </summary>
        /// <value>A visible, atypical distinguishing trait, property or quality of a person. NIEM reference is intel:PhysicalFeatureCategoryCodeText</value>

        [DataMember(Name="categoryCodeText")]
        public List<NcTextType> CategoryCodeText { get; set; }

        /// <summary>
        /// A specific kind of physical feature. NIEM reference is j:PhysicalFeatureCategoryCode
        /// </summary>
        /// <value>A specific kind of physical feature. NIEM reference is j:PhysicalFeatureCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<NcicSMTCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A specific kind of physical feature. NIEM reference is nc:PhysicalFeatureCategoryText
        /// </summary>
        /// <value>A specific kind of physical feature. NIEM reference is nc:PhysicalFeatureCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A description of a physical feature. NIEM reference is nc:PhysicalFeatureDescriptionText
        /// </summary>
        /// <value>A description of a physical feature. NIEM reference is nc:PhysicalFeatureDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A digital image of a physical feature. NIEM reference is nc:PhysicalFeatureImage
        /// </summary>
        /// <value>A digital image of a physical feature. NIEM reference is nc:PhysicalFeatureImage</value>

        [DataMember(Name="image")]
        public List<NcImageType> Image { get; set; }

        /// <summary>
        /// A location on a person&#x27;s body of a physical feature. NIEM reference is nc:PhysicalFeatureLocationText
        /// </summary>
        /// <value>A location on a person&#x27;s body of a physical feature. NIEM reference is nc:PhysicalFeatureLocationText</value>

        [DataMember(Name="location")]
        public List<NcTextType> Location { get; set; }

        /// <summary>
        /// ncPhysicalFeatureType JSON-LD context
        /// </summary>
        /// <value>ncPhysicalFeatureType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPhysicalFeatureTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPhysicalFeatureTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPhysicalFeatureTypeContext.jsonld")]
            JSONLDContextsncPhysicalFeatureTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPhysicalFeatureType JSON-LD context
        /// </summary>
        /// <value>ncPhysicalFeatureType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPhysicalFeatureType {\n");
            sb.Append("  GeneralCategory: ").Append(GeneralCategory).Append("\n");
            sb.Append("  CategoryCodeText: ").Append(CategoryCodeText).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPhysicalFeatureType)obj);
        }

        /// <summary>
        /// Returns true if NcPhysicalFeatureType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPhysicalFeatureType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPhysicalFeatureType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GeneralCategory == other.GeneralCategory ||
                    GeneralCategory != null &&
                    GeneralCategory.SequenceEqual(other.GeneralCategory)
                ) && 
                (
                    CategoryCodeText == other.CategoryCodeText ||
                    CategoryCodeText != null &&
                    CategoryCodeText.SequenceEqual(other.CategoryCodeText)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.SequenceEqual(other.Image)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GeneralCategory != null)
                    hashCode = hashCode * 59 + GeneralCategory.GetHashCode();
                    if (CategoryCodeText != null)
                    hashCode = hashCode * 59 + CategoryCodeText.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPhysicalFeatureType left, NcPhysicalFeatureType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPhysicalFeatureType left, NcPhysicalFeatureType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
