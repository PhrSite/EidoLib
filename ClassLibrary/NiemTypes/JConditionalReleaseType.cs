/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a release of a person or item from confinement, holding, or obligation, that is dependent upon certain conditions being met.
    /// </summary>
    [DataContract]
    public partial class JConditionalReleaseType : NcReleaseType, IEquatable<JConditionalReleaseType>
    { 
        /// <summary>
        /// A requirement or prerequisite for release.  A restriction, modification, or qualification of a term or terms of release. (Ex. no contact with victim; do not leave jurisdiction of court, etc.)  NIEM reference is j:ConditionalReleaseCondition
        /// </summary>
        /// <value>A requirement or prerequisite for release.  A restriction, modification, or qualification of a term or terms of release. (Ex. no contact with victim; do not leave jurisdiction of court, etc.)  NIEM reference is j:ConditionalReleaseCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// A date of the Subject&#x27;s Probation Expiration NIEM reference is j:ConditionalReleaseExpirationDate
        /// </summary>
        /// <value>A date of the Subject&#x27;s Probation Expiration NIEM reference is j:ConditionalReleaseExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// A reason against releasing a person. NIEM reference is j:ConditionalReleaseOppositionText
        /// </summary>
        /// <value>A reason against releasing a person. NIEM reference is j:ConditionalReleaseOppositionText</value>

        [DataMember(Name="opposition")]
        public List<NcTextType> Opposition { get; set; }

        /// <summary>
        /// An expected date of conditional release. This date may change over time. NIEM reference is j:ConditionalReleaseProjectedDate
        /// </summary>
        /// <value>An expected date of conditional release. This date may change over time. NIEM reference is j:ConditionalReleaseProjectedDate</value>

        [DataMember(Name="projectedDate")]
        public List<NcDateType> ProjectedDate { get; set; }

        /// <summary>
        /// A date a conditional release was revoked due to a person&#x27;s failure in meeting required conditions or for other reasons. NIEM reference is j:ConditionalReleaseRevokedDate
        /// </summary>
        /// <value>A date a conditional release was revoked due to a person&#x27;s failure in meeting required conditions or for other reasons. NIEM reference is j:ConditionalReleaseRevokedDate</value>

        [DataMember(Name="revokedDate")]
        public List<NcDateType> RevokedDate { get; set; }

        /// <summary>
        /// A reason why a conditional release was revoked. NIEM reference is j:ConditionalReleaseRevokedReasonText
        /// </summary>
        /// <value>A reason why a conditional release was revoked. NIEM reference is j:ConditionalReleaseRevokedReasonText</value>

        [DataMember(Name="revokedReason")]
        public List<NcTextType> RevokedReason { get; set; }

        /// <summary>
        /// A reason in support of releasing a person. NIEM reference is j:ConditionalReleaseSupportText
        /// </summary>
        /// <value>A reason in support of releasing a person. NIEM reference is j:ConditionalReleaseSupportText</value>

        [DataMember(Name="support")]
        public List<NcTextType> Support { get; set; }

        /// <summary>
        /// jConditionalReleaseType JSON-LD context
        /// </summary>
        /// <value>jConditionalReleaseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjConditionalReleaseTypeContextJsonldEnum for ../JSON-LD_Contexts/jConditionalReleaseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jConditionalReleaseTypeContext.jsonld")]
            JSONLDContextsjConditionalReleaseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jConditionalReleaseType JSON-LD context
        /// </summary>
        /// <value>jConditionalReleaseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JConditionalReleaseType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Opposition: ").Append(Opposition).Append("\n");
            sb.Append("  ProjectedDate: ").Append(ProjectedDate).Append("\n");
            sb.Append("  RevokedDate: ").Append(RevokedDate).Append("\n");
            sb.Append("  RevokedReason: ").Append(RevokedReason).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JConditionalReleaseType)obj);
        }

        /// <summary>
        /// Returns true if JConditionalReleaseType instances are equal
        /// </summary>
        /// <param name="other">Instance of JConditionalReleaseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JConditionalReleaseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    Opposition == other.Opposition ||
                    Opposition != null &&
                    Opposition.SequenceEqual(other.Opposition)
                ) && 
                (
                    ProjectedDate == other.ProjectedDate ||
                    ProjectedDate != null &&
                    ProjectedDate.SequenceEqual(other.ProjectedDate)
                ) && 
                (
                    RevokedDate == other.RevokedDate ||
                    RevokedDate != null &&
                    RevokedDate.SequenceEqual(other.RevokedDate)
                ) && 
                (
                    RevokedReason == other.RevokedReason ||
                    RevokedReason != null &&
                    RevokedReason.SequenceEqual(other.RevokedReason)
                ) && 
                (
                    Support == other.Support ||
                    Support != null &&
                    Support.SequenceEqual(other.Support)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Opposition != null)
                    hashCode = hashCode * 59 + Opposition.GetHashCode();
                    if (ProjectedDate != null)
                    hashCode = hashCode * 59 + ProjectedDate.GetHashCode();
                    if (RevokedDate != null)
                    hashCode = hashCode * 59 + RevokedDate.GetHashCode();
                    if (RevokedReason != null)
                    hashCode = hashCode * 59 + RevokedReason.GetHashCode();
                    if (Support != null)
                    hashCode = hashCode * 59 + Support.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JConditionalReleaseType left, JConditionalReleaseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JConditionalReleaseType left, JConditionalReleaseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
