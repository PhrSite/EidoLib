/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a factor involved that has an effect on an incident.
    /// </summary>
    [DataContract]
    public partial class JIncidentFactorType : IEquatable<JIncidentFactorType>
    { 
        /// <summary>
        /// A circumstance of factor in an incident. NIEM reference is j:IncidentFactorCode
        /// </summary>
        /// <value>A circumstance of factor in an incident. NIEM reference is j:IncidentFactorCode</value>

        [DataMember(Name="code")]
        public List<UcrIncidentFactorCodeType> Code { get; set; }

        /// <summary>
        /// A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSAggravatedAssaultHomicideCode
        /// </summary>
        /// <value>A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSAggravatedAssaultHomicideCode</value>

        [DataMember(Name="nibrsAggravatedAssaultHomicideCode")]
        public List<UcrAggravatedAssaultHomicideFactorsCodeType> NibrsAggravatedAssaultHomicideCode { get; set; }

        /// <summary>
        /// A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSBiasMotivationCode
        /// </summary>
        /// <value>A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSBiasMotivationCode</value>

        [DataMember(Name="nibrsBiasMotivationCode")]
        public List<UcrIncidentBiasMotivationCodeType> NibrsBiasMotivationCode { get; set; }

        /// <summary>
        /// A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSJustifiableHomicideCode
        /// </summary>
        /// <value>A circumstance of factor in an incident. NIEM reference is j:IncidentFactorNIBRSJustifiableHomicideCode</value>

        [DataMember(Name="nibrsJustifiableHomicideCode")]
        public List<UcrJustifiableHomicideFactorsCodeType> NibrsJustifiableHomicideCode { get; set; }

        /// <summary>
        /// A circumstance or factor in an incident. NIEM reference is j:IncidentFactorText
        /// </summary>
        /// <value>A circumstance or factor in an incident. NIEM reference is j:IncidentFactorText</value>

        [DataMember(Name="text")]
        public List<NcTextType> Text { get; set; }

        /// <summary>
        /// A description of a circumstance or factor involved in an incident. NIEM reference is j:IncidentFactorDescriptionText
        /// </summary>
        /// <value>A description of a circumstance or factor involved in an incident. NIEM reference is j:IncidentFactorDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// True if a factor in an incident is known to be true; false if it is suspected, estimated, or otherwise. NIEM reference is j:IncidentFactorKnownIndicator
        /// </summary>
        /// <value>True if a factor in an incident is known to be true; false if it is suspected, estimated, or otherwise. NIEM reference is j:IncidentFactorKnownIndicator</value>

        [DataMember(Name="isKnown")]
        public List<NiemXsboolean> IsKnown { get; set; }

        /// <summary>
        /// A kind of specific detail or aspect of an incident factor or circumstance. NIEM reference is j:IncidentFactorSubCategoryText
        /// </summary>
        /// <value>A kind of specific detail or aspect of an incident factor or circumstance. NIEM reference is j:IncidentFactorSubCategoryText</value>

        [DataMember(Name="subCategory")]
        public List<NcTextType> SubCategory { get; set; }

        /// <summary>
        /// jIncidentFactorType JSON-LD context
        /// </summary>
        /// <value>jIncidentFactorType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjIncidentFactorTypeContextJsonldEnum for ../JSON-LD_Contexts/jIncidentFactorTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jIncidentFactorTypeContext.jsonld")]
            JSONLDContextsjIncidentFactorTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jIncidentFactorType JSON-LD context
        /// </summary>
        /// <value>jIncidentFactorType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JIncidentFactorType {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  NibrsAggravatedAssaultHomicideCode: ").Append(NibrsAggravatedAssaultHomicideCode).Append("\n");
            sb.Append("  NibrsBiasMotivationCode: ").Append(NibrsBiasMotivationCode).Append("\n");
            sb.Append("  NibrsJustifiableHomicideCode: ").Append(NibrsJustifiableHomicideCode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsKnown: ").Append(IsKnown).Append("\n");
            sb.Append("  SubCategory: ").Append(SubCategory).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JIncidentFactorType)obj);
        }

        /// <summary>
        /// Returns true if JIncidentFactorType instances are equal
        /// </summary>
        /// <param name="other">Instance of JIncidentFactorType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JIncidentFactorType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    NibrsAggravatedAssaultHomicideCode == other.NibrsAggravatedAssaultHomicideCode ||
                    NibrsAggravatedAssaultHomicideCode != null &&
                    NibrsAggravatedAssaultHomicideCode.SequenceEqual(other.NibrsAggravatedAssaultHomicideCode)
                ) && 
                (
                    NibrsBiasMotivationCode == other.NibrsBiasMotivationCode ||
                    NibrsBiasMotivationCode != null &&
                    NibrsBiasMotivationCode.SequenceEqual(other.NibrsBiasMotivationCode)
                ) && 
                (
                    NibrsJustifiableHomicideCode == other.NibrsJustifiableHomicideCode ||
                    NibrsJustifiableHomicideCode != null &&
                    NibrsJustifiableHomicideCode.SequenceEqual(other.NibrsJustifiableHomicideCode)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.SequenceEqual(other.Text)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    IsKnown == other.IsKnown ||
                    IsKnown != null &&
                    IsKnown.SequenceEqual(other.IsKnown)
                ) && 
                (
                    SubCategory == other.SubCategory ||
                    SubCategory != null &&
                    SubCategory.SequenceEqual(other.SubCategory)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (NibrsAggravatedAssaultHomicideCode != null)
                    hashCode = hashCode * 59 + NibrsAggravatedAssaultHomicideCode.GetHashCode();
                    if (NibrsBiasMotivationCode != null)
                    hashCode = hashCode * 59 + NibrsBiasMotivationCode.GetHashCode();
                    if (NibrsJustifiableHomicideCode != null)
                    hashCode = hashCode * 59 + NibrsJustifiableHomicideCode.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (IsKnown != null)
                    hashCode = hashCode * 59 + IsKnown.GetHashCode();
                    if (SubCategory != null)
                    hashCode = hashCode * 59 + SubCategory.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JIncidentFactorType left, JIncidentFactorType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JIncidentFactorType left, JIncidentFactorType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
