/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a paper or electronic document.
    /// </summary>
    [DataContract]
    public partial class NcDocumentType : IEquatable<NcDocumentType>
    { 
        /// <summary>
        /// A characterization of the sensitivity, security, or privacy level of a document. NIEM reference is nc:DocumentSensitivityText
        /// </summary>
        /// <value>A characterization of the sensitivity, security, or privacy level of a document. NIEM reference is nc:DocumentSensitivityText</value>

        [DataMember(Name="sensitivity")]
        public List<NcTextType> Sensitivity { get; set; }

        /// <summary>
        /// A kind of document. NIEM reference is scr:DocumentCategoryCode
        /// </summary>
        /// <value>A kind of document. NIEM reference is scr:DocumentCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<ScrDocumentCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// An identifier of a kind of information in a document. NIEM reference is nc:DocumentCategoryID
        /// </summary>
        /// <value>An identifier of a kind of information in a document. NIEM reference is nc:DocumentCategoryID</value>

        [DataMember(Name="categoryId")]
        public List<NiemXsstring> CategoryId { get; set; }

        /// <summary>
        /// A name of a category of information in a document. NIEM reference is nc:DocumentCategoryName
        /// </summary>
        /// <value>A name of a category of information in a document. NIEM reference is nc:DocumentCategoryName</value>

        [DataMember(Name="categoryName")]
        public List<NcTextType> CategoryName { get; set; }

        /// <summary>
        /// A kind of document; a nature or genre of the content. NIEM reference is nc:DocumentCategoryText
        /// </summary>
        /// <value>A kind of document; a nature or genre of the content. NIEM reference is nc:DocumentCategoryText</value>

        [DataMember(Name="category")]
        public List<NcTextType> Category { get; set; }

        /// <summary>
        /// A warning or caution about the information. NIEM reference is nc:CaveatText
        /// </summary>
        /// <value>A warning or caution about the information. NIEM reference is nc:CaveatText</value>

        [DataMember(Name="caveat")]
        public List<NcTextType> Caveat { get; set; }

        /// <summary>
        /// A title used as a substitute or alternative to the formal title of a document. NIEM reference is nc:DocumentAlternativeTitleText
        /// </summary>
        /// <value>A title used as a substitute or alternative to the formal title of a document. NIEM reference is nc:DocumentAlternativeTitleText</value>

        [DataMember(Name="alternativeTitle")]
        public List<NcTextType> AlternativeTitle { get; set; }

        /// <summary>
        /// A name of a computer application used to process a document. NIEM reference is nc:DocumentSoftwareName
        /// </summary>
        /// <value>A name of a computer application used to process a document. NIEM reference is nc:DocumentSoftwareName</value>

        [DataMember(Name="softwareName")]
        public List<NcSoftwareNameType> SoftwareName { get; set; }

        /// <summary>
        /// True if a document has been approved; false otherwise. NIEM reference is nc:DocumentApprovedIndicator
        /// </summary>
        /// <value>True if a document has been approved; false otherwise. NIEM reference is nc:DocumentApprovedIndicator</value>

        [DataMember(Name="isApproved")]
        public List<NiemXsboolean> IsApproved { get; set; }

        /// <summary>
        /// A binary encoding of the content of a document. NIEM reference is nc:DocumentBinary
        /// </summary>
        /// <value>A binary encoding of the content of a document. NIEM reference is nc:DocumentBinary</value>

        [DataMember(Name="binary")]
        public List<NcBinaryType> Binary { get; set; }

        /// <summary>
        /// A description of a kind of information in a document. NIEM reference is nc:DocumentCategoryDescriptionText
        /// </summary>
        /// <value>A description of a kind of information in a document. NIEM reference is nc:DocumentCategoryDescriptionText</value>

        [DataMember(Name="categoryDescription")]
        public List<NcTextType> CategoryDescription { get; set; }

        /// <summary>
        /// A list of the chapters, sections, or other divisions of a document. NIEM reference is nc:DocumentContentListText
        /// </summary>
        /// <value>A list of the chapters, sections, or other divisions of a document. NIEM reference is nc:DocumentContentListText</value>

        [DataMember(Name="contentList")]
        public List<NcTextType> ContentList { get; set; }

        /// <summary>
        /// True if a document is copyrighted; false otherwise. NIEM reference is nc:DocumentCopyrightIndicator
        /// </summary>
        /// <value>True if a document is copyrighted; false otherwise. NIEM reference is nc:DocumentCopyrightIndicator</value>

        [DataMember(Name="isCopyright")]
        public List<NiemXsboolean> IsCopyright { get; set; }

        /// <summary>
        /// A country being discussed in a document. NIEM reference is nc:DocumentCountry
        /// </summary>
        /// <value>A country being discussed in a document. NIEM reference is nc:DocumentCountry</value>

        [DataMember(Name="country")]
        public List<NcCountryType> Country { get; set; }

        /// <summary>
        /// A date a document was created. NIEM reference is nc:DocumentCreationDate
        /// </summary>
        /// <value>A date a document was created. NIEM reference is nc:DocumentCreationDate</value>

        [DataMember(Name="creationDate")]
        public List<NcDateType> CreationDate { get; set; }

        /// <summary>
        /// A description of the content of a document. NIEM reference is nc:DocumentDescriptionText
        /// </summary>
        /// <value>A description of the content of a document. NIEM reference is nc:DocumentDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A name of an authority designated to handle or process information in a document. NIEM reference is nc:DocumentDispositionAuthorityName
        /// </summary>
        /// <value>A name of an authority designated to handle or process information in a document. NIEM reference is nc:DocumentDispositionAuthorityName</value>

        [DataMember(Name="dispositionAuthorityName")]
        public List<NcTextType> DispositionAuthorityName { get; set; }

        /// <summary>
        /// An instruction on how to handle or process information in a document. NIEM reference is nc:DocumentDispositionInstructionText
        /// </summary>
        /// <value>An instruction on how to handle or process information in a document. NIEM reference is nc:DocumentDispositionInstructionText</value>

        [DataMember(Name="dispositionInstruction")]
        public List<NcTextType> DispositionInstruction { get; set; }

        /// <summary>
        /// True if the accuracy of a document is disputed; false otherwise. NIEM reference is nc:DocumentDisputedIndicator
        /// </summary>
        /// <value>True if the accuracy of a document is disputed; false otherwise. NIEM reference is nc:DocumentDisputedIndicator</value>

        [DataMember(Name="isDisputed")]
        public List<NiemXsboolean> IsDisputed { get; set; }

        /// <summary>
        /// A reason why the accuracy of a document is disputed. NIEM reference is nc:DocumentDisputedReasonText
        /// </summary>
        /// <value>A reason why the accuracy of a document is disputed. NIEM reference is nc:DocumentDisputedReasonText</value>

        [DataMember(Name="disputedReason")]
        public List<NcTextType> DisputedReason { get; set; }

        /// <summary>
        /// A date in which the content or action becomes enforceable, active, or effective. NIEM reference is nc:DocumentEffectiveDate
        /// </summary>
        /// <value>A date in which the content or action becomes enforceable, active, or effective. NIEM reference is nc:DocumentEffectiveDate</value>

        [DataMember(Name="effectiveDate")]
        public List<NcDateType> EffectiveDate { get; set; }

        /// <summary>
        /// A person who contributed an entry in a document. NIEM reference is nc:DocumentEntrySubmitter
        /// </summary>
        /// <value>A person who contributed an entry in a document. NIEM reference is nc:DocumentEntrySubmitter</value>

        [DataMember(Name="entrySubmitter")]
        public List<NcPersonType> EntrySubmitter { get; set; }

        /// <summary>
        /// A date after which the document is no longer valid. It may indicate a document should be removed from a registry or index. NIEM reference is nc:DocumentExpirationDate
        /// </summary>
        /// <value>A date after which the document is no longer valid. It may indicate a document should be removed from a registry or index. NIEM reference is nc:DocumentExpirationDate</value>

        [DataMember(Name="expirationDate")]
        public List<NcDateType> ExpirationDate { get; set; }

        /// <summary>
        /// An identifier assigned to a document to locate it within a file control system. NIEM reference is nc:DocumentFileControlID
        /// </summary>
        /// <value>An identifier assigned to a document to locate it within a file control system. NIEM reference is nc:DocumentFileControlID</value>

        [DataMember(Name="fileControlId")]
        public List<NiemXsstring> FileControlId { get; set; }

        /// <summary>
        /// A date a document was officially filed with an organization or agency. NIEM reference is nc:DocumentFiledDate
        /// </summary>
        /// <value>A date a document was officially filed with an organization or agency. NIEM reference is nc:DocumentFiledDate</value>

        [DataMember(Name="filedDate")]
        public List<NcDateType> FiledDate { get; set; }

        /// <summary>
        /// A file extension of an electronic document. NIEM reference is nc:DocumentFileExtensionText
        /// </summary>
        /// <value>A file extension of an electronic document. NIEM reference is nc:DocumentFileExtensionText</value>

        [DataMember(Name="fileExtension")]
        public List<NcTextType> FileExtension { get; set; }

        /// <summary>
        /// A file name of an electronic document. NIEM reference is nc:DocumentFileName
        /// </summary>
        /// <value>A file name of an electronic document. NIEM reference is nc:DocumentFileName</value>

        [DataMember(Name="fileName")]
        public List<NcTextType> FileName { get; set; }

        /// <summary>
        /// A file format, content type (e.g., a MIME type), or physical format of a document. NIEM reference is nc:DocumentFormatText
        /// </summary>
        /// <value>A file format, content type (e.g., a MIME type), or physical format of a document. NIEM reference is nc:DocumentFormatText</value>

        [DataMember(Name="format")]
        public List<NcTextType> Format { get; set; }

        /// <summary>
        /// An identifier of a group to which a document belongs. NIEM reference is nc:DocumentGroupID
        /// </summary>
        /// <value>An identifier of a group to which a document belongs. NIEM reference is nc:DocumentGroupID</value>

        [DataMember(Name="groupId")]
        public List<NiemXsstring> GroupId { get; set; }

        /// <summary>
        /// An identification that references a document. NIEM reference is nc:DocumentIdentification
        /// </summary>
        /// <value>An identification that references a document. NIEM reference is nc:DocumentIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A date after which contributions to the content of a document will no longer be accepted. NIEM reference is nc:DocumentInformationCutOffDate
        /// </summary>
        /// <value>A date after which contributions to the content of a document will no longer be accepted. NIEM reference is nc:DocumentInformationCutOffDate</value>

        [DataMember(Name="informationCutOffDate")]
        public List<NcDateType> InformationCutOffDate { get; set; }

        /// <summary>
        /// A nature or genre of the resource. NIEM reference is nc:DocumentIntelligenceCategoryCode
        /// </summary>
        /// <value>A nature or genre of the resource. NIEM reference is nc:DocumentIntelligenceCategoryCode</value>

        [DataMember(Name="intelligenceCategoryCode")]
        public List<DodJcsPub20DocumentIntelligenceCategoryCodeType> IntelligenceCategoryCode { get; set; }

        /// <summary>
        /// A significant word or phrase that describes the overall content of a document or its main topic. NIEM reference is nc:DocumentKeywordText
        /// </summary>
        /// <value>A significant word or phrase that describes the overall content of a document or its main topic. NIEM reference is nc:DocumentKeywordText</value>

        [DataMember(Name="keyword")]
        public List<NcTextType> Keyword { get; set; }

        /// <summary>
        /// A date a document was last changed. NIEM reference is nc:DocumentLastModifiedDate
        /// </summary>
        /// <value>A date a document was last changed. NIEM reference is nc:DocumentLastModifiedDate</value>

        [DataMember(Name="lastModifiedDate")]
        public List<NcDateType> LastModifiedDate { get; set; }

        /// <summary>
        /// A location of a physical document. NIEM reference is nc:DocumentLocation
        /// </summary>
        /// <value>A location of a physical document. NIEM reference is nc:DocumentLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// A location of an electronic representation of a document. NIEM reference is nc:DocumentLocationURI
        /// </summary>
        /// <value>A location of an electronic representation of a document. NIEM reference is nc:DocumentLocationURI</value>

        [DataMember(Name="locationUri")]
        public List<NiemXsanyURI> LocationUri { get; set; }

        /// <summary>
        /// A review or update cycle period for a document. NIEM reference is nc:DocumentManagementCyclePeriodText
        /// </summary>
        /// <value>A review or update cycle period for a document. NIEM reference is nc:DocumentManagementCyclePeriodText</value>

        [DataMember(Name="managementCyclePeriod")]
        public List<NcTextType> ManagementCyclePeriod { get; set; }

        /// <summary>
        /// A kind of class that describes the media format of a document. NIEM reference is nc:DocumentMediaCategoryText
        /// </summary>
        /// <value>A kind of class that describes the media format of a document. NIEM reference is nc:DocumentMediaCategoryText</value>

        [DataMember(Name="mediaCategory")]
        public List<NcTextType> MediaCategory { get; set; }

        /// <summary>
        /// A material or physical carrier for storing a document. NIEM reference is nc:DocumentMediumText
        /// </summary>
        /// <value>A material or physical carrier for storing a document. NIEM reference is nc:DocumentMediumText</value>

        [DataMember(Name="medium")]
        public List<NcTextType> Medium { get; set; }

        /// <summary>
        /// A name of additional addressees. NIEM reference is nc:DocumentOtherRecipient
        /// </summary>
        /// <value>A name of additional addressees. NIEM reference is nc:DocumentOtherRecipient</value>

        [DataMember(Name="otherRecipient")]
        public List<NcEntityType> OtherRecipient { get; set; }

        /// <summary>
        /// True if a document is to be kept as a permanent record; false otherwise. NIEM reference is nc:DocumentPermanentRecordIndicator
        /// </summary>
        /// <value>True if a document is to be kept as a permanent record; false otherwise. NIEM reference is nc:DocumentPermanentRecordIndicator</value>

        [DataMember(Name="isPermanentRecord")]
        public List<NiemXsboolean> IsPermanentRecord { get; set; }

        /// <summary>
        /// A date a document is entered or posted to an information system or network; used when the date of posting is different from the date on which a document was officially filed. NIEM reference is nc:DocumentPostDate
        /// </summary>
        /// <value>A date a document is entered or posted to an information system or network; used when the date of posting is different from the date on which a document was officially filed. NIEM reference is nc:DocumentPostDate</value>

        [DataMember(Name="postDate")]
        public List<NcDateType> PostDate { get; set; }

        /// <summary>
        /// True if a document is categorized as containing personal information subject to protection by the Privacy Act; false otherwise. NIEM reference is nc:DocumentPrivacyActIndicator
        /// </summary>
        /// <value>True if a document is categorized as containing personal information subject to protection by the Privacy Act; false otherwise. NIEM reference is nc:DocumentPrivacyActIndicator</value>

        [DataMember(Name="isPrivacyAct")]
        public List<NiemXsboolean> IsPrivacyAct { get; set; }

        /// <summary>
        /// A date of the first public dissemination of the content in any media. NIEM reference is nc:DocumentPublicationDate
        /// </summary>
        /// <value>A date of the first public dissemination of the content in any media. NIEM reference is nc:DocumentPublicationDate</value>

        [DataMember(Name="publicationDate")]
        public List<NcDateType> PublicationDate { get; set; }

        /// <summary>
        /// A date a transmitted document was received. NIEM reference is nc:DocumentReceivedDate
        /// </summary>
        /// <value>A date a transmitted document was received. NIEM reference is nc:DocumentReceivedDate</value>

        [DataMember(Name="receivedDate")]
        public List<NcDateType> ReceivedDate { get; set; }

        /// <summary>
        /// An entity that is a target or intended recipient of a document. NIEM reference is nc:DocumentRecipient
        /// </summary>
        /// <value>An entity that is a target or intended recipient of a document. NIEM reference is nc:DocumentRecipient</value>

        [DataMember(Name="recipient")]
        public List<NcEntityType> Recipient { get; set; }

        /// <summary>
        /// A reference to another document or resource related to the document. NIEM reference is nc:DocumentRelatedResourceText
        /// </summary>
        /// <value>A reference to another document or resource related to the document. NIEM reference is nc:DocumentRelatedResourceText</value>

        [DataMember(Name="relatedResource")]
        public List<NcTextType> RelatedResource { get; set; }

        /// <summary>
        /// A right held in and over the resource. Rights are the constraints applied to assure the protection of privacy or intellectual property, and any special restrictions, limitations or warning on using a shared resource. NIEM reference is nc:DocumentRightsText
        /// </summary>
        /// <value>A right held in and over the resource. Rights are the constraints applied to assure the protection of privacy or intellectual property, and any special restrictions, limitations or warning on using a shared resource. NIEM reference is nc:DocumentRightsText</value>

        [DataMember(Name="rights")]
        public List<NcTextType> Rights { get; set; }

        /// <summary>
        /// An identifier that determines the document order in a set of related documents. NIEM reference is nc:DocumentSequenceID
        /// </summary>
        /// <value>An identifier that determines the document order in a set of related documents. NIEM reference is nc:DocumentSequenceID</value>

        [DataMember(Name="sequenceId")]
        public List<NiemXsstring> SequenceId { get; set; }

        /// <summary>
        /// A source from which the content of a document is derived. NIEM reference is nc:DocumentSourceText
        /// </summary>
        /// <value>A source from which the content of a document is derived. NIEM reference is nc:DocumentSourceText</value>

        [DataMember(Name="sourceText")]
        public List<NcTextType> SourceText { get; set; }

        /// <summary>
        /// An entity that was the source of a document. NIEM reference is nc:DocumentSource
        /// </summary>
        /// <value>An entity that was the source of a document. NIEM reference is nc:DocumentSource</value>

        [DataMember(Name="source")]
        public List<NcEntityType> Source { get; set; }

        /// <summary>
        /// A status of a document. NIEM reference is nc:DocumentStatus
        /// </summary>
        /// <value>A status of a document. NIEM reference is nc:DocumentStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// A main topic of a document. NIEM reference is nc:DocumentSubjectText
        /// </summary>
        /// <value>A main topic of a document. NIEM reference is nc:DocumentSubjectText</value>

        [DataMember(Name="subject")]
        public List<NcTextType> Subject { get; set; }

        /// <summary>
        /// A short description of the subject, content, and key points of a document. NIEM reference is nc:DocumentSummaryText
        /// </summary>
        /// <value>A short description of the subject, content, and key points of a document. NIEM reference is nc:DocumentSummaryText</value>

        [DataMember(Name="summary")]
        public List<NcTextType> Summary { get; set; }

        /// <summary>
        /// A marking made on a document that is not part of the original content and that was added after a document was finalized. NIEM reference is nc:DocumentSupplementalMarkingText
        /// </summary>
        /// <value>A marking made on a document that is not part of the original content and that was added after a document was finalized. NIEM reference is nc:DocumentSupplementalMarkingText</value>

        [DataMember(Name="supplementalMarking")]
        public List<NcTextType> SupplementalMarking { get; set; }

        /// <summary>
        /// A name given to a document. NIEM reference is nc:DocumentTitleText
        /// </summary>
        /// <value>A name given to a document. NIEM reference is nc:DocumentTitleText</value>

        [DataMember(Name="title")]
        public List<NcTextType> Title { get; set; }

        /// <summary>
        /// True if a document is categorized as a vital record by the originating agency; false otherwise. NIEM reference is nc:DocumentVitalIndicator
        /// </summary>
        /// <value>True if a document is categorized as a vital record by the originating agency; false otherwise. NIEM reference is nc:DocumentVitalIndicator</value>

        [DataMember(Name="isVital")]
        public List<NiemXsboolean> IsVital { get; set; }

        /// <summary>
        /// An entity primarily responsible for creating the intellectual content of the resource. NIEM reference is nc:DocumentAuthor
        /// </summary>
        /// <value>An entity primarily responsible for creating the intellectual content of the resource. NIEM reference is nc:DocumentAuthor</value>

        [DataMember(Name="author")]
        public List<NcEntityType> Author { get; set; }

        /// <summary>
        /// An entity responsible for making contributions to the content of the resource. NIEM reference is nc:DocumentContributor
        /// </summary>
        /// <value>An entity responsible for making contributions to the content of the resource. NIEM reference is nc:DocumentContributor</value>

        [DataMember(Name="contributor")]
        public List<NcEntityType> Contributor { get; set; }

        /// <summary>
        /// An extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageAddress
        /// </summary>
        /// <value>An extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageAddress</value>

        [DataMember(Name="coverageAddress")]
        public List<NcAddressType> CoverageAddress { get; set; }

        /// <summary>
        /// A date relating to an extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageDate
        /// </summary>
        /// <value>A date relating to an extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageDate</value>

        [DataMember(Name="coverageDate")]
        public List<NcDateType> CoverageDate { get; set; }

        /// <summary>
        /// A description of the extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageText
        /// </summary>
        /// <value>A description of the extent or scope of the content of the resource. NIEM reference is nc:DocumentCoverageText</value>

        [DataMember(Name="coverage")]
        public List<NcTextType> Coverage { get; set; }

        /// <summary>
        /// A kind of classification system used to define the specific format of a binary object or file. NIEM reference is nc:DocumentFormatCategoryText
        /// </summary>
        /// <value>A kind of classification system used to define the specific format of a binary object or file. NIEM reference is nc:DocumentFormatCategoryText</value>

        [DataMember(Name="formatCategory")]
        public List<NcTextType> FormatCategory { get; set; }

        /// <summary>
        /// A language of the content of the resource. NIEM reference is nc:DocumentLanguageCode
        /// </summary>
        /// <value>A language of the content of the resource. NIEM reference is nc:DocumentLanguageCode</value>

        [DataMember(Name="languageCode")]
        public List<Iso6393LanguageCodeType> LanguageCode { get; set; }

        /// <summary>
        /// A fee or price required to submit a document. NIEM reference is nc:DocumentSubmissionAmount
        /// </summary>
        /// <value>A fee or price required to submit a document. NIEM reference is nc:DocumentSubmissionAmount</value>

        [DataMember(Name="submissionAmount")]
        public List<NcAmountType> SubmissionAmount { get; set; }

        /// <summary>
        /// An entity responsible for making the resource available. NIEM reference is nc:DocumentSubmitter
        /// </summary>
        /// <value>An entity responsible for making the resource available. NIEM reference is nc:DocumentSubmitter</value>

        [DataMember(Name="submitter")]
        public List<NcEntityType> Submitter { get; set; }

        /// <summary>
        /// A date a document was issued. NIEM reference is nc:DocumentIssuanceDate
        /// </summary>
        /// <value>A date a document was issued. NIEM reference is nc:DocumentIssuanceDate</value>

        [DataMember(Name="issuanceDate")]
        public List<NcDateType> IssuanceDate { get; set; }

        /// <summary>
        /// A classification of status of a document. NIEM reference is nc:DocumentStatusDetails
        /// </summary>
        /// <value>A classification of status of a document. NIEM reference is nc:DocumentStatusDetails</value>

        [DataMember(Name="statusDetails")]
        public List<NcDocumentStatusDetailsType> StatusDetails { get; set; }

        /// <summary>
        /// A location from which a document was issued. NIEM reference is nc:DocumentIssuanceLocation
        /// </summary>
        /// <value>A location from which a document was issued. NIEM reference is nc:DocumentIssuanceLocation</value>

        [DataMember(Name="issuanceLocation")]
        public List<NcLocationType> IssuanceLocation { get; set; }

        /// <summary>
        /// True if the data is protected under the EU Data Protection Regulation 2016-679 and should be treated differently; false otherwise. NIEM reference is nc:DocumentEUDataPrivacyIndicator
        /// </summary>
        /// <value>True if the data is protected under the EU Data Protection Regulation 2016-679 and should be treated differently; false otherwise. NIEM reference is nc:DocumentEUDataPrivacyIndicator</value>

        [DataMember(Name="isEuDataPrivacy")]
        public List<NiemXsboolean> IsEuDataPrivacy { get; set; }

        /// <summary>
        /// Additional information about a document. NIEM reference is it:DocumentAugmentation
        /// </summary>
        /// <value>Additional information about a document. NIEM reference is it:DocumentAugmentation</value>

        [DataMember(Name="itAugmentation")]
        public List<ItDocumentAugmentationType> ItAugmentation { get; set; }

        /// <summary>
        /// Additional information about a document. NIEM reference is j:DocumentAugmentation
        /// </summary>
        /// <value>Additional information about a document. NIEM reference is j:DocumentAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JDocumentAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// ncDocumentType JSON-LD context
        /// </summary>
        /// <value>ncDocumentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncDocumentTypeContextJsonldEnum for ../JSON-LD_Contexts/ncDocumentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncDocumentTypeContext.jsonld")]
            JSONLDContextsncDocumentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncDocumentType JSON-LD context
        /// </summary>
        /// <value>ncDocumentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcDocumentType {\n");
            sb.Append("  Sensitivity: ").Append(Sensitivity).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  CategoryName: ").Append(CategoryName).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Caveat: ").Append(Caveat).Append("\n");
            sb.Append("  AlternativeTitle: ").Append(AlternativeTitle).Append("\n");
            sb.Append("  SoftwareName: ").Append(SoftwareName).Append("\n");
            sb.Append("  IsApproved: ").Append(IsApproved).Append("\n");
            sb.Append("  Binary: ").Append(Binary).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  ContentList: ").Append(ContentList).Append("\n");
            sb.Append("  IsCopyright: ").Append(IsCopyright).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DispositionAuthorityName: ").Append(DispositionAuthorityName).Append("\n");
            sb.Append("  DispositionInstruction: ").Append(DispositionInstruction).Append("\n");
            sb.Append("  IsDisputed: ").Append(IsDisputed).Append("\n");
            sb.Append("  DisputedReason: ").Append(DisputedReason).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  EntrySubmitter: ").Append(EntrySubmitter).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  FileControlId: ").Append(FileControlId).Append("\n");
            sb.Append("  FiledDate: ").Append(FiledDate).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  InformationCutOffDate: ").Append(InformationCutOffDate).Append("\n");
            sb.Append("  IntelligenceCategoryCode: ").Append(IntelligenceCategoryCode).Append("\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  LocationUri: ").Append(LocationUri).Append("\n");
            sb.Append("  ManagementCyclePeriod: ").Append(ManagementCyclePeriod).Append("\n");
            sb.Append("  MediaCategory: ").Append(MediaCategory).Append("\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  OtherRecipient: ").Append(OtherRecipient).Append("\n");
            sb.Append("  IsPermanentRecord: ").Append(IsPermanentRecord).Append("\n");
            sb.Append("  PostDate: ").Append(PostDate).Append("\n");
            sb.Append("  IsPrivacyAct: ").Append(IsPrivacyAct).Append("\n");
            sb.Append("  PublicationDate: ").Append(PublicationDate).Append("\n");
            sb.Append("  ReceivedDate: ").Append(ReceivedDate).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  RelatedResource: ").Append(RelatedResource).Append("\n");
            sb.Append("  Rights: ").Append(Rights).Append("\n");
            sb.Append("  SequenceId: ").Append(SequenceId).Append("\n");
            sb.Append("  SourceText: ").Append(SourceText).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  SupplementalMarking: ").Append(SupplementalMarking).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  IsVital: ").Append(IsVital).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Contributor: ").Append(Contributor).Append("\n");
            sb.Append("  CoverageAddress: ").Append(CoverageAddress).Append("\n");
            sb.Append("  CoverageDate: ").Append(CoverageDate).Append("\n");
            sb.Append("  Coverage: ").Append(Coverage).Append("\n");
            sb.Append("  FormatCategory: ").Append(FormatCategory).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  SubmissionAmount: ").Append(SubmissionAmount).Append("\n");
            sb.Append("  Submitter: ").Append(Submitter).Append("\n");
            sb.Append("  IssuanceDate: ").Append(IssuanceDate).Append("\n");
            sb.Append("  StatusDetails: ").Append(StatusDetails).Append("\n");
            sb.Append("  IssuanceLocation: ").Append(IssuanceLocation).Append("\n");
            sb.Append("  IsEuDataPrivacy: ").Append(IsEuDataPrivacy).Append("\n");
            sb.Append("  ItAugmentation: ").Append(ItAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcDocumentType)obj);
        }

        /// <summary>
        /// Returns true if NcDocumentType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcDocumentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcDocumentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sensitivity == other.Sensitivity ||
                    Sensitivity != null &&
                    Sensitivity.SequenceEqual(other.Sensitivity)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.SequenceEqual(other.CategoryId)
                ) && 
                (
                    CategoryName == other.CategoryName ||
                    CategoryName != null &&
                    CategoryName.SequenceEqual(other.CategoryName)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.SequenceEqual(other.Category)
                ) && 
                (
                    Caveat == other.Caveat ||
                    Caveat != null &&
                    Caveat.SequenceEqual(other.Caveat)
                ) && 
                (
                    AlternativeTitle == other.AlternativeTitle ||
                    AlternativeTitle != null &&
                    AlternativeTitle.SequenceEqual(other.AlternativeTitle)
                ) && 
                (
                    SoftwareName == other.SoftwareName ||
                    SoftwareName != null &&
                    SoftwareName.SequenceEqual(other.SoftwareName)
                ) && 
                (
                    IsApproved == other.IsApproved ||
                    IsApproved != null &&
                    IsApproved.SequenceEqual(other.IsApproved)
                ) && 
                (
                    Binary == other.Binary ||
                    Binary != null &&
                    Binary.SequenceEqual(other.Binary)
                ) && 
                (
                    CategoryDescription == other.CategoryDescription ||
                    CategoryDescription != null &&
                    CategoryDescription.SequenceEqual(other.CategoryDescription)
                ) && 
                (
                    ContentList == other.ContentList ||
                    ContentList != null &&
                    ContentList.SequenceEqual(other.ContentList)
                ) && 
                (
                    IsCopyright == other.IsCopyright ||
                    IsCopyright != null &&
                    IsCopyright.SequenceEqual(other.IsCopyright)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.SequenceEqual(other.Country)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    CreationDate != null &&
                    CreationDate.SequenceEqual(other.CreationDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DispositionAuthorityName == other.DispositionAuthorityName ||
                    DispositionAuthorityName != null &&
                    DispositionAuthorityName.SequenceEqual(other.DispositionAuthorityName)
                ) && 
                (
                    DispositionInstruction == other.DispositionInstruction ||
                    DispositionInstruction != null &&
                    DispositionInstruction.SequenceEqual(other.DispositionInstruction)
                ) && 
                (
                    IsDisputed == other.IsDisputed ||
                    IsDisputed != null &&
                    IsDisputed.SequenceEqual(other.IsDisputed)
                ) && 
                (
                    DisputedReason == other.DisputedReason ||
                    DisputedReason != null &&
                    DisputedReason.SequenceEqual(other.DisputedReason)
                ) && 
                (
                    EffectiveDate == other.EffectiveDate ||
                    EffectiveDate != null &&
                    EffectiveDate.SequenceEqual(other.EffectiveDate)
                ) && 
                (
                    EntrySubmitter == other.EntrySubmitter ||
                    EntrySubmitter != null &&
                    EntrySubmitter.SequenceEqual(other.EntrySubmitter)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.SequenceEqual(other.ExpirationDate)
                ) && 
                (
                    FileControlId == other.FileControlId ||
                    FileControlId != null &&
                    FileControlId.SequenceEqual(other.FileControlId)
                ) && 
                (
                    FiledDate == other.FiledDate ||
                    FiledDate != null &&
                    FiledDate.SequenceEqual(other.FiledDate)
                ) && 
                (
                    FileExtension == other.FileExtension ||
                    FileExtension != null &&
                    FileExtension.SequenceEqual(other.FileExtension)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.SequenceEqual(other.FileName)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.SequenceEqual(other.Format)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.SequenceEqual(other.GroupId)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    InformationCutOffDate == other.InformationCutOffDate ||
                    InformationCutOffDate != null &&
                    InformationCutOffDate.SequenceEqual(other.InformationCutOffDate)
                ) && 
                (
                    IntelligenceCategoryCode == other.IntelligenceCategoryCode ||
                    IntelligenceCategoryCode != null &&
                    IntelligenceCategoryCode.SequenceEqual(other.IntelligenceCategoryCode)
                ) && 
                (
                    Keyword == other.Keyword ||
                    Keyword != null &&
                    Keyword.SequenceEqual(other.Keyword)
                ) && 
                (
                    LastModifiedDate == other.LastModifiedDate ||
                    LastModifiedDate != null &&
                    LastModifiedDate.SequenceEqual(other.LastModifiedDate)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    LocationUri == other.LocationUri ||
                    LocationUri != null &&
                    LocationUri.SequenceEqual(other.LocationUri)
                ) && 
                (
                    ManagementCyclePeriod == other.ManagementCyclePeriod ||
                    ManagementCyclePeriod != null &&
                    ManagementCyclePeriod.SequenceEqual(other.ManagementCyclePeriod)
                ) && 
                (
                    MediaCategory == other.MediaCategory ||
                    MediaCategory != null &&
                    MediaCategory.SequenceEqual(other.MediaCategory)
                ) && 
                (
                    Medium == other.Medium ||
                    Medium != null &&
                    Medium.SequenceEqual(other.Medium)
                ) && 
                (
                    OtherRecipient == other.OtherRecipient ||
                    OtherRecipient != null &&
                    OtherRecipient.SequenceEqual(other.OtherRecipient)
                ) && 
                (
                    IsPermanentRecord == other.IsPermanentRecord ||
                    IsPermanentRecord != null &&
                    IsPermanentRecord.SequenceEqual(other.IsPermanentRecord)
                ) && 
                (
                    PostDate == other.PostDate ||
                    PostDate != null &&
                    PostDate.SequenceEqual(other.PostDate)
                ) && 
                (
                    IsPrivacyAct == other.IsPrivacyAct ||
                    IsPrivacyAct != null &&
                    IsPrivacyAct.SequenceEqual(other.IsPrivacyAct)
                ) && 
                (
                    PublicationDate == other.PublicationDate ||
                    PublicationDate != null &&
                    PublicationDate.SequenceEqual(other.PublicationDate)
                ) && 
                (
                    ReceivedDate == other.ReceivedDate ||
                    ReceivedDate != null &&
                    ReceivedDate.SequenceEqual(other.ReceivedDate)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.SequenceEqual(other.Recipient)
                ) && 
                (
                    RelatedResource == other.RelatedResource ||
                    RelatedResource != null &&
                    RelatedResource.SequenceEqual(other.RelatedResource)
                ) && 
                (
                    Rights == other.Rights ||
                    Rights != null &&
                    Rights.SequenceEqual(other.Rights)
                ) && 
                (
                    SequenceId == other.SequenceId ||
                    SequenceId != null &&
                    SequenceId.SequenceEqual(other.SequenceId)
                ) && 
                (
                    SourceText == other.SourceText ||
                    SourceText != null &&
                    SourceText.SequenceEqual(other.SourceText)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.SequenceEqual(other.Source)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.SequenceEqual(other.Subject)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.SequenceEqual(other.Summary)
                ) && 
                (
                    SupplementalMarking == other.SupplementalMarking ||
                    SupplementalMarking != null &&
                    SupplementalMarking.SequenceEqual(other.SupplementalMarking)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.SequenceEqual(other.Title)
                ) && 
                (
                    IsVital == other.IsVital ||
                    IsVital != null &&
                    IsVital.SequenceEqual(other.IsVital)
                ) && 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.SequenceEqual(other.Author)
                ) && 
                (
                    Contributor == other.Contributor ||
                    Contributor != null &&
                    Contributor.SequenceEqual(other.Contributor)
                ) && 
                (
                    CoverageAddress == other.CoverageAddress ||
                    CoverageAddress != null &&
                    CoverageAddress.SequenceEqual(other.CoverageAddress)
                ) && 
                (
                    CoverageDate == other.CoverageDate ||
                    CoverageDate != null &&
                    CoverageDate.SequenceEqual(other.CoverageDate)
                ) && 
                (
                    Coverage == other.Coverage ||
                    Coverage != null &&
                    Coverage.SequenceEqual(other.Coverage)
                ) && 
                (
                    FormatCategory == other.FormatCategory ||
                    FormatCategory != null &&
                    FormatCategory.SequenceEqual(other.FormatCategory)
                ) && 
                (
                    LanguageCode == other.LanguageCode ||
                    LanguageCode != null &&
                    LanguageCode.SequenceEqual(other.LanguageCode)
                ) && 
                (
                    SubmissionAmount == other.SubmissionAmount ||
                    SubmissionAmount != null &&
                    SubmissionAmount.SequenceEqual(other.SubmissionAmount)
                ) && 
                (
                    Submitter == other.Submitter ||
                    Submitter != null &&
                    Submitter.SequenceEqual(other.Submitter)
                ) && 
                (
                    IssuanceDate == other.IssuanceDate ||
                    IssuanceDate != null &&
                    IssuanceDate.SequenceEqual(other.IssuanceDate)
                ) && 
                (
                    StatusDetails == other.StatusDetails ||
                    StatusDetails != null &&
                    StatusDetails.SequenceEqual(other.StatusDetails)
                ) && 
                (
                    IssuanceLocation == other.IssuanceLocation ||
                    IssuanceLocation != null &&
                    IssuanceLocation.SequenceEqual(other.IssuanceLocation)
                ) && 
                (
                    IsEuDataPrivacy == other.IsEuDataPrivacy ||
                    IsEuDataPrivacy != null &&
                    IsEuDataPrivacy.SequenceEqual(other.IsEuDataPrivacy)
                ) && 
                (
                    ItAugmentation == other.ItAugmentation ||
                    ItAugmentation != null &&
                    ItAugmentation.SequenceEqual(other.ItAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Sensitivity != null)
                    hashCode = hashCode * 59 + Sensitivity.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (CategoryName != null)
                    hashCode = hashCode * 59 + CategoryName.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (Caveat != null)
                    hashCode = hashCode * 59 + Caveat.GetHashCode();
                    if (AlternativeTitle != null)
                    hashCode = hashCode * 59 + AlternativeTitle.GetHashCode();
                    if (SoftwareName != null)
                    hashCode = hashCode * 59 + SoftwareName.GetHashCode();
                    if (IsApproved != null)
                    hashCode = hashCode * 59 + IsApproved.GetHashCode();
                    if (Binary != null)
                    hashCode = hashCode * 59 + Binary.GetHashCode();
                    if (CategoryDescription != null)
                    hashCode = hashCode * 59 + CategoryDescription.GetHashCode();
                    if (ContentList != null)
                    hashCode = hashCode * 59 + ContentList.GetHashCode();
                    if (IsCopyright != null)
                    hashCode = hashCode * 59 + IsCopyright.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (CreationDate != null)
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DispositionAuthorityName != null)
                    hashCode = hashCode * 59 + DispositionAuthorityName.GetHashCode();
                    if (DispositionInstruction != null)
                    hashCode = hashCode * 59 + DispositionInstruction.GetHashCode();
                    if (IsDisputed != null)
                    hashCode = hashCode * 59 + IsDisputed.GetHashCode();
                    if (DisputedReason != null)
                    hashCode = hashCode * 59 + DisputedReason.GetHashCode();
                    if (EffectiveDate != null)
                    hashCode = hashCode * 59 + EffectiveDate.GetHashCode();
                    if (EntrySubmitter != null)
                    hashCode = hashCode * 59 + EntrySubmitter.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (FileControlId != null)
                    hashCode = hashCode * 59 + FileControlId.GetHashCode();
                    if (FiledDate != null)
                    hashCode = hashCode * 59 + FiledDate.GetHashCode();
                    if (FileExtension != null)
                    hashCode = hashCode * 59 + FileExtension.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (InformationCutOffDate != null)
                    hashCode = hashCode * 59 + InformationCutOffDate.GetHashCode();
                    if (IntelligenceCategoryCode != null)
                    hashCode = hashCode * 59 + IntelligenceCategoryCode.GetHashCode();
                    if (Keyword != null)
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                    if (LastModifiedDate != null)
                    hashCode = hashCode * 59 + LastModifiedDate.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (LocationUri != null)
                    hashCode = hashCode * 59 + LocationUri.GetHashCode();
                    if (ManagementCyclePeriod != null)
                    hashCode = hashCode * 59 + ManagementCyclePeriod.GetHashCode();
                    if (MediaCategory != null)
                    hashCode = hashCode * 59 + MediaCategory.GetHashCode();
                    if (Medium != null)
                    hashCode = hashCode * 59 + Medium.GetHashCode();
                    if (OtherRecipient != null)
                    hashCode = hashCode * 59 + OtherRecipient.GetHashCode();
                    if (IsPermanentRecord != null)
                    hashCode = hashCode * 59 + IsPermanentRecord.GetHashCode();
                    if (PostDate != null)
                    hashCode = hashCode * 59 + PostDate.GetHashCode();
                    if (IsPrivacyAct != null)
                    hashCode = hashCode * 59 + IsPrivacyAct.GetHashCode();
                    if (PublicationDate != null)
                    hashCode = hashCode * 59 + PublicationDate.GetHashCode();
                    if (ReceivedDate != null)
                    hashCode = hashCode * 59 + ReceivedDate.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (RelatedResource != null)
                    hashCode = hashCode * 59 + RelatedResource.GetHashCode();
                    if (Rights != null)
                    hashCode = hashCode * 59 + Rights.GetHashCode();
                    if (SequenceId != null)
                    hashCode = hashCode * 59 + SequenceId.GetHashCode();
                    if (SourceText != null)
                    hashCode = hashCode * 59 + SourceText.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                    if (SupplementalMarking != null)
                    hashCode = hashCode * 59 + SupplementalMarking.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (IsVital != null)
                    hashCode = hashCode * 59 + IsVital.GetHashCode();
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    if (Contributor != null)
                    hashCode = hashCode * 59 + Contributor.GetHashCode();
                    if (CoverageAddress != null)
                    hashCode = hashCode * 59 + CoverageAddress.GetHashCode();
                    if (CoverageDate != null)
                    hashCode = hashCode * 59 + CoverageDate.GetHashCode();
                    if (Coverage != null)
                    hashCode = hashCode * 59 + Coverage.GetHashCode();
                    if (FormatCategory != null)
                    hashCode = hashCode * 59 + FormatCategory.GetHashCode();
                    if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                    if (SubmissionAmount != null)
                    hashCode = hashCode * 59 + SubmissionAmount.GetHashCode();
                    if (Submitter != null)
                    hashCode = hashCode * 59 + Submitter.GetHashCode();
                    if (IssuanceDate != null)
                    hashCode = hashCode * 59 + IssuanceDate.GetHashCode();
                    if (StatusDetails != null)
                    hashCode = hashCode * 59 + StatusDetails.GetHashCode();
                    if (IssuanceLocation != null)
                    hashCode = hashCode * 59 + IssuanceLocation.GetHashCode();
                    if (IsEuDataPrivacy != null)
                    hashCode = hashCode * 59 + IsEuDataPrivacy.GetHashCode();
                    if (ItAugmentation != null)
                    hashCode = hashCode * 59 + ItAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcDocumentType left, NcDocumentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcDocumentType left, NcDocumentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
