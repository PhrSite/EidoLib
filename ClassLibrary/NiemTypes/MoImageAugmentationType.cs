/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about an image.
    /// </summary>
    [DataContract]
    public partial class MoImageAugmentationType : IEquatable<MoImageAugmentationType>
    { 
        /// <summary>
        /// A name for the image. NIEM reference is mo:ImageName
        /// </summary>
        /// <value>A name for the image. NIEM reference is mo:ImageName</value>

        [DataMember(Name="imageName")]
        public List<NcTextType> ImageName { get; set; }

        /// <summary>
        /// An identification for the image. NIEM reference is mo:ImageIdentification
        /// </summary>
        /// <value>An identification for the image. NIEM reference is mo:ImageIdentification</value>

        [DataMember(Name="imageIdentification")]
        public List<NcIdentificationType> ImageIdentification { get; set; }

        /// <summary>
        /// A URI describing the relative location of an image. NIEM reference is mo:ImageRelativeLocationURI
        /// </summary>
        /// <value>A URI describing the relative location of an image. NIEM reference is mo:ImageRelativeLocationURI</value>

        [DataMember(Name="imageRelativeLocationUri")]
        public List<NiemXsanyURI> ImageRelativeLocationUri { get; set; }

        /// <summary>
        /// A text for the primary description of the image. NIEM reference is mo:ImageDescriptionText
        /// </summary>
        /// <value>A text for the primary description of the image. NIEM reference is mo:ImageDescriptionText</value>

        [DataMember(Name="imageDescription")]
        public List<NcTextType> ImageDescription { get; set; }

        /// <summary>
        /// A kind of image on file. NIEM reference is mo:ImageFileCategoryText
        /// </summary>
        /// <value>A kind of image on file. NIEM reference is mo:ImageFileCategoryText</value>

        [DataMember(Name="imageFileCategory")]
        public List<NcTextType> ImageFileCategory { get; set; }

        /// <summary>
        /// An alternate name associated to an image. NIEM reference is mo:ImageAlternateName
        /// </summary>
        /// <value>An alternate name associated to an image. NIEM reference is mo:ImageAlternateName</value>

        [DataMember(Name="imageAlternateName")]
        public List<NcTextType> ImageAlternateName { get; set; }

        /// <summary>
        /// A text that is a binary base-64 string that represents an Image. NIEM reference is mo:ImageBinaryText
        /// </summary>
        /// <value>A text that is a binary base-64 string that represents an Image. NIEM reference is mo:ImageBinaryText</value>

        [DataMember(Name="imageBinary")]
        public List<NcTextType> ImageBinary { get; set; }

        /// <summary>
        /// moImageAugmentationType JSON-LD context
        /// </summary>
        /// <value>moImageAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmoImageAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/moImageAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/moImageAugmentationTypeContext.jsonld")]
            JSONLDContextsmoImageAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// moImageAugmentationType JSON-LD context
        /// </summary>
        /// <value>moImageAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MoImageAugmentationType {\n");
            sb.Append("  ImageName: ").Append(ImageName).Append("\n");
            sb.Append("  ImageIdentification: ").Append(ImageIdentification).Append("\n");
            sb.Append("  ImageRelativeLocationUri: ").Append(ImageRelativeLocationUri).Append("\n");
            sb.Append("  ImageDescription: ").Append(ImageDescription).Append("\n");
            sb.Append("  ImageFileCategory: ").Append(ImageFileCategory).Append("\n");
            sb.Append("  ImageAlternateName: ").Append(ImageAlternateName).Append("\n");
            sb.Append("  ImageBinary: ").Append(ImageBinary).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MoImageAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if MoImageAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of MoImageAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MoImageAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageName == other.ImageName ||
                    ImageName != null &&
                    ImageName.SequenceEqual(other.ImageName)
                ) && 
                (
                    ImageIdentification == other.ImageIdentification ||
                    ImageIdentification != null &&
                    ImageIdentification.SequenceEqual(other.ImageIdentification)
                ) && 
                (
                    ImageRelativeLocationUri == other.ImageRelativeLocationUri ||
                    ImageRelativeLocationUri != null &&
                    ImageRelativeLocationUri.SequenceEqual(other.ImageRelativeLocationUri)
                ) && 
                (
                    ImageDescription == other.ImageDescription ||
                    ImageDescription != null &&
                    ImageDescription.SequenceEqual(other.ImageDescription)
                ) && 
                (
                    ImageFileCategory == other.ImageFileCategory ||
                    ImageFileCategory != null &&
                    ImageFileCategory.SequenceEqual(other.ImageFileCategory)
                ) && 
                (
                    ImageAlternateName == other.ImageAlternateName ||
                    ImageAlternateName != null &&
                    ImageAlternateName.SequenceEqual(other.ImageAlternateName)
                ) && 
                (
                    ImageBinary == other.ImageBinary ||
                    ImageBinary != null &&
                    ImageBinary.SequenceEqual(other.ImageBinary)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageName != null)
                    hashCode = hashCode * 59 + ImageName.GetHashCode();
                    if (ImageIdentification != null)
                    hashCode = hashCode * 59 + ImageIdentification.GetHashCode();
                    if (ImageRelativeLocationUri != null)
                    hashCode = hashCode * 59 + ImageRelativeLocationUri.GetHashCode();
                    if (ImageDescription != null)
                    hashCode = hashCode * 59 + ImageDescription.GetHashCode();
                    if (ImageFileCategory != null)
                    hashCode = hashCode * 59 + ImageFileCategory.GetHashCode();
                    if (ImageAlternateName != null)
                    hashCode = hashCode * 59 + ImageAlternateName.GetHashCode();
                    if (ImageBinary != null)
                    hashCode = hashCode * 59 + ImageBinary.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MoImageAugmentationType left, MoImageAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MoImageAugmentationType left, MoImageAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
