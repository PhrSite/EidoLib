/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type that is used by a latent examiner to annotate a friction ridge image with temporary lines, generally for use as reference points in making a comparison. These lines are solely for the individual examiner&#x27;s use and reference _ there
    /// </summary>
    [DataContract]
    public partial class BiomEFSTemporaryLineType : IEquatable<BiomEFSTemporaryLineType>
    { 
        /// <summary>
        /// A vertex in a position path NIEM reference is biom:ImageFeatureVertex
        /// </summary>
        /// <value>A vertex in a position path NIEM reference is biom:ImageFeatureVertex</value>

        [DataMember(Name="imageFeatureVertex")]
        public List<BiomVertexType> ImageFeatureVertex { get; set; }

        /// <summary>
        /// A fifth information item, line color / TLC, is an RGB color value expressed as a hexadecimal number. Some basic colors are red (FF0000), yellow (FFFF00), blue (0000FF), green (008000), black (000000) and white (FFFFFF). Leading zeros are required. NIEM reference is biom:FeatureLineColorValue
        /// </summary>
        /// <value>A fifth information item, line color / TLC, is an RGB color value expressed as a hexadecimal number. Some basic colors are red (FF0000), yellow (FFFF00), blue (0000FF), green (008000), black (000000) and white (FFFFFF). Leading zeros are required. NIEM reference is biom:FeatureLineColorValue</value>

        [DataMember(Name="featureLineColorValue")]
        public List<BiomHexTripleByteType> FeatureLineColorValue { get; set; }

        /// <summary>
        /// A sixth information item, line thickness / TLT, is expressed as a positive integer. Thickness is expressed in units of 0.01 mm Any value from 1 through 99 is acceptable; suggested values are 3 (thin); 6 (medium); 9 (thick), and 15 (bold). NIEM reference is biom:FeatureLineThicknessValue
        /// </summary>
        /// <value>A sixth information item, line thickness / TLT, is expressed as a positive integer. Thickness is expressed in units of 0.01 mm Any value from 1 through 99 is acceptable; suggested values are 3 (thin); 6 (medium); 9 (thick), and 15 (bold). NIEM reference is biom:FeatureLineThicknessValue</value>

        [DataMember(Name="featureLineThicknessValue")]
        public List<BiomInteger1to99Type> FeatureLineThicknessValue { get; set; }

        /// <summary>
        /// biomEFSTemporaryLineType JSON-LD context
        /// </summary>
        /// <value>biomEFSTemporaryLineType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomEFSTemporaryLineTypeContextJsonldEnum for ../JSON-LD_Contexts/biomEFSTemporaryLineTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomEFSTemporaryLineTypeContext.jsonld")]
            JSONLDContextsbiomEFSTemporaryLineTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomEFSTemporaryLineType JSON-LD context
        /// </summary>
        /// <value>biomEFSTemporaryLineType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomEFSTemporaryLineType {\n");
            sb.Append("  ImageFeatureVertex: ").Append(ImageFeatureVertex).Append("\n");
            sb.Append("  FeatureLineColorValue: ").Append(FeatureLineColorValue).Append("\n");
            sb.Append("  FeatureLineThicknessValue: ").Append(FeatureLineThicknessValue).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomEFSTemporaryLineType)obj);
        }

        /// <summary>
        /// Returns true if BiomEFSTemporaryLineType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomEFSTemporaryLineType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomEFSTemporaryLineType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageFeatureVertex == other.ImageFeatureVertex ||
                    ImageFeatureVertex != null &&
                    ImageFeatureVertex.SequenceEqual(other.ImageFeatureVertex)
                ) && 
                (
                    FeatureLineColorValue == other.FeatureLineColorValue ||
                    FeatureLineColorValue != null &&
                    FeatureLineColorValue.SequenceEqual(other.FeatureLineColorValue)
                ) && 
                (
                    FeatureLineThicknessValue == other.FeatureLineThicknessValue ||
                    FeatureLineThicknessValue != null &&
                    FeatureLineThicknessValue.SequenceEqual(other.FeatureLineThicknessValue)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageFeatureVertex != null)
                    hashCode = hashCode * 59 + ImageFeatureVertex.GetHashCode();
                    if (FeatureLineColorValue != null)
                    hashCode = hashCode * 59 + FeatureLineColorValue.GetHashCode();
                    if (FeatureLineThicknessValue != null)
                    hashCode = hashCode * 59 + FeatureLineThicknessValue.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomEFSTemporaryLineType left, BiomEFSTemporaryLineType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomEFSTemporaryLineType left, BiomEFSTemporaryLineType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
