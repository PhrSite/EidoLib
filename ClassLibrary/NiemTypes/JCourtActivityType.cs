/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a court-related action associated with a court case event.
    /// </summary>
    [DataContract]
    public partial class JCourtActivityType : NcActivityType, IEquatable<JCourtActivityType>
    { 
        /// <summary>
        /// A condition related or attached to a court activity. NIEM reference is j:CourtActivityCondition
        /// </summary>
        /// <value>A condition related or attached to a court activity. NIEM reference is j:CourtActivityCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// A direction of a judge not included in a judgment, which determines some point or directs some step in proceedings. NIEM reference is j:CourtActivityCourtOrder
        /// </summary>
        /// <value>A direction of a judge not included in a judgment, which determines some point or directs some step in proceedings. NIEM reference is j:CourtActivityCourtOrder</value>

        [DataMember(Name="courtOrder")]
        public List<JCourtOrderType> CourtOrder { get; set; }

        /// <summary>
        /// A schedule on which a court activity is to occur. NIEM reference is j:CourtActivityScheduleDay
        /// </summary>
        /// <value>A schedule on which a court activity is to occur. NIEM reference is j:CourtActivityScheduleDay</value>

        [DataMember(Name="scheduleDay")]
        public List<NcScheduleDayType> ScheduleDay { get; set; }

        /// <summary>
        /// A supervising agency associated with a court activity result, especially for reporting purposes. NIEM reference is j:CourtActivitySupervisingAgency
        /// </summary>
        /// <value>A supervising agency associated with a court activity result, especially for reporting purposes. NIEM reference is j:CourtActivitySupervisingAgency</value>

        [DataMember(Name="supervisingAgency")]
        public List<NcOrganizationType> SupervisingAgency { get; set; }

        /// <summary>
        /// A piece of non-dispositional descriptive information regarding activity within a court case; example \&quot;failure to appear.\&quot; NIEM reference is j:CourtCaseStatusText
        /// </summary>
        /// <value>A piece of non-dispositional descriptive information regarding activity within a court case; example \&quot;failure to appear.\&quot; NIEM reference is j:CourtCaseStatusText</value>

        [DataMember(Name="courtCaseStatus")]
        public List<NcTextType> CourtCaseStatus { get; set; }

        /// <summary>
        /// jCourtActivityType JSON-LD context
        /// </summary>
        /// <value>jCourtActivityType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCourtActivityTypeContextJsonldEnum for ../JSON-LD_Contexts/jCourtActivityTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCourtActivityTypeContext.jsonld")]
            JSONLDContextsjCourtActivityTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCourtActivityType JSON-LD context
        /// </summary>
        /// <value>jCourtActivityType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCourtActivityType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  CourtOrder: ").Append(CourtOrder).Append("\n");
            sb.Append("  ScheduleDay: ").Append(ScheduleDay).Append("\n");
            sb.Append("  SupervisingAgency: ").Append(SupervisingAgency).Append("\n");
            sb.Append("  CourtCaseStatus: ").Append(CourtCaseStatus).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCourtActivityType)obj);
        }

        /// <summary>
        /// Returns true if JCourtActivityType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCourtActivityType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCourtActivityType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    CourtOrder == other.CourtOrder ||
                    CourtOrder != null &&
                    CourtOrder.SequenceEqual(other.CourtOrder)
                ) && 
                (
                    ScheduleDay == other.ScheduleDay ||
                    ScheduleDay != null &&
                    ScheduleDay.SequenceEqual(other.ScheduleDay)
                ) && 
                (
                    SupervisingAgency == other.SupervisingAgency ||
                    SupervisingAgency != null &&
                    SupervisingAgency.SequenceEqual(other.SupervisingAgency)
                ) && 
                (
                    CourtCaseStatus == other.CourtCaseStatus ||
                    CourtCaseStatus != null &&
                    CourtCaseStatus.SequenceEqual(other.CourtCaseStatus)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (CourtOrder != null)
                    hashCode = hashCode * 59 + CourtOrder.GetHashCode();
                    if (ScheduleDay != null)
                    hashCode = hashCode * 59 + ScheduleDay.GetHashCode();
                    if (SupervisingAgency != null)
                    hashCode = hashCode * 59 + SupervisingAgency.GetHashCode();
                    if (CourtCaseStatus != null)
                    hashCode = hashCode * 59 + CourtCaseStatus.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCourtActivityType left, JCourtActivityType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCourtActivityType left, JCourtActivityType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
