/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a physiological state of a person due to the presence of drugs, alcohol, or other toxic substance.
    /// </summary>
    [DataContract]
    public partial class JIntoxicationType : IEquatable<JIntoxicationType>
    { 
        /// <summary>
        /// A degree to which a person is intoxicated or under the influence of a substance. NIEM reference is j:IntoxicationLevelText
        /// </summary>
        /// <value>A degree to which a person is intoxicated or under the influence of a substance. NIEM reference is j:IntoxicationLevelText</value>

        [DataMember(Name="level")]
        public List<NcTextType> Level { get; set; }

        /// <summary>
        /// A kind of test performed to determine the nature and/or level of intoxication of a person. NIEM reference is j:IntoxicationTestCategoryText
        /// </summary>
        /// <value>A kind of test performed to determine the nature and/or level of intoxication of a person. NIEM reference is j:IntoxicationTestCategoryText</value>

        [DataMember(Name="testCategory")]
        public List<NcTextType> TestCategory { get; set; }

        /// <summary>
        /// True if alcohol contributed to the intoxication of a person; false otherwise. NIEM reference is j:IntoxicationAlcoholInvolvedIndicator
        /// </summary>
        /// <value>True if alcohol contributed to the intoxication of a person; false otherwise. NIEM reference is j:IntoxicationAlcoholInvolvedIndicator</value>

        [DataMember(Name="isAlcoholInvolved")]
        public List<NiemXsboolean> IsAlcoholInvolved { get; set; }

        /// <summary>
        /// True if a drug contributed to the intoxication of a person; false otherwise. NIEM reference is j:IntoxicationDrugInvolvedIndicator
        /// </summary>
        /// <value>True if a drug contributed to the intoxication of a person; false otherwise. NIEM reference is j:IntoxicationDrugInvolvedIndicator</value>

        [DataMember(Name="isDrugInvolved")]
        public List<NiemXsboolean> IsDrugInvolved { get; set; }

        /// <summary>
        /// True if a substance that contributed to the intoxication of a person was illegal at the time and location of the event; false if it was legal. NIEM reference is j:IntoxicationIntoxicantIllegalIndicator
        /// </summary>
        /// <value>True if a substance that contributed to the intoxication of a person was illegal at the time and location of the event; false if it was legal. NIEM reference is j:IntoxicationIntoxicantIllegalIndicator</value>

        [DataMember(Name="isIntoxicantIllegal")]
        public List<NiemXsboolean> IsIntoxicantIllegal { get; set; }

        /// <summary>
        /// A kind of substance by which a person is intoxicated. NIEM reference is j:IntoxicationIntoxicantCategoryCode
        /// </summary>
        /// <value>A kind of substance by which a person is intoxicated. NIEM reference is j:IntoxicationIntoxicantCategoryCode</value>

        [DataMember(Name="intoxicantCategoryCode")]
        public List<UcrDrugCategoryCodeType> IntoxicantCategoryCode { get; set; }

        /// <summary>
        /// A kind of substance by which a person is intoxicated. NIEM reference is j:IntoxicationIntoxicantCategoryText
        /// </summary>
        /// <value>A kind of substance by which a person is intoxicated. NIEM reference is j:IntoxicationIntoxicantCategoryText</value>

        [DataMember(Name="intoxicantCategory")]
        public List<NcTextType> IntoxicantCategory { get; set; }

        /// <summary>
        /// True if the quantity of an intoxicating substance in the system of a person is over the legal limit; false otherwise. NIEM reference is j:IntoxicationOverLimitIndicator
        /// </summary>
        /// <value>True if the quantity of an intoxicating substance in the system of a person is over the legal limit; false otherwise. NIEM reference is j:IntoxicationOverLimitIndicator</value>

        [DataMember(Name="isOverLimit")]
        public List<NiemXsboolean> IsOverLimit { get; set; }

        /// <summary>
        /// An entity which administers a test to determine the intoxication of a person. NIEM reference is j:IntoxicationTester
        /// </summary>
        /// <value>An entity which administers a test to determine the intoxication of a person. NIEM reference is j:IntoxicationTester</value>

        [DataMember(Name="tester")]
        public List<NcEntityType> Tester { get; set; }

        /// <summary>
        /// A date a test of intoxication was performed. NIEM reference is j:IntoxicationTestDate
        /// </summary>
        /// <value>A date a test of intoxication was performed. NIEM reference is j:IntoxicationTestDate</value>

        [DataMember(Name="testDate")]
        public List<NcDateType> TestDate { get; set; }

        /// <summary>
        /// A description of a test performed to determine the nature and/or level of intoxication of a person. NIEM reference is j:IntoxicationTestDescriptionText
        /// </summary>
        /// <value>A description of a test performed to determine the nature and/or level of intoxication of a person. NIEM reference is j:IntoxicationTestDescriptionText</value>

        [DataMember(Name="testDescription")]
        public List<NcTextType> TestDescription { get; set; }

        /// <summary>
        /// An activity in which the intoxication of a person was suspected or measured. NIEM reference is j:IntoxicationRelatedActivity
        /// </summary>
        /// <value>An activity in which the intoxication of a person was suspected or measured. NIEM reference is j:IntoxicationRelatedActivity</value>

        [DataMember(Name="relatedActivity")]
        public List<NcActivityType> RelatedActivity { get; set; }

        /// <summary>
        /// jIntoxicationType JSON-LD context
        /// </summary>
        /// <value>jIntoxicationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjIntoxicationTypeContextJsonldEnum for ../JSON-LD_Contexts/jIntoxicationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jIntoxicationTypeContext.jsonld")]
            JSONLDContextsjIntoxicationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jIntoxicationType JSON-LD context
        /// </summary>
        /// <value>jIntoxicationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JIntoxicationType {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  TestCategory: ").Append(TestCategory).Append("\n");
            sb.Append("  IsAlcoholInvolved: ").Append(IsAlcoholInvolved).Append("\n");
            sb.Append("  IsDrugInvolved: ").Append(IsDrugInvolved).Append("\n");
            sb.Append("  IsIntoxicantIllegal: ").Append(IsIntoxicantIllegal).Append("\n");
            sb.Append("  IntoxicantCategoryCode: ").Append(IntoxicantCategoryCode).Append("\n");
            sb.Append("  IntoxicantCategory: ").Append(IntoxicantCategory).Append("\n");
            sb.Append("  IsOverLimit: ").Append(IsOverLimit).Append("\n");
            sb.Append("  Tester: ").Append(Tester).Append("\n");
            sb.Append("  TestDate: ").Append(TestDate).Append("\n");
            sb.Append("  TestDescription: ").Append(TestDescription).Append("\n");
            sb.Append("  RelatedActivity: ").Append(RelatedActivity).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JIntoxicationType)obj);
        }

        /// <summary>
        /// Returns true if JIntoxicationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JIntoxicationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JIntoxicationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Level == other.Level ||
                    Level != null &&
                    Level.SequenceEqual(other.Level)
                ) && 
                (
                    TestCategory == other.TestCategory ||
                    TestCategory != null &&
                    TestCategory.SequenceEqual(other.TestCategory)
                ) && 
                (
                    IsAlcoholInvolved == other.IsAlcoholInvolved ||
                    IsAlcoholInvolved != null &&
                    IsAlcoholInvolved.SequenceEqual(other.IsAlcoholInvolved)
                ) && 
                (
                    IsDrugInvolved == other.IsDrugInvolved ||
                    IsDrugInvolved != null &&
                    IsDrugInvolved.SequenceEqual(other.IsDrugInvolved)
                ) && 
                (
                    IsIntoxicantIllegal == other.IsIntoxicantIllegal ||
                    IsIntoxicantIllegal != null &&
                    IsIntoxicantIllegal.SequenceEqual(other.IsIntoxicantIllegal)
                ) && 
                (
                    IntoxicantCategoryCode == other.IntoxicantCategoryCode ||
                    IntoxicantCategoryCode != null &&
                    IntoxicantCategoryCode.SequenceEqual(other.IntoxicantCategoryCode)
                ) && 
                (
                    IntoxicantCategory == other.IntoxicantCategory ||
                    IntoxicantCategory != null &&
                    IntoxicantCategory.SequenceEqual(other.IntoxicantCategory)
                ) && 
                (
                    IsOverLimit == other.IsOverLimit ||
                    IsOverLimit != null &&
                    IsOverLimit.SequenceEqual(other.IsOverLimit)
                ) && 
                (
                    Tester == other.Tester ||
                    Tester != null &&
                    Tester.SequenceEqual(other.Tester)
                ) && 
                (
                    TestDate == other.TestDate ||
                    TestDate != null &&
                    TestDate.SequenceEqual(other.TestDate)
                ) && 
                (
                    TestDescription == other.TestDescription ||
                    TestDescription != null &&
                    TestDescription.SequenceEqual(other.TestDescription)
                ) && 
                (
                    RelatedActivity == other.RelatedActivity ||
                    RelatedActivity != null &&
                    RelatedActivity.SequenceEqual(other.RelatedActivity)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Level != null)
                    hashCode = hashCode * 59 + Level.GetHashCode();
                    if (TestCategory != null)
                    hashCode = hashCode * 59 + TestCategory.GetHashCode();
                    if (IsAlcoholInvolved != null)
                    hashCode = hashCode * 59 + IsAlcoholInvolved.GetHashCode();
                    if (IsDrugInvolved != null)
                    hashCode = hashCode * 59 + IsDrugInvolved.GetHashCode();
                    if (IsIntoxicantIllegal != null)
                    hashCode = hashCode * 59 + IsIntoxicantIllegal.GetHashCode();
                    if (IntoxicantCategoryCode != null)
                    hashCode = hashCode * 59 + IntoxicantCategoryCode.GetHashCode();
                    if (IntoxicantCategory != null)
                    hashCode = hashCode * 59 + IntoxicantCategory.GetHashCode();
                    if (IsOverLimit != null)
                    hashCode = hashCode * 59 + IsOverLimit.GetHashCode();
                    if (Tester != null)
                    hashCode = hashCode * 59 + Tester.GetHashCode();
                    if (TestDate != null)
                    hashCode = hashCode * 59 + TestDate.GetHashCode();
                    if (TestDescription != null)
                    hashCode = hashCode * 59 + TestDescription.GetHashCode();
                    if (RelatedActivity != null)
                    hashCode = hashCode * 59 + RelatedActivity.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JIntoxicationType left, JIntoxicationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JIntoxicationType left, JIntoxicationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
