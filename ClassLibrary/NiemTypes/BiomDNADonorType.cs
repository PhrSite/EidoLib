/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a subject of a DNA sample
    /// </summary>
    [DataContract]
    public partial class BiomDNADonorType : NcPersonType, IEquatable<BiomDNADonorType>
    { 
        /// <summary>
        /// A kind of DNA donor NIEM reference is biom:DNADonorCategoryCode
        /// </summary>
        /// <value>A kind of DNA donor NIEM reference is biom:DNADonorCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomDNADonorCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A date of last contact of a DNA donor NIEM reference is biom:DNADonorLastContactDate
        /// </summary>
        /// <value>A date of last contact of a DNA donor NIEM reference is biom:DNADonorLastContactDate</value>

        [DataMember(Name="lastContactDate")]
        public List<NcDateType> LastContactDate { get; set; }

        /// <summary>
        /// An indication of whether the DNA donor&#x27;s dental records are available NIEM reference is biom:DNADonorDentalRecordsAvailableCode
        /// </summary>
        /// <value>An indication of whether the DNA donor&#x27;s dental records are available NIEM reference is biom:DNADonorDentalRecordsAvailableCode</value>

        [DataMember(Name="dentalRecordsAvailableCode")]
        public List<BiomDNADonorDentalRecordsAvailableCodeType> DentalRecordsAvailableCode { get; set; }

        /// <summary>
        /// A description of the location where the DNA donor&#x27;s sample was collected NIEM reference is biom:DNADonorCollectionLocationDescriptionText
        /// </summary>
        /// <value>A description of the location where the DNA donor&#x27;s sample was collected NIEM reference is biom:DNADonorCollectionLocationDescriptionText</value>

        [DataMember(Name="collectionLocationDescription")]
        public List<NcTextType> CollectionLocationDescription { get; set; }

        /// <summary>
        /// A status of a DNA donor NIEM reference is biom:DNADonorStatusCode
        /// </summary>
        /// <value>A status of a DNA donor NIEM reference is biom:DNADonorStatusCode</value>

        [DataMember(Name="statusCode")]
        public List<BiomDNADonorStatusCodeType> StatusCode { get; set; }

        /// <summary>
        /// biomDNADonorType JSON-LD context
        /// </summary>
        /// <value>biomDNADonorType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDNADonorTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDNADonorTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDNADonorTypeContext.jsonld")]
            JSONLDContextsbiomDNADonorTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDNADonorType JSON-LD context
        /// </summary>
        /// <value>biomDNADonorType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDNADonorType {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  LastContactDate: ").Append(LastContactDate).Append("\n");
            sb.Append("  DentalRecordsAvailableCode: ").Append(DentalRecordsAvailableCode).Append("\n");
            sb.Append("  CollectionLocationDescription: ").Append(CollectionLocationDescription).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDNADonorType)obj);
        }

        /// <summary>
        /// Returns true if BiomDNADonorType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDNADonorType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDNADonorType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    LastContactDate == other.LastContactDate ||
                    LastContactDate != null &&
                    LastContactDate.SequenceEqual(other.LastContactDate)
                ) && 
                (
                    DentalRecordsAvailableCode == other.DentalRecordsAvailableCode ||
                    DentalRecordsAvailableCode != null &&
                    DentalRecordsAvailableCode.SequenceEqual(other.DentalRecordsAvailableCode)
                ) && 
                (
                    CollectionLocationDescription == other.CollectionLocationDescription ||
                    CollectionLocationDescription != null &&
                    CollectionLocationDescription.SequenceEqual(other.CollectionLocationDescription)
                ) && 
                (
                    StatusCode == other.StatusCode ||
                    StatusCode != null &&
                    StatusCode.SequenceEqual(other.StatusCode)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (LastContactDate != null)
                    hashCode = hashCode * 59 + LastContactDate.GetHashCode();
                    if (DentalRecordsAvailableCode != null)
                    hashCode = hashCode * 59 + DentalRecordsAvailableCode.GetHashCode();
                    if (CollectionLocationDescription != null)
                    hashCode = hashCode * 59 + CollectionLocationDescription.GetHashCode();
                    if (StatusCode != null)
                    hashCode = hashCode * 59 + StatusCode.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDNADonorType left, BiomDNADonorType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDNADonorType left, BiomDNADonorType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
