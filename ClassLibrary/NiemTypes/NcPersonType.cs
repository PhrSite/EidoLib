/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a human being.
    /// </summary>
    [DataContract]
    public partial class NcPersonType : IEquatable<NcPersonType>
    { 
        /// <summary>
        /// A manner of pronunciation; a way of pronouncing words that may indicate the place of origin or social background of the speaker. NIEM reference is nc:PersonAccentText
        /// </summary>
        /// <value>A manner of pronunciation; a way of pronouncing words that may indicate the place of origin or social background of the speaker. NIEM reference is nc:PersonAccentText</value>

        [DataMember(Name="accent")]
        public List<NcTextType> Accent { get; set; }

        /// <summary>
        /// A general description of the age of a person. NIEM reference is nc:PersonAgeDescriptionText
        /// </summary>
        /// <value>A general description of the age of a person. NIEM reference is nc:PersonAgeDescriptionText</value>

        [DataMember(Name="ageDescription")]
        public List<NcTextType> AgeDescription { get; set; }

        /// <summary>
        /// A measurement of the age of a person. NIEM reference is nc:PersonAgeMeasure
        /// </summary>
        /// <value>A measurement of the age of a person. NIEM reference is nc:PersonAgeMeasure</value>

        [DataMember(Name="ageMeasure")]
        public List<NcTimeMeasureType> AgeMeasure { get; set; }

        /// <summary>
        /// A date a person was born. NIEM reference is nc:PersonBirthDate
        /// </summary>
        /// <value>A date a person was born. NIEM reference is nc:PersonBirthDate</value>

        [DataMember(Name="birthDate")]
        public List<NcDateType> BirthDate { get; set; }

        /// <summary>
        /// A location where a person was born. NIEM reference is nc:PersonBirthLocation
        /// </summary>
        /// <value>A location where a person was born. NIEM reference is nc:PersonBirthLocation</value>

        [DataMember(Name="birthLocation")]
        public List<NcLocationType> BirthLocation { get; set; }

        /// <summary>
        /// A blood group and RH factor of a person. NIEM reference is j:PersonBloodTypeCode
        /// </summary>
        /// <value>A blood group and RH factor of a person. NIEM reference is j:PersonBloodTypeCode</value>

        [DataMember(Name="bloodTypeCode")]
        public List<NcicBLTCodeType> BloodTypeCode { get; set; }

        /// <summary>
        /// A code set identifying a blood group and RH factor of a person. NIEM reference is j:PersonBloodTypeRapSheetCode
        /// </summary>
        /// <value>A code set identifying a blood group and RH factor of a person. NIEM reference is j:PersonBloodTypeRapSheetCode</value>

        [DataMember(Name="bloodTypeRapSheetCode")]
        public List<JPersonBloodTypeCodeType> BloodTypeRapSheetCode { get; set; }

        /// <summary>
        /// A blood group and RH factor of a person. NIEM reference is nc:PersonBloodTypeText
        /// </summary>
        /// <value>A blood group and RH factor of a person. NIEM reference is nc:PersonBloodTypeText</value>

        [DataMember(Name="bloodType")]
        public List<NcTextType> BloodType { get; set; }

        /// <summary>
        /// An X-ray of a body part available for a person. NIEM reference is j:PersonBodyXRaysAvailableCode
        /// </summary>
        /// <value>An X-ray of a body part available for a person. NIEM reference is j:PersonBodyXRaysAvailableCode</value>

        [DataMember(Name="bodyXRaysAvailableCode")]
        public List<NcicBXRCodeType> BodyXRaysAvailableCode { get; set; }

        /// <summary>
        /// An X-ray of a body part available for a person. NIEM reference is nc:PersonBodyXRaysAvailableText
        /// </summary>
        /// <value>An X-ray of a body part available for a person. NIEM reference is nc:PersonBodyXRaysAvailableText</value>

        [DataMember(Name="bodyXRaysAvailable")]
        public List<NcTextType> BodyXRaysAvailable { get; set; }

        /// <summary>
        /// A person&#x27;s physique or body shape. NIEM reference is j:PersonBuildCode
        /// </summary>
        /// <value>A person&#x27;s physique or body shape. NIEM reference is j:PersonBuildCode</value>

        [DataMember(Name="buildCode")]
        public List<NdexPersonBuildCodeType> BuildCode { get; set; }

        /// <summary>
        /// A person&#x27;s physique or body shape. NIEM reference is nc:PersonBuildText
        /// </summary>
        /// <value>A person&#x27;s physique or body shape. NIEM reference is nc:PersonBuildText</value>

        [DataMember(Name="build")]
        public List<NcTextType> Build { get; set; }

        /// <summary>
        /// A capacity or ability of a person. NIEM reference is nc:PersonCapability
        /// </summary>
        /// <value>A capacity or ability of a person. NIEM reference is nc:PersonCapability</value>

        [DataMember(Name="capability")]
        public List<NcCapabilityType> Capability { get; set; }

        /// <summary>
        /// True if a person is circumcised; false otherwise. NIEM reference is nc:PersonCircumcisionIndicator
        /// </summary>
        /// <value>True if a person is circumcised; false otherwise. NIEM reference is nc:PersonCircumcisionIndicator</value>

        [DataMember(Name="isCircumcision")]
        public List<NiemXsboolean> IsCircumcision { get; set; }

        /// <summary>
        /// A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipISO3166Alpha2Code
        /// </summary>
        /// <value>A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipISO3166Alpha2Code</value>

        [DataMember(Name="citizenshipIso3166Alpha2Code")]
        public List<Iso3166CountryAlpha2CodeType> CitizenshipIso3166Alpha2Code { get; set; }

        /// <summary>
        /// A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipText
        /// </summary>
        /// <value>A country that assigns rights, duties, and privileges to a person because of the birth or naturalization of the person in that country. NIEM reference is nc:PersonCitizenshipText</value>

        [DataMember(Name="citizenship")]
        public List<NcTextType> Citizenship { get; set; }

        /// <summary>
        /// An appearance or condition of the skin of a person. NIEM reference is nc:PersonComplexionText
        /// </summary>
        /// <value>An appearance or condition of the skin of a person. NIEM reference is nc:PersonComplexionText</value>

        [DataMember(Name="complexion")]
        public List<NcTextType> Complexion { get; set; }

        /// <summary>
        /// A date a person died or was declared legally dead. NIEM reference is nc:PersonDeathDate
        /// </summary>
        /// <value>A date a person died or was declared legally dead. NIEM reference is nc:PersonDeathDate</value>

        [DataMember(Name="deathDate")]
        public List<NcDateType> DeathDate { get; set; }

        /// <summary>
        /// A number of people dependent upon a person as their primary means of support. NIEM reference is nc:PersonDependentQuantity
        /// </summary>
        /// <value>A number of people dependent upon a person as their primary means of support. NIEM reference is nc:PersonDependentQuantity</value>

        [DataMember(Name="dependentQuantity")]
        public List<NcQuantityType> DependentQuantity { get; set; }

        /// <summary>
        /// A description of a person. NIEM reference is nc:PersonDescriptionText
        /// </summary>
        /// <value>A description of a person. NIEM reference is nc:PersonDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A photograph or image of a person in a digital format. NIEM reference is nc:PersonDigitalImage
        /// </summary>
        /// <value>A photograph or image of a person in a digital format. NIEM reference is nc:PersonDigitalImage</value>

        [DataMember(Name="digitalImage")]
        public List<NcImageType> DigitalImage { get; set; }

        /// <summary>
        /// An image of a handwritten signature of a person. NIEM reference is nc:PersonDigitizedSignatureImage
        /// </summary>
        /// <value>An image of a handwritten signature of a person. NIEM reference is nc:PersonDigitizedSignatureImage</value>

        [DataMember(Name="digitizedSignatureImage")]
        public List<NcImageType> DigitizedSignatureImage { get; set; }

        /// <summary>
        /// A description of something a person wears to conceal or mislead others as to the true appearance or identity of that person. NIEM reference is nc:PersonDisguiseDescriptionText
        /// </summary>
        /// <value>A description of something a person wears to conceal or mislead others as to the true appearance or identity of that person. NIEM reference is nc:PersonDisguiseDescriptionText</value>

        [DataMember(Name="disguiseDescription")]
        public List<NcTextType> DisguiseDescription { get; set; }

        /// <summary>
        /// An organ a person is willing to donate upon death. NIEM reference is j:PersonOrganDonorCode
        /// </summary>
        /// <value>An organ a person is willing to donate upon death. NIEM reference is j:PersonOrganDonorCode</value>

        [DataMember(Name="organDonorCode")]
        public List<AamvaD20PersonOrganDonorCodeType> OrganDonorCode { get; set; }

        /// <summary>
        /// An organ a person is willing to donate upon death. NIEM reference is nc:PersonOrganDonorText
        /// </summary>
        /// <value>An organ a person is willing to donate upon death. NIEM reference is nc:PersonOrganDonorText</value>

        [DataMember(Name="organDonor")]
        public List<NcTextType> OrganDonor { get; set; }

        /// <summary>
        /// A highest level of education a person has obtained. NIEM reference is nc:PersonEducationLevelText
        /// </summary>
        /// <value>A highest level of education a person has obtained. NIEM reference is nc:PersonEducationLevelText</value>

        [DataMember(Name="educationLevel")]
        public List<NcTextType> EducationLevel { get; set; }

        /// <summary>
        /// A kind of ethnicity. NIEM reference is scr:EthnicityCategoryCode
        /// </summary>
        /// <value>A kind of ethnicity. NIEM reference is scr:EthnicityCategoryCode</value>

        [DataMember(Name="ethnicityCategoryCode")]
        public List<ScrEthnicityCategoryCodeType> EthnicityCategoryCode { get; set; }

        /// <summary>
        /// A cultural lineage of a person. NIEM reference is j:PersonEthnicityCode
        /// </summary>
        /// <value>A cultural lineage of a person. NIEM reference is j:PersonEthnicityCode</value>

        [DataMember(Name="ethnicityCode")]
        public List<UcrEthnicityCodeType> EthnicityCode { get; set; }

        /// <summary>
        /// A code set identifying a cultural lineage of a person. NIEM reference is j:PersonEthnicityRapSheetCode
        /// </summary>
        /// <value>A code set identifying a cultural lineage of a person. NIEM reference is j:PersonEthnicityRapSheetCode</value>

        [DataMember(Name="ethnicityRapSheetCode")]
        public List<JPersonEthnicityCodeType> EthnicityRapSheetCode { get; set; }

        /// <summary>
        /// A cultural lineage of a person. NIEM reference is nc:PersonEthnicityText
        /// </summary>
        /// <value>A cultural lineage of a person. NIEM reference is nc:PersonEthnicityText</value>

        [DataMember(Name="ethnicity")]
        public List<NcTextType> Ethnicity { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is j:PersonEyeColorCode</value>

        [DataMember(Name="eyeColorCode")]
        public List<NcicEYECodeType> EyeColorCode { get; set; }

        /// <summary>
        /// A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying an eye color of a person. NIEM reference is j:PersonEyeColorRapSheetCode</value>

        [DataMember(Name="eyeColorRapSheetCode")]
        public List<JPersonEyeColorCodeType> EyeColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText
        /// </summary>
        /// <value>A color of the eyes of a person. NIEM reference is nc:PersonEyeColorText</value>

        [DataMember(Name="eyeColor")]
        public List<NcTextType> EyeColor { get; set; }

        /// <summary>
        /// A kind of glasses or other eyewear. NIEM reference is j:PersonEyewearCode
        /// </summary>
        /// <value>A kind of glasses or other eyewear. NIEM reference is j:PersonEyewearCode</value>

        [DataMember(Name="eyewearCode")]
        public List<NdexPersonEyewearCodeType> EyewearCode { get; set; }

        /// <summary>
        /// A description of glasses or other eyewear a person wears. NIEM reference is nc:PersonEyewearText
        /// </summary>
        /// <value>A description of glasses or other eyewear a person wears. NIEM reference is nc:PersonEyewearText</value>

        [DataMember(Name="eyewear")]
        public List<NcTextType> Eyewear { get; set; }

        /// <summary>
        /// A kind of facial hair. NIEM reference is j:PersonFacialHairCode
        /// </summary>
        /// <value>A kind of facial hair. NIEM reference is j:PersonFacialHairCode</value>

        [DataMember(Name="facialHairCode")]
        public List<NdexPersonFacialHairCodeType> FacialHairCode { get; set; }

        /// <summary>
        /// A kind of facial hair of a person. NIEM reference is nc:PersonFacialHairText
        /// </summary>
        /// <value>A kind of facial hair of a person. NIEM reference is nc:PersonFacialHairText</value>

        [DataMember(Name="facialHair")]
        public List<NcTextType> FacialHair { get; set; }

        /// <summary>
        /// A length of hair of a person. NIEM reference is j:PersonHairLengthCode
        /// </summary>
        /// <value>A length of hair of a person. NIEM reference is j:PersonHairLengthCode</value>

        [DataMember(Name="hairLengthCode")]
        public List<NdexPersonHairLengthCodeType> HairLengthCode { get; set; }

        /// <summary>
        /// A length of hair of a person. NIEM reference is nc:PersonHairLengthText
        /// </summary>
        /// <value>A length of hair of a person. NIEM reference is nc:PersonHairLengthText</value>

        [DataMember(Name="hairLength")]
        public List<NcTextType> HairLength { get; set; }

        /// <summary>
        /// A style or cut of hair worn by a person. NIEM reference is j:PersonHairStyleCode
        /// </summary>
        /// <value>A style or cut of hair worn by a person. NIEM reference is j:PersonHairStyleCode</value>

        [DataMember(Name="hairStyleCode")]
        public List<NdexPersonHairStyleCodeType> HairStyleCode { get; set; }

        /// <summary>
        /// A style or cut of hair worn by a person. NIEM reference is nc:PersonHairStyleText
        /// </summary>
        /// <value>A style or cut of hair worn by a person. NIEM reference is nc:PersonHairStyleText</value>

        [DataMember(Name="hairStyle")]
        public List<NcTextType> HairStyle { get; set; }

        /// <summary>
        /// A description of the way a person looks and is presented overall. NIEM reference is nc:PersonGeneralAppearanceDescriptionText
        /// </summary>
        /// <value>A description of the way a person looks and is presented overall. NIEM reference is nc:PersonGeneralAppearanceDescriptionText</value>

        [DataMember(Name="generalAppearanceDescription")]
        public List<NcTextType> GeneralAppearanceDescription { get; set; }

        /// <summary>
        /// An overall appearance of the hair of a person. NIEM reference is nc:PersonHairAppearanceText
        /// </summary>
        /// <value>An overall appearance of the hair of a person. NIEM reference is nc:PersonHairAppearanceText</value>

        [DataMember(Name="hairAppearance")]
        public List<NcTextType> HairAppearance { get; set; }

        /// <summary>
        /// A kind of hair of a person, such as wavy or straight. NIEM reference is nc:PersonHairCategoryText
        /// </summary>
        /// <value>A kind of hair of a person, such as wavy or straight. NIEM reference is nc:PersonHairCategoryText</value>

        [DataMember(Name="hairCategory")]
        public List<NcTextType> HairCategory { get; set; }

        /// <summary>
        /// A color of the hair of a person. NIEM reference is j:PersonHairColorCode
        /// </summary>
        /// <value>A color of the hair of a person. NIEM reference is j:PersonHairColorCode</value>

        [DataMember(Name="hairColorCode")]
        public List<NcicHAIRCodeType> HairColorCode { get; set; }

        /// <summary>
        /// A code set identifying a hair color of a person. NIEM reference is j:PersonHairColorRapSheetCode
        /// </summary>
        /// <value>A code set identifying a hair color of a person. NIEM reference is j:PersonHairColorRapSheetCode</value>

        [DataMember(Name="hairColorRapSheetCode")]
        public List<JPersonHairColorCodeType> HairColorRapSheetCode { get; set; }

        /// <summary>
        /// A color of the hair of a person. NIEM reference is nc:PersonHairColorText
        /// </summary>
        /// <value>A color of the hair of a person. NIEM reference is nc:PersonHairColorText</value>

        [DataMember(Name="hairColor")]
        public List<NcTextType> HairColor { get; set; }

        /// <summary>
        /// A hand with which a person is more adept using. NIEM reference is nc:PersonHandednessText
        /// </summary>
        /// <value>A hand with which a person is more adept using. NIEM reference is nc:PersonHandednessText</value>

        [DataMember(Name="handedness")]
        public List<NcTextType> Handedness { get; set; }

        /// <summary>
        /// A description of the height of a person. NIEM reference is nc:PersonHeightDescriptionText
        /// </summary>
        /// <value>A description of the height of a person. NIEM reference is nc:PersonHeightDescriptionText</value>

        [DataMember(Name="heightDescription")]
        public List<NcTextType> HeightDescription { get; set; }

        /// <summary>
        /// A measurement of the height of a person. NIEM reference is nc:PersonHeightMeasure
        /// </summary>
        /// <value>A measurement of the height of a person. NIEM reference is nc:PersonHeightMeasure</value>

        [DataMember(Name="heightMeasure")]
        public List<NcLengthMeasureType> HeightMeasure { get; set; }

        /// <summary>
        /// A human resources or employment identification assigned to a person. NIEM reference is nc:PersonHumanResourceIdentification
        /// </summary>
        /// <value>A human resources or employment identification assigned to a person. NIEM reference is nc:PersonHumanResourceIdentification</value>

        [DataMember(Name="humanResourceIdentification")]
        public List<NcIdentificationType> HumanResourceIdentification { get; set; }

        /// <summary>
        /// A form of physical harm or damage sustained by a person. NIEM reference is nc:PersonInjury
        /// </summary>
        /// <value>A form of physical harm or damage sustained by a person. NIEM reference is nc:PersonInjury</value>

        [DataMember(Name="injury")]
        public List<NcInjuryType> Injury { get; set; }

        /// <summary>
        /// A description of adornments a person wears. NIEM reference is nc:PersonJewelryDescriptionText
        /// </summary>
        /// <value>A description of adornments a person wears. NIEM reference is nc:PersonJewelryDescriptionText</value>

        [DataMember(Name="jewelryDescription")]
        public List<NcTextType> JewelryDescription { get; set; }

        /// <summary>
        /// True if a person understands and speaks English; false otherwise. NIEM reference is nc:PersonLanguageEnglishIndicator
        /// </summary>
        /// <value>True if a person understands and speaks English; false otherwise. NIEM reference is nc:PersonLanguageEnglishIndicator</value>

        [DataMember(Name="isLanguageEnglish")]
        public List<NiemXsboolean> IsLanguageEnglish { get; set; }

        /// <summary>
        /// A disorder of a person which can cause difficulties in learning something. NIEM reference is nc:PersonLearningDisabilityText
        /// </summary>
        /// <value>A disorder of a person which can cause difficulties in learning something. NIEM reference is nc:PersonLearningDisabilityText</value>

        [DataMember(Name="learningDisability")]
        public List<NcTextType> LearningDisability { get; set; }

        /// <summary>
        /// An identification that references a license certification or registration of a person for some purpose. NIEM reference is nc:PersonLicenseIdentification
        /// </summary>
        /// <value>An identification that references a license certification or registration of a person for some purpose. NIEM reference is nc:PersonLicenseIdentification</value>

        [DataMember(Name="licenseIdentification")]
        public List<NcIdentificationType> LicenseIdentification { get; set; }

        /// <summary>
        /// True if a person is alive; false if a person is dead. NIEM reference is nc:PersonLivingIndicator
        /// </summary>
        /// <value>True if a person is alive; false if a person is dead. NIEM reference is nc:PersonLivingIndicator</value>

        [DataMember(Name="isLiving")]
        public List<NiemXsboolean> IsLiving { get; set; }

        /// <summary>
        /// A state of health for a person, on-going or present. NIEM reference is nc:PersonMedicalCondition
        /// </summary>
        /// <value>A state of health for a person, on-going or present. NIEM reference is nc:PersonMedicalCondition</value>

        [DataMember(Name="medicalCondition")]
        public List<NcMedicalConditionType> MedicalCondition { get; set; }

        /// <summary>
        /// A description of the overall health of a person. NIEM reference is nc:PersonMedicalDescriptionText
        /// </summary>
        /// <value>A description of the overall health of a person. NIEM reference is nc:PersonMedicalDescriptionText</value>

        [DataMember(Name="medicalDescription")]
        public List<NcTextType> MedicalDescription { get; set; }

        /// <summary>
        /// True if a medical history file is known to exist for a person; false otherwise. NIEM reference is nc:PersonMedicalFileIndicator
        /// </summary>
        /// <value>True if a medical history file is known to exist for a person; false otherwise. NIEM reference is nc:PersonMedicalFileIndicator</value>

        [DataMember(Name="isMedicalFile")]
        public List<NiemXsboolean> IsMedicalFile { get; set; }

        /// <summary>
        /// A medication and dosage required for a person. NIEM reference is nc:PersonMedicationRequiredText
        /// </summary>
        /// <value>A medication and dosage required for a person. NIEM reference is nc:PersonMedicationRequiredText</value>

        [DataMember(Name="medicationRequired")]
        public List<NcTextType> MedicationRequired { get; set; }

        /// <summary>
        /// A mental condition of a person. NIEM reference is nc:PersonMentalStateText
        /// </summary>
        /// <value>A mental condition of a person. NIEM reference is nc:PersonMentalStateText</value>

        [DataMember(Name="mentalState")]
        public List<NcTextType> MentalState { get; set; }

        /// <summary>
        /// A service of a person in a military. NIEM reference is nc:PersonMilitarySummary
        /// </summary>
        /// <value>A service of a person in a military. NIEM reference is nc:PersonMilitarySummary</value>

        [DataMember(Name="militarySummary")]
        public List<NcMilitarySummaryType> MilitarySummary { get; set; }

        /// <summary>
        /// A description of a state of feeling of a person. NIEM reference is nc:PersonMoodDescriptionText
        /// </summary>
        /// <value>A description of a state of feeling of a person. NIEM reference is nc:PersonMoodDescriptionText</value>

        [DataMember(Name="moodDescription")]
        public List<NcTextType> MoodDescription { get; set; }

        /// <summary>
        /// A combination of names and/or titles by which a person is known. NIEM reference is nc:PersonName
        /// </summary>
        /// <value>A combination of names and/or titles by which a person is known. NIEM reference is nc:PersonName</value>

        [DataMember(Name="name")]
        public List<NcPersonNameType> Name { get; set; }

        /// <summary>
        /// An identification that references a person within a country but is not based on fingerprint. NIEM reference is nc:PersonNationalIdentification
        /// </summary>
        /// <value>An identification that references a person within a country but is not based on fingerprint. NIEM reference is nc:PersonNationalIdentification</value>

        [DataMember(Name="nationalIdentification")]
        public List<NcIdentificationType> NationalIdentification { get; set; }

        /// <summary>
        /// True if a person has given consent to be used as an organ donor upon death; false otherwise. NIEM reference is nc:PersonOrganDonatorIndicator
        /// </summary>
        /// <value>True if a person has given consent to be used as an organ donor upon death; false otherwise. NIEM reference is nc:PersonOrganDonatorIndicator</value>

        [DataMember(Name="isOrganDonator")]
        public List<NiemXsboolean> IsOrganDonator { get; set; }

        /// <summary>
        /// An identification with a kind that is not explicitly defined in the standard that refers to a person within a certain domain. NIEM reference is nc:PersonOtherIdentification
        /// </summary>
        /// <value>An identification with a kind that is not explicitly defined in the standard that refers to a person within a certain domain. NIEM reference is nc:PersonOtherIdentification</value>

        [DataMember(Name="otherIdentification")]
        public List<NcIdentificationType> OtherIdentification { get; set; }

        /// <summary>
        /// An identification of a passport issued to a person. NIEM reference is nc:PersonPassportIdentification
        /// </summary>
        /// <value>An identification of a passport issued to a person. NIEM reference is nc:PersonPassportIdentification</value>

        [DataMember(Name="passportIdentification")]
        public List<NcIdentificationType> PassportIdentification { get; set; }

        /// <summary>
        /// A physical disability of a person. NIEM reference is nc:PersonPhysicalDisabilityText
        /// </summary>
        /// <value>A physical disability of a person. NIEM reference is nc:PersonPhysicalDisabilityText</value>

        [DataMember(Name="physicalDisability")]
        public List<NcTextType> PhysicalDisability { get; set; }

        /// <summary>
        /// A prominent or easily identifiable aspect of  a person. NIEM reference is nc:PersonPhysicalFeature
        /// </summary>
        /// <value>A prominent or easily identifiable aspect of  a person. NIEM reference is nc:PersonPhysicalFeature</value>

        [DataMember(Name="physicalFeature")]
        public List<NcPhysicalFeatureType> PhysicalFeature { get; set; }

        /// <summary>
        /// A capacity of a person for a language with which that person has the strongest familiarity. NIEM reference is nc:PersonPrimaryLanguage
        /// </summary>
        /// <value>A capacity of a person for a language with which that person has the strongest familiarity. NIEM reference is nc:PersonPrimaryLanguage</value>

        [DataMember(Name="primaryLanguage")]
        public List<NcPersonLanguageType> PrimaryLanguage { get; set; }

        /// <summary>
        /// A classification of a person based on factors such as geographical locations and genetics. NIEM reference is j:PersonRaceCode
        /// </summary>
        /// <value>A classification of a person based on factors such as geographical locations and genetics. NIEM reference is j:PersonRaceCode</value>

        [DataMember(Name="raceCode")]
        public List<NcicRACECodeType> RaceCode { get; set; }

        /// <summary>
        /// A classification of a person based on factors such as geographical locations and genetics. NIEM reference is j:PersonRaceNDExCode
        /// </summary>
        /// <value>A classification of a person based on factors such as geographical locations and genetics. NIEM reference is j:PersonRaceNDExCode</value>

        [DataMember(Name="raceNdExCode")]
        public List<NdexRACCodeType> RaceNdExCode { get; set; }

        /// <summary>
        /// A code set identifying a race of a person. NIEM reference is j:PersonRaceRapSheetCode
        /// </summary>
        /// <value>A code set identifying a race of a person. NIEM reference is j:PersonRaceRapSheetCode</value>

        [DataMember(Name="raceRapSheetCode")]
        public List<JPersonRaceCodeType> RaceRapSheetCode { get; set; }

        /// <summary>
        /// A classification of a person based on factors such as geographical locations and genetics. NIEM reference is nc:PersonRaceText
        /// </summary>
        /// <value>A classification of a person based on factors such as geographical locations and genetics. NIEM reference is nc:PersonRaceText</value>

        [DataMember(Name="race")]
        public List<NcTextType> Race { get; set; }

        /// <summary>
        /// A religion to which a person subscribes or believes; a categorization of spiritual beliefs. NIEM reference is nc:PersonReligionCode
        /// </summary>
        /// <value>A religion to which a person subscribes or believes; a categorization of spiritual beliefs. NIEM reference is nc:PersonReligionCode</value>

        [DataMember(Name="religionCode")]
        public List<Hl7ReligionCodeType> ReligionCode { get; set; }

        /// <summary>
        /// A religion to which a person subscribes or believes; a categorization of spiritual beliefs. NIEM reference is nc:PersonReligionText
        /// </summary>
        /// <value>A religion to which a person subscribes or believes; a categorization of spiritual beliefs. NIEM reference is nc:PersonReligionText</value>

        [DataMember(Name="religion")]
        public List<NcTextType> Religion { get; set; }

        /// <summary>
        /// A manner of residence a person has in an area such as a city, town, or community. NIEM reference is j:PersonResidentCode
        /// </summary>
        /// <value>A manner of residence a person has in an area such as a city, town, or community. NIEM reference is j:PersonResidentCode</value>

        [DataMember(Name="residentCode")]
        public List<UcrResidentCodeType> ResidentCode { get; set; }

        /// <summary>
        /// A manner of residence a person has in an area such as a city, town, or community. NIEM reference is nc:PersonResidentText
        /// </summary>
        /// <value>A manner of residence a person has in an area such as a city, town, or community. NIEM reference is nc:PersonResidentText</value>

        [DataMember(Name="resident")]
        public List<NcTextType> Resident { get; set; }

        /// <summary>
        /// A capacity of a person for a language with which that person is not completely fluent. NIEM reference is nc:PersonSecondaryLanguage
        /// </summary>
        /// <value>A capacity of a person for a language with which that person is not completely fluent. NIEM reference is nc:PersonSecondaryLanguage</value>

        [DataMember(Name="secondaryLanguage")]
        public List<NcPersonLanguageType> SecondaryLanguage { get; set; }

        /// <summary>
        /// A formal authorization granting a person access to classified or restricted information. NIEM reference is nc:PersonSecurityClearanceText
        /// </summary>
        /// <value>A formal authorization granting a person access to classified or restricted information. NIEM reference is nc:PersonSecurityClearanceText</value>

        [DataMember(Name="securityClearance")]
        public List<NcTextType> SecurityClearance { get; set; }

        /// <summary>
        /// A gender or sex of a person. NIEM reference is j:PersonSexCode
        /// </summary>
        /// <value>A gender or sex of a person. NIEM reference is j:PersonSexCode</value>

        [DataMember(Name="sexCode")]
        public List<NcicSEXCodeType> SexCode { get; set; }

        /// <summary>
        /// A code that identifies the gender or sex of the person. NIEM reference is j:PersonSexNDExCode
        /// </summary>
        /// <value>A code that identifies the gender or sex of the person. NIEM reference is j:PersonSexNDExCode</value>

        [DataMember(Name="sexNdExCode")]
        public List<NdexSEXCodeType> SexNdExCode { get; set; }

        /// <summary>
        /// A code set identifying a gender or sex of a person. NIEM reference is j:PersonSexRapSheetCode
        /// </summary>
        /// <value>A code set identifying a gender or sex of a person. NIEM reference is j:PersonSexRapSheetCode</value>

        [DataMember(Name="sexRapSheetCode")]
        public List<JPersonSexCodeType> SexRapSheetCode { get; set; }

        /// <summary>
        /// A gender or sex of a person. NIEM reference is nc:PersonSexText
        /// </summary>
        /// <value>A gender or sex of a person. NIEM reference is nc:PersonSexText</value>

        [DataMember(Name="sex")]
        public List<NcTextType> Sex { get; set; }

        /// <summary>
        /// A target gender of the sexual interest of a person. NIEM reference is nc:PersonSexualOrientationText
        /// </summary>
        /// <value>A target gender of the sexual interest of a person. NIEM reference is nc:PersonSexualOrientationText</value>

        [DataMember(Name="sexualOrientation")]
        public List<NcTextType> SexualOrientation { get; set; }

        /// <summary>
        /// A color or tone of the skin of a person. NIEM reference is j:PersonSkinToneCode
        /// </summary>
        /// <value>A color or tone of the skin of a person. NIEM reference is j:PersonSkinToneCode</value>

        [DataMember(Name="skinToneCode")]
        public List<NcicSKINCodeType> SkinToneCode { get; set; }

        /// <summary>
        /// A code set identifying the skin color or tone of a person. NIEM reference is j:PersonSkinToneRapSheetCode
        /// </summary>
        /// <value>A code set identifying the skin color or tone of a person. NIEM reference is j:PersonSkinToneRapSheetCode</value>

        [DataMember(Name="skinToneRapSheetCode")]
        public List<JPersonSkinToneCodeType> SkinToneRapSheetCode { get; set; }

        /// <summary>
        /// A color or tone of the skin of a person. NIEM reference is nc:PersonSkinToneText
        /// </summary>
        /// <value>A color or tone of the skin of a person. NIEM reference is nc:PersonSkinToneText</value>

        [DataMember(Name="skinTone")]
        public List<NcTextType> SkinTone { get; set; }

        /// <summary>
        /// A description of a pattern of speech with which a person speaks. NIEM reference is nc:PersonSpeechDescriptionText
        /// </summary>
        /// <value>A description of a pattern of speech with which a person speaks. NIEM reference is nc:PersonSpeechDescriptionText</value>

        [DataMember(Name="speechDescription")]
        public List<NcTextType> SpeechDescription { get; set; }

        /// <summary>
        /// A unique identification reference to a living person; assigned by the United States Social Security Administration. NIEM reference is nc:PersonSSNIdentification
        /// </summary>
        /// <value>A unique identification reference to a living person; assigned by the United States Social Security Administration. NIEM reference is nc:PersonSSNIdentification</value>

        [DataMember(Name="ssnIdentification")]
        public List<NcIdentificationType> SsnIdentification { get; set; }

        /// <summary>
        /// An identification of a person based on a state-issued ID card. NIEM reference is nc:PersonStateIdentification
        /// </summary>
        /// <value>An identification of a person based on a state-issued ID card. NIEM reference is nc:PersonStateIdentification</value>

        [DataMember(Name="stateIdentification")]
        public List<NcIdentificationType> StateIdentification { get; set; }

        /// <summary>
        /// An identification used to refer to a specific person within the tax system of a country. NIEM reference is nc:PersonTaxIdentification
        /// </summary>
        /// <value>An identification used to refer to a specific person within the tax system of a country. NIEM reference is nc:PersonTaxIdentification</value>

        [DataMember(Name="taxIdentification")]
        public List<NcIdentificationType> TaxIdentification { get; set; }

        /// <summary>
        /// A status of a union, such as separated or divorced. NIEM reference is j:MaritalStatusCode
        /// </summary>
        /// <value>A status of a union, such as separated or divorced. NIEM reference is j:MaritalStatusCode</value>

        [DataMember(Name="maritalStatusCode")]
        public List<NdexMaritalStatusCodeType> MaritalStatusCode { get; set; }

        /// <summary>
        /// A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusCode
        /// </summary>
        /// <value>A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusCode</value>

        [DataMember(Name="unionStatusCode")]
        public List<NcPersonUnionStatusCodeType> UnionStatusCode { get; set; }

        /// <summary>
        /// A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusText
        /// </summary>
        /// <value>A legal status of a union between two people. NIEM reference is nc:PersonUnionStatusText</value>

        [DataMember(Name="unionStatus")]
        public List<NcTextType> UnionStatus { get; set; }

        /// <summary>
        /// True if a person is a citizen of the United States; false otherwise. NIEM reference is nc:PersonUSCitizenIndicator
        /// </summary>
        /// <value>True if a person is a citizen of the United States; false otherwise. NIEM reference is nc:PersonUSCitizenIndicator</value>

        [DataMember(Name="isUsCitizen")]
        public List<NiemXsboolean> IsUsCitizen { get; set; }

        /// <summary>
        /// A prescription a person needs for corrective lenses or contacts. NIEM reference is nc:PersonVisionPrescriptionText
        /// </summary>
        /// <value>A prescription a person needs for corrective lenses or contacts. NIEM reference is nc:PersonVisionPrescriptionText</value>

        [DataMember(Name="visionPrescription")]
        public List<NcTextType> VisionPrescription { get; set; }

        /// <summary>
        /// A description of the weight of a person. NIEM reference is nc:PersonWeightDescriptionText
        /// </summary>
        /// <value>A description of the weight of a person. NIEM reference is nc:PersonWeightDescriptionText</value>

        [DataMember(Name="weightDescription")]
        public List<NcTextType> WeightDescription { get; set; }

        /// <summary>
        /// A measurement of the weight of a person. NIEM reference is nc:PersonWeightMeasure
        /// </summary>
        /// <value>A measurement of the weight of a person. NIEM reference is nc:PersonWeightMeasure</value>

        [DataMember(Name="weightMeasure")]
        public List<NcWeightMeasureType> WeightMeasure { get; set; }

        /// <summary>
        /// An X-Ray image of a person or part of a person. NIEM reference is nc:PersonXRayImage
        /// </summary>
        /// <value>An X-Ray image of a person or part of a person. NIEM reference is nc:PersonXRayImage</value>

        [DataMember(Name="xRayImage")]
        public List<NcImageType> XRayImage { get; set; }

        /// <summary>
        /// A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is j:PersonNationalityANSID20Code
        /// </summary>
        /// <value>A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is j:PersonNationalityANSID20Code</value>

        [DataMember(Name="nationalityAnsiD20Code")]
        public List<AamvaD20CountryCodeType> NationalityAnsiD20Code { get; set; }

        /// <summary>
        /// A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is nc:PersonNationalityISO3166Alpha2Code
        /// </summary>
        /// <value>A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is nc:PersonNationalityISO3166Alpha2Code</value>

        [DataMember(Name="nationalityIso3166Alpha2Code")]
        public List<Iso3166CountryAlpha2CodeType> NationalityIso3166Alpha2Code { get; set; }

        /// <summary>
        /// A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is nc:PersonNationalityText
        /// </summary>
        /// <value>A country of a person&#x27;s citizenship or a country in which a person is deemed a national. NIEM reference is nc:PersonNationalityText</value>

        [DataMember(Name="nationality")]
        public List<NcTextType> Nationality { get; set; }

        /// <summary>
        /// A means of contacting a person at work. NIEM reference is nc:EmploymentContactInformation
        /// </summary>
        /// <value>A means of contacting a person at work. NIEM reference is nc:EmploymentContactInformation</value>

        [DataMember(Name="employmentContactInformation")]
        public List<NcContactInformationType> EmploymentContactInformation { get; set; }

        /// <summary>
        /// A means of contacting someone in the event of an emergency. NIEM reference is nc:PersonEmergencyContactInformation
        /// </summary>
        /// <value>A means of contacting someone in the event of an emergency. NIEM reference is nc:PersonEmergencyContactInformation</value>

        [DataMember(Name="emergencyContactInformation")]
        public List<NcContactInformationType> EmergencyContactInformation { get; set; }

        /// <summary>
        /// A means of contacting a person at home. NIEM reference is nc:PersonHomeContactInformation
        /// </summary>
        /// <value>A means of contacting a person at home. NIEM reference is nc:PersonHomeContactInformation</value>

        [DataMember(Name="homeContactInformation")]
        public List<NcContactInformationType> HomeContactInformation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is hs:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is hs:PersonAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsPersonAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is im:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is im:PersonAugmentation</value>

        [DataMember(Name="imAugmentation")]
        public List<ImPersonAugmentationType> ImAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is intel:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is intel:PersonAugmentation</value>

        [DataMember(Name="intelAugmentation")]
        public List<IntelPersonAugmentationType> IntelAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is it:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is it:PersonAugmentation</value>

        [DataMember(Name="itAugmentation")]
        public List<ItPersonAugmentationType> ItAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is j:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is j:PersonAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JPersonAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person. NIEM reference is m:PersonAugmentation
        /// </summary>
        /// <value>Additional information about a person. NIEM reference is m:PersonAugmentation</value>

        [DataMember(Name="mAugmentation")]
        public List<MPersonAugmentationType> MAugmentation { get; set; }

        /// <summary>
        /// ncPersonType JSON-LD context
        /// </summary>
        /// <value>ncPersonType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonTypeContext.jsonld")]
            JSONLDContextsncPersonTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonType JSON-LD context
        /// </summary>
        /// <value>ncPersonType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonType {\n");
            sb.Append("  Accent: ").Append(Accent).Append("\n");
            sb.Append("  AgeDescription: ").Append(AgeDescription).Append("\n");
            sb.Append("  AgeMeasure: ").Append(AgeMeasure).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BirthLocation: ").Append(BirthLocation).Append("\n");
            sb.Append("  BloodTypeCode: ").Append(BloodTypeCode).Append("\n");
            sb.Append("  BloodTypeRapSheetCode: ").Append(BloodTypeRapSheetCode).Append("\n");
            sb.Append("  BloodType: ").Append(BloodType).Append("\n");
            sb.Append("  BodyXRaysAvailableCode: ").Append(BodyXRaysAvailableCode).Append("\n");
            sb.Append("  BodyXRaysAvailable: ").Append(BodyXRaysAvailable).Append("\n");
            sb.Append("  BuildCode: ").Append(BuildCode).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  Capability: ").Append(Capability).Append("\n");
            sb.Append("  IsCircumcision: ").Append(IsCircumcision).Append("\n");
            sb.Append("  CitizenshipIso3166Alpha2Code: ").Append(CitizenshipIso3166Alpha2Code).Append("\n");
            sb.Append("  Citizenship: ").Append(Citizenship).Append("\n");
            sb.Append("  Complexion: ").Append(Complexion).Append("\n");
            sb.Append("  DeathDate: ").Append(DeathDate).Append("\n");
            sb.Append("  DependentQuantity: ").Append(DependentQuantity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DigitalImage: ").Append(DigitalImage).Append("\n");
            sb.Append("  DigitizedSignatureImage: ").Append(DigitizedSignatureImage).Append("\n");
            sb.Append("  DisguiseDescription: ").Append(DisguiseDescription).Append("\n");
            sb.Append("  OrganDonorCode: ").Append(OrganDonorCode).Append("\n");
            sb.Append("  OrganDonor: ").Append(OrganDonor).Append("\n");
            sb.Append("  EducationLevel: ").Append(EducationLevel).Append("\n");
            sb.Append("  EthnicityCategoryCode: ").Append(EthnicityCategoryCode).Append("\n");
            sb.Append("  EthnicityCode: ").Append(EthnicityCode).Append("\n");
            sb.Append("  EthnicityRapSheetCode: ").Append(EthnicityRapSheetCode).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  EyeColorCode: ").Append(EyeColorCode).Append("\n");
            sb.Append("  EyeColorRapSheetCode: ").Append(EyeColorRapSheetCode).Append("\n");
            sb.Append("  EyeColor: ").Append(EyeColor).Append("\n");
            sb.Append("  EyewearCode: ").Append(EyewearCode).Append("\n");
            sb.Append("  Eyewear: ").Append(Eyewear).Append("\n");
            sb.Append("  FacialHairCode: ").Append(FacialHairCode).Append("\n");
            sb.Append("  FacialHair: ").Append(FacialHair).Append("\n");
            sb.Append("  HairLengthCode: ").Append(HairLengthCode).Append("\n");
            sb.Append("  HairLength: ").Append(HairLength).Append("\n");
            sb.Append("  HairStyleCode: ").Append(HairStyleCode).Append("\n");
            sb.Append("  HairStyle: ").Append(HairStyle).Append("\n");
            sb.Append("  GeneralAppearanceDescription: ").Append(GeneralAppearanceDescription).Append("\n");
            sb.Append("  HairAppearance: ").Append(HairAppearance).Append("\n");
            sb.Append("  HairCategory: ").Append(HairCategory).Append("\n");
            sb.Append("  HairColorCode: ").Append(HairColorCode).Append("\n");
            sb.Append("  HairColorRapSheetCode: ").Append(HairColorRapSheetCode).Append("\n");
            sb.Append("  HairColor: ").Append(HairColor).Append("\n");
            sb.Append("  Handedness: ").Append(Handedness).Append("\n");
            sb.Append("  HeightDescription: ").Append(HeightDescription).Append("\n");
            sb.Append("  HeightMeasure: ").Append(HeightMeasure).Append("\n");
            sb.Append("  HumanResourceIdentification: ").Append(HumanResourceIdentification).Append("\n");
            sb.Append("  Injury: ").Append(Injury).Append("\n");
            sb.Append("  JewelryDescription: ").Append(JewelryDescription).Append("\n");
            sb.Append("  IsLanguageEnglish: ").Append(IsLanguageEnglish).Append("\n");
            sb.Append("  LearningDisability: ").Append(LearningDisability).Append("\n");
            sb.Append("  LicenseIdentification: ").Append(LicenseIdentification).Append("\n");
            sb.Append("  IsLiving: ").Append(IsLiving).Append("\n");
            sb.Append("  MedicalCondition: ").Append(MedicalCondition).Append("\n");
            sb.Append("  MedicalDescription: ").Append(MedicalDescription).Append("\n");
            sb.Append("  IsMedicalFile: ").Append(IsMedicalFile).Append("\n");
            sb.Append("  MedicationRequired: ").Append(MedicationRequired).Append("\n");
            sb.Append("  MentalState: ").Append(MentalState).Append("\n");
            sb.Append("  MilitarySummary: ").Append(MilitarySummary).Append("\n");
            sb.Append("  MoodDescription: ").Append(MoodDescription).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NationalIdentification: ").Append(NationalIdentification).Append("\n");
            sb.Append("  IsOrganDonator: ").Append(IsOrganDonator).Append("\n");
            sb.Append("  OtherIdentification: ").Append(OtherIdentification).Append("\n");
            sb.Append("  PassportIdentification: ").Append(PassportIdentification).Append("\n");
            sb.Append("  PhysicalDisability: ").Append(PhysicalDisability).Append("\n");
            sb.Append("  PhysicalFeature: ").Append(PhysicalFeature).Append("\n");
            sb.Append("  PrimaryLanguage: ").Append(PrimaryLanguage).Append("\n");
            sb.Append("  RaceCode: ").Append(RaceCode).Append("\n");
            sb.Append("  RaceNdExCode: ").Append(RaceNdExCode).Append("\n");
            sb.Append("  RaceRapSheetCode: ").Append(RaceRapSheetCode).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("  ReligionCode: ").Append(ReligionCode).Append("\n");
            sb.Append("  Religion: ").Append(Religion).Append("\n");
            sb.Append("  ResidentCode: ").Append(ResidentCode).Append("\n");
            sb.Append("  Resident: ").Append(Resident).Append("\n");
            sb.Append("  SecondaryLanguage: ").Append(SecondaryLanguage).Append("\n");
            sb.Append("  SecurityClearance: ").Append(SecurityClearance).Append("\n");
            sb.Append("  SexCode: ").Append(SexCode).Append("\n");
            sb.Append("  SexNdExCode: ").Append(SexNdExCode).Append("\n");
            sb.Append("  SexRapSheetCode: ").Append(SexRapSheetCode).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  SexualOrientation: ").Append(SexualOrientation).Append("\n");
            sb.Append("  SkinToneCode: ").Append(SkinToneCode).Append("\n");
            sb.Append("  SkinToneRapSheetCode: ").Append(SkinToneRapSheetCode).Append("\n");
            sb.Append("  SkinTone: ").Append(SkinTone).Append("\n");
            sb.Append("  SpeechDescription: ").Append(SpeechDescription).Append("\n");
            sb.Append("  SsnIdentification: ").Append(SsnIdentification).Append("\n");
            sb.Append("  StateIdentification: ").Append(StateIdentification).Append("\n");
            sb.Append("  TaxIdentification: ").Append(TaxIdentification).Append("\n");
            sb.Append("  MaritalStatusCode: ").Append(MaritalStatusCode).Append("\n");
            sb.Append("  UnionStatusCode: ").Append(UnionStatusCode).Append("\n");
            sb.Append("  UnionStatus: ").Append(UnionStatus).Append("\n");
            sb.Append("  IsUsCitizen: ").Append(IsUsCitizen).Append("\n");
            sb.Append("  VisionPrescription: ").Append(VisionPrescription).Append("\n");
            sb.Append("  WeightDescription: ").Append(WeightDescription).Append("\n");
            sb.Append("  WeightMeasure: ").Append(WeightMeasure).Append("\n");
            sb.Append("  XRayImage: ").Append(XRayImage).Append("\n");
            sb.Append("  NationalityAnsiD20Code: ").Append(NationalityAnsiD20Code).Append("\n");
            sb.Append("  NationalityIso3166Alpha2Code: ").Append(NationalityIso3166Alpha2Code).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  EmploymentContactInformation: ").Append(EmploymentContactInformation).Append("\n");
            sb.Append("  EmergencyContactInformation: ").Append(EmergencyContactInformation).Append("\n");
            sb.Append("  HomeContactInformation: ").Append(HomeContactInformation).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  ImAugmentation: ").Append(ImAugmentation).Append("\n");
            sb.Append("  IntelAugmentation: ").Append(IntelAugmentation).Append("\n");
            sb.Append("  ItAugmentation: ").Append(ItAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  MAugmentation: ").Append(MAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Accent == other.Accent ||
                    Accent != null &&
                    Accent.SequenceEqual(other.Accent)
                ) && 
                (
                    AgeDescription == other.AgeDescription ||
                    AgeDescription != null &&
                    AgeDescription.SequenceEqual(other.AgeDescription)
                ) && 
                (
                    AgeMeasure == other.AgeMeasure ||
                    AgeMeasure != null &&
                    AgeMeasure.SequenceEqual(other.AgeMeasure)
                ) && 
                (
                    BirthDate == other.BirthDate ||
                    BirthDate != null &&
                    BirthDate.SequenceEqual(other.BirthDate)
                ) && 
                (
                    BirthLocation == other.BirthLocation ||
                    BirthLocation != null &&
                    BirthLocation.SequenceEqual(other.BirthLocation)
                ) && 
                (
                    BloodTypeCode == other.BloodTypeCode ||
                    BloodTypeCode != null &&
                    BloodTypeCode.SequenceEqual(other.BloodTypeCode)
                ) && 
                (
                    BloodTypeRapSheetCode == other.BloodTypeRapSheetCode ||
                    BloodTypeRapSheetCode != null &&
                    BloodTypeRapSheetCode.SequenceEqual(other.BloodTypeRapSheetCode)
                ) && 
                (
                    BloodType == other.BloodType ||
                    BloodType != null &&
                    BloodType.SequenceEqual(other.BloodType)
                ) && 
                (
                    BodyXRaysAvailableCode == other.BodyXRaysAvailableCode ||
                    BodyXRaysAvailableCode != null &&
                    BodyXRaysAvailableCode.SequenceEqual(other.BodyXRaysAvailableCode)
                ) && 
                (
                    BodyXRaysAvailable == other.BodyXRaysAvailable ||
                    BodyXRaysAvailable != null &&
                    BodyXRaysAvailable.SequenceEqual(other.BodyXRaysAvailable)
                ) && 
                (
                    BuildCode == other.BuildCode ||
                    BuildCode != null &&
                    BuildCode.SequenceEqual(other.BuildCode)
                ) && 
                (
                    Build == other.Build ||
                    Build != null &&
                    Build.SequenceEqual(other.Build)
                ) && 
                (
                    Capability == other.Capability ||
                    Capability != null &&
                    Capability.SequenceEqual(other.Capability)
                ) && 
                (
                    IsCircumcision == other.IsCircumcision ||
                    IsCircumcision != null &&
                    IsCircumcision.SequenceEqual(other.IsCircumcision)
                ) && 
                (
                    CitizenshipIso3166Alpha2Code == other.CitizenshipIso3166Alpha2Code ||
                    CitizenshipIso3166Alpha2Code != null &&
                    CitizenshipIso3166Alpha2Code.SequenceEqual(other.CitizenshipIso3166Alpha2Code)
                ) && 
                (
                    Citizenship == other.Citizenship ||
                    Citizenship != null &&
                    Citizenship.SequenceEqual(other.Citizenship)
                ) && 
                (
                    Complexion == other.Complexion ||
                    Complexion != null &&
                    Complexion.SequenceEqual(other.Complexion)
                ) && 
                (
                    DeathDate == other.DeathDate ||
                    DeathDate != null &&
                    DeathDate.SequenceEqual(other.DeathDate)
                ) && 
                (
                    DependentQuantity == other.DependentQuantity ||
                    DependentQuantity != null &&
                    DependentQuantity.SequenceEqual(other.DependentQuantity)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DigitalImage == other.DigitalImage ||
                    DigitalImage != null &&
                    DigitalImage.SequenceEqual(other.DigitalImage)
                ) && 
                (
                    DigitizedSignatureImage == other.DigitizedSignatureImage ||
                    DigitizedSignatureImage != null &&
                    DigitizedSignatureImage.SequenceEqual(other.DigitizedSignatureImage)
                ) && 
                (
                    DisguiseDescription == other.DisguiseDescription ||
                    DisguiseDescription != null &&
                    DisguiseDescription.SequenceEqual(other.DisguiseDescription)
                ) && 
                (
                    OrganDonorCode == other.OrganDonorCode ||
                    OrganDonorCode != null &&
                    OrganDonorCode.SequenceEqual(other.OrganDonorCode)
                ) && 
                (
                    OrganDonor == other.OrganDonor ||
                    OrganDonor != null &&
                    OrganDonor.SequenceEqual(other.OrganDonor)
                ) && 
                (
                    EducationLevel == other.EducationLevel ||
                    EducationLevel != null &&
                    EducationLevel.SequenceEqual(other.EducationLevel)
                ) && 
                (
                    EthnicityCategoryCode == other.EthnicityCategoryCode ||
                    EthnicityCategoryCode != null &&
                    EthnicityCategoryCode.SequenceEqual(other.EthnicityCategoryCode)
                ) && 
                (
                    EthnicityCode == other.EthnicityCode ||
                    EthnicityCode != null &&
                    EthnicityCode.SequenceEqual(other.EthnicityCode)
                ) && 
                (
                    EthnicityRapSheetCode == other.EthnicityRapSheetCode ||
                    EthnicityRapSheetCode != null &&
                    EthnicityRapSheetCode.SequenceEqual(other.EthnicityRapSheetCode)
                ) && 
                (
                    Ethnicity == other.Ethnicity ||
                    Ethnicity != null &&
                    Ethnicity.SequenceEqual(other.Ethnicity)
                ) && 
                (
                    EyeColorCode == other.EyeColorCode ||
                    EyeColorCode != null &&
                    EyeColorCode.SequenceEqual(other.EyeColorCode)
                ) && 
                (
                    EyeColorRapSheetCode == other.EyeColorRapSheetCode ||
                    EyeColorRapSheetCode != null &&
                    EyeColorRapSheetCode.SequenceEqual(other.EyeColorRapSheetCode)
                ) && 
                (
                    EyeColor == other.EyeColor ||
                    EyeColor != null &&
                    EyeColor.SequenceEqual(other.EyeColor)
                ) && 
                (
                    EyewearCode == other.EyewearCode ||
                    EyewearCode != null &&
                    EyewearCode.SequenceEqual(other.EyewearCode)
                ) && 
                (
                    Eyewear == other.Eyewear ||
                    Eyewear != null &&
                    Eyewear.SequenceEqual(other.Eyewear)
                ) && 
                (
                    FacialHairCode == other.FacialHairCode ||
                    FacialHairCode != null &&
                    FacialHairCode.SequenceEqual(other.FacialHairCode)
                ) && 
                (
                    FacialHair == other.FacialHair ||
                    FacialHair != null &&
                    FacialHair.SequenceEqual(other.FacialHair)
                ) && 
                (
                    HairLengthCode == other.HairLengthCode ||
                    HairLengthCode != null &&
                    HairLengthCode.SequenceEqual(other.HairLengthCode)
                ) && 
                (
                    HairLength == other.HairLength ||
                    HairLength != null &&
                    HairLength.SequenceEqual(other.HairLength)
                ) && 
                (
                    HairStyleCode == other.HairStyleCode ||
                    HairStyleCode != null &&
                    HairStyleCode.SequenceEqual(other.HairStyleCode)
                ) && 
                (
                    HairStyle == other.HairStyle ||
                    HairStyle != null &&
                    HairStyle.SequenceEqual(other.HairStyle)
                ) && 
                (
                    GeneralAppearanceDescription == other.GeneralAppearanceDescription ||
                    GeneralAppearanceDescription != null &&
                    GeneralAppearanceDescription.SequenceEqual(other.GeneralAppearanceDescription)
                ) && 
                (
                    HairAppearance == other.HairAppearance ||
                    HairAppearance != null &&
                    HairAppearance.SequenceEqual(other.HairAppearance)
                ) && 
                (
                    HairCategory == other.HairCategory ||
                    HairCategory != null &&
                    HairCategory.SequenceEqual(other.HairCategory)
                ) && 
                (
                    HairColorCode == other.HairColorCode ||
                    HairColorCode != null &&
                    HairColorCode.SequenceEqual(other.HairColorCode)
                ) && 
                (
                    HairColorRapSheetCode == other.HairColorRapSheetCode ||
                    HairColorRapSheetCode != null &&
                    HairColorRapSheetCode.SequenceEqual(other.HairColorRapSheetCode)
                ) && 
                (
                    HairColor == other.HairColor ||
                    HairColor != null &&
                    HairColor.SequenceEqual(other.HairColor)
                ) && 
                (
                    Handedness == other.Handedness ||
                    Handedness != null &&
                    Handedness.SequenceEqual(other.Handedness)
                ) && 
                (
                    HeightDescription == other.HeightDescription ||
                    HeightDescription != null &&
                    HeightDescription.SequenceEqual(other.HeightDescription)
                ) && 
                (
                    HeightMeasure == other.HeightMeasure ||
                    HeightMeasure != null &&
                    HeightMeasure.SequenceEqual(other.HeightMeasure)
                ) && 
                (
                    HumanResourceIdentification == other.HumanResourceIdentification ||
                    HumanResourceIdentification != null &&
                    HumanResourceIdentification.SequenceEqual(other.HumanResourceIdentification)
                ) && 
                (
                    Injury == other.Injury ||
                    Injury != null &&
                    Injury.SequenceEqual(other.Injury)
                ) && 
                (
                    JewelryDescription == other.JewelryDescription ||
                    JewelryDescription != null &&
                    JewelryDescription.SequenceEqual(other.JewelryDescription)
                ) && 
                (
                    IsLanguageEnglish == other.IsLanguageEnglish ||
                    IsLanguageEnglish != null &&
                    IsLanguageEnglish.SequenceEqual(other.IsLanguageEnglish)
                ) && 
                (
                    LearningDisability == other.LearningDisability ||
                    LearningDisability != null &&
                    LearningDisability.SequenceEqual(other.LearningDisability)
                ) && 
                (
                    LicenseIdentification == other.LicenseIdentification ||
                    LicenseIdentification != null &&
                    LicenseIdentification.SequenceEqual(other.LicenseIdentification)
                ) && 
                (
                    IsLiving == other.IsLiving ||
                    IsLiving != null &&
                    IsLiving.SequenceEqual(other.IsLiving)
                ) && 
                (
                    MedicalCondition == other.MedicalCondition ||
                    MedicalCondition != null &&
                    MedicalCondition.SequenceEqual(other.MedicalCondition)
                ) && 
                (
                    MedicalDescription == other.MedicalDescription ||
                    MedicalDescription != null &&
                    MedicalDescription.SequenceEqual(other.MedicalDescription)
                ) && 
                (
                    IsMedicalFile == other.IsMedicalFile ||
                    IsMedicalFile != null &&
                    IsMedicalFile.SequenceEqual(other.IsMedicalFile)
                ) && 
                (
                    MedicationRequired == other.MedicationRequired ||
                    MedicationRequired != null &&
                    MedicationRequired.SequenceEqual(other.MedicationRequired)
                ) && 
                (
                    MentalState == other.MentalState ||
                    MentalState != null &&
                    MentalState.SequenceEqual(other.MentalState)
                ) && 
                (
                    MilitarySummary == other.MilitarySummary ||
                    MilitarySummary != null &&
                    MilitarySummary.SequenceEqual(other.MilitarySummary)
                ) && 
                (
                    MoodDescription == other.MoodDescription ||
                    MoodDescription != null &&
                    MoodDescription.SequenceEqual(other.MoodDescription)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    NationalIdentification == other.NationalIdentification ||
                    NationalIdentification != null &&
                    NationalIdentification.SequenceEqual(other.NationalIdentification)
                ) && 
                (
                    IsOrganDonator == other.IsOrganDonator ||
                    IsOrganDonator != null &&
                    IsOrganDonator.SequenceEqual(other.IsOrganDonator)
                ) && 
                (
                    OtherIdentification == other.OtherIdentification ||
                    OtherIdentification != null &&
                    OtherIdentification.SequenceEqual(other.OtherIdentification)
                ) && 
                (
                    PassportIdentification == other.PassportIdentification ||
                    PassportIdentification != null &&
                    PassportIdentification.SequenceEqual(other.PassportIdentification)
                ) && 
                (
                    PhysicalDisability == other.PhysicalDisability ||
                    PhysicalDisability != null &&
                    PhysicalDisability.SequenceEqual(other.PhysicalDisability)
                ) && 
                (
                    PhysicalFeature == other.PhysicalFeature ||
                    PhysicalFeature != null &&
                    PhysicalFeature.SequenceEqual(other.PhysicalFeature)
                ) && 
                (
                    PrimaryLanguage == other.PrimaryLanguage ||
                    PrimaryLanguage != null &&
                    PrimaryLanguage.SequenceEqual(other.PrimaryLanguage)
                ) && 
                (
                    RaceCode == other.RaceCode ||
                    RaceCode != null &&
                    RaceCode.SequenceEqual(other.RaceCode)
                ) && 
                (
                    RaceNdExCode == other.RaceNdExCode ||
                    RaceNdExCode != null &&
                    RaceNdExCode.SequenceEqual(other.RaceNdExCode)
                ) && 
                (
                    RaceRapSheetCode == other.RaceRapSheetCode ||
                    RaceRapSheetCode != null &&
                    RaceRapSheetCode.SequenceEqual(other.RaceRapSheetCode)
                ) && 
                (
                    Race == other.Race ||
                    Race != null &&
                    Race.SequenceEqual(other.Race)
                ) && 
                (
                    ReligionCode == other.ReligionCode ||
                    ReligionCode != null &&
                    ReligionCode.SequenceEqual(other.ReligionCode)
                ) && 
                (
                    Religion == other.Religion ||
                    Religion != null &&
                    Religion.SequenceEqual(other.Religion)
                ) && 
                (
                    ResidentCode == other.ResidentCode ||
                    ResidentCode != null &&
                    ResidentCode.SequenceEqual(other.ResidentCode)
                ) && 
                (
                    Resident == other.Resident ||
                    Resident != null &&
                    Resident.SequenceEqual(other.Resident)
                ) && 
                (
                    SecondaryLanguage == other.SecondaryLanguage ||
                    SecondaryLanguage != null &&
                    SecondaryLanguage.SequenceEqual(other.SecondaryLanguage)
                ) && 
                (
                    SecurityClearance == other.SecurityClearance ||
                    SecurityClearance != null &&
                    SecurityClearance.SequenceEqual(other.SecurityClearance)
                ) && 
                (
                    SexCode == other.SexCode ||
                    SexCode != null &&
                    SexCode.SequenceEqual(other.SexCode)
                ) && 
                (
                    SexNdExCode == other.SexNdExCode ||
                    SexNdExCode != null &&
                    SexNdExCode.SequenceEqual(other.SexNdExCode)
                ) && 
                (
                    SexRapSheetCode == other.SexRapSheetCode ||
                    SexRapSheetCode != null &&
                    SexRapSheetCode.SequenceEqual(other.SexRapSheetCode)
                ) && 
                (
                    Sex == other.Sex ||
                    Sex != null &&
                    Sex.SequenceEqual(other.Sex)
                ) && 
                (
                    SexualOrientation == other.SexualOrientation ||
                    SexualOrientation != null &&
                    SexualOrientation.SequenceEqual(other.SexualOrientation)
                ) && 
                (
                    SkinToneCode == other.SkinToneCode ||
                    SkinToneCode != null &&
                    SkinToneCode.SequenceEqual(other.SkinToneCode)
                ) && 
                (
                    SkinToneRapSheetCode == other.SkinToneRapSheetCode ||
                    SkinToneRapSheetCode != null &&
                    SkinToneRapSheetCode.SequenceEqual(other.SkinToneRapSheetCode)
                ) && 
                (
                    SkinTone == other.SkinTone ||
                    SkinTone != null &&
                    SkinTone.SequenceEqual(other.SkinTone)
                ) && 
                (
                    SpeechDescription == other.SpeechDescription ||
                    SpeechDescription != null &&
                    SpeechDescription.SequenceEqual(other.SpeechDescription)
                ) && 
                (
                    SsnIdentification == other.SsnIdentification ||
                    SsnIdentification != null &&
                    SsnIdentification.SequenceEqual(other.SsnIdentification)
                ) && 
                (
                    StateIdentification == other.StateIdentification ||
                    StateIdentification != null &&
                    StateIdentification.SequenceEqual(other.StateIdentification)
                ) && 
                (
                    TaxIdentification == other.TaxIdentification ||
                    TaxIdentification != null &&
                    TaxIdentification.SequenceEqual(other.TaxIdentification)
                ) && 
                (
                    MaritalStatusCode == other.MaritalStatusCode ||
                    MaritalStatusCode != null &&
                    MaritalStatusCode.SequenceEqual(other.MaritalStatusCode)
                ) && 
                (
                    UnionStatusCode == other.UnionStatusCode ||
                    UnionStatusCode != null &&
                    UnionStatusCode.SequenceEqual(other.UnionStatusCode)
                ) && 
                (
                    UnionStatus == other.UnionStatus ||
                    UnionStatus != null &&
                    UnionStatus.SequenceEqual(other.UnionStatus)
                ) && 
                (
                    IsUsCitizen == other.IsUsCitizen ||
                    IsUsCitizen != null &&
                    IsUsCitizen.SequenceEqual(other.IsUsCitizen)
                ) && 
                (
                    VisionPrescription == other.VisionPrescription ||
                    VisionPrescription != null &&
                    VisionPrescription.SequenceEqual(other.VisionPrescription)
                ) && 
                (
                    WeightDescription == other.WeightDescription ||
                    WeightDescription != null &&
                    WeightDescription.SequenceEqual(other.WeightDescription)
                ) && 
                (
                    WeightMeasure == other.WeightMeasure ||
                    WeightMeasure != null &&
                    WeightMeasure.SequenceEqual(other.WeightMeasure)
                ) && 
                (
                    XRayImage == other.XRayImage ||
                    XRayImage != null &&
                    XRayImage.SequenceEqual(other.XRayImage)
                ) && 
                (
                    NationalityAnsiD20Code == other.NationalityAnsiD20Code ||
                    NationalityAnsiD20Code != null &&
                    NationalityAnsiD20Code.SequenceEqual(other.NationalityAnsiD20Code)
                ) && 
                (
                    NationalityIso3166Alpha2Code == other.NationalityIso3166Alpha2Code ||
                    NationalityIso3166Alpha2Code != null &&
                    NationalityIso3166Alpha2Code.SequenceEqual(other.NationalityIso3166Alpha2Code)
                ) && 
                (
                    Nationality == other.Nationality ||
                    Nationality != null &&
                    Nationality.SequenceEqual(other.Nationality)
                ) && 
                (
                    EmploymentContactInformation == other.EmploymentContactInformation ||
                    EmploymentContactInformation != null &&
                    EmploymentContactInformation.SequenceEqual(other.EmploymentContactInformation)
                ) && 
                (
                    EmergencyContactInformation == other.EmergencyContactInformation ||
                    EmergencyContactInformation != null &&
                    EmergencyContactInformation.SequenceEqual(other.EmergencyContactInformation)
                ) && 
                (
                    HomeContactInformation == other.HomeContactInformation ||
                    HomeContactInformation != null &&
                    HomeContactInformation.SequenceEqual(other.HomeContactInformation)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    ImAugmentation == other.ImAugmentation ||
                    ImAugmentation != null &&
                    ImAugmentation.SequenceEqual(other.ImAugmentation)
                ) && 
                (
                    IntelAugmentation == other.IntelAugmentation ||
                    IntelAugmentation != null &&
                    IntelAugmentation.SequenceEqual(other.IntelAugmentation)
                ) && 
                (
                    ItAugmentation == other.ItAugmentation ||
                    ItAugmentation != null &&
                    ItAugmentation.SequenceEqual(other.ItAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    MAugmentation == other.MAugmentation ||
                    MAugmentation != null &&
                    MAugmentation.SequenceEqual(other.MAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Accent != null)
                    hashCode = hashCode * 59 + Accent.GetHashCode();
                    if (AgeDescription != null)
                    hashCode = hashCode * 59 + AgeDescription.GetHashCode();
                    if (AgeMeasure != null)
                    hashCode = hashCode * 59 + AgeMeasure.GetHashCode();
                    if (BirthDate != null)
                    hashCode = hashCode * 59 + BirthDate.GetHashCode();
                    if (BirthLocation != null)
                    hashCode = hashCode * 59 + BirthLocation.GetHashCode();
                    if (BloodTypeCode != null)
                    hashCode = hashCode * 59 + BloodTypeCode.GetHashCode();
                    if (BloodTypeRapSheetCode != null)
                    hashCode = hashCode * 59 + BloodTypeRapSheetCode.GetHashCode();
                    if (BloodType != null)
                    hashCode = hashCode * 59 + BloodType.GetHashCode();
                    if (BodyXRaysAvailableCode != null)
                    hashCode = hashCode * 59 + BodyXRaysAvailableCode.GetHashCode();
                    if (BodyXRaysAvailable != null)
                    hashCode = hashCode * 59 + BodyXRaysAvailable.GetHashCode();
                    if (BuildCode != null)
                    hashCode = hashCode * 59 + BuildCode.GetHashCode();
                    if (Build != null)
                    hashCode = hashCode * 59 + Build.GetHashCode();
                    if (Capability != null)
                    hashCode = hashCode * 59 + Capability.GetHashCode();
                    if (IsCircumcision != null)
                    hashCode = hashCode * 59 + IsCircumcision.GetHashCode();
                    if (CitizenshipIso3166Alpha2Code != null)
                    hashCode = hashCode * 59 + CitizenshipIso3166Alpha2Code.GetHashCode();
                    if (Citizenship != null)
                    hashCode = hashCode * 59 + Citizenship.GetHashCode();
                    if (Complexion != null)
                    hashCode = hashCode * 59 + Complexion.GetHashCode();
                    if (DeathDate != null)
                    hashCode = hashCode * 59 + DeathDate.GetHashCode();
                    if (DependentQuantity != null)
                    hashCode = hashCode * 59 + DependentQuantity.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DigitalImage != null)
                    hashCode = hashCode * 59 + DigitalImage.GetHashCode();
                    if (DigitizedSignatureImage != null)
                    hashCode = hashCode * 59 + DigitizedSignatureImage.GetHashCode();
                    if (DisguiseDescription != null)
                    hashCode = hashCode * 59 + DisguiseDescription.GetHashCode();
                    if (OrganDonorCode != null)
                    hashCode = hashCode * 59 + OrganDonorCode.GetHashCode();
                    if (OrganDonor != null)
                    hashCode = hashCode * 59 + OrganDonor.GetHashCode();
                    if (EducationLevel != null)
                    hashCode = hashCode * 59 + EducationLevel.GetHashCode();
                    if (EthnicityCategoryCode != null)
                    hashCode = hashCode * 59 + EthnicityCategoryCode.GetHashCode();
                    if (EthnicityCode != null)
                    hashCode = hashCode * 59 + EthnicityCode.GetHashCode();
                    if (EthnicityRapSheetCode != null)
                    hashCode = hashCode * 59 + EthnicityRapSheetCode.GetHashCode();
                    if (Ethnicity != null)
                    hashCode = hashCode * 59 + Ethnicity.GetHashCode();
                    if (EyeColorCode != null)
                    hashCode = hashCode * 59 + EyeColorCode.GetHashCode();
                    if (EyeColorRapSheetCode != null)
                    hashCode = hashCode * 59 + EyeColorRapSheetCode.GetHashCode();
                    if (EyeColor != null)
                    hashCode = hashCode * 59 + EyeColor.GetHashCode();
                    if (EyewearCode != null)
                    hashCode = hashCode * 59 + EyewearCode.GetHashCode();
                    if (Eyewear != null)
                    hashCode = hashCode * 59 + Eyewear.GetHashCode();
                    if (FacialHairCode != null)
                    hashCode = hashCode * 59 + FacialHairCode.GetHashCode();
                    if (FacialHair != null)
                    hashCode = hashCode * 59 + FacialHair.GetHashCode();
                    if (HairLengthCode != null)
                    hashCode = hashCode * 59 + HairLengthCode.GetHashCode();
                    if (HairLength != null)
                    hashCode = hashCode * 59 + HairLength.GetHashCode();
                    if (HairStyleCode != null)
                    hashCode = hashCode * 59 + HairStyleCode.GetHashCode();
                    if (HairStyle != null)
                    hashCode = hashCode * 59 + HairStyle.GetHashCode();
                    if (GeneralAppearanceDescription != null)
                    hashCode = hashCode * 59 + GeneralAppearanceDescription.GetHashCode();
                    if (HairAppearance != null)
                    hashCode = hashCode * 59 + HairAppearance.GetHashCode();
                    if (HairCategory != null)
                    hashCode = hashCode * 59 + HairCategory.GetHashCode();
                    if (HairColorCode != null)
                    hashCode = hashCode * 59 + HairColorCode.GetHashCode();
                    if (HairColorRapSheetCode != null)
                    hashCode = hashCode * 59 + HairColorRapSheetCode.GetHashCode();
                    if (HairColor != null)
                    hashCode = hashCode * 59 + HairColor.GetHashCode();
                    if (Handedness != null)
                    hashCode = hashCode * 59 + Handedness.GetHashCode();
                    if (HeightDescription != null)
                    hashCode = hashCode * 59 + HeightDescription.GetHashCode();
                    if (HeightMeasure != null)
                    hashCode = hashCode * 59 + HeightMeasure.GetHashCode();
                    if (HumanResourceIdentification != null)
                    hashCode = hashCode * 59 + HumanResourceIdentification.GetHashCode();
                    if (Injury != null)
                    hashCode = hashCode * 59 + Injury.GetHashCode();
                    if (JewelryDescription != null)
                    hashCode = hashCode * 59 + JewelryDescription.GetHashCode();
                    if (IsLanguageEnglish != null)
                    hashCode = hashCode * 59 + IsLanguageEnglish.GetHashCode();
                    if (LearningDisability != null)
                    hashCode = hashCode * 59 + LearningDisability.GetHashCode();
                    if (LicenseIdentification != null)
                    hashCode = hashCode * 59 + LicenseIdentification.GetHashCode();
                    if (IsLiving != null)
                    hashCode = hashCode * 59 + IsLiving.GetHashCode();
                    if (MedicalCondition != null)
                    hashCode = hashCode * 59 + MedicalCondition.GetHashCode();
                    if (MedicalDescription != null)
                    hashCode = hashCode * 59 + MedicalDescription.GetHashCode();
                    if (IsMedicalFile != null)
                    hashCode = hashCode * 59 + IsMedicalFile.GetHashCode();
                    if (MedicationRequired != null)
                    hashCode = hashCode * 59 + MedicationRequired.GetHashCode();
                    if (MentalState != null)
                    hashCode = hashCode * 59 + MentalState.GetHashCode();
                    if (MilitarySummary != null)
                    hashCode = hashCode * 59 + MilitarySummary.GetHashCode();
                    if (MoodDescription != null)
                    hashCode = hashCode * 59 + MoodDescription.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (NationalIdentification != null)
                    hashCode = hashCode * 59 + NationalIdentification.GetHashCode();
                    if (IsOrganDonator != null)
                    hashCode = hashCode * 59 + IsOrganDonator.GetHashCode();
                    if (OtherIdentification != null)
                    hashCode = hashCode * 59 + OtherIdentification.GetHashCode();
                    if (PassportIdentification != null)
                    hashCode = hashCode * 59 + PassportIdentification.GetHashCode();
                    if (PhysicalDisability != null)
                    hashCode = hashCode * 59 + PhysicalDisability.GetHashCode();
                    if (PhysicalFeature != null)
                    hashCode = hashCode * 59 + PhysicalFeature.GetHashCode();
                    if (PrimaryLanguage != null)
                    hashCode = hashCode * 59 + PrimaryLanguage.GetHashCode();
                    if (RaceCode != null)
                    hashCode = hashCode * 59 + RaceCode.GetHashCode();
                    if (RaceNdExCode != null)
                    hashCode = hashCode * 59 + RaceNdExCode.GetHashCode();
                    if (RaceRapSheetCode != null)
                    hashCode = hashCode * 59 + RaceRapSheetCode.GetHashCode();
                    if (Race != null)
                    hashCode = hashCode * 59 + Race.GetHashCode();
                    if (ReligionCode != null)
                    hashCode = hashCode * 59 + ReligionCode.GetHashCode();
                    if (Religion != null)
                    hashCode = hashCode * 59 + Religion.GetHashCode();
                    if (ResidentCode != null)
                    hashCode = hashCode * 59 + ResidentCode.GetHashCode();
                    if (Resident != null)
                    hashCode = hashCode * 59 + Resident.GetHashCode();
                    if (SecondaryLanguage != null)
                    hashCode = hashCode * 59 + SecondaryLanguage.GetHashCode();
                    if (SecurityClearance != null)
                    hashCode = hashCode * 59 + SecurityClearance.GetHashCode();
                    if (SexCode != null)
                    hashCode = hashCode * 59 + SexCode.GetHashCode();
                    if (SexNdExCode != null)
                    hashCode = hashCode * 59 + SexNdExCode.GetHashCode();
                    if (SexRapSheetCode != null)
                    hashCode = hashCode * 59 + SexRapSheetCode.GetHashCode();
                    if (Sex != null)
                    hashCode = hashCode * 59 + Sex.GetHashCode();
                    if (SexualOrientation != null)
                    hashCode = hashCode * 59 + SexualOrientation.GetHashCode();
                    if (SkinToneCode != null)
                    hashCode = hashCode * 59 + SkinToneCode.GetHashCode();
                    if (SkinToneRapSheetCode != null)
                    hashCode = hashCode * 59 + SkinToneRapSheetCode.GetHashCode();
                    if (SkinTone != null)
                    hashCode = hashCode * 59 + SkinTone.GetHashCode();
                    if (SpeechDescription != null)
                    hashCode = hashCode * 59 + SpeechDescription.GetHashCode();
                    if (SsnIdentification != null)
                    hashCode = hashCode * 59 + SsnIdentification.GetHashCode();
                    if (StateIdentification != null)
                    hashCode = hashCode * 59 + StateIdentification.GetHashCode();
                    if (TaxIdentification != null)
                    hashCode = hashCode * 59 + TaxIdentification.GetHashCode();
                    if (MaritalStatusCode != null)
                    hashCode = hashCode * 59 + MaritalStatusCode.GetHashCode();
                    if (UnionStatusCode != null)
                    hashCode = hashCode * 59 + UnionStatusCode.GetHashCode();
                    if (UnionStatus != null)
                    hashCode = hashCode * 59 + UnionStatus.GetHashCode();
                    if (IsUsCitizen != null)
                    hashCode = hashCode * 59 + IsUsCitizen.GetHashCode();
                    if (VisionPrescription != null)
                    hashCode = hashCode * 59 + VisionPrescription.GetHashCode();
                    if (WeightDescription != null)
                    hashCode = hashCode * 59 + WeightDescription.GetHashCode();
                    if (WeightMeasure != null)
                    hashCode = hashCode * 59 + WeightMeasure.GetHashCode();
                    if (XRayImage != null)
                    hashCode = hashCode * 59 + XRayImage.GetHashCode();
                    if (NationalityAnsiD20Code != null)
                    hashCode = hashCode * 59 + NationalityAnsiD20Code.GetHashCode();
                    if (NationalityIso3166Alpha2Code != null)
                    hashCode = hashCode * 59 + NationalityIso3166Alpha2Code.GetHashCode();
                    if (Nationality != null)
                    hashCode = hashCode * 59 + Nationality.GetHashCode();
                    if (EmploymentContactInformation != null)
                    hashCode = hashCode * 59 + EmploymentContactInformation.GetHashCode();
                    if (EmergencyContactInformation != null)
                    hashCode = hashCode * 59 + EmergencyContactInformation.GetHashCode();
                    if (HomeContactInformation != null)
                    hashCode = hashCode * 59 + HomeContactInformation.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (ImAugmentation != null)
                    hashCode = hashCode * 59 + ImAugmentation.GetHashCode();
                    if (IntelAugmentation != null)
                    hashCode = hashCode * 59 + IntelAugmentation.GetHashCode();
                    if (ItAugmentation != null)
                    hashCode = hashCode * 59 + ItAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (MAugmentation != null)
                    hashCode = hashCode * 59 + MAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonType left, NcPersonType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonType left, NcPersonType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
