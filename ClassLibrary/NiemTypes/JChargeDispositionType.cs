/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the results or processing of a charge.
    /// </summary>
    [DataContract]
    public partial class JChargeDispositionType : NcDispositionType, IEquatable<JChargeDispositionType>
    { 
        /// <summary>
        /// A requirement which, when met, represents compliance with a pre-disposition condition. NIEM reference is j:ChargeDispositionCondition
        /// </summary>
        /// <value>A requirement which, when met, represents compliance with a pre-disposition condition. NIEM reference is j:ChargeDispositionCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// An additional set of information beyond or separate from the outcome of a charge, such as the processing of a charge. NIEM reference is j:ChargeDispositionOtherText
        /// </summary>
        /// <value>An additional set of information beyond or separate from the outcome of a charge, such as the processing of a charge. NIEM reference is j:ChargeDispositionOtherText</value>

        [DataMember(Name="other")]
        public List<NcTextType> Other { get; set; }

        /// <summary>
        /// A penalty ordered for a subject by a judge or a supervising agency as a result of a disposition of a charge. NIEM reference is j:ChargeDispositionSanction
        /// </summary>
        /// <value>A penalty ordered for a subject by a judge or a supervising agency as a result of a disposition of a charge. NIEM reference is j:ChargeDispositionSanction</value>

        [DataMember(Name="sanction")]
        public List<JSanctionType> Sanction { get; set; }

        /// <summary>
        /// jChargeDispositionType JSON-LD context
        /// </summary>
        /// <value>jChargeDispositionType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjChargeDispositionTypeContextJsonldEnum for ../JSON-LD_Contexts/jChargeDispositionTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jChargeDispositionTypeContext.jsonld")]
            JSONLDContextsjChargeDispositionTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jChargeDispositionType JSON-LD context
        /// </summary>
        /// <value>jChargeDispositionType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JChargeDispositionType {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Other: ").Append(Other).Append("\n");
            sb.Append("  Sanction: ").Append(Sanction).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JChargeDispositionType)obj);
        }

        /// <summary>
        /// Returns true if JChargeDispositionType instances are equal
        /// </summary>
        /// <param name="other">Instance of JChargeDispositionType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JChargeDispositionType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    Other == other.Other ||
                    Other != null &&
                    Other.SequenceEqual(other.Other)
                ) && 
                (
                    Sanction == other.Sanction ||
                    Sanction != null &&
                    Sanction.SequenceEqual(other.Sanction)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (Other != null)
                    hashCode = hashCode * 59 + Other.GetHashCode();
                    if (Sanction != null)
                    hashCode = hashCode * 59 + Sanction.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JChargeDispositionType left, JChargeDispositionType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JChargeDispositionType left, JChargeDispositionType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
