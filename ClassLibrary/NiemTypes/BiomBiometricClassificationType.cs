/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the classification of the kind of the Biometric information in the message.
    /// </summary>
    [DataContract]
    public partial class BiomBiometricClassificationType : IEquatable<BiomBiometricClassificationType>
    { 
        /// <summary>
        /// A kind of biometric. NIEM reference is biom:BiometricClassificationCategoryCode
        /// </summary>
        /// <value>A kind of biometric. NIEM reference is biom:BiometricClassificationCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomBiometricCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A description of a kind of biometric. NIEM reference is biom:BiometricClassificationCategoryDescriptionText
        /// </summary>
        /// <value>A description of a kind of biometric. NIEM reference is biom:BiometricClassificationCategoryDescriptionText</value>

        [DataMember(Name="categoryDescription")]
        public List<NcTextType> CategoryDescription { get; set; }

        /// <summary>
        /// biomBiometricClassificationType JSON-LD context
        /// </summary>
        /// <value>biomBiometricClassificationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomBiometricClassificationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomBiometricClassificationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomBiometricClassificationTypeContext.jsonld")]
            JSONLDContextsbiomBiometricClassificationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomBiometricClassificationType JSON-LD context
        /// </summary>
        /// <value>biomBiometricClassificationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomBiometricClassificationType {\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  CategoryDescription: ").Append(CategoryDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomBiometricClassificationType)obj);
        }

        /// <summary>
        /// Returns true if BiomBiometricClassificationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomBiometricClassificationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomBiometricClassificationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    CategoryDescription == other.CategoryDescription ||
                    CategoryDescription != null &&
                    CategoryDescription.SequenceEqual(other.CategoryDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (CategoryDescription != null)
                    hashCode = hashCode * 59 + CategoryDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomBiometricClassificationType left, BiomBiometricClassificationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomBiometricClassificationType left, BiomBiometricClassificationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
