/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a specific subject course offered thru and educational program or institution.
    /// </summary>
    [DataContract]
    public partial class JEducationCourseType : IEquatable<JEducationCourseType>
    { 
        /// <summary>
        /// A date the subject commenced the educational course. NIEM reference is j:EducationCourseEntryDate
        /// </summary>
        /// <value>A date the subject commenced the educational course. NIEM reference is j:EducationCourseEntryDate</value>

        [DataMember(Name="entryDate")]
        public List<NcDateType> EntryDate { get; set; }

        /// <summary>
        /// A name of an educational course. NIEM reference is j:EducationCourseName
        /// </summary>
        /// <value>A name of an educational course. NIEM reference is j:EducationCourseName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// An explanation for the educational course being terminated. NIEM reference is j:EducationCourseTerminatedReasonText
        /// </summary>
        /// <value>An explanation for the educational course being terminated. NIEM reference is j:EducationCourseTerminatedReasonText</value>

        [DataMember(Name="terminatedReason")]
        public List<NcTextType> TerminatedReason { get; set; }

        /// <summary>
        /// A date when a subject enrolled for an educational course. NIEM reference is j:EducationCourseEnrollmentDate
        /// </summary>
        /// <value>A date when a subject enrolled for an educational course. NIEM reference is j:EducationCourseEnrollmentDate</value>

        [DataMember(Name="enrollmentDate")]
        public List<NcDateType> EnrollmentDate { get; set; }

        /// <summary>
        /// An identifier for the details about an educational course. NIEM reference is j:EducationCourseMetadataRepositoryID
        /// </summary>
        /// <value>An identifier for the details about an educational course. NIEM reference is j:EducationCourseMetadataRepositoryID</value>

        [DataMember(Name="metadataRepositoryId")]
        public List<NiemXsstring> MetadataRepositoryId { get; set; }

        /// <summary>
        /// A number of units previously completed toward an educational course. NIEM reference is j:EducationCoursePriorUnitsCompletedQuantity
        /// </summary>
        /// <value>A number of units previously completed toward an educational course. NIEM reference is j:EducationCoursePriorUnitsCompletedQuantity</value>

        [DataMember(Name="priorUnitsCompletedQuantity")]
        public List<NcQuantityType> PriorUnitsCompletedQuantity { get; set; }

        /// <summary>
        /// A grade awarded as the result of a completed educational course. NIEM reference is j:EducationCourseEarnedGradeText
        /// </summary>
        /// <value>A grade awarded as the result of a completed educational course. NIEM reference is j:EducationCourseEarnedGradeText</value>

        [DataMember(Name="earnedGrade")]
        public List<NcTextType> EarnedGrade { get; set; }

        /// <summary>
        /// A date of termination for an educational course. NIEM reference is j:EducationCourseTerminatedDate
        /// </summary>
        /// <value>A date of termination for an educational course. NIEM reference is j:EducationCourseTerminatedDate</value>

        [DataMember(Name="terminatedDate")]
        public List<NcDateType> TerminatedDate { get; set; }

        /// <summary>
        /// A total number of educational course units completed by a subject. NIEM reference is j:EducationCourseUnitsCompletedQuantity
        /// </summary>
        /// <value>A total number of educational course units completed by a subject. NIEM reference is j:EducationCourseUnitsCompletedQuantity</value>

        [DataMember(Name="unitsCompletedQuantity")]
        public List<NcQuantityType> UnitsCompletedQuantity { get; set; }

        /// <summary>
        /// A number of an educational course indicating the sequence in a series of courses. NIEM reference is j:EducationCourseSequenceNumeric
        /// </summary>
        /// <value>A number of an educational course indicating the sequence in a series of courses. NIEM reference is j:EducationCourseSequenceNumeric</value>

        [DataMember(Name="sequenceNumeric")]
        public List<NcNumericType> SequenceNumeric { get; set; }

        /// <summary>
        /// A description of an educational course. NIEM reference is j:EducationCourseDescriptionText
        /// </summary>
        /// <value>A description of an educational course. NIEM reference is j:EducationCourseDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A comment related to an educational course. NIEM reference is j:EducationCourseComment
        /// </summary>
        /// <value>A comment related to an educational course. NIEM reference is j:EducationCourseComment</value>

        [DataMember(Name="comment")]
        public List<NcCommentType> Comment { get; set; }

        /// <summary>
        /// A comment specific to gender qualifiers for a specific educational course. NIEM reference is j:EducationCourseGenderRestrictionText
        /// </summary>
        /// <value>A comment specific to gender qualifiers for a specific educational course. NIEM reference is j:EducationCourseGenderRestrictionText</value>

        [DataMember(Name="genderRestriction")]
        public List<NcTextType> GenderRestriction { get; set; }

        /// <summary>
        /// An event or process related to an educational course. NIEM reference is j:EducationCourseActivity
        /// </summary>
        /// <value>An event or process related to an educational course. NIEM reference is j:EducationCourseActivity</value>

        [DataMember(Name="activity")]
        public List<NcActivityType> Activity { get; set; }

        /// <summary>
        /// A kind of measure for the intensity and level of need provided by an educational course. NIEM reference is j:EducationCourseLevelOfNeedIntensityText
        /// </summary>
        /// <value>A kind of measure for the intensity and level of need provided by an educational course. NIEM reference is j:EducationCourseLevelOfNeedIntensityText</value>

        [DataMember(Name="levelOfNeedIntensity")]
        public List<NcTextType> LevelOfNeedIntensity { get; set; }

        /// <summary>
        /// A title for an educational course. NIEM reference is j:EducationCourseTitleText
        /// </summary>
        /// <value>A title for an educational course. NIEM reference is j:EducationCourseTitleText</value>

        [DataMember(Name="title")]
        public List<NcTextType> Title { get; set; }

        /// <summary>
        /// jEducationCourseType JSON-LD context
        /// </summary>
        /// <value>jEducationCourseType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjEducationCourseTypeContextJsonldEnum for ../JSON-LD_Contexts/jEducationCourseTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jEducationCourseTypeContext.jsonld")]
            JSONLDContextsjEducationCourseTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jEducationCourseType JSON-LD context
        /// </summary>
        /// <value>jEducationCourseType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JEducationCourseType {\n");
            sb.Append("  EntryDate: ").Append(EntryDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TerminatedReason: ").Append(TerminatedReason).Append("\n");
            sb.Append("  EnrollmentDate: ").Append(EnrollmentDate).Append("\n");
            sb.Append("  MetadataRepositoryId: ").Append(MetadataRepositoryId).Append("\n");
            sb.Append("  PriorUnitsCompletedQuantity: ").Append(PriorUnitsCompletedQuantity).Append("\n");
            sb.Append("  EarnedGrade: ").Append(EarnedGrade).Append("\n");
            sb.Append("  TerminatedDate: ").Append(TerminatedDate).Append("\n");
            sb.Append("  UnitsCompletedQuantity: ").Append(UnitsCompletedQuantity).Append("\n");
            sb.Append("  SequenceNumeric: ").Append(SequenceNumeric).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  GenderRestriction: ").Append(GenderRestriction).Append("\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  LevelOfNeedIntensity: ").Append(LevelOfNeedIntensity).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JEducationCourseType)obj);
        }

        /// <summary>
        /// Returns true if JEducationCourseType instances are equal
        /// </summary>
        /// <param name="other">Instance of JEducationCourseType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JEducationCourseType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EntryDate == other.EntryDate ||
                    EntryDate != null &&
                    EntryDate.SequenceEqual(other.EntryDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    TerminatedReason == other.TerminatedReason ||
                    TerminatedReason != null &&
                    TerminatedReason.SequenceEqual(other.TerminatedReason)
                ) && 
                (
                    EnrollmentDate == other.EnrollmentDate ||
                    EnrollmentDate != null &&
                    EnrollmentDate.SequenceEqual(other.EnrollmentDate)
                ) && 
                (
                    MetadataRepositoryId == other.MetadataRepositoryId ||
                    MetadataRepositoryId != null &&
                    MetadataRepositoryId.SequenceEqual(other.MetadataRepositoryId)
                ) && 
                (
                    PriorUnitsCompletedQuantity == other.PriorUnitsCompletedQuantity ||
                    PriorUnitsCompletedQuantity != null &&
                    PriorUnitsCompletedQuantity.SequenceEqual(other.PriorUnitsCompletedQuantity)
                ) && 
                (
                    EarnedGrade == other.EarnedGrade ||
                    EarnedGrade != null &&
                    EarnedGrade.SequenceEqual(other.EarnedGrade)
                ) && 
                (
                    TerminatedDate == other.TerminatedDate ||
                    TerminatedDate != null &&
                    TerminatedDate.SequenceEqual(other.TerminatedDate)
                ) && 
                (
                    UnitsCompletedQuantity == other.UnitsCompletedQuantity ||
                    UnitsCompletedQuantity != null &&
                    UnitsCompletedQuantity.SequenceEqual(other.UnitsCompletedQuantity)
                ) && 
                (
                    SequenceNumeric == other.SequenceNumeric ||
                    SequenceNumeric != null &&
                    SequenceNumeric.SequenceEqual(other.SequenceNumeric)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.SequenceEqual(other.Comment)
                ) && 
                (
                    GenderRestriction == other.GenderRestriction ||
                    GenderRestriction != null &&
                    GenderRestriction.SequenceEqual(other.GenderRestriction)
                ) && 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.SequenceEqual(other.Activity)
                ) && 
                (
                    LevelOfNeedIntensity == other.LevelOfNeedIntensity ||
                    LevelOfNeedIntensity != null &&
                    LevelOfNeedIntensity.SequenceEqual(other.LevelOfNeedIntensity)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.SequenceEqual(other.Title)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EntryDate != null)
                    hashCode = hashCode * 59 + EntryDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TerminatedReason != null)
                    hashCode = hashCode * 59 + TerminatedReason.GetHashCode();
                    if (EnrollmentDate != null)
                    hashCode = hashCode * 59 + EnrollmentDate.GetHashCode();
                    if (MetadataRepositoryId != null)
                    hashCode = hashCode * 59 + MetadataRepositoryId.GetHashCode();
                    if (PriorUnitsCompletedQuantity != null)
                    hashCode = hashCode * 59 + PriorUnitsCompletedQuantity.GetHashCode();
                    if (EarnedGrade != null)
                    hashCode = hashCode * 59 + EarnedGrade.GetHashCode();
                    if (TerminatedDate != null)
                    hashCode = hashCode * 59 + TerminatedDate.GetHashCode();
                    if (UnitsCompletedQuantity != null)
                    hashCode = hashCode * 59 + UnitsCompletedQuantity.GetHashCode();
                    if (SequenceNumeric != null)
                    hashCode = hashCode * 59 + SequenceNumeric.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (GenderRestriction != null)
                    hashCode = hashCode * 59 + GenderRestriction.GetHashCode();
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (LevelOfNeedIntensity != null)
                    hashCode = hashCode * 59 + LevelOfNeedIntensity.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JEducationCourseType left, JEducationCourseType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JEducationCourseType left, JEducationCourseType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
