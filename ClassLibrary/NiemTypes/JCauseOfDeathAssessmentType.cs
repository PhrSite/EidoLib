/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an assessment process to determine factors of the cause of death.
    /// </summary>
    [DataContract]
    public partial class JCauseOfDeathAssessmentType : NcAssessmentType, IEquatable<JCauseOfDeathAssessmentType>
    { 
        /// <summary>
        /// True if a female is pregnant in the last year; false otherwise. NIEM reference is j:CauseOfDeathAssessmentFemalePregnantInLastYearIndicator
        /// </summary>
        /// <value>True if a female is pregnant in the last year; false otherwise. NIEM reference is j:CauseOfDeathAssessmentFemalePregnantInLastYearIndicator</value>

        [DataMember(Name="isFemalePregnantInLastYear")]
        public List<NiemXsboolean> IsFemalePregnantInLastYear { get; set; }

        /// <summary>
        /// A description of the cause of death. NIEM reference is j:CauseOfDeathText
        /// </summary>
        /// <value>A description of the cause of death. NIEM reference is j:CauseOfDeathText</value>

        [DataMember(Name="causeOfDeath")]
        public List<NcTextType> CauseOfDeath { get; set; }

        /// <summary>
        /// An underlying condition, injury or disease, that contributed to the death. NIEM reference is j:CauseOfDeathAssessmentUnderlyingConditionText
        /// </summary>
        /// <value>An underlying condition, injury or disease, that contributed to the death. NIEM reference is j:CauseOfDeathAssessmentUnderlyingConditionText</value>

        [DataMember(Name="underlyingCondition")]
        public List<NcTextType> UnderlyingCondition { get; set; }

        /// <summary>
        /// A list of operations performed, if any, to address any of the underlying conditions. NIEM reference is j:CauseOfDeathAssessmentOperationsPerformedText
        /// </summary>
        /// <value>A list of operations performed, if any, to address any of the underlying conditions. NIEM reference is j:CauseOfDeathAssessmentOperationsPerformedText</value>

        [DataMember(Name="operationsPerformed")]
        public List<NcTextType> OperationsPerformed { get; set; }

        /// <summary>
        /// An immediate cause of death. NIEM reference is j:CauseOfDeathAssessmentImmediateCauseText
        /// </summary>
        /// <value>An immediate cause of death. NIEM reference is j:CauseOfDeathAssessmentImmediateCauseText</value>

        [DataMember(Name="immediateCause")]
        public List<NcTextType> ImmediateCause { get; set; }

        /// <summary>
        /// An other significant conditions that could have contributed to death. NIEM reference is j:CauseOfDeathAssessmentOtherSignificantConditionsText
        /// </summary>
        /// <value>An other significant conditions that could have contributed to death. NIEM reference is j:CauseOfDeathAssessmentOtherSignificantConditionsText</value>

        [DataMember(Name="otherSignificantConditions")]
        public List<NcTextType> OtherSignificantConditions { get; set; }

        /// <summary>
        /// True if a biopsy was performed; false otherwise. NIEM reference is j:CauseOfDeathAssessmentBiopsyPerformedIndicator
        /// </summary>
        /// <value>True if a biopsy was performed; false otherwise. NIEM reference is j:CauseOfDeathAssessmentBiopsyPerformedIndicator</value>

        [DataMember(Name="isBiopsyPerformed")]
        public List<NiemXsboolean> IsBiopsyPerformed { get; set; }

        /// <summary>
        /// A time interval between the underlying cause or event and death. NIEM reference is j:CauseOfDeathAssessmentBetweenEventAndDeathDuration
        /// </summary>
        /// <value>A time interval between the underlying cause or event and death. NIEM reference is j:CauseOfDeathAssessmentBetweenEventAndDeathDuration</value>

        [DataMember(Name="betweenEventAndDeathDuration")]
        public List<NiemXsduration> BetweenEventAndDeathDuration { get; set; }

        /// <summary>
        /// True if the autopsy was used to determine the cause of death; false otherwise. NIEM reference is j:CauseOfDeathAssessmentAutopsyPerformedIndicator
        /// </summary>
        /// <value>True if the autopsy was used to determine the cause of death; false otherwise. NIEM reference is j:CauseOfDeathAssessmentAutopsyPerformedIndicator</value>

        [DataMember(Name="isAutopsyPerformed")]
        public List<NiemXsboolean> IsAutopsyPerformed { get; set; }

        /// <summary>
        /// True if cause of death was ruled a homicide; false otherwise. NIEM reference is j:CauseOfDeathHomicideIndicator
        /// </summary>
        /// <value>True if cause of death was ruled a homicide; false otherwise. NIEM reference is j:CauseOfDeathHomicideIndicator</value>

        [DataMember(Name="isCauseOfDeathHomicide")]
        public List<NiemXsboolean> IsCauseOfDeathHomicide { get; set; }

        /// <summary>
        /// True if the death was reported to the coroner; false otherwise. NIEM reference is j:CauseOfDeathAssessmentReportedToCoronerIndicator
        /// </summary>
        /// <value>True if the death was reported to the coroner; false otherwise. NIEM reference is j:CauseOfDeathAssessmentReportedToCoronerIndicator</value>

        [DataMember(Name="isReportedToCoroner")]
        public List<NiemXsboolean> IsReportedToCoroner { get; set; }

        /// <summary>
        /// jCauseOfDeathAssessmentType JSON-LD context
        /// </summary>
        /// <value>jCauseOfDeathAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjCauseOfDeathAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/jCauseOfDeathAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jCauseOfDeathAssessmentTypeContext.jsonld")]
            JSONLDContextsjCauseOfDeathAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jCauseOfDeathAssessmentType JSON-LD context
        /// </summary>
        /// <value>jCauseOfDeathAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JCauseOfDeathAssessmentType {\n");
            sb.Append("  IsFemalePregnantInLastYear: ").Append(IsFemalePregnantInLastYear).Append("\n");
            sb.Append("  CauseOfDeath: ").Append(CauseOfDeath).Append("\n");
            sb.Append("  UnderlyingCondition: ").Append(UnderlyingCondition).Append("\n");
            sb.Append("  OperationsPerformed: ").Append(OperationsPerformed).Append("\n");
            sb.Append("  ImmediateCause: ").Append(ImmediateCause).Append("\n");
            sb.Append("  OtherSignificantConditions: ").Append(OtherSignificantConditions).Append("\n");
            sb.Append("  IsBiopsyPerformed: ").Append(IsBiopsyPerformed).Append("\n");
            sb.Append("  BetweenEventAndDeathDuration: ").Append(BetweenEventAndDeathDuration).Append("\n");
            sb.Append("  IsAutopsyPerformed: ").Append(IsAutopsyPerformed).Append("\n");
            sb.Append("  IsCauseOfDeathHomicide: ").Append(IsCauseOfDeathHomicide).Append("\n");
            sb.Append("  IsReportedToCoroner: ").Append(IsReportedToCoroner).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JCauseOfDeathAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if JCauseOfDeathAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of JCauseOfDeathAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JCauseOfDeathAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsFemalePregnantInLastYear == other.IsFemalePregnantInLastYear ||
                    IsFemalePregnantInLastYear != null &&
                    IsFemalePregnantInLastYear.SequenceEqual(other.IsFemalePregnantInLastYear)
                ) && 
                (
                    CauseOfDeath == other.CauseOfDeath ||
                    CauseOfDeath != null &&
                    CauseOfDeath.SequenceEqual(other.CauseOfDeath)
                ) && 
                (
                    UnderlyingCondition == other.UnderlyingCondition ||
                    UnderlyingCondition != null &&
                    UnderlyingCondition.SequenceEqual(other.UnderlyingCondition)
                ) && 
                (
                    OperationsPerformed == other.OperationsPerformed ||
                    OperationsPerformed != null &&
                    OperationsPerformed.SequenceEqual(other.OperationsPerformed)
                ) && 
                (
                    ImmediateCause == other.ImmediateCause ||
                    ImmediateCause != null &&
                    ImmediateCause.SequenceEqual(other.ImmediateCause)
                ) && 
                (
                    OtherSignificantConditions == other.OtherSignificantConditions ||
                    OtherSignificantConditions != null &&
                    OtherSignificantConditions.SequenceEqual(other.OtherSignificantConditions)
                ) && 
                (
                    IsBiopsyPerformed == other.IsBiopsyPerformed ||
                    IsBiopsyPerformed != null &&
                    IsBiopsyPerformed.SequenceEqual(other.IsBiopsyPerformed)
                ) && 
                (
                    BetweenEventAndDeathDuration == other.BetweenEventAndDeathDuration ||
                    BetweenEventAndDeathDuration != null &&
                    BetweenEventAndDeathDuration.SequenceEqual(other.BetweenEventAndDeathDuration)
                ) && 
                (
                    IsAutopsyPerformed == other.IsAutopsyPerformed ||
                    IsAutopsyPerformed != null &&
                    IsAutopsyPerformed.SequenceEqual(other.IsAutopsyPerformed)
                ) && 
                (
                    IsCauseOfDeathHomicide == other.IsCauseOfDeathHomicide ||
                    IsCauseOfDeathHomicide != null &&
                    IsCauseOfDeathHomicide.SequenceEqual(other.IsCauseOfDeathHomicide)
                ) && 
                (
                    IsReportedToCoroner == other.IsReportedToCoroner ||
                    IsReportedToCoroner != null &&
                    IsReportedToCoroner.SequenceEqual(other.IsReportedToCoroner)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IsFemalePregnantInLastYear != null)
                    hashCode = hashCode * 59 + IsFemalePregnantInLastYear.GetHashCode();
                    if (CauseOfDeath != null)
                    hashCode = hashCode * 59 + CauseOfDeath.GetHashCode();
                    if (UnderlyingCondition != null)
                    hashCode = hashCode * 59 + UnderlyingCondition.GetHashCode();
                    if (OperationsPerformed != null)
                    hashCode = hashCode * 59 + OperationsPerformed.GetHashCode();
                    if (ImmediateCause != null)
                    hashCode = hashCode * 59 + ImmediateCause.GetHashCode();
                    if (OtherSignificantConditions != null)
                    hashCode = hashCode * 59 + OtherSignificantConditions.GetHashCode();
                    if (IsBiopsyPerformed != null)
                    hashCode = hashCode * 59 + IsBiopsyPerformed.GetHashCode();
                    if (BetweenEventAndDeathDuration != null)
                    hashCode = hashCode * 59 + BetweenEventAndDeathDuration.GetHashCode();
                    if (IsAutopsyPerformed != null)
                    hashCode = hashCode * 59 + IsAutopsyPerformed.GetHashCode();
                    if (IsCauseOfDeathHomicide != null)
                    hashCode = hashCode * 59 + IsCauseOfDeathHomicide.GetHashCode();
                    if (IsReportedToCoroner != null)
                    hashCode = hashCode * 59 + IsReportedToCoroner.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JCauseOfDeathAssessmentType left, JCauseOfDeathAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JCauseOfDeathAssessmentType left, JCauseOfDeathAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
