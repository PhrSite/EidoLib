/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a binary hash value.
    /// </summary>
    [DataContract]
    public partial class JBinaryHashValueType : IEquatable<JBinaryHashValueType>
    { 
        /// <summary>
        /// A hash value represented as a binary base64 value object. NIEM reference is j:HashValueBase64BinaryObject
        /// </summary>
        /// <value>A hash value represented as a binary base64 value object. NIEM reference is j:HashValueBase64BinaryObject</value>

        [DataMember(Name="hashValueBase64BinaryObject")]
        public List<NiemXsbase64Binary> HashValueBase64BinaryObject { get; set; }

        /// <summary>
        /// A hash value represented as text. NIEM reference is j:HashValueText
        /// </summary>
        /// <value>A hash value represented as text. NIEM reference is j:HashValueText</value>

        [DataMember(Name="hashValue")]
        public List<NcTextType> HashValue { get; set; }

        /// <summary>
        /// A method used to calculate the hash value. NIEM reference is j:HashValueMethodAlgorithmText
        /// </summary>
        /// <value>A method used to calculate the hash value. NIEM reference is j:HashValueMethodAlgorithmText</value>

        [DataMember(Name="hashValueMethodAlgorithm")]
        public List<NcTextType> HashValueMethodAlgorithm { get; set; }

        /// <summary>
        /// jBinaryHashValueType JSON-LD context
        /// </summary>
        /// <value>jBinaryHashValueType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjBinaryHashValueTypeContextJsonldEnum for ../JSON-LD_Contexts/jBinaryHashValueTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jBinaryHashValueTypeContext.jsonld")]
            JSONLDContextsjBinaryHashValueTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jBinaryHashValueType JSON-LD context
        /// </summary>
        /// <value>jBinaryHashValueType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JBinaryHashValueType {\n");
            sb.Append("  HashValueBase64BinaryObject: ").Append(HashValueBase64BinaryObject).Append("\n");
            sb.Append("  HashValue: ").Append(HashValue).Append("\n");
            sb.Append("  HashValueMethodAlgorithm: ").Append(HashValueMethodAlgorithm).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JBinaryHashValueType)obj);
        }

        /// <summary>
        /// Returns true if JBinaryHashValueType instances are equal
        /// </summary>
        /// <param name="other">Instance of JBinaryHashValueType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JBinaryHashValueType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HashValueBase64BinaryObject == other.HashValueBase64BinaryObject ||
                    HashValueBase64BinaryObject != null &&
                    HashValueBase64BinaryObject.SequenceEqual(other.HashValueBase64BinaryObject)
                ) && 
                (
                    HashValue == other.HashValue ||
                    HashValue != null &&
                    HashValue.SequenceEqual(other.HashValue)
                ) && 
                (
                    HashValueMethodAlgorithm == other.HashValueMethodAlgorithm ||
                    HashValueMethodAlgorithm != null &&
                    HashValueMethodAlgorithm.SequenceEqual(other.HashValueMethodAlgorithm)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (HashValueBase64BinaryObject != null)
                    hashCode = hashCode * 59 + HashValueBase64BinaryObject.GetHashCode();
                    if (HashValue != null)
                    hashCode = hashCode * 59 + HashValue.GetHashCode();
                    if (HashValueMethodAlgorithm != null)
                    hashCode = hashCode * 59 + HashValueMethodAlgorithm.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JBinaryHashValueType left, JBinaryHashValueType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JBinaryHashValueType left, JBinaryHashValueType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
