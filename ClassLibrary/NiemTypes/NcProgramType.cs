/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of projects, activities, or services intended to meet a need.
    /// </summary>
    [DataContract]
    public partial class NcProgramType : NcActivityType, IEquatable<NcProgramType>
    { 
        /// <summary>
        /// A person who attends a program. NIEM reference is nc:ProgramPerson
        /// </summary>
        /// <value>A person who attends a program. NIEM reference is nc:ProgramPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A project or service of a program. NIEM reference is nc:ProgramAction
        /// </summary>
        /// <value>A project or service of a program. NIEM reference is nc:ProgramAction</value>

        [DataMember(Name="action")]
        public List<NcActivityType> Action { get; set; }

        /// <summary>
        /// A maximum number of people that can be enrolled in a program at a time. NIEM reference is nc:ProgramCapacityQuantity
        /// </summary>
        /// <value>A maximum number of people that can be enrolled in a program at a time. NIEM reference is nc:ProgramCapacityQuantity</value>

        [DataMember(Name="capacityQuantity")]
        public List<NiemXsnonNegativeInteger> CapacityQuantity { get; set; }

        /// <summary>
        /// A condition that must be met in order for a person to remain in a program. NIEM reference is nc:ProgramCondition
        /// </summary>
        /// <value>A condition that must be met in order for a person to remain in a program. NIEM reference is nc:ProgramCondition</value>

        [DataMember(Name="condition")]
        public List<NcConditionType> Condition { get; set; }

        /// <summary>
        /// A place where a program is located. NIEM reference is nc:ProgramFacility
        /// </summary>
        /// <value>A place where a program is located. NIEM reference is nc:ProgramFacility</value>

        [DataMember(Name="facility")]
        public List<NcFacilityType> Facility { get; set; }

        /// <summary>
        /// True if a program is run in the public sector; false if the program is run privately. NIEM reference is nc:ProgramPubliclyRunIndicator
        /// </summary>
        /// <value>True if a program is run in the public sector; false if the program is run privately. NIEM reference is nc:ProgramPubliclyRunIndicator</value>

        [DataMember(Name="isPubliclyRun")]
        public List<NiemXsboolean> IsPubliclyRun { get; set; }

        /// <summary>
        /// A purpose or reason for a program. NIEM reference is nc:ProgramPurposeText
        /// </summary>
        /// <value>A purpose or reason for a program. NIEM reference is nc:ProgramPurposeText</value>

        [DataMember(Name="purpose")]
        public List<NcTextType> Purpose { get; set; }

        /// <summary>
        /// A recommendation or mandate for a person to attend a program. NIEM reference is nc:ProgramReferral
        /// </summary>
        /// <value>A recommendation or mandate for a person to attend a program. NIEM reference is nc:ProgramReferral</value>

        [DataMember(Name="referral")]
        public List<NcReferralType> Referral { get; set; }

        /// <summary>
        /// An entity that runs a program. NIEM reference is nc:ProgramAdministrator
        /// </summary>
        /// <value>An entity that runs a program. NIEM reference is nc:ProgramAdministrator</value>

        [DataMember(Name="administrator")]
        public List<NcEntityType> Administrator { get; set; }

        /// <summary>
        /// A manner by which a person left a program. NIEM reference is nc:ProgramRelease
        /// </summary>
        /// <value>A manner by which a person left a program. NIEM reference is nc:ProgramRelease</value>

        [DataMember(Name="release")]
        public List<NcReleaseType> Release { get; set; }

        /// <summary>
        /// An entity that oversees and manages a program. NIEM reference is nc:ProgramSupervisor
        /// </summary>
        /// <value>An entity that oversees and manages a program. NIEM reference is nc:ProgramSupervisor</value>

        [DataMember(Name="supervisor")]
        public List<NcEntityType> Supervisor { get; set; }

        /// <summary>
        /// True if a person resides at a program facility; false otherwise. NIEM reference is nc:ProgramResidentialIndicator
        /// </summary>
        /// <value>True if a person resides at a program facility; false otherwise. NIEM reference is nc:ProgramResidentialIndicator</value>

        [DataMember(Name="isResidential")]
        public List<NiemXsboolean> IsResidential { get; set; }

        /// <summary>
        /// True if a person will be officially supervised through the duration of a program; false otherwise. NIEM reference is nc:ProgramSupervisedIndicator
        /// </summary>
        /// <value>True if a person will be officially supervised through the duration of a program; false otherwise. NIEM reference is nc:ProgramSupervisedIndicator</value>

        [DataMember(Name="isSupervised")]
        public List<NiemXsboolean> IsSupervised { get; set; }

        /// <summary>
        /// Additional information about a program. NIEM reference is hs:ProgramAugmentation
        /// </summary>
        /// <value>Additional information about a program. NIEM reference is hs:ProgramAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsProgramAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about a program. NIEM reference is im:ProgramAugmentation
        /// </summary>
        /// <value>Additional information about a program. NIEM reference is im:ProgramAugmentation</value>

        [DataMember(Name="imAugmentation")]
        public List<ImProgramAugmentationType> ImAugmentation { get; set; }

        /// <summary>
        /// Additional information about a Program. NIEM reference is j:ProgramAugmentation
        /// </summary>
        /// <value>Additional information about a Program. NIEM reference is j:ProgramAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JProgramAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// ncProgramType JSON-LD context
        /// </summary>
        /// <value>ncProgramType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncProgramTypeContextJsonldEnum for ../JSON-LD_Contexts/ncProgramTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncProgramTypeContext.jsonld")]
            JSONLDContextsncProgramTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncProgramType JSON-LD context
        /// </summary>
        /// <value>ncProgramType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcProgramType {\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CapacityQuantity: ").Append(CapacityQuantity).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Facility: ").Append(Facility).Append("\n");
            sb.Append("  IsPubliclyRun: ").Append(IsPubliclyRun).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  Administrator: ").Append(Administrator).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Supervisor: ").Append(Supervisor).Append("\n");
            sb.Append("  IsResidential: ").Append(IsResidential).Append("\n");
            sb.Append("  IsSupervised: ").Append(IsSupervised).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  ImAugmentation: ").Append(ImAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcProgramType)obj);
        }

        /// <summary>
        /// Returns true if NcProgramType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcProgramType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcProgramType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.SequenceEqual(other.Action)
                ) && 
                (
                    CapacityQuantity == other.CapacityQuantity ||
                    CapacityQuantity != null &&
                    CapacityQuantity.SequenceEqual(other.CapacityQuantity)
                ) && 
                (
                    Condition == other.Condition ||
                    Condition != null &&
                    Condition.SequenceEqual(other.Condition)
                ) && 
                (
                    Facility == other.Facility ||
                    Facility != null &&
                    Facility.SequenceEqual(other.Facility)
                ) && 
                (
                    IsPubliclyRun == other.IsPubliclyRun ||
                    IsPubliclyRun != null &&
                    IsPubliclyRun.SequenceEqual(other.IsPubliclyRun)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.SequenceEqual(other.Purpose)
                ) && 
                (
                    Referral == other.Referral ||
                    Referral != null &&
                    Referral.SequenceEqual(other.Referral)
                ) && 
                (
                    Administrator == other.Administrator ||
                    Administrator != null &&
                    Administrator.SequenceEqual(other.Administrator)
                ) && 
                (
                    Release == other.Release ||
                    Release != null &&
                    Release.SequenceEqual(other.Release)
                ) && 
                (
                    Supervisor == other.Supervisor ||
                    Supervisor != null &&
                    Supervisor.SequenceEqual(other.Supervisor)
                ) && 
                (
                    IsResidential == other.IsResidential ||
                    IsResidential != null &&
                    IsResidential.SequenceEqual(other.IsResidential)
                ) && 
                (
                    IsSupervised == other.IsSupervised ||
                    IsSupervised != null &&
                    IsSupervised.SequenceEqual(other.IsSupervised)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    ImAugmentation == other.ImAugmentation ||
                    ImAugmentation != null &&
                    ImAugmentation.SequenceEqual(other.ImAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (CapacityQuantity != null)
                    hashCode = hashCode * 59 + CapacityQuantity.GetHashCode();
                    if (Condition != null)
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                    if (Facility != null)
                    hashCode = hashCode * 59 + Facility.GetHashCode();
                    if (IsPubliclyRun != null)
                    hashCode = hashCode * 59 + IsPubliclyRun.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (Referral != null)
                    hashCode = hashCode * 59 + Referral.GetHashCode();
                    if (Administrator != null)
                    hashCode = hashCode * 59 + Administrator.GetHashCode();
                    if (Release != null)
                    hashCode = hashCode * 59 + Release.GetHashCode();
                    if (Supervisor != null)
                    hashCode = hashCode * 59 + Supervisor.GetHashCode();
                    if (IsResidential != null)
                    hashCode = hashCode * 59 + IsResidential.GetHashCode();
                    if (IsSupervised != null)
                    hashCode = hashCode * 59 + IsSupervised.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (ImAugmentation != null)
                    hashCode = hashCode * 59 + ImAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcProgramType left, NcProgramType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcProgramType left, NcProgramType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
