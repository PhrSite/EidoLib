/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a charge.
    /// </summary>
    [DataContract]
    public partial class HsChargeAugmentationType : IEquatable<HsChargeAugmentationType>
    { 
        /// <summary>
        /// A date the allegation was reported. NIEM reference is hs:ChargeAllegationReportedDate
        /// </summary>
        /// <value>A date the allegation was reported. NIEM reference is hs:ChargeAllegationReportedDate</value>

        [DataMember(Name="chargeAllegationReportedDate")]
        public List<NcDateType> ChargeAllegationReportedDate { get; set; }

        /// <summary>
        /// A description of a state or local definition of an allegation. NIEM reference is hs:ChargeAllegationLocalDescriptionText
        /// </summary>
        /// <value>A description of a state or local definition of an allegation. NIEM reference is hs:ChargeAllegationLocalDescriptionText</value>

        [DataMember(Name="chargeAllegationLocalDescription")]
        public List<NiemXsstring> ChargeAllegationLocalDescription { get; set; }

        /// <summary>
        /// A code indicating NCANDS (National Child Abuse and Neglect Data System) allegation categories. NIEM reference is hs:ChargeAllegationCategoryCode
        /// </summary>
        /// <value>A code indicating NCANDS (National Child Abuse and Neglect Data System) allegation categories. NIEM reference is hs:ChargeAllegationCategoryCode</value>

        [DataMember(Name="chargeAllegationCategoryCode")]
        public List<HsChargeAllegationCategoryCodeType> ChargeAllegationCategoryCode { get; set; }

        /// <summary>
        /// A kind of allegation of abuse or neglect. NIEM reference is hs:ChargeAllegationCategoryText
        /// </summary>
        /// <value>A kind of allegation of abuse or neglect. NIEM reference is hs:ChargeAllegationCategoryText</value>

        [DataMember(Name="chargeAllegationCategory")]
        public List<NcTextType> ChargeAllegationCategory { get; set; }

        /// <summary>
        /// An adjudication result of  a juvenile. NIEM reference is hs:ChargeAdjudication
        /// </summary>
        /// <value>An adjudication result of  a juvenile. NIEM reference is hs:ChargeAdjudication</value>

        [DataMember(Name="chargeAdjudication")]
        public List<JSentenceType> ChargeAdjudication { get; set; }

        /// <summary>
        /// An agreement between a bondsman and a subject in which a bondsman pays the subject&#x27;s bail or portion of the bail in exchange for certain conditions, including the payment of a certain amount of money and the reappearance of the subject NIEM reference is j:BailBond
        /// </summary>
        /// <value>An agreement between a bondsman and a subject in which a bondsman pays the subject&#x27;s bail or portion of the bail in exchange for certain conditions, including the payment of a certain amount of money and the reappearance of the subject NIEM reference is j:BailBond</value>

        [DataMember(Name="bailBond")]
        public List<JBailBondType> BailBond { get; set; }

        /// <summary>
        /// hsChargeAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsChargeAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsChargeAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/hsChargeAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsChargeAugmentationTypeContext.jsonld")]
            JSONLDContextshsChargeAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsChargeAugmentationType JSON-LD context
        /// </summary>
        /// <value>hsChargeAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsChargeAugmentationType {\n");
            sb.Append("  ChargeAllegationReportedDate: ").Append(ChargeAllegationReportedDate).Append("\n");
            sb.Append("  ChargeAllegationLocalDescription: ").Append(ChargeAllegationLocalDescription).Append("\n");
            sb.Append("  ChargeAllegationCategoryCode: ").Append(ChargeAllegationCategoryCode).Append("\n");
            sb.Append("  ChargeAllegationCategory: ").Append(ChargeAllegationCategory).Append("\n");
            sb.Append("  ChargeAdjudication: ").Append(ChargeAdjudication).Append("\n");
            sb.Append("  BailBond: ").Append(BailBond).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsChargeAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if HsChargeAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsChargeAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsChargeAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChargeAllegationReportedDate == other.ChargeAllegationReportedDate ||
                    ChargeAllegationReportedDate != null &&
                    ChargeAllegationReportedDate.SequenceEqual(other.ChargeAllegationReportedDate)
                ) && 
                (
                    ChargeAllegationLocalDescription == other.ChargeAllegationLocalDescription ||
                    ChargeAllegationLocalDescription != null &&
                    ChargeAllegationLocalDescription.SequenceEqual(other.ChargeAllegationLocalDescription)
                ) && 
                (
                    ChargeAllegationCategoryCode == other.ChargeAllegationCategoryCode ||
                    ChargeAllegationCategoryCode != null &&
                    ChargeAllegationCategoryCode.SequenceEqual(other.ChargeAllegationCategoryCode)
                ) && 
                (
                    ChargeAllegationCategory == other.ChargeAllegationCategory ||
                    ChargeAllegationCategory != null &&
                    ChargeAllegationCategory.SequenceEqual(other.ChargeAllegationCategory)
                ) && 
                (
                    ChargeAdjudication == other.ChargeAdjudication ||
                    ChargeAdjudication != null &&
                    ChargeAdjudication.SequenceEqual(other.ChargeAdjudication)
                ) && 
                (
                    BailBond == other.BailBond ||
                    BailBond != null &&
                    BailBond.SequenceEqual(other.BailBond)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChargeAllegationReportedDate != null)
                    hashCode = hashCode * 59 + ChargeAllegationReportedDate.GetHashCode();
                    if (ChargeAllegationLocalDescription != null)
                    hashCode = hashCode * 59 + ChargeAllegationLocalDescription.GetHashCode();
                    if (ChargeAllegationCategoryCode != null)
                    hashCode = hashCode * 59 + ChargeAllegationCategoryCode.GetHashCode();
                    if (ChargeAllegationCategory != null)
                    hashCode = hashCode * 59 + ChargeAllegationCategory.GetHashCode();
                    if (ChargeAdjudication != null)
                    hashCode = hashCode * 59 + ChargeAdjudication.GetHashCode();
                    if (BailBond != null)
                    hashCode = hashCode * 59 + BailBond.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsChargeAugmentationType left, HsChargeAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsChargeAugmentationType left, HsChargeAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
