/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a facility capable of receiving vessels and transferring cargo.
    /// </summary>
    [DataContract]
    public partial class MPortType : NcFacilityType, IEquatable<MPortType>
    { 
        /// <summary>
        /// A description of the anchorage capabilities of a port. NIEM reference is m:PortAnchorageCapabilityText
        /// </summary>
        /// <value>A description of the anchorage capabilities of a port. NIEM reference is m:PortAnchorageCapabilityText</value>

        [DataMember(Name="anchorageCapability")]
        public List<NcTextType> AnchorageCapability { get; set; }

        /// <summary>
        /// A BE (Basic Encyclopedia) number for a port. NIEM reference is m:PortBENumberText
        /// </summary>
        /// <value>A BE (Basic Encyclopedia) number for a port. NIEM reference is m:PortBENumberText</value>

        [DataMember(Name="beNumber")]
        public List<NcTextType> BeNumber { get; set; }

        /// <summary>
        /// A description of the cargo capabilities of a port. NIEM reference is m:PortCargoCapabilityText
        /// </summary>
        /// <value>A description of the cargo capabilities of a port. NIEM reference is m:PortCargoCapabilityText</value>

        [DataMember(Name="cargoCapability")]
        public List<NcTextType> CargoCapability { get; set; }

        /// <summary>
        /// A code to identify a port. NIEM reference is m:PortCodeText
        /// </summary>
        /// <value>A code to identify a port. NIEM reference is m:PortCodeText</value>

        [DataMember(Name="code")]
        public List<NcTextType> Code { get; set; }

        /// <summary>
        /// A Captain of the Port (COTP) zone to which a port belongs. NIEM reference is m:PortCOTPZone
        /// </summary>
        /// <value>A Captain of the Port (COTP) zone to which a port belongs. NIEM reference is m:PortCOTPZone</value>

        [DataMember(Name="cotpZone")]
        public List<MCaptainOfThePortZoneType> CotpZone { get; set; }

        /// <summary>
        /// A measure of the water depth of a port that limits which vessels can make use of the port. NIEM reference is m:PortDepthMeasure
        /// </summary>
        /// <value>A measure of the water depth of a port that limits which vessels can make use of the port. NIEM reference is m:PortDepthMeasure</value>

        [DataMember(Name="depthMeasure")]
        public List<NcLengthMeasureType> DepthMeasure { get; set; }

        /// <summary>
        /// A description of a port. NIEM reference is m:PortDescriptionText
        /// </summary>
        /// <value>A description of a port. NIEM reference is m:PortDescriptionText</value>

        [DataMember(Name="description")]
        public List<NcTextType> Description { get; set; }

        /// <summary>
        /// A number of docks possessed by a port. NIEM reference is m:PortDockQuantity
        /// </summary>
        /// <value>A number of docks possessed by a port. NIEM reference is m:PortDockQuantity</value>

        [DataMember(Name="dockQuantity")]
        public List<NcQuantityType> DockQuantity { get; set; }

        /// <summary>
        /// A government which owns or operates a port, especially in the situation where a port is physically in one country but is owned or operated by another. NIEM reference is m:PortGovernmentISO3166Alpha2Code
        /// </summary>
        /// <value>A government which owns or operates a port, especially in the situation where a port is physically in one country but is owned or operated by another. NIEM reference is m:PortGovernmentISO3166Alpha2Code</value>

        [DataMember(Name="governmentIso3166Alpha2Code")]
        public List<Iso3166CountryAlpha2CodeType> GovernmentIso3166Alpha2Code { get; set; }

        /// <summary>
        /// A government which owns or operates a port, especially in the situation where a port is physically in one country but is owned or operated by another. NIEM reference is m:PortGovernmentText
        /// </summary>
        /// <value>A government which owns or operates a port, especially in the situation where a port is physically in one country but is owned or operated by another. NIEM reference is m:PortGovernmentText</value>

        [DataMember(Name="government")]
        public List<NcTextType> Government { get; set; }

        /// <summary>
        /// An image of a port. NIEM reference is m:PortImage
        /// </summary>
        /// <value>An image of a port. NIEM reference is m:PortImage</value>

        [DataMember(Name="image")]
        public List<NcImageType> Image { get; set; }

        /// <summary>
        /// True if a port is compliant with International Ship and Port Facility Security (ISPS) requirements; false otherwise. NIEM reference is m:PortISPSCompliantIndicator
        /// </summary>
        /// <value>True if a port is compliant with International Ship and Port Facility Security (ISPS) requirements; false otherwise. NIEM reference is m:PortISPSCompliantIndicator</value>

        [DataMember(Name="isIspsCompliant")]
        public List<NiemXsboolean> IsIspsCompliant { get; set; }

        /// <summary>
        /// A maximum number of vessels the port is capable of handling. NIEM reference is m:PortMaximumVesselQuantity
        /// </summary>
        /// <value>A maximum number of vessels the port is capable of handling. NIEM reference is m:PortMaximumVesselQuantity</value>

        [DataMember(Name="maximumVesselQuantity")]
        public List<NcQuantityType> MaximumVesselQuantity { get; set; }

        /// <summary>
        /// A name of a port. NIEM reference is m:PortName
        /// </summary>
        /// <value>A name of a port. NIEM reference is m:PortName</value>

        [DataMember(Name="name")]
        public List<NcProperNameTextType> Name { get; set; }

        /// <summary>
        /// An operational status of a port. NIEM reference is m:PortOperationalStatus
        /// </summary>
        /// <value>An operational status of a port. NIEM reference is m:PortOperationalStatus</value>

        [DataMember(Name="operationalStatus")]
        public List<NcStatusType> OperationalStatus { get; set; }

        /// <summary>
        /// A number of pilot boats available at a port. NIEM reference is m:PortPilotBoatQuantity
        /// </summary>
        /// <value>A number of pilot boats available at a port. NIEM reference is m:PortPilotBoatQuantity</value>

        [DataMember(Name="pilotBoatQuantity")]
        public List<NcQuantityType> PilotBoatQuantity { get; set; }

        /// <summary>
        /// True if troops, munitions, etc. can be loaded/unloaded at this port; false otherwise. NIEM reference is m:PortStrategicPortOfEmbarkationIndicator
        /// </summary>
        /// <value>True if troops, munitions, etc. can be loaded/unloaded at this port; false otherwise. NIEM reference is m:PortStrategicPortOfEmbarkationIndicator</value>

        [DataMember(Name="isStrategicPortOfEmbarkation")]
        public List<NiemXsboolean> IsStrategicPortOfEmbarkation { get; set; }

        /// <summary>
        /// A threat level at a port. NIEM reference is m:PortThreatLevelText
        /// </summary>
        /// <value>A threat level at a port. NIEM reference is m:PortThreatLevelText</value>

        [DataMember(Name="threatLevel")]
        public List<NcTextType> ThreatLevel { get; set; }

        /// <summary>
        /// A United Nations Location Code of a maritime port, also known as a UN/LOCODE (United Nations Code for Trade and Transport Locations). NIEM reference is m:PortUNLOCODEText
        /// </summary>
        /// <value>A United Nations Location Code of a maritime port, also known as a UN/LOCODE (United Nations Code for Trade and Transport Locations). NIEM reference is m:PortUNLOCODEText</value>

        [DataMember(Name="unlocode")]
        public List<NcTextType> Unlocode { get; set; }

        /// <summary>
        /// A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry
        /// </summary>
        /// <value>A country, territory, dependency, or other such geopolitical subdivision of a location. NIEM reference is nc:LocationCountry</value>

        [DataMember(Name="locationCountry")]
        public List<NcCountryType> LocationCountry { get; set; }

        /// <summary>
        /// A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState
        /// </summary>
        /// <value>A state, commonwealth, province, or other such geopolitical subdivision of a country. NIEM reference is nc:LocationState</value>

        [DataMember(Name="locationState")]
        public List<NcStateType> LocationState { get; set; }

        /// <summary>
        /// A name of a city or town. NIEM reference is nc:LocationCityName
        /// </summary>
        /// <value>A name of a city or town. NIEM reference is nc:LocationCityName</value>

        [DataMember(Name="locationCityName")]
        public List<NcProperNameTextType> LocationCityName { get; set; }

        /// <summary>
        /// mPortType JSON-LD context
        /// </summary>
        /// <value>mPortType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsmPortTypeContextJsonldEnum for ../JSON-LD_Contexts/mPortTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/mPortTypeContext.jsonld")]
            JSONLDContextsmPortTypeContextJsonldEnum = 0        }

        /// <summary>
        /// mPortType JSON-LD context
        /// </summary>
        /// <value>mPortType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MPortType {\n");
            sb.Append("  AnchorageCapability: ").Append(AnchorageCapability).Append("\n");
            sb.Append("  BeNumber: ").Append(BeNumber).Append("\n");
            sb.Append("  CargoCapability: ").Append(CargoCapability).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CotpZone: ").Append(CotpZone).Append("\n");
            sb.Append("  DepthMeasure: ").Append(DepthMeasure).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DockQuantity: ").Append(DockQuantity).Append("\n");
            sb.Append("  GovernmentIso3166Alpha2Code: ").Append(GovernmentIso3166Alpha2Code).Append("\n");
            sb.Append("  Government: ").Append(Government).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  IsIspsCompliant: ").Append(IsIspsCompliant).Append("\n");
            sb.Append("  MaximumVesselQuantity: ").Append(MaximumVesselQuantity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OperationalStatus: ").Append(OperationalStatus).Append("\n");
            sb.Append("  PilotBoatQuantity: ").Append(PilotBoatQuantity).Append("\n");
            sb.Append("  IsStrategicPortOfEmbarkation: ").Append(IsStrategicPortOfEmbarkation).Append("\n");
            sb.Append("  ThreatLevel: ").Append(ThreatLevel).Append("\n");
            sb.Append("  Unlocode: ").Append(Unlocode).Append("\n");
            sb.Append("  LocationCountry: ").Append(LocationCountry).Append("\n");
            sb.Append("  LocationState: ").Append(LocationState).Append("\n");
            sb.Append("  LocationCityName: ").Append(LocationCityName).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MPortType)obj);
        }

        /// <summary>
        /// Returns true if MPortType instances are equal
        /// </summary>
        /// <param name="other">Instance of MPortType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MPortType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AnchorageCapability == other.AnchorageCapability ||
                    AnchorageCapability != null &&
                    AnchorageCapability.SequenceEqual(other.AnchorageCapability)
                ) && 
                (
                    BeNumber == other.BeNumber ||
                    BeNumber != null &&
                    BeNumber.SequenceEqual(other.BeNumber)
                ) && 
                (
                    CargoCapability == other.CargoCapability ||
                    CargoCapability != null &&
                    CargoCapability.SequenceEqual(other.CargoCapability)
                ) && 
                (
                    Code == other.Code ||
                    Code != null &&
                    Code.SequenceEqual(other.Code)
                ) && 
                (
                    CotpZone == other.CotpZone ||
                    CotpZone != null &&
                    CotpZone.SequenceEqual(other.CotpZone)
                ) && 
                (
                    DepthMeasure == other.DepthMeasure ||
                    DepthMeasure != null &&
                    DepthMeasure.SequenceEqual(other.DepthMeasure)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    DockQuantity == other.DockQuantity ||
                    DockQuantity != null &&
                    DockQuantity.SequenceEqual(other.DockQuantity)
                ) && 
                (
                    GovernmentIso3166Alpha2Code == other.GovernmentIso3166Alpha2Code ||
                    GovernmentIso3166Alpha2Code != null &&
                    GovernmentIso3166Alpha2Code.SequenceEqual(other.GovernmentIso3166Alpha2Code)
                ) && 
                (
                    Government == other.Government ||
                    Government != null &&
                    Government.SequenceEqual(other.Government)
                ) && 
                (
                    Image == other.Image ||
                    Image != null &&
                    Image.SequenceEqual(other.Image)
                ) && 
                (
                    IsIspsCompliant == other.IsIspsCompliant ||
                    IsIspsCompliant != null &&
                    IsIspsCompliant.SequenceEqual(other.IsIspsCompliant)
                ) && 
                (
                    MaximumVesselQuantity == other.MaximumVesselQuantity ||
                    MaximumVesselQuantity != null &&
                    MaximumVesselQuantity.SequenceEqual(other.MaximumVesselQuantity)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    OperationalStatus == other.OperationalStatus ||
                    OperationalStatus != null &&
                    OperationalStatus.SequenceEqual(other.OperationalStatus)
                ) && 
                (
                    PilotBoatQuantity == other.PilotBoatQuantity ||
                    PilotBoatQuantity != null &&
                    PilotBoatQuantity.SequenceEqual(other.PilotBoatQuantity)
                ) && 
                (
                    IsStrategicPortOfEmbarkation == other.IsStrategicPortOfEmbarkation ||
                    IsStrategicPortOfEmbarkation != null &&
                    IsStrategicPortOfEmbarkation.SequenceEqual(other.IsStrategicPortOfEmbarkation)
                ) && 
                (
                    ThreatLevel == other.ThreatLevel ||
                    ThreatLevel != null &&
                    ThreatLevel.SequenceEqual(other.ThreatLevel)
                ) && 
                (
                    Unlocode == other.Unlocode ||
                    Unlocode != null &&
                    Unlocode.SequenceEqual(other.Unlocode)
                ) && 
                (
                    LocationCountry == other.LocationCountry ||
                    LocationCountry != null &&
                    LocationCountry.SequenceEqual(other.LocationCountry)
                ) && 
                (
                    LocationState == other.LocationState ||
                    LocationState != null &&
                    LocationState.SequenceEqual(other.LocationState)
                ) && 
                (
                    LocationCityName == other.LocationCityName ||
                    LocationCityName != null &&
                    LocationCityName.SequenceEqual(other.LocationCityName)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AnchorageCapability != null)
                    hashCode = hashCode * 59 + AnchorageCapability.GetHashCode();
                    if (BeNumber != null)
                    hashCode = hashCode * 59 + BeNumber.GetHashCode();
                    if (CargoCapability != null)
                    hashCode = hashCode * 59 + CargoCapability.GetHashCode();
                    if (Code != null)
                    hashCode = hashCode * 59 + Code.GetHashCode();
                    if (CotpZone != null)
                    hashCode = hashCode * 59 + CotpZone.GetHashCode();
                    if (DepthMeasure != null)
                    hashCode = hashCode * 59 + DepthMeasure.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DockQuantity != null)
                    hashCode = hashCode * 59 + DockQuantity.GetHashCode();
                    if (GovernmentIso3166Alpha2Code != null)
                    hashCode = hashCode * 59 + GovernmentIso3166Alpha2Code.GetHashCode();
                    if (Government != null)
                    hashCode = hashCode * 59 + Government.GetHashCode();
                    if (Image != null)
                    hashCode = hashCode * 59 + Image.GetHashCode();
                    if (IsIspsCompliant != null)
                    hashCode = hashCode * 59 + IsIspsCompliant.GetHashCode();
                    if (MaximumVesselQuantity != null)
                    hashCode = hashCode * 59 + MaximumVesselQuantity.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OperationalStatus != null)
                    hashCode = hashCode * 59 + OperationalStatus.GetHashCode();
                    if (PilotBoatQuantity != null)
                    hashCode = hashCode * 59 + PilotBoatQuantity.GetHashCode();
                    if (IsStrategicPortOfEmbarkation != null)
                    hashCode = hashCode * 59 + IsStrategicPortOfEmbarkation.GetHashCode();
                    if (ThreatLevel != null)
                    hashCode = hashCode * 59 + ThreatLevel.GetHashCode();
                    if (Unlocode != null)
                    hashCode = hashCode * 59 + Unlocode.GetHashCode();
                    if (LocationCountry != null)
                    hashCode = hashCode * 59 + LocationCountry.GetHashCode();
                    if (LocationState != null)
                    hashCode = hashCode * 59 + LocationState.GetHashCode();
                    if (LocationCityName != null)
                    hashCode = hashCode * 59 + LocationCityName.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MPortType left, MPortType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MPortType left, MPortType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
