/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a correspondence between features in different friction ridge images
    /// </summary>
    [DataContract]
    public partial class BiomMinutiaeFeatureCorrespondenceType : IEquatable<BiomMinutiaeFeatureCorrespondenceType>
    { 
        /// <summary>
        /// An index identifier or unique label applied to minutiae by a latent examiner to allow correlation of features between images NIEM reference is biom:FeatureLabelID
        /// </summary>
        /// <value>An index identifier or unique label applied to minutiae by a latent examiner to allow correlation of features between images NIEM reference is biom:FeatureLabelID</value>

        [DataMember(Name="featureLabelId")]
        public List<NcTextType> FeatureLabelId { get; set; }

        /// <summary>
        /// A kind of correspondence between features in different friction ridge images NIEM reference is biom:MinutiaeFeatureCorrespondenceCategoryCode
        /// </summary>
        /// <value>A kind of correspondence between features in different friction ridge images NIEM reference is biom:MinutiaeFeatureCorrespondenceCategoryCode</value>

        [DataMember(Name="categoryCode")]
        public List<BiomMinutiaeFeatureCorrespondenceCategoryCodeType> CategoryCode { get; set; }

        /// <summary>
        /// A kind of point or feature in a friction ridge impression NIEM reference is biom:MinutiaeFeatureCategoryCode
        /// </summary>
        /// <value>A kind of point or feature in a friction ridge impression NIEM reference is biom:MinutiaeFeatureCategoryCode</value>

        [DataMember(Name="minutiaeFeatureCategoryCode")]
        public List<BiomMinutiaeFeatureCategoryCodeType> MinutiaeFeatureCategoryCode { get; set; }

        /// <summary>
        /// An identifier that uniquely designates which subfield occurrence is being referenced NIEM reference is biom:CorrespondingSubfieldID
        /// </summary>
        /// <value>An identifier that uniquely designates which subfield occurrence is being referenced NIEM reference is biom:CorrespondingSubfieldID</value>

        [DataMember(Name="correspondingSubfieldId")]
        public List<NiemXspositiveInteger> CorrespondingSubfieldId { get; set; }

        /// <summary>
        /// A vertex in a position path NIEM reference is biom:ImageFeatureVertex
        /// </summary>
        /// <value>A vertex in a position path NIEM reference is biom:ImageFeatureVertex</value>

        [DataMember(Name="imageFeatureVertex")]
        public List<BiomVertexType> ImageFeatureVertex { get; set; }

        /// <summary>
        /// A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText
        /// </summary>
        /// <value>A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText</value>

        [DataMember(Name="minutiaeComment")]
        public List<NcTextType> MinutiaeComment { get; set; }

        /// <summary>
        /// biomMinutiaeFeatureCorrespondenceType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeFeatureCorrespondenceType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomMinutiaeFeatureCorrespondenceTypeContextJsonldEnum for ../JSON-LD_Contexts/biomMinutiaeFeatureCorrespondenceTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomMinutiaeFeatureCorrespondenceTypeContext.jsonld")]
            JSONLDContextsbiomMinutiaeFeatureCorrespondenceTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomMinutiaeFeatureCorrespondenceType JSON-LD context
        /// </summary>
        /// <value>biomMinutiaeFeatureCorrespondenceType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomMinutiaeFeatureCorrespondenceType {\n");
            sb.Append("  FeatureLabelId: ").Append(FeatureLabelId).Append("\n");
            sb.Append("  CategoryCode: ").Append(CategoryCode).Append("\n");
            sb.Append("  MinutiaeFeatureCategoryCode: ").Append(MinutiaeFeatureCategoryCode).Append("\n");
            sb.Append("  CorrespondingSubfieldId: ").Append(CorrespondingSubfieldId).Append("\n");
            sb.Append("  ImageFeatureVertex: ").Append(ImageFeatureVertex).Append("\n");
            sb.Append("  MinutiaeComment: ").Append(MinutiaeComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomMinutiaeFeatureCorrespondenceType)obj);
        }

        /// <summary>
        /// Returns true if BiomMinutiaeFeatureCorrespondenceType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomMinutiaeFeatureCorrespondenceType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomMinutiaeFeatureCorrespondenceType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FeatureLabelId == other.FeatureLabelId ||
                    FeatureLabelId != null &&
                    FeatureLabelId.SequenceEqual(other.FeatureLabelId)
                ) && 
                (
                    CategoryCode == other.CategoryCode ||
                    CategoryCode != null &&
                    CategoryCode.SequenceEqual(other.CategoryCode)
                ) && 
                (
                    MinutiaeFeatureCategoryCode == other.MinutiaeFeatureCategoryCode ||
                    MinutiaeFeatureCategoryCode != null &&
                    MinutiaeFeatureCategoryCode.SequenceEqual(other.MinutiaeFeatureCategoryCode)
                ) && 
                (
                    CorrespondingSubfieldId == other.CorrespondingSubfieldId ||
                    CorrespondingSubfieldId != null &&
                    CorrespondingSubfieldId.SequenceEqual(other.CorrespondingSubfieldId)
                ) && 
                (
                    ImageFeatureVertex == other.ImageFeatureVertex ||
                    ImageFeatureVertex != null &&
                    ImageFeatureVertex.SequenceEqual(other.ImageFeatureVertex)
                ) && 
                (
                    MinutiaeComment == other.MinutiaeComment ||
                    MinutiaeComment != null &&
                    MinutiaeComment.SequenceEqual(other.MinutiaeComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FeatureLabelId != null)
                    hashCode = hashCode * 59 + FeatureLabelId.GetHashCode();
                    if (CategoryCode != null)
                    hashCode = hashCode * 59 + CategoryCode.GetHashCode();
                    if (MinutiaeFeatureCategoryCode != null)
                    hashCode = hashCode * 59 + MinutiaeFeatureCategoryCode.GetHashCode();
                    if (CorrespondingSubfieldId != null)
                    hashCode = hashCode * 59 + CorrespondingSubfieldId.GetHashCode();
                    if (ImageFeatureVertex != null)
                    hashCode = hashCode * 59 + ImageFeatureVertex.GetHashCode();
                    if (MinutiaeComment != null)
                    hashCode = hashCode * 59 + MinutiaeComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomMinutiaeFeatureCorrespondenceType left, BiomMinutiaeFeatureCorrespondenceType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomMinutiaeFeatureCorrespondenceType left, BiomMinutiaeFeatureCorrespondenceType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
