/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a record of a person visiting another person under restricted access.
    /// </summary>
    [DataContract]
    public partial class JVisitationType : NcActivityType, IEquatable<JVisitationType>
    { 
        /// <summary>
        /// A date on which leave is requested to visit a critically ill person. NIEM reference is j:VisitationRequestedDate
        /// </summary>
        /// <value>A date on which leave is requested to visit a critically ill person. NIEM reference is j:VisitationRequestedDate</value>

        [DataMember(Name="requestedDate")]
        public List<NcDateType> RequestedDate { get; set; }

        /// <summary>
        /// A comment about action taken with respect to a visitation room. NIEM reference is j:VisitationRoomActionTakenText
        /// </summary>
        /// <value>A comment about action taken with respect to a visitation room. NIEM reference is j:VisitationRoomActionTakenText</value>

        [DataMember(Name="roomActionTaken")]
        public List<NcTextType> RoomActionTaken { get; set; }

        /// <summary>
        /// A number of days over which the subject is to be placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsLengthNumeric
        /// </summary>
        /// <value>A number of days over which the subject is to be placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsLengthNumeric</value>

        [DataMember(Name="nonContactVisitsLengthNumeric")]
        public List<NcNumericType> NonContactVisitsLengthNumeric { get; set; }

        /// <summary>
        /// An end date for the subject being placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsEndDate
        /// </summary>
        /// <value>An end date for the subject being placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsEndDate</value>

        [DataMember(Name="nonContactVisitsEndDate")]
        public List<NcDateType> NonContactVisitsEndDate { get; set; }

        /// <summary>
        /// A description of the Restrictions on a visitation. NIEM reference is j:VisitationRestrictionsText
        /// </summary>
        /// <value>A description of the Restrictions on a visitation. NIEM reference is j:VisitationRestrictionsText</value>

        [DataMember(Name="restrictions")]
        public List<NcTextType> Restrictions { get; set; }

        /// <summary>
        /// A start date on which the subject is to be placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsStartDate
        /// </summary>
        /// <value>A start date on which the subject is to be placed on non-contact visits as a result of visiting-related infractions. NIEM reference is j:VisitationNonContactVisitsStartDate</value>

        [DataMember(Name="nonContactVisitsStartDate")]
        public List<NcDateType> NonContactVisitsStartDate { get; set; }

        /// <summary>
        /// An item of contraband obtained during a visitation NIEM reference is j:VisitationContraband
        /// </summary>
        /// <value>An item of contraband obtained during a visitation NIEM reference is j:VisitationContraband</value>

        [DataMember(Name="contraband")]
        public List<JContrabandType> Contraband { get; set; }

        /// <summary>
        /// A description or comment about the subject of a visitation. NIEM reference is j:VisitationSubjectMatterText
        /// </summary>
        /// <value>A description or comment about the subject of a visitation. NIEM reference is j:VisitationSubjectMatterText</value>

        [DataMember(Name="subjectMatter")]
        public List<NcTextType> SubjectMatter { get; set; }

        /// <summary>
        /// A date and time the visitation was verified. NIEM reference is j:VisitationVerifiedDateTime
        /// </summary>
        /// <value>A date and time the visitation was verified. NIEM reference is j:VisitationVerifiedDateTime</value>

        [DataMember(Name="verifiedDateTime")]
        public List<NiemXsdateTime> VerifiedDateTime { get; set; }

        /// <summary>
        /// True if the Parole Agent has been notified; false otherwise. NIEM reference is j:VisitationParoleOfficerNotifiedIndicator
        /// </summary>
        /// <value>True if the Parole Agent has been notified; false otherwise. NIEM reference is j:VisitationParoleOfficerNotifiedIndicator</value>

        [DataMember(Name="isParoleOfficerNotified")]
        public List<NiemXsboolean> IsParoleOfficerNotified { get; set; }

        /// <summary>
        /// A kind of reason for denial of a visitation. NIEM reference is j:VisitationDenialReasonText
        /// </summary>
        /// <value>A kind of reason for denial of a visitation. NIEM reference is j:VisitationDenialReasonText</value>

        [DataMember(Name="denialReason")]
        public List<NcTextType> DenialReason { get; set; }

        /// <summary>
        /// A purpose or reason for a visit. NIEM reference is j:VisitationPurposeText
        /// </summary>
        /// <value>A purpose or reason for a visit. NIEM reference is j:VisitationPurposeText</value>

        [DataMember(Name="purpose")]
        public List<NcTextType> Purpose { get; set; }

        /// <summary>
        /// An enforcement official who supervised a visit. NIEM reference is j:VisitationSupervisingOfficialEnforcement
        /// </summary>
        /// <value>An enforcement official who supervised a visit. NIEM reference is j:VisitationSupervisingOfficialEnforcement</value>

        [DataMember(Name="supervisingOfficialEnforcement")]
        public List<JEnforcementOfficialType> SupervisingOfficialEnforcement { get; set; }

        /// <summary>
        /// A judicial official who supervised a visit. NIEM reference is j:VisitationSupervisingOfficialJudicial
        /// </summary>
        /// <value>A judicial official who supervised a visit. NIEM reference is j:VisitationSupervisingOfficialJudicial</value>

        [DataMember(Name="supervisingOfficialJudicial")]
        public List<JJudicialOfficialType> SupervisingOfficialJudicial { get; set; }

        /// <summary>
        /// A reason why a person is under restricted access to a visitor. NIEM reference is j:VisitationRestrictedAccessReasonText
        /// </summary>
        /// <value>A reason why a person is under restricted access to a visitor. NIEM reference is j:VisitationRestrictedAccessReasonText</value>

        [DataMember(Name="restrictedAccessReason")]
        public List<NcTextType> RestrictedAccessReason { get; set; }

        /// <summary>
        /// A person under restricted access who receives a visit. NIEM reference is j:VisitationRestrictedAccessPerson
        /// </summary>
        /// <value>A person under restricted access who receives a visit. NIEM reference is j:VisitationRestrictedAccessPerson</value>

        [DataMember(Name="restrictedAccessPerson")]
        public List<NcPersonType> RestrictedAccessPerson { get; set; }

        /// <summary>
        /// A person who visits a person under restricted access. NIEM reference is j:VisitationVisitor
        /// </summary>
        /// <value>A person who visits a person under restricted access. NIEM reference is j:VisitationVisitor</value>

        [DataMember(Name="visitor")]
        public List<NcPersonType> Visitor { get; set; }

        /// <summary>
        /// A relationship of a visitor to a restricted access person. NIEM reference is j:VisitationVisitorRelationshipText
        /// </summary>
        /// <value>A relationship of a visitor to a restricted access person. NIEM reference is j:VisitationVisitorRelationshipText</value>

        [DataMember(Name="visitorRelationship")]
        public List<NcTextType> VisitorRelationship { get; set; }

        /// <summary>
        /// jVisitationType JSON-LD context
        /// </summary>
        /// <value>jVisitationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjVisitationTypeContextJsonldEnum for ../JSON-LD_Contexts/jVisitationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jVisitationTypeContext.jsonld")]
            JSONLDContextsjVisitationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jVisitationType JSON-LD context
        /// </summary>
        /// <value>jVisitationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JVisitationType {\n");
            sb.Append("  RequestedDate: ").Append(RequestedDate).Append("\n");
            sb.Append("  RoomActionTaken: ").Append(RoomActionTaken).Append("\n");
            sb.Append("  NonContactVisitsLengthNumeric: ").Append(NonContactVisitsLengthNumeric).Append("\n");
            sb.Append("  NonContactVisitsEndDate: ").Append(NonContactVisitsEndDate).Append("\n");
            sb.Append("  Restrictions: ").Append(Restrictions).Append("\n");
            sb.Append("  NonContactVisitsStartDate: ").Append(NonContactVisitsStartDate).Append("\n");
            sb.Append("  Contraband: ").Append(Contraband).Append("\n");
            sb.Append("  SubjectMatter: ").Append(SubjectMatter).Append("\n");
            sb.Append("  VerifiedDateTime: ").Append(VerifiedDateTime).Append("\n");
            sb.Append("  IsParoleOfficerNotified: ").Append(IsParoleOfficerNotified).Append("\n");
            sb.Append("  DenialReason: ").Append(DenialReason).Append("\n");
            sb.Append("  Purpose: ").Append(Purpose).Append("\n");
            sb.Append("  SupervisingOfficialEnforcement: ").Append(SupervisingOfficialEnforcement).Append("\n");
            sb.Append("  SupervisingOfficialJudicial: ").Append(SupervisingOfficialJudicial).Append("\n");
            sb.Append("  RestrictedAccessReason: ").Append(RestrictedAccessReason).Append("\n");
            sb.Append("  RestrictedAccessPerson: ").Append(RestrictedAccessPerson).Append("\n");
            sb.Append("  Visitor: ").Append(Visitor).Append("\n");
            sb.Append("  VisitorRelationship: ").Append(VisitorRelationship).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JVisitationType)obj);
        }

        /// <summary>
        /// Returns true if JVisitationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JVisitationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JVisitationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RequestedDate == other.RequestedDate ||
                    RequestedDate != null &&
                    RequestedDate.SequenceEqual(other.RequestedDate)
                ) && 
                (
                    RoomActionTaken == other.RoomActionTaken ||
                    RoomActionTaken != null &&
                    RoomActionTaken.SequenceEqual(other.RoomActionTaken)
                ) && 
                (
                    NonContactVisitsLengthNumeric == other.NonContactVisitsLengthNumeric ||
                    NonContactVisitsLengthNumeric != null &&
                    NonContactVisitsLengthNumeric.SequenceEqual(other.NonContactVisitsLengthNumeric)
                ) && 
                (
                    NonContactVisitsEndDate == other.NonContactVisitsEndDate ||
                    NonContactVisitsEndDate != null &&
                    NonContactVisitsEndDate.SequenceEqual(other.NonContactVisitsEndDate)
                ) && 
                (
                    Restrictions == other.Restrictions ||
                    Restrictions != null &&
                    Restrictions.SequenceEqual(other.Restrictions)
                ) && 
                (
                    NonContactVisitsStartDate == other.NonContactVisitsStartDate ||
                    NonContactVisitsStartDate != null &&
                    NonContactVisitsStartDate.SequenceEqual(other.NonContactVisitsStartDate)
                ) && 
                (
                    Contraband == other.Contraband ||
                    Contraband != null &&
                    Contraband.SequenceEqual(other.Contraband)
                ) && 
                (
                    SubjectMatter == other.SubjectMatter ||
                    SubjectMatter != null &&
                    SubjectMatter.SequenceEqual(other.SubjectMatter)
                ) && 
                (
                    VerifiedDateTime == other.VerifiedDateTime ||
                    VerifiedDateTime != null &&
                    VerifiedDateTime.SequenceEqual(other.VerifiedDateTime)
                ) && 
                (
                    IsParoleOfficerNotified == other.IsParoleOfficerNotified ||
                    IsParoleOfficerNotified != null &&
                    IsParoleOfficerNotified.SequenceEqual(other.IsParoleOfficerNotified)
                ) && 
                (
                    DenialReason == other.DenialReason ||
                    DenialReason != null &&
                    DenialReason.SequenceEqual(other.DenialReason)
                ) && 
                (
                    Purpose == other.Purpose ||
                    Purpose != null &&
                    Purpose.SequenceEqual(other.Purpose)
                ) && 
                (
                    SupervisingOfficialEnforcement == other.SupervisingOfficialEnforcement ||
                    SupervisingOfficialEnforcement != null &&
                    SupervisingOfficialEnforcement.SequenceEqual(other.SupervisingOfficialEnforcement)
                ) && 
                (
                    SupervisingOfficialJudicial == other.SupervisingOfficialJudicial ||
                    SupervisingOfficialJudicial != null &&
                    SupervisingOfficialJudicial.SequenceEqual(other.SupervisingOfficialJudicial)
                ) && 
                (
                    RestrictedAccessReason == other.RestrictedAccessReason ||
                    RestrictedAccessReason != null &&
                    RestrictedAccessReason.SequenceEqual(other.RestrictedAccessReason)
                ) && 
                (
                    RestrictedAccessPerson == other.RestrictedAccessPerson ||
                    RestrictedAccessPerson != null &&
                    RestrictedAccessPerson.SequenceEqual(other.RestrictedAccessPerson)
                ) && 
                (
                    Visitor == other.Visitor ||
                    Visitor != null &&
                    Visitor.SequenceEqual(other.Visitor)
                ) && 
                (
                    VisitorRelationship == other.VisitorRelationship ||
                    VisitorRelationship != null &&
                    VisitorRelationship.SequenceEqual(other.VisitorRelationship)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RequestedDate != null)
                    hashCode = hashCode * 59 + RequestedDate.GetHashCode();
                    if (RoomActionTaken != null)
                    hashCode = hashCode * 59 + RoomActionTaken.GetHashCode();
                    if (NonContactVisitsLengthNumeric != null)
                    hashCode = hashCode * 59 + NonContactVisitsLengthNumeric.GetHashCode();
                    if (NonContactVisitsEndDate != null)
                    hashCode = hashCode * 59 + NonContactVisitsEndDate.GetHashCode();
                    if (Restrictions != null)
                    hashCode = hashCode * 59 + Restrictions.GetHashCode();
                    if (NonContactVisitsStartDate != null)
                    hashCode = hashCode * 59 + NonContactVisitsStartDate.GetHashCode();
                    if (Contraband != null)
                    hashCode = hashCode * 59 + Contraband.GetHashCode();
                    if (SubjectMatter != null)
                    hashCode = hashCode * 59 + SubjectMatter.GetHashCode();
                    if (VerifiedDateTime != null)
                    hashCode = hashCode * 59 + VerifiedDateTime.GetHashCode();
                    if (IsParoleOfficerNotified != null)
                    hashCode = hashCode * 59 + IsParoleOfficerNotified.GetHashCode();
                    if (DenialReason != null)
                    hashCode = hashCode * 59 + DenialReason.GetHashCode();
                    if (Purpose != null)
                    hashCode = hashCode * 59 + Purpose.GetHashCode();
                    if (SupervisingOfficialEnforcement != null)
                    hashCode = hashCode * 59 + SupervisingOfficialEnforcement.GetHashCode();
                    if (SupervisingOfficialJudicial != null)
                    hashCode = hashCode * 59 + SupervisingOfficialJudicial.GetHashCode();
                    if (RestrictedAccessReason != null)
                    hashCode = hashCode * 59 + RestrictedAccessReason.GetHashCode();
                    if (RestrictedAccessPerson != null)
                    hashCode = hashCode * 59 + RestrictedAccessPerson.GetHashCode();
                    if (Visitor != null)
                    hashCode = hashCode * 59 + Visitor.GetHashCode();
                    if (VisitorRelationship != null)
                    hashCode = hashCode * 59 + VisitorRelationship.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JVisitationType left, JVisitationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JVisitationType left, JVisitationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
