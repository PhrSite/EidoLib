/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a clearly defined action or activity specifically assigned to an individual or organization that must be done as it is imposed by an appropriate authority.
    /// </summary>
    [DataContract]
    public partial class NcTaskType : IEquatable<NcTaskType>
    { 
        /// <summary>
        /// A name of a task. NIEM reference is nc:TaskName
        /// </summary>
        /// <value>A name of a task. NIEM reference is nc:TaskName</value>

        [DataMember(Name="name")]
        public List<NiemXsstring> Name { get; set; }

        /// <summary>
        /// An identifier for a task. NIEM reference is nc:TaskID
        /// </summary>
        /// <value>An identifier for a task. NIEM reference is nc:TaskID</value>

        [DataMember(Name="taskId")]
        public List<NiemXsstring> TaskId { get; set; }

        /// <summary>
        /// A date for the start of a task. NIEM reference is nc:TaskStartDate
        /// </summary>
        /// <value>A date for the start of a task. NIEM reference is nc:TaskStartDate</value>

        [DataMember(Name="startDate")]
        public List<NcDateType> StartDate { get; set; }

        /// <summary>
        /// A date for the end of a task. NIEM reference is nc:TaskEndDate
        /// </summary>
        /// <value>A date for the end of a task. NIEM reference is nc:TaskEndDate</value>

        [DataMember(Name="endDate")]
        public List<NcDateType> EndDate { get; set; }

        /// <summary>
        /// A description of the task in detail. NIEM reference is nc:TaskDescriptionText
        /// </summary>
        /// <value>A description of the task in detail. NIEM reference is nc:TaskDescriptionText</value>

        [DataMember(Name="description")]
        public List<NiemXsstring> Description { get; set; }

        /// <summary>
        /// A description of what needs to be done to successfully complete a task. NIEM reference is nc:TaskCriteriaForSuccessText
        /// </summary>
        /// <value>A description of what needs to be done to successfully complete a task. NIEM reference is nc:TaskCriteriaForSuccessText</value>

        [DataMember(Name="criteriaForSuccess")]
        public List<NcTextType> CriteriaForSuccess { get; set; }

        /// <summary>
        /// A status of the progress toward accomplishment of this task. NIEM reference is nc:TaskCurrentStatus
        /// </summary>
        /// <value>A status of the progress toward accomplishment of this task. NIEM reference is nc:TaskCurrentStatus</value>

        [DataMember(Name="currentStatus")]
        public List<NcStatusType> CurrentStatus { get; set; }

        /// <summary>
        /// Additional information about a task. NIEM reference is hs:TaskAugmentation
        /// </summary>
        /// <value>Additional information about a task. NIEM reference is hs:TaskAugmentation</value>

        [DataMember(Name="hsAugmentation")]
        public List<HsTaskAugmentationType> HsAugmentation { get; set; }

        /// <summary>
        /// Additional information about a task. NIEM reference is j:TaskAugmentation
        /// </summary>
        /// <value>Additional information about a task. NIEM reference is j:TaskAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JTaskAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a task. NIEM reference is mo:TaskAugmentation
        /// </summary>
        /// <value>Additional information about a task. NIEM reference is mo:TaskAugmentation</value>

        [DataMember(Name="moAugmentation")]
        public List<MoTaskAugmentationType> MoAugmentation { get; set; }

        /// <summary>
        /// ncTaskType JSON-LD context
        /// </summary>
        /// <value>ncTaskType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncTaskTypeContextJsonldEnum for ../JSON-LD_Contexts/ncTaskTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncTaskTypeContext.jsonld")]
            JSONLDContextsncTaskTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncTaskType JSON-LD context
        /// </summary>
        /// <value>ncTaskType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcTaskType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CriteriaForSuccess: ").Append(CriteriaForSuccess).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  HsAugmentation: ").Append(HsAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  MoAugmentation: ").Append(MoAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcTaskType)obj);
        }

        /// <summary>
        /// Returns true if NcTaskType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcTaskType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcTaskType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.SequenceEqual(other.Name)
                ) && 
                (
                    TaskId == other.TaskId ||
                    TaskId != null &&
                    TaskId.SequenceEqual(other.TaskId)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.SequenceEqual(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.SequenceEqual(other.EndDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.SequenceEqual(other.Description)
                ) && 
                (
                    CriteriaForSuccess == other.CriteriaForSuccess ||
                    CriteriaForSuccess != null &&
                    CriteriaForSuccess.SequenceEqual(other.CriteriaForSuccess)
                ) && 
                (
                    CurrentStatus == other.CurrentStatus ||
                    CurrentStatus != null &&
                    CurrentStatus.SequenceEqual(other.CurrentStatus)
                ) && 
                (
                    HsAugmentation == other.HsAugmentation ||
                    HsAugmentation != null &&
                    HsAugmentation.SequenceEqual(other.HsAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    MoAugmentation == other.MoAugmentation ||
                    MoAugmentation != null &&
                    MoAugmentation.SequenceEqual(other.MoAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TaskId != null)
                    hashCode = hashCode * 59 + TaskId.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (CriteriaForSuccess != null)
                    hashCode = hashCode * 59 + CriteriaForSuccess.GetHashCode();
                    if (CurrentStatus != null)
                    hashCode = hashCode * 59 + CurrentStatus.GetHashCode();
                    if (HsAugmentation != null)
                    hashCode = hashCode * 59 + HsAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (MoAugmentation != null)
                    hashCode = hashCode * 59 + MoAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcTaskType left, NcTaskType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcTaskType left, NcTaskType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
