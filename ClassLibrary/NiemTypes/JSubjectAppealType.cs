/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of details or events related to a subject&#x27;s appeal.
    /// </summary>
    [DataContract]
    public partial class JSubjectAppealType : JAppealType, IEquatable<JSubjectAppealType>
    { 
        /// <summary>
        /// A Log identification associated with a subject&#x27;s Appeal. NIEM reference is j:SubjectAppealLogIdentification
        /// </summary>
        /// <value>A Log identification associated with a subject&#x27;s Appeal. NIEM reference is j:SubjectAppealLogIdentification</value>

        [DataMember(Name="logIdentification")]
        public List<NcIdentificationType> LogIdentification { get; set; }

        /// <summary>
        /// An activity of considering and rendering a decision on a subject&#x27;s appeal. NIEM reference is j:SubjectAppealDecisionReview
        /// </summary>
        /// <value>An activity of considering and rendering a decision on a subject&#x27;s appeal. NIEM reference is j:SubjectAppealDecisionReview</value>

        [DataMember(Name="decisionReview")]
        public List<JSubjectAppealDecisionReviewType> DecisionReview { get; set; }

        /// <summary>
        /// A date on which the offender interview took place as part of a review. NIEM reference is j:SubjectAppealInterviewDate
        /// </summary>
        /// <value>A date on which the offender interview took place as part of a review. NIEM reference is j:SubjectAppealInterviewDate</value>

        [DataMember(Name="interviewDate")]
        public List<NcDateType> InterviewDate { get; set; }

        /// <summary>
        /// A review level for the appeal. NIEM reference is j:SubjectAppealReviewText
        /// </summary>
        /// <value>A review level for the appeal. NIEM reference is j:SubjectAppealReviewText</value>

        [DataMember(Name="review")]
        public List<NcTextType> Review { get; set; }

        /// <summary>
        /// An subject appeal assignment. NIEM reference is j:SubjectAppealAssignmentText
        /// </summary>
        /// <value>An subject appeal assignment. NIEM reference is j:SubjectAppealAssignmentText</value>

        [DataMember(Name="assignment")]
        public List<NcTextType> Assignment { get; set; }

        /// <summary>
        /// An action requested through this appeal. NIEM reference is j:SubjectAppealRequestedActionText
        /// </summary>
        /// <value>An action requested through this appeal. NIEM reference is j:SubjectAppealRequestedActionText</value>

        [DataMember(Name="requestedAction")]
        public List<NcTextType> RequestedAction { get; set; }

        /// <summary>
        /// jSubjectAppealType JSON-LD context
        /// </summary>
        /// <value>jSubjectAppealType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectAppealTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectAppealTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectAppealTypeContext.jsonld")]
            JSONLDContextsjSubjectAppealTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectAppealType JSON-LD context
        /// </summary>
        /// <value>jSubjectAppealType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectAppealType {\n");
            sb.Append("  LogIdentification: ").Append(LogIdentification).Append("\n");
            sb.Append("  DecisionReview: ").Append(DecisionReview).Append("\n");
            sb.Append("  InterviewDate: ").Append(InterviewDate).Append("\n");
            sb.Append("  Review: ").Append(Review).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  RequestedAction: ").Append(RequestedAction).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectAppealType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectAppealType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectAppealType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectAppealType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LogIdentification == other.LogIdentification ||
                    LogIdentification != null &&
                    LogIdentification.SequenceEqual(other.LogIdentification)
                ) && 
                (
                    DecisionReview == other.DecisionReview ||
                    DecisionReview != null &&
                    DecisionReview.SequenceEqual(other.DecisionReview)
                ) && 
                (
                    InterviewDate == other.InterviewDate ||
                    InterviewDate != null &&
                    InterviewDate.SequenceEqual(other.InterviewDate)
                ) && 
                (
                    Review == other.Review ||
                    Review != null &&
                    Review.SequenceEqual(other.Review)
                ) && 
                (
                    Assignment == other.Assignment ||
                    Assignment != null &&
                    Assignment.SequenceEqual(other.Assignment)
                ) && 
                (
                    RequestedAction == other.RequestedAction ||
                    RequestedAction != null &&
                    RequestedAction.SequenceEqual(other.RequestedAction)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LogIdentification != null)
                    hashCode = hashCode * 59 + LogIdentification.GetHashCode();
                    if (DecisionReview != null)
                    hashCode = hashCode * 59 + DecisionReview.GetHashCode();
                    if (InterviewDate != null)
                    hashCode = hashCode * 59 + InterviewDate.GetHashCode();
                    if (Review != null)
                    hashCode = hashCode * 59 + Review.GetHashCode();
                    if (Assignment != null)
                    hashCode = hashCode * 59 + Assignment.GetHashCode();
                    if (RequestedAction != null)
                    hashCode = hashCode * 59 + RequestedAction.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectAppealType left, JSubjectAppealType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectAppealType left, JSubjectAppealType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
