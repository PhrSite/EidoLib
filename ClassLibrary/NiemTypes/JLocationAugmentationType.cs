/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a location.
    /// </summary>
    [DataContract]
    public partial class JLocationAugmentationType : IEquatable<JLocationAugmentationType>
    { 
        /// <summary>
        /// A part of the roadway where Traffic Accident occurred. NIEM reference is st:LocationRoadway
        /// </summary>
        /// <value>A part of the roadway where Traffic Accident occurred. NIEM reference is st:LocationRoadway</value>

        [DataMember(Name="locationRoadway")]
        public List<StLocationRoadwayType> LocationRoadway { get; set; }

        /// <summary>
        /// A number identifying a section of a city enclosed by intersecting streets. NIEM reference is j:LocationBlockNumberText
        /// </summary>
        /// <value>A number identifying a section of a city enclosed by intersecting streets. NIEM reference is j:LocationBlockNumberText</value>

        [DataMember(Name="locationBlockNumber")]
        public List<NcTextType> LocationBlockNumber { get; set; }

        /// <summary>
        /// An American Indian nation. NIEM reference is j:LocationIndianNationCode
        /// </summary>
        /// <value>An American Indian nation. NIEM reference is j:LocationIndianNationCode</value>

        [DataMember(Name="locationIndianNationCode")]
        public List<NdexIndianNationCodeType> LocationIndianNationCode { get; set; }

        /// <summary>
        /// An American Indian nation. NIEM reference is j:LocationIndianNationText
        /// </summary>
        /// <value>An American Indian nation. NIEM reference is j:LocationIndianNationText</value>

        [DataMember(Name="locationIndianNation")]
        public List<NcTextType> LocationIndianNation { get; set; }

        /// <summary>
        /// A number identifying a tract or parcel (unit) of land owned by an owner.  Also called a plot. NIEM reference is j:LocationLotNumberText
        /// </summary>
        /// <value>A number identifying a tract or parcel (unit) of land owned by an owner.  Also called a plot. NIEM reference is j:LocationLotNumberText</value>

        [DataMember(Name="locationLotNumber")]
        public List<NcTextType> LocationLotNumber { get; set; }

        /// <summary>
        /// A security level of the location. NIEM reference is j:LocationSecurityLevelText
        /// </summary>
        /// <value>A security level of the location. NIEM reference is j:LocationSecurityLevelText</value>

        [DataMember(Name="locationSecurityLevel")]
        public List<NcTextType> LocationSecurityLevel { get; set; }

        /// <summary>
        /// jLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jLocationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjLocationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jLocationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jLocationAugmentationTypeContext.jsonld")]
            JSONLDContextsjLocationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>jLocationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JLocationAugmentationType {\n");
            sb.Append("  LocationRoadway: ").Append(LocationRoadway).Append("\n");
            sb.Append("  LocationBlockNumber: ").Append(LocationBlockNumber).Append("\n");
            sb.Append("  LocationIndianNationCode: ").Append(LocationIndianNationCode).Append("\n");
            sb.Append("  LocationIndianNation: ").Append(LocationIndianNation).Append("\n");
            sb.Append("  LocationLotNumber: ").Append(LocationLotNumber).Append("\n");
            sb.Append("  LocationSecurityLevel: ").Append(LocationSecurityLevel).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JLocationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JLocationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JLocationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JLocationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationRoadway == other.LocationRoadway ||
                    LocationRoadway != null &&
                    LocationRoadway.SequenceEqual(other.LocationRoadway)
                ) && 
                (
                    LocationBlockNumber == other.LocationBlockNumber ||
                    LocationBlockNumber != null &&
                    LocationBlockNumber.SequenceEqual(other.LocationBlockNumber)
                ) && 
                (
                    LocationIndianNationCode == other.LocationIndianNationCode ||
                    LocationIndianNationCode != null &&
                    LocationIndianNationCode.SequenceEqual(other.LocationIndianNationCode)
                ) && 
                (
                    LocationIndianNation == other.LocationIndianNation ||
                    LocationIndianNation != null &&
                    LocationIndianNation.SequenceEqual(other.LocationIndianNation)
                ) && 
                (
                    LocationLotNumber == other.LocationLotNumber ||
                    LocationLotNumber != null &&
                    LocationLotNumber.SequenceEqual(other.LocationLotNumber)
                ) && 
                (
                    LocationSecurityLevel == other.LocationSecurityLevel ||
                    LocationSecurityLevel != null &&
                    LocationSecurityLevel.SequenceEqual(other.LocationSecurityLevel)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationRoadway != null)
                    hashCode = hashCode * 59 + LocationRoadway.GetHashCode();
                    if (LocationBlockNumber != null)
                    hashCode = hashCode * 59 + LocationBlockNumber.GetHashCode();
                    if (LocationIndianNationCode != null)
                    hashCode = hashCode * 59 + LocationIndianNationCode.GetHashCode();
                    if (LocationIndianNation != null)
                    hashCode = hashCode * 59 + LocationIndianNation.GetHashCode();
                    if (LocationLotNumber != null)
                    hashCode = hashCode * 59 + LocationLotNumber.GetHashCode();
                    if (LocationSecurityLevel != null)
                    hashCode = hashCode * 59 + LocationSecurityLevel.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JLocationAugmentationType left, JLocationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JLocationAugmentationType left, JLocationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
