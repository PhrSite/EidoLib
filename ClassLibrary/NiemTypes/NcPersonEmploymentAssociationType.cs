/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an association between a person and an employment.
    /// </summary>
    [DataContract]
    public partial class NcPersonEmploymentAssociationType : NcAssociationType, IEquatable<NcPersonEmploymentAssociationType>
    { 
        /// <summary>
        /// A person who works for a business or a person. NIEM reference is nc:Employee
        /// </summary>
        /// <value>A person who works for a business or a person. NIEM reference is nc:Employee</value>

        [DataMember(Name="employee")]
        public List<NcPersonType> Employee { get; set; }

        /// <summary>
        /// A party/entity (organization or person) who employs a person. NIEM reference is nc:Employer
        /// </summary>
        /// <value>A party/entity (organization or person) who employs a person. NIEM reference is nc:Employer</value>

        [DataMember(Name="employer")]
        public List<NcEntityType> Employer { get; set; }

        /// <summary>
        /// A name of a department or other business unit associated with a job position. NIEM reference is nc:EmployeeDepartmentName
        /// </summary>
        /// <value>A name of a department or other business unit associated with a job position. NIEM reference is nc:EmployeeDepartmentName</value>

        [DataMember(Name="employeeDepartmentName")]
        public List<NcTextType> EmployeeDepartmentName { get; set; }

        /// <summary>
        /// A job name or title of an employee. NIEM reference is nc:EmployeePositionName
        /// </summary>
        /// <value>A job name or title of an employee. NIEM reference is nc:EmployeePositionName</value>

        [DataMember(Name="employeePositionName")]
        public List<NcTextType> EmployeePositionName { get; set; }

        /// <summary>
        /// A job of an employee. NIEM reference is nc:EmployeeOccupationCode
        /// </summary>
        /// <value>A job of an employee. NIEM reference is nc:EmployeeOccupationCode</value>

        [DataMember(Name="employeeOccupationCode")]
        public List<DolOccupationCodeType> EmployeeOccupationCode { get; set; }

        /// <summary>
        /// A job of an employee. NIEM reference is nc:EmployeeOccupationText
        /// </summary>
        /// <value>A job of an employee. NIEM reference is nc:EmployeeOccupationText</value>

        [DataMember(Name="employeeOccupation")]
        public List<NcTextType> EmployeeOccupation { get; set; }

        /// <summary>
        /// A general kind of job of an employee. NIEM reference is nc:EmployeeOccupationCategoryText
        /// </summary>
        /// <value>A general kind of job of an employee. NIEM reference is nc:EmployeeOccupationCategoryText</value>

        [DataMember(Name="employeeOccupationCategory")]
        public List<NcTextType> EmployeeOccupationCategory { get; set; }

        /// <summary>
        /// A rank, status, or promotion level of a person within an employment organization. NIEM reference is nc:EmployeeRankText
        /// </summary>
        /// <value>A rank, status, or promotion level of a person within an employment organization. NIEM reference is nc:EmployeeRankText</value>

        [DataMember(Name="employeeRank")]
        public List<NcTextType> EmployeeRank { get; set; }

        /// <summary>
        /// An employment identification number assigned to a person. NIEM reference is nc:EmployeeIdentification
        /// </summary>
        /// <value>An employment identification number assigned to a person. NIEM reference is nc:EmployeeIdentification</value>

        [DataMember(Name="employeeIdentification")]
        public List<NcIdentificationType> EmployeeIdentification { get; set; }

        /// <summary>
        /// A means of contacting a person at work. NIEM reference is nc:EmploymentContactInformation
        /// </summary>
        /// <value>A means of contacting a person at work. NIEM reference is nc:EmploymentContactInformation</value>

        [DataMember(Name="employmentContactInformation")]
        public List<NcContactInformationType> EmploymentContactInformation { get; set; }

        /// <summary>
        /// A location where a person works. NIEM reference is nc:EmploymentLocation
        /// </summary>
        /// <value>A location where a person works. NIEM reference is nc:EmploymentLocation</value>

        [DataMember(Name="employmentLocation")]
        public List<NcLocationType> EmploymentLocation { get; set; }

        /// <summary>
        /// A set of hours or time frame during which a person usually works. NIEM reference is nc:EmployeeShiftText
        /// </summary>
        /// <value>A set of hours or time frame during which a person usually works. NIEM reference is nc:EmployeeShiftText</value>

        [DataMember(Name="employeeShift")]
        public List<NcTextType> EmployeeShift { get; set; }

        /// <summary>
        /// A monetary compensation a person receives for employment. NIEM reference is nc:EmployeeEarningsRateText
        /// </summary>
        /// <value>A monetary compensation a person receives for employment. NIEM reference is nc:EmployeeEarningsRateText</value>

        [DataMember(Name="employeeEarningsRate")]
        public List<NcTextType> EmployeeEarningsRate { get; set; }

        /// <summary>
        /// A status of employment for a person. NIEM reference is nc:EmploymentStatus
        /// </summary>
        /// <value>A status of employment for a person. NIEM reference is nc:EmploymentStatus</value>

        [DataMember(Name="employmentStatus")]
        public List<NcStatusType> EmploymentStatus { get; set; }

        /// <summary>
        /// A person who oversees and manages an employee. NIEM reference is nc:EmployeeSupervisor
        /// </summary>
        /// <value>A person who oversees and manages an employee. NIEM reference is nc:EmployeeSupervisor</value>

        [DataMember(Name="employeeSupervisor")]
        public List<NcPersonType> EmployeeSupervisor { get; set; }

        /// <summary>
        /// Additional information about person employment. NIEM reference is im:PersonEmploymentAssociationAugmentation
        /// </summary>
        /// <value>Additional information about person employment. NIEM reference is im:PersonEmploymentAssociationAugmentation</value>

        [DataMember(Name="imAugmentation")]
        public List<ImPersonEmploymentAssociationAugmentationType> ImAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person employment association. NIEM reference is j:PersonEmploymentAssociationAugmentation
        /// </summary>
        /// <value>Additional information about a person employment association. NIEM reference is j:PersonEmploymentAssociationAugmentation</value>

        [DataMember(Name="jAugmentation")]
        public List<JPersonEmploymentAssociationAugmentationType> JAugmentation { get; set; }

        /// <summary>
        /// Additional information about a person employment. NIEM reference is scr:PersonEmploymentAssociationAugmentation
        /// </summary>
        /// <value>Additional information about a person employment. NIEM reference is scr:PersonEmploymentAssociationAugmentation</value>

        [DataMember(Name="scrAugmentation")]
        public List<ScrPersonEmploymentAssociationAugmentationType> ScrAugmentation { get; set; }

        /// <summary>
        /// ncPersonEmploymentAssociationType JSON-LD context
        /// </summary>
        /// <value>ncPersonEmploymentAssociationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonEmploymentAssociationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonEmploymentAssociationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonEmploymentAssociationTypeContext.jsonld")]
            JSONLDContextsncPersonEmploymentAssociationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonEmploymentAssociationType JSON-LD context
        /// </summary>
        /// <value>ncPersonEmploymentAssociationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonEmploymentAssociationType {\n");
            sb.Append("  Employee: ").Append(Employee).Append("\n");
            sb.Append("  Employer: ").Append(Employer).Append("\n");
            sb.Append("  EmployeeDepartmentName: ").Append(EmployeeDepartmentName).Append("\n");
            sb.Append("  EmployeePositionName: ").Append(EmployeePositionName).Append("\n");
            sb.Append("  EmployeeOccupationCode: ").Append(EmployeeOccupationCode).Append("\n");
            sb.Append("  EmployeeOccupation: ").Append(EmployeeOccupation).Append("\n");
            sb.Append("  EmployeeOccupationCategory: ").Append(EmployeeOccupationCategory).Append("\n");
            sb.Append("  EmployeeRank: ").Append(EmployeeRank).Append("\n");
            sb.Append("  EmployeeIdentification: ").Append(EmployeeIdentification).Append("\n");
            sb.Append("  EmploymentContactInformation: ").Append(EmploymentContactInformation).Append("\n");
            sb.Append("  EmploymentLocation: ").Append(EmploymentLocation).Append("\n");
            sb.Append("  EmployeeShift: ").Append(EmployeeShift).Append("\n");
            sb.Append("  EmployeeEarningsRate: ").Append(EmployeeEarningsRate).Append("\n");
            sb.Append("  EmploymentStatus: ").Append(EmploymentStatus).Append("\n");
            sb.Append("  EmployeeSupervisor: ").Append(EmployeeSupervisor).Append("\n");
            sb.Append("  ImAugmentation: ").Append(ImAugmentation).Append("\n");
            sb.Append("  JAugmentation: ").Append(JAugmentation).Append("\n");
            sb.Append("  ScrAugmentation: ").Append(ScrAugmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonEmploymentAssociationType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonEmploymentAssociationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonEmploymentAssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonEmploymentAssociationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Employee == other.Employee ||
                    Employee != null &&
                    Employee.SequenceEqual(other.Employee)
                ) && 
                (
                    Employer == other.Employer ||
                    Employer != null &&
                    Employer.SequenceEqual(other.Employer)
                ) && 
                (
                    EmployeeDepartmentName == other.EmployeeDepartmentName ||
                    EmployeeDepartmentName != null &&
                    EmployeeDepartmentName.SequenceEqual(other.EmployeeDepartmentName)
                ) && 
                (
                    EmployeePositionName == other.EmployeePositionName ||
                    EmployeePositionName != null &&
                    EmployeePositionName.SequenceEqual(other.EmployeePositionName)
                ) && 
                (
                    EmployeeOccupationCode == other.EmployeeOccupationCode ||
                    EmployeeOccupationCode != null &&
                    EmployeeOccupationCode.SequenceEqual(other.EmployeeOccupationCode)
                ) && 
                (
                    EmployeeOccupation == other.EmployeeOccupation ||
                    EmployeeOccupation != null &&
                    EmployeeOccupation.SequenceEqual(other.EmployeeOccupation)
                ) && 
                (
                    EmployeeOccupationCategory == other.EmployeeOccupationCategory ||
                    EmployeeOccupationCategory != null &&
                    EmployeeOccupationCategory.SequenceEqual(other.EmployeeOccupationCategory)
                ) && 
                (
                    EmployeeRank == other.EmployeeRank ||
                    EmployeeRank != null &&
                    EmployeeRank.SequenceEqual(other.EmployeeRank)
                ) && 
                (
                    EmployeeIdentification == other.EmployeeIdentification ||
                    EmployeeIdentification != null &&
                    EmployeeIdentification.SequenceEqual(other.EmployeeIdentification)
                ) && 
                (
                    EmploymentContactInformation == other.EmploymentContactInformation ||
                    EmploymentContactInformation != null &&
                    EmploymentContactInformation.SequenceEqual(other.EmploymentContactInformation)
                ) && 
                (
                    EmploymentLocation == other.EmploymentLocation ||
                    EmploymentLocation != null &&
                    EmploymentLocation.SequenceEqual(other.EmploymentLocation)
                ) && 
                (
                    EmployeeShift == other.EmployeeShift ||
                    EmployeeShift != null &&
                    EmployeeShift.SequenceEqual(other.EmployeeShift)
                ) && 
                (
                    EmployeeEarningsRate == other.EmployeeEarningsRate ||
                    EmployeeEarningsRate != null &&
                    EmployeeEarningsRate.SequenceEqual(other.EmployeeEarningsRate)
                ) && 
                (
                    EmploymentStatus == other.EmploymentStatus ||
                    EmploymentStatus != null &&
                    EmploymentStatus.SequenceEqual(other.EmploymentStatus)
                ) && 
                (
                    EmployeeSupervisor == other.EmployeeSupervisor ||
                    EmployeeSupervisor != null &&
                    EmployeeSupervisor.SequenceEqual(other.EmployeeSupervisor)
                ) && 
                (
                    ImAugmentation == other.ImAugmentation ||
                    ImAugmentation != null &&
                    ImAugmentation.SequenceEqual(other.ImAugmentation)
                ) && 
                (
                    JAugmentation == other.JAugmentation ||
                    JAugmentation != null &&
                    JAugmentation.SequenceEqual(other.JAugmentation)
                ) && 
                (
                    ScrAugmentation == other.ScrAugmentation ||
                    ScrAugmentation != null &&
                    ScrAugmentation.SequenceEqual(other.ScrAugmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Employee != null)
                    hashCode = hashCode * 59 + Employee.GetHashCode();
                    if (Employer != null)
                    hashCode = hashCode * 59 + Employer.GetHashCode();
                    if (EmployeeDepartmentName != null)
                    hashCode = hashCode * 59 + EmployeeDepartmentName.GetHashCode();
                    if (EmployeePositionName != null)
                    hashCode = hashCode * 59 + EmployeePositionName.GetHashCode();
                    if (EmployeeOccupationCode != null)
                    hashCode = hashCode * 59 + EmployeeOccupationCode.GetHashCode();
                    if (EmployeeOccupation != null)
                    hashCode = hashCode * 59 + EmployeeOccupation.GetHashCode();
                    if (EmployeeOccupationCategory != null)
                    hashCode = hashCode * 59 + EmployeeOccupationCategory.GetHashCode();
                    if (EmployeeRank != null)
                    hashCode = hashCode * 59 + EmployeeRank.GetHashCode();
                    if (EmployeeIdentification != null)
                    hashCode = hashCode * 59 + EmployeeIdentification.GetHashCode();
                    if (EmploymentContactInformation != null)
                    hashCode = hashCode * 59 + EmploymentContactInformation.GetHashCode();
                    if (EmploymentLocation != null)
                    hashCode = hashCode * 59 + EmploymentLocation.GetHashCode();
                    if (EmployeeShift != null)
                    hashCode = hashCode * 59 + EmployeeShift.GetHashCode();
                    if (EmployeeEarningsRate != null)
                    hashCode = hashCode * 59 + EmployeeEarningsRate.GetHashCode();
                    if (EmploymentStatus != null)
                    hashCode = hashCode * 59 + EmploymentStatus.GetHashCode();
                    if (EmployeeSupervisor != null)
                    hashCode = hashCode * 59 + EmployeeSupervisor.GetHashCode();
                    if (ImAugmentation != null)
                    hashCode = hashCode * 59 + ImAugmentation.GetHashCode();
                    if (JAugmentation != null)
                    hashCode = hashCode * 59 + JAugmentation.GetHashCode();
                    if (ScrAugmentation != null)
                    hashCode = hashCode * 59 + ScrAugmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonEmploymentAssociationType left, NcPersonEmploymentAssociationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonEmploymentAssociationType left, NcPersonEmploymentAssociationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
