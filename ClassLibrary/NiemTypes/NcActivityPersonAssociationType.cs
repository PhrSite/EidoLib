/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an association between an activity and a person.
    /// </summary>
    [DataContract]
    public partial class NcActivityPersonAssociationType : NcAssociationType, IEquatable<NcActivityPersonAssociationType>
    { 
        /// <summary>
        /// A single or set of related actions, events, or process steps. NIEM reference is nc:Activity
        /// </summary>
        /// <value>A single or set of related actions, events, or process steps. NIEM reference is nc:Activity</value>

        [DataMember(Name="activity")]
        public List<NcActivityType> Activity { get; set; }

        /// <summary>
        /// A human being. NIEM reference is nc:Person
        /// </summary>
        /// <value>A human being. NIEM reference is nc:Person</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// A description of the involvement of an entity in an activity. NIEM reference is nc:ActivityInvolvementText
        /// </summary>
        /// <value>A description of the involvement of an entity in an activity. NIEM reference is nc:ActivityInvolvementText</value>

        [DataMember(Name="activityInvolvement")]
        public List<NcTextType> ActivityInvolvement { get; set; }

        /// <summary>
        /// Additional information about a relationship between an activity and a person involved in that activity. NIEM reference is hs:ActivityPersonAssociationAugmentation
        /// </summary>
        /// <value>Additional information about a relationship between an activity and a person involved in that activity. NIEM reference is hs:ActivityPersonAssociationAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<HsActivityInvolvedPersonAssociationAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncActivityPersonAssociationType JSON-LD context
        /// </summary>
        /// <value>ncActivityPersonAssociationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncActivityPersonAssociationTypeContextJsonldEnum for ../JSON-LD_Contexts/ncActivityPersonAssociationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncActivityPersonAssociationTypeContext.jsonld")]
            JSONLDContextsncActivityPersonAssociationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncActivityPersonAssociationType JSON-LD context
        /// </summary>
        /// <value>ncActivityPersonAssociationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcActivityPersonAssociationType {\n");
            sb.Append("  Activity: ").Append(Activity).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  ActivityInvolvement: ").Append(ActivityInvolvement).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcActivityPersonAssociationType)obj);
        }

        /// <summary>
        /// Returns true if NcActivityPersonAssociationType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcActivityPersonAssociationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcActivityPersonAssociationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Activity == other.Activity ||
                    Activity != null &&
                    Activity.SequenceEqual(other.Activity)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    ActivityInvolvement == other.ActivityInvolvement ||
                    ActivityInvolvement != null &&
                    ActivityInvolvement.SequenceEqual(other.ActivityInvolvement)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Activity != null)
                    hashCode = hashCode * 59 + Activity.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (ActivityInvolvement != null)
                    hashCode = hashCode * 59 + ActivityInvolvement.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcActivityPersonAssociationType left, NcActivityPersonAssociationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcActivityPersonAssociationType left, NcActivityPersonAssociationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
