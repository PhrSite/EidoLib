/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for the optional field allows the user to state whether a ruler or other known scale is present in the image.
    /// </summary>
    [DataContract]
    public partial class BiomRulerScalePresenceInformationType : IEquatable<BiomRulerScalePresenceInformationType>
    { 
        /// <summary>
        /// A unit of measurement visible on the ruler or measurement scale. NIEM reference is biom:RulerScaleUnitCode
        /// </summary>
        /// <value>A unit of measurement visible on the ruler or measurement scale. NIEM reference is biom:RulerScaleUnitCode</value>

        [DataMember(Name="rulerScaleUnitCode")]
        public List<BiomRulerScaleUnitCodeType> RulerScaleUnitCode { get; set; }

        /// <summary>
        /// A make of a ruler or scale NIEM reference is biom:RulerScaleMakeText
        /// </summary>
        /// <value>A make of a ruler or scale NIEM reference is biom:RulerScaleMakeText</value>

        [DataMember(Name="rulerScaleMake")]
        public List<NcTextType> RulerScaleMake { get; set; }

        /// <summary>
        /// A model of a ruler or scale NIEM reference is biom:RulerScaleModelText
        /// </summary>
        /// <value>A model of a ruler or scale NIEM reference is biom:RulerScaleModelText</value>

        [DataMember(Name="rulerScaleModel")]
        public List<NcTextType> RulerScaleModel { get; set; }

        /// <summary>
        /// biomRulerScalePresenceInformationType JSON-LD context
        /// </summary>
        /// <value>biomRulerScalePresenceInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomRulerScalePresenceInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomRulerScalePresenceInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomRulerScalePresenceInformationTypeContext.jsonld")]
            JSONLDContextsbiomRulerScalePresenceInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomRulerScalePresenceInformationType JSON-LD context
        /// </summary>
        /// <value>biomRulerScalePresenceInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomRulerScalePresenceInformationType {\n");
            sb.Append("  RulerScaleUnitCode: ").Append(RulerScaleUnitCode).Append("\n");
            sb.Append("  RulerScaleMake: ").Append(RulerScaleMake).Append("\n");
            sb.Append("  RulerScaleModel: ").Append(RulerScaleModel).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomRulerScalePresenceInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomRulerScalePresenceInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomRulerScalePresenceInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomRulerScalePresenceInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RulerScaleUnitCode == other.RulerScaleUnitCode ||
                    RulerScaleUnitCode != null &&
                    RulerScaleUnitCode.SequenceEqual(other.RulerScaleUnitCode)
                ) && 
                (
                    RulerScaleMake == other.RulerScaleMake ||
                    RulerScaleMake != null &&
                    RulerScaleMake.SequenceEqual(other.RulerScaleMake)
                ) && 
                (
                    RulerScaleModel == other.RulerScaleModel ||
                    RulerScaleModel != null &&
                    RulerScaleModel.SequenceEqual(other.RulerScaleModel)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RulerScaleUnitCode != null)
                    hashCode = hashCode * 59 + RulerScaleUnitCode.GetHashCode();
                    if (RulerScaleMake != null)
                    hashCode = hashCode * 59 + RulerScaleMake.GetHashCode();
                    if (RulerScaleModel != null)
                    hashCode = hashCode * 59 + RulerScaleModel.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomRulerScalePresenceInformationType left, BiomRulerScalePresenceInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomRulerScalePresenceInformationType left, BiomRulerScalePresenceInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
