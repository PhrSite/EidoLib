/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for container which contains information about the container format that encapsulates the audio data of the electronic file used to carry the voice data in the digital recording.
    /// </summary>
    [DataContract]
    public partial class BiomDigitalMediaContainerType : IEquatable<BiomDigitalMediaContainerType>
    { 
        /// <summary>
        /// A digital container format code which encapsulates audio data in an electronic digital recording file. NIEM reference is biom:DigitalMediaContainerFormatCode
        /// </summary>
        /// <value>A digital container format code which encapsulates audio data in an electronic digital recording file. NIEM reference is biom:DigitalMediaContainerFormatCode</value>

        [DataMember(Name="formatCode")]
        public List<BiomDigitalMediaContainerFormatCodeType> FormatCode { get; set; }

        /// <summary>
        /// An external container reference code / ECON contains the &#x27;reference code&#x27; from the table of containers available at http://www.nist.gov/itl/iad/ig/ansi_standard.cfm. NIEM reference is biom:DigitalMediaContainerExternalReferenceCodeText
        /// </summary>
        /// <value>An external container reference code / ECON contains the &#x27;reference code&#x27; from the table of containers available at http://www.nist.gov/itl/iad/ig/ansi_standard.cfm. NIEM reference is biom:DigitalMediaContainerExternalReferenceCodeText</value>

        [DataMember(Name="externalReferenceCode")]
        public List<NcTextType> ExternalReferenceCode { get; set; }

        /// <summary>
        /// A comment used to note any additional information about the audio information in a record. NIEM reference is biom:AudioCommentText
        /// </summary>
        /// <value>A comment used to note any additional information about the audio information in a record. NIEM reference is biom:AudioCommentText</value>

        [DataMember(Name="audioComment")]
        public List<NcTextType> AudioComment { get; set; }

        /// <summary>
        /// biomDigitalMediaContainerType JSON-LD context
        /// </summary>
        /// <value>biomDigitalMediaContainerType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomDigitalMediaContainerTypeContextJsonldEnum for ../JSON-LD_Contexts/biomDigitalMediaContainerTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomDigitalMediaContainerTypeContext.jsonld")]
            JSONLDContextsbiomDigitalMediaContainerTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomDigitalMediaContainerType JSON-LD context
        /// </summary>
        /// <value>biomDigitalMediaContainerType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomDigitalMediaContainerType {\n");
            sb.Append("  FormatCode: ").Append(FormatCode).Append("\n");
            sb.Append("  ExternalReferenceCode: ").Append(ExternalReferenceCode).Append("\n");
            sb.Append("  AudioComment: ").Append(AudioComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomDigitalMediaContainerType)obj);
        }

        /// <summary>
        /// Returns true if BiomDigitalMediaContainerType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomDigitalMediaContainerType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomDigitalMediaContainerType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FormatCode == other.FormatCode ||
                    FormatCode != null &&
                    FormatCode.SequenceEqual(other.FormatCode)
                ) && 
                (
                    ExternalReferenceCode == other.ExternalReferenceCode ||
                    ExternalReferenceCode != null &&
                    ExternalReferenceCode.SequenceEqual(other.ExternalReferenceCode)
                ) && 
                (
                    AudioComment == other.AudioComment ||
                    AudioComment != null &&
                    AudioComment.SequenceEqual(other.AudioComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FormatCode != null)
                    hashCode = hashCode * 59 + FormatCode.GetHashCode();
                    if (ExternalReferenceCode != null)
                    hashCode = hashCode * 59 + ExternalReferenceCode.GetHashCode();
                    if (AudioComment != null)
                    hashCode = hashCode * 59 + AudioComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomDigitalMediaContainerType left, BiomDigitalMediaContainerType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomDigitalMediaContainerType left, BiomDigitalMediaContainerType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
