/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an occurrence or an event that may require a response.
    /// </summary>
    [DataContract]
    public partial class NcIncidentType : NcActivityType, IEquatable<NcIncidentType>
    { 
        /// <summary>
        /// A location where an incident occurred. NIEM reference is nc:IncidentLocation
        /// </summary>
        /// <value>A location where an incident occurred. NIEM reference is nc:IncidentLocation</value>

        [DataMember(Name="location")]
        public List<NcLocationType> Location { get; set; }

        /// <summary>
        /// An action or occurrence associated with an incident. NIEM reference is nc:IncidentEvent
        /// </summary>
        /// <value>An action or occurrence associated with an incident. NIEM reference is nc:IncidentEvent</value>

        [DataMember(Name="event")]
        public List<NcActivityType> _Event { get; set; }

        /// <summary>
        /// An organization or agency who has jurisdiction over an incident. NIEM reference is nc:IncidentJurisdictionalOrganization
        /// </summary>
        /// <value>An organization or agency who has jurisdiction over an incident. NIEM reference is nc:IncidentJurisdictionalOrganization</value>

        [DataMember(Name="jurisdictionalOrganization")]
        public List<NcOrganizationType> JurisdictionalOrganization { get; set; }

        /// <summary>
        /// A remark about something noticed with regards to an incident. NIEM reference is nc:IncidentObservationText
        /// </summary>
        /// <value>A remark about something noticed with regards to an incident. NIEM reference is nc:IncidentObservationText</value>

        [DataMember(Name="observation")]
        public List<NcTextType> Observation { get; set; }

        /// <summary>
        /// A document containing an account of the events that transpired in an incident. NIEM reference is nc:IncidentReportedNarrative
        /// </summary>
        /// <value>A document containing an account of the events that transpired in an incident. NIEM reference is nc:IncidentReportedNarrative</value>

        [DataMember(Name="reportedNarrative")]
        public List<NcDocumentType> ReportedNarrative { get; set; }

        /// <summary>
        /// A general time of day during which an incident occurred. NIEM reference is nc:IncidentDayPeriodText
        /// </summary>
        /// <value>A general time of day during which an incident occurred. NIEM reference is nc:IncidentDayPeriodText</value>

        [DataMember(Name="dayPeriod")]
        public List<NcTextType> DayPeriod { get; set; }

        /// <summary>
        /// Additional information about an incident. NIEM reference is j:IncidentAugmentation
        /// </summary>
        /// <value>Additional information about an incident. NIEM reference is j:IncidentAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JIncidentAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncIncidentType JSON-LD context
        /// </summary>
        /// <value>ncIncidentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncIncidentTypeContextJsonldEnum for ../JSON-LD_Contexts/ncIncidentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncIncidentTypeContext.jsonld")]
            JSONLDContextsncIncidentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncIncidentType JSON-LD context
        /// </summary>
        /// <value>ncIncidentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcIncidentType {\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  JurisdictionalOrganization: ").Append(JurisdictionalOrganization).Append("\n");
            sb.Append("  Observation: ").Append(Observation).Append("\n");
            sb.Append("  ReportedNarrative: ").Append(ReportedNarrative).Append("\n");
            sb.Append("  DayPeriod: ").Append(DayPeriod).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcIncidentType)obj);
        }

        /// <summary>
        /// Returns true if NcIncidentType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcIncidentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcIncidentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.SequenceEqual(other.Location)
                ) && 
                (
                    _Event == other._Event ||
                    _Event != null &&
                    _Event.SequenceEqual(other._Event)
                ) && 
                (
                    JurisdictionalOrganization == other.JurisdictionalOrganization ||
                    JurisdictionalOrganization != null &&
                    JurisdictionalOrganization.SequenceEqual(other.JurisdictionalOrganization)
                ) && 
                (
                    Observation == other.Observation ||
                    Observation != null &&
                    Observation.SequenceEqual(other.Observation)
                ) && 
                (
                    ReportedNarrative == other.ReportedNarrative ||
                    ReportedNarrative != null &&
                    ReportedNarrative.SequenceEqual(other.ReportedNarrative)
                ) && 
                (
                    DayPeriod == other.DayPeriod ||
                    DayPeriod != null &&
                    DayPeriod.SequenceEqual(other.DayPeriod)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (_Event != null)
                    hashCode = hashCode * 59 + _Event.GetHashCode();
                    if (JurisdictionalOrganization != null)
                    hashCode = hashCode * 59 + JurisdictionalOrganization.GetHashCode();
                    if (Observation != null)
                    hashCode = hashCode * 59 + Observation.GetHashCode();
                    if (ReportedNarrative != null)
                    hashCode = hashCode * 59 + ReportedNarrative.GetHashCode();
                    if (DayPeriod != null)
                    hashCode = hashCode * 59 + DayPeriod.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcIncidentType left, NcIncidentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcIncidentType left, NcIncidentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
