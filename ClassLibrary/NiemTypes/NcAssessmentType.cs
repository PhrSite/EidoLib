/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for an evaluation, appraisal, or assessment of something or someone.
    /// </summary>
    [DataContract]
    public partial class NcAssessmentType : NcActivityType, IEquatable<NcAssessmentType>
    { 
        /// <summary>
        /// A person who performs an assessment. NIEM reference is nc:AssessmentAssessor
        /// </summary>
        /// <value>A person who performs an assessment. NIEM reference is nc:AssessmentAssessor</value>

        [DataMember(Name="assessor")]
        public List<NcEntityType> Assessor { get; set; }

        /// <summary>
        /// An evaluation score of an assessment. NIEM reference is nc:AssessmentScoreText
        /// </summary>
        /// <value>An evaluation score of an assessment. NIEM reference is nc:AssessmentScoreText</value>

        [DataMember(Name="score")]
        public List<NcTextType> Score { get; set; }

        /// <summary>
        /// An amount of money charged to perform an assessment. NIEM reference is nc:AssessmentFee
        /// </summary>
        /// <value>An amount of money charged to perform an assessment. NIEM reference is nc:AssessmentFee</value>

        [DataMember(Name="fee")]
        public List<NcObligationType> Fee { get; set; }

        /// <summary>
        /// A program a person attends or undergoes in which an assessment is made. NIEM reference is nc:AssessmentProgram
        /// </summary>
        /// <value>A program a person attends or undergoes in which an assessment is made. NIEM reference is nc:AssessmentProgram</value>

        [DataMember(Name="program")]
        public List<NcProgramType> Program { get; set; }

        /// <summary>
        /// An order or direction for an assessment to be performed. NIEM reference is nc:AssessmentReferral
        /// </summary>
        /// <value>An order or direction for an assessment to be performed. NIEM reference is nc:AssessmentReferral</value>

        [DataMember(Name="referral")]
        public List<NcReferralType> Referral { get; set; }

        /// <summary>
        /// A person who undergoes an assessment. NIEM reference is nc:AssessmentPerson
        /// </summary>
        /// <value>A person who undergoes an assessment. NIEM reference is nc:AssessmentPerson</value>

        [DataMember(Name="person")]
        public List<NcPersonType> Person { get; set; }

        /// <summary>
        /// Additional information about an assessment. NIEM reference is j:AssessmentAugmentation
        /// </summary>
        /// <value>Additional information about an assessment. NIEM reference is j:AssessmentAugmentation</value>

        [DataMember(Name="augmentation")]
        public List<JAssessmentAugmentationType> Augmentation { get; set; }

        /// <summary>
        /// ncAssessmentType JSON-LD context
        /// </summary>
        /// <value>ncAssessmentType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncAssessmentTypeContextJsonldEnum for ../JSON-LD_Contexts/ncAssessmentTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncAssessmentTypeContext.jsonld")]
            JSONLDContextsncAssessmentTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncAssessmentType JSON-LD context
        /// </summary>
        /// <value>ncAssessmentType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcAssessmentType {\n");
            sb.Append("  Assessor: ").Append(Assessor).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Program: ").Append(Program).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  Augmentation: ").Append(Augmentation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcAssessmentType)obj);
        }

        /// <summary>
        /// Returns true if NcAssessmentType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcAssessmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcAssessmentType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Assessor == other.Assessor ||
                    Assessor != null &&
                    Assessor.SequenceEqual(other.Assessor)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.SequenceEqual(other.Score)
                ) && 
                (
                    Fee == other.Fee ||
                    Fee != null &&
                    Fee.SequenceEqual(other.Fee)
                ) && 
                (
                    Program == other.Program ||
                    Program != null &&
                    Program.SequenceEqual(other.Program)
                ) && 
                (
                    Referral == other.Referral ||
                    Referral != null &&
                    Referral.SequenceEqual(other.Referral)
                ) && 
                (
                    Person == other.Person ||
                    Person != null &&
                    Person.SequenceEqual(other.Person)
                ) && 
                (
                    Augmentation == other.Augmentation ||
                    Augmentation != null &&
                    Augmentation.SequenceEqual(other.Augmentation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Assessor != null)
                    hashCode = hashCode * 59 + Assessor.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (Fee != null)
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                    if (Program != null)
                    hashCode = hashCode * 59 + Program.GetHashCode();
                    if (Referral != null)
                    hashCode = hashCode * 59 + Referral.GetHashCode();
                    if (Person != null)
                    hashCode = hashCode * 59 + Person.GetHashCode();
                    if (Augmentation != null)
                    hashCode = hashCode * 59 + Augmentation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcAssessmentType left, NcAssessmentType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcAssessmentType left, NcAssessmentType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
