/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a description of the transducer and transmission channel used to capture a recording.
    /// </summary>
    [DataContract]
    public partial class BiomSegmentChannelInformationType : IEquatable<BiomSegmentChannelInformationType>
    { 
        /// <summary>
        /// A list of segment identifiers. NIEM reference is biom:SegmentIDList
        /// </summary>
        /// <value>A list of segment identifiers. NIEM reference is biom:SegmentIDList</value>

        [DataMember(Name="segmentIdList")]
        public List<BiomSegmentIDListType> SegmentIdList { get; set; }

        /// <summary>
        /// An audio segment channel capture device code. NIEM reference is biom:AudioCaptureDeviceCode
        /// </summary>
        /// <value>An audio segment channel capture device code. NIEM reference is biom:AudioCaptureDeviceCode</value>

        [DataMember(Name="audioCaptureDeviceCode")]
        public List<BiomAudioCaptureDeviceCodeType> AudioCaptureDeviceCode { get; set; }

        /// <summary>
        /// A transducer principle of a microphone. NIEM reference is biom:TransducerPrincipleCode
        /// </summary>
        /// <value>A transducer principle of a microphone. NIEM reference is biom:TransducerPrincipleCode</value>

        [DataMember(Name="transducerPrincipleCode")]
        public List<BiomTransducerPrincipleCodeType> TransducerPrincipleCode { get; set; }

        /// <summary>
        /// A description of the acoustic environment of a recording. NIEM reference is biom:AudioCaptureEnvironmentText
        /// </summary>
        /// <value>A description of the acoustic environment of a recording. NIEM reference is biom:AudioCaptureEnvironmentText</value>

        [DataMember(Name="audioCaptureEnvironment")]
        public List<NcTextType> AudioCaptureEnvironment { get; set; }

        /// <summary>
        /// An approximate distance between the speaker in a recording and the transducer. NIEM reference is biom:TransducerDistanceValue
        /// </summary>
        /// <value>An approximate distance between the speaker in a recording and the transducer. NIEM reference is biom:TransducerDistanceValue</value>

        [DataMember(Name="transducerDistanceValue")]
        public List<BiomInteger0to99999Type> TransducerDistanceValue { get; set; }

        /// <summary>
        /// A kind of acquisition method for the source representation NIEM reference is biom:AcquisitionSourceCode
        /// </summary>
        /// <value>A kind of acquisition method for the source representation NIEM reference is biom:AcquisitionSourceCode</value>

        [DataMember(Name="acquisitionSourceCode")]
        public List<BiomAcquisitionSourceCodeType> AcquisitionSourceCode { get; set; }

        /// <summary>
        /// A description of any digital masking between transducer and recording, disguisers, or other attempts to alter the properties of a recording. NIEM reference is biom:TransductionAlterationDescriptionText
        /// </summary>
        /// <value>A description of any digital masking between transducer and recording, disguisers, or other attempts to alter the properties of a recording. NIEM reference is biom:TransductionAlterationDescriptionText</value>

        [DataMember(Name="transductionAlterationDescription")]
        public List<NcTextType> TransductionAlterationDescription { get; set; }

        /// <summary>
        /// A comment to identify or describe the transduction and transmission channels of a recording. NIEM reference is biom:ChannelCommentText
        /// </summary>
        /// <value>A comment to identify or describe the transduction and transmission channels of a recording. NIEM reference is biom:ChannelCommentText</value>

        [DataMember(Name="channelComment")]
        public List<NcTextType> ChannelComment { get; set; }

        /// <summary>
        /// biomSegmentChannelInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentChannelInformationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomSegmentChannelInformationTypeContextJsonldEnum for ../JSON-LD_Contexts/biomSegmentChannelInformationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomSegmentChannelInformationTypeContext.jsonld")]
            JSONLDContextsbiomSegmentChannelInformationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomSegmentChannelInformationType JSON-LD context
        /// </summary>
        /// <value>biomSegmentChannelInformationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomSegmentChannelInformationType {\n");
            sb.Append("  SegmentIdList: ").Append(SegmentIdList).Append("\n");
            sb.Append("  AudioCaptureDeviceCode: ").Append(AudioCaptureDeviceCode).Append("\n");
            sb.Append("  TransducerPrincipleCode: ").Append(TransducerPrincipleCode).Append("\n");
            sb.Append("  AudioCaptureEnvironment: ").Append(AudioCaptureEnvironment).Append("\n");
            sb.Append("  TransducerDistanceValue: ").Append(TransducerDistanceValue).Append("\n");
            sb.Append("  AcquisitionSourceCode: ").Append(AcquisitionSourceCode).Append("\n");
            sb.Append("  TransductionAlterationDescription: ").Append(TransductionAlterationDescription).Append("\n");
            sb.Append("  ChannelComment: ").Append(ChannelComment).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomSegmentChannelInformationType)obj);
        }

        /// <summary>
        /// Returns true if BiomSegmentChannelInformationType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomSegmentChannelInformationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomSegmentChannelInformationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SegmentIdList == other.SegmentIdList ||
                    SegmentIdList != null &&
                    SegmentIdList.SequenceEqual(other.SegmentIdList)
                ) && 
                (
                    AudioCaptureDeviceCode == other.AudioCaptureDeviceCode ||
                    AudioCaptureDeviceCode != null &&
                    AudioCaptureDeviceCode.SequenceEqual(other.AudioCaptureDeviceCode)
                ) && 
                (
                    TransducerPrincipleCode == other.TransducerPrincipleCode ||
                    TransducerPrincipleCode != null &&
                    TransducerPrincipleCode.SequenceEqual(other.TransducerPrincipleCode)
                ) && 
                (
                    AudioCaptureEnvironment == other.AudioCaptureEnvironment ||
                    AudioCaptureEnvironment != null &&
                    AudioCaptureEnvironment.SequenceEqual(other.AudioCaptureEnvironment)
                ) && 
                (
                    TransducerDistanceValue == other.TransducerDistanceValue ||
                    TransducerDistanceValue != null &&
                    TransducerDistanceValue.SequenceEqual(other.TransducerDistanceValue)
                ) && 
                (
                    AcquisitionSourceCode == other.AcquisitionSourceCode ||
                    AcquisitionSourceCode != null &&
                    AcquisitionSourceCode.SequenceEqual(other.AcquisitionSourceCode)
                ) && 
                (
                    TransductionAlterationDescription == other.TransductionAlterationDescription ||
                    TransductionAlterationDescription != null &&
                    TransductionAlterationDescription.SequenceEqual(other.TransductionAlterationDescription)
                ) && 
                (
                    ChannelComment == other.ChannelComment ||
                    ChannelComment != null &&
                    ChannelComment.SequenceEqual(other.ChannelComment)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SegmentIdList != null)
                    hashCode = hashCode * 59 + SegmentIdList.GetHashCode();
                    if (AudioCaptureDeviceCode != null)
                    hashCode = hashCode * 59 + AudioCaptureDeviceCode.GetHashCode();
                    if (TransducerPrincipleCode != null)
                    hashCode = hashCode * 59 + TransducerPrincipleCode.GetHashCode();
                    if (AudioCaptureEnvironment != null)
                    hashCode = hashCode * 59 + AudioCaptureEnvironment.GetHashCode();
                    if (TransducerDistanceValue != null)
                    hashCode = hashCode * 59 + TransducerDistanceValue.GetHashCode();
                    if (AcquisitionSourceCode != null)
                    hashCode = hashCode * 59 + AcquisitionSourceCode.GetHashCode();
                    if (TransductionAlterationDescription != null)
                    hashCode = hashCode * 59 + TransductionAlterationDescription.GetHashCode();
                    if (ChannelComment != null)
                    hashCode = hashCode * 59 + ChannelComment.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomSegmentChannelInformationType left, BiomSegmentChannelInformationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomSegmentChannelInformationType left, BiomSegmentChannelInformationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
