/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a set of elements for the measure and definition of friction ridge detail within a particular region of interest in a fingerprint or palm print image
    /// </summary>
    [DataContract]
    public partial class BiomExtendedFeatureSetMinutiaeType : IEquatable<BiomExtendedFeatureSetMinutiaeType>
    { 
        /// <summary>
        /// A code representing an EFS Profile, which defines the level of annotation in specific minutiae record NIEM reference is biom:ExtendedFeatureSetProfileCode
        /// </summary>
        /// <value>A code representing an EFS Profile, which defines the level of annotation in specific minutiae record NIEM reference is biom:ExtendedFeatureSetProfileCode</value>

        [DataMember(Name="extendedFeatureSetProfileCode")]
        public List<BiomExtendedFeatureSetProfileCodeType> ExtendedFeatureSetProfileCode { get; set; }

        /// <summary>
        /// A square or polygon within a friction ridge image containing minutiae NIEM reference is biom:FrictionRidgeImageRegionOfInterest
        /// </summary>
        /// <value>A square or polygon within a friction ridge image containing minutiae NIEM reference is biom:FrictionRidgeImageRegionOfInterest</value>

        [DataMember(Name="frictionRidgeImageRegionOfInterest")]
        public List<BiomFrictionRidgeImageRegionOfInterestType> FrictionRidgeImageRegionOfInterest { get; set; }

        /// <summary>
        /// A deviation from upright of the finger tip within a fingerprint image NIEM reference is biom:FingerprintImageFingerprintOrientation
        /// </summary>
        /// <value>A deviation from upright of the finger tip within a fingerprint image NIEM reference is biom:FingerprintImageFingerprintOrientation</value>

        [DataMember(Name="fingerprintImageFingerprintOrientation")]
        public List<BiomFingerprintImageFingerprintOrientationType> FingerprintImageFingerprintOrientation { get; set; }

        /// <summary>
        /// A friction ridge position, segment, offcenter code, and polygon location within an image NIEM reference is biom:MinutiaeFrictionRidgeLocation
        /// </summary>
        /// <value>A friction ridge position, segment, offcenter code, and polygon location within an image NIEM reference is biom:MinutiaeFrictionRidgeLocation</value>

        [DataMember(Name="minutiaeFrictionRidgeLocation")]
        public List<BiomMinutiaeFrictionRidgeLocationType> MinutiaeFrictionRidgeLocation { get; set; }

        /// <summary>
        /// A classification and subclassification of a fingerprint pattern NIEM reference is biom:FingerprintPatternClassification
        /// </summary>
        /// <value>A classification and subclassification of a fingerprint pattern NIEM reference is biom:FingerprintPatternClassification</value>

        [DataMember(Name="fingerprintPatternClassification")]
        public List<BiomFingerprintPatternClassificationType> FingerprintPatternClassification { get; set; }

        /// <summary>
        /// A map of ridge quality values assigned to cells in a grid overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeQualityMap
        /// </summary>
        /// <value>A map of ridge quality values assigned to cells in a grid overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeQualityMap</value>

        [DataMember(Name="minutiaeRidgeQualityMap")]
        public List<BiomMinutiaeRidgeQualityMapType> MinutiaeRidgeQualityMap { get; set; }

        /// <summary>
        /// A map of ridge flow values assigned to cells at a matrix of points overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeFlowMap
        /// </summary>
        /// <value>A map of ridge flow values assigned to cells at a matrix of points overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeFlowMap</value>

        [DataMember(Name="minutiaeRidgeFlowMap")]
        public List<BiomMinutiaeRidgeFlowMapType> MinutiaeRidgeFlowMap { get; set; }

        /// <summary>
        /// A ridge wavelength value assigned to cells at a matrix of points overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeWavelengthMap
        /// </summary>
        /// <value>A ridge wavelength value assigned to cells at a matrix of points overlaying an image containing minutiae NIEM reference is biom:MinutiaeRidgeWavelengthMap</value>

        [DataMember(Name="minutiaeRidgeWavelengthMap")]
        public List<BiomMinutiaeRidgeWavelengthMapType> MinutiaeRidgeWavelengthMap { get; set; }

        /// <summary>
        /// A full or partial reversal of ridge and valley tones in an image NIEM reference is biom:FrictionRidgeImageTonalReversalCode
        /// </summary>
        /// <value>A full or partial reversal of ridge and valley tones in an image NIEM reference is biom:FrictionRidgeImageTonalReversalCode</value>

        [DataMember(Name="frictionRidgeImageTonalReversalCode")]
        public List<BiomFrictionRidgeImageTonalReversalCodeType> FrictionRidgeImageTonalReversalCode { get; set; }

        /// <summary>
        /// An indication that an image is or may be laterally reversed NIEM reference is biom:FrictionRidgeImageLateralReversalCode
        /// </summary>
        /// <value>An indication that an image is or may be laterally reversed NIEM reference is biom:FrictionRidgeImageLateralReversalCode</value>

        [DataMember(Name="frictionRidgeImageLateralReversalCode")]
        public List<BiomFrictionRidgeImageLateralReversalCodeType> FrictionRidgeImageLateralReversalCode { get; set; }

        /// <summary>
        /// A set of details about the quality of an image NIEM reference is biom:ImageQuality
        /// </summary>
        /// <value>A set of details about the quality of an image NIEM reference is biom:ImageQuality</value>

        [DataMember(Name="imageQuality")]
        public List<BiomImageQualityType> ImageQuality { get; set; }

        /// <summary>
        /// A growth or shrinkage indicating whether this impression may be larger or smaller than other exemplars for this subject NIEM reference is biom:MinutiaeGrowthOrShrinkage
        /// </summary>
        /// <value>A growth or shrinkage indicating whether this impression may be larger or smaller than other exemplars for this subject NIEM reference is biom:MinutiaeGrowthOrShrinkage</value>

        [DataMember(Name="minutiaeGrowthOrShrinkage")]
        public List<BiomMinutiaeGrowthOrShrinkageType> MinutiaeGrowthOrShrinkage { get; set; }

        /// <summary>
        /// True if no cores could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoCoresPresentIndicator
        /// </summary>
        /// <value>True if no cores could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoCoresPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoCoresPresent")]
        public List<NiemXsboolean> IsMinutiaeNoCoresPresent { get; set; }

        /// <summary>
        /// A core in a friction ridge image NIEM reference is biom:MinutiaeCore
        /// </summary>
        /// <value>A core in a friction ridge image NIEM reference is biom:MinutiaeCore</value>

        [DataMember(Name="minutiaeCore")]
        public List<BiomMinutiaeCoreType> MinutiaeCore { get; set; }

        /// <summary>
        /// True if no deltas could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDeltasPresentIndicator
        /// </summary>
        /// <value>True if no deltas could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDeltasPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoDeltasPresent")]
        public List<NiemXsboolean> IsMinutiaeNoDeltasPresent { get; set; }

        /// <summary>
        /// A delta in a friction ridge image NIEM reference is biom:MinutiaeDelta
        /// </summary>
        /// <value>A delta in a friction ridge image NIEM reference is biom:MinutiaeDelta</value>

        [DataMember(Name="minutiaeDelta")]
        public List<BiomMinutiaeDeltaType> MinutiaeDelta { get; set; }

        /// <summary>
        /// A core to delta ridge count NIEM reference is biom:MinutiaeRidgeCountCoreToDelta
        /// </summary>
        /// <value>A core to delta ridge count NIEM reference is biom:MinutiaeRidgeCountCoreToDelta</value>

        [DataMember(Name="minutiaeRidgeCountCoreToDelta")]
        public List<BiomMinutiaeRidgeCountCoreToDeltaType> MinutiaeRidgeCountCoreToDelta { get; set; }

        /// <summary>
        /// A location of the center of a friction ridge impression NIEM reference is biom:FrictionRidgeImageCenter
        /// </summary>
        /// <value>A location of the center of a friction ridge impression NIEM reference is biom:FrictionRidgeImageCenter</value>

        [DataMember(Name="frictionRidgeImageCenter")]
        public List<BiomFrictionRidgeImageCenterType> FrictionRidgeImageCenter { get; set; }

        /// <summary>
        /// True if no distinctive characteristics could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDistinctiveFeaturesPresentIndicator
        /// </summary>
        /// <value>True if no distinctive characteristics could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDistinctiveFeaturesPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoDistinctiveFeaturesPresent")]
        public List<NiemXsboolean> IsMinutiaeNoDistinctiveFeaturesPresent { get; set; }

        /// <summary>
        /// A distinctive feature in a friction ridge image NIEM reference is biom:MinutiaeDistinctiveFeature
        /// </summary>
        /// <value>A distinctive feature in a friction ridge image NIEM reference is biom:MinutiaeDistinctiveFeature</value>

        [DataMember(Name="minutiaeDistinctiveFeature")]
        public List<BiomMinutiaeDistinctiveFeatureType> MinutiaeDistinctiveFeature { get; set; }

        /// <summary>
        /// True if no minutiae could be discerned in the friction ridge image ; false otherwise NIEM reference is biom:MinutiaeNoMinutiaePresentIndicator
        /// </summary>
        /// <value>True if no minutiae could be discerned in the friction ridge image ; false otherwise NIEM reference is biom:MinutiaeNoMinutiaePresentIndicator</value>

        [DataMember(Name="isMinutiaeNoMinutiaePresent")]
        public List<NiemXsboolean> IsMinutiaeNoMinutiaePresent { get; set; }

        /// <summary>
        /// A confidence in a ridge count between two points NIEM reference is biom:MinutiaeRidgeCountConfidence
        /// </summary>
        /// <value>A confidence in a ridge count between two points NIEM reference is biom:MinutiaeRidgeCountConfidence</value>

        [DataMember(Name="minutiaeRidgeCountConfidence")]
        public List<BiomMinutiaeRidgeCountConfidenceType> MinutiaeRidgeCountConfidence { get; set; }

        /// <summary>
        /// True if no dots could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDotsPresentIndicator
        /// </summary>
        /// <value>True if no dots could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoDotsPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoDotsPresent")]
        public List<NiemXsboolean> IsMinutiaeNoDotsPresent { get; set; }

        /// <summary>
        /// A dot feature in a friction ridge image NIEM reference is biom:MinutiaeDot
        /// </summary>
        /// <value>A dot feature in a friction ridge image NIEM reference is biom:MinutiaeDot</value>

        [DataMember(Name="minutiaeDot")]
        public List<BiomMinutiaeDotType> MinutiaeDot { get; set; }

        /// <summary>
        /// True if no incipient ridges could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoIncipientRidgesPresentIndicator
        /// </summary>
        /// <value>True if no incipient ridges could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoIncipientRidgesPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoIncipientRidgesPresent")]
        public List<NiemXsboolean> IsMinutiaeNoIncipientRidgesPresent { get; set; }

        /// <summary>
        /// An incipient ridge in a friction ridge image NIEM reference is biom:MinutiaeIncipientRidge
        /// </summary>
        /// <value>An incipient ridge in a friction ridge image NIEM reference is biom:MinutiaeIncipientRidge</value>

        [DataMember(Name="minutiaeIncipientRidge")]
        public List<BiomMinutiaeIncipientRidgeType> MinutiaeIncipientRidge { get; set; }

        /// <summary>
        /// True if no creases could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoCreasesPresentIndicator
        /// </summary>
        /// <value>True if no creases could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoCreasesPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoCreasesPresent")]
        public List<NiemXsboolean> IsMinutiaeNoCreasesPresent { get; set; }

        /// <summary>
        /// A permanent flexion crease NIEM reference is biom:MinutiaeFlexionCrease
        /// </summary>
        /// <value>A permanent flexion crease NIEM reference is biom:MinutiaeFlexionCrease</value>

        [DataMember(Name="minutiaeFlexionCrease")]
        public List<BiomMinutiaeFlexionCreaseType> MinutiaeFlexionCrease { get; set; }

        /// <summary>
        /// True if no ridge edge features could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoRidgeEdgeFeaturesPresentIndicator
        /// </summary>
        /// <value>True if no ridge edge features could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoRidgeEdgeFeaturesPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoRidgeEdgeFeaturesPresent")]
        public List<NiemXsboolean> IsMinutiaeNoRidgeEdgeFeaturesPresent { get; set; }

        /// <summary>
        /// A ridge edge or discontinuity NIEM reference is biom:MinutiaeRidgeEdgeOrDiscontinuity
        /// </summary>
        /// <value>A ridge edge or discontinuity NIEM reference is biom:MinutiaeRidgeEdgeOrDiscontinuity</value>

        [DataMember(Name="minutiaeRidgeEdgeOrDiscontinuity")]
        public List<BiomMinutiaeRidgeEdgeOrDiscontinuityType> MinutiaeRidgeEdgeOrDiscontinuity { get; set; }

        /// <summary>
        /// True if no pores could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoPoresPresentIndicator
        /// </summary>
        /// <value>True if no pores could be discerned in the friction ridge image; false otherwise NIEM reference is biom:MinutiaeNoPoresPresentIndicator</value>

        [DataMember(Name="isMinutiaeNoPoresPresent")]
        public List<NiemXsboolean> IsMinutiaeNoPoresPresent { get; set; }

        /// <summary>
        /// A location of pores in a friction ridge image NIEM reference is biom:MinutiaePore
        /// </summary>
        /// <value>A location of pores in a friction ridge image NIEM reference is biom:MinutiaePore</value>

        [DataMember(Name="minutiaePore")]
        public List<BiomVertexType> MinutiaePore { get; set; }

        /// <summary>
        /// A detection and encoding of minutiae NIEM reference is biom:MinutiaeFeatureDetection
        /// </summary>
        /// <value>A detection and encoding of minutiae NIEM reference is biom:MinutiaeFeatureDetection</value>

        [DataMember(Name="minutiaeFeatureDetection")]
        public List<BiomMinutiaeFeatureDetectionType> MinutiaeFeatureDetection { get; set; }

        /// <summary>
        /// A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText
        /// </summary>
        /// <value>A free text comment about friction ridge features, methods, description, location, or background NIEM reference is biom:MinutiaeCommentText</value>

        [DataMember(Name="minutiaeComment")]
        public List<NcTextType> MinutiaeComment { get; set; }

        /// <summary>
        /// A kind of technique used for processing the latent friction ridge impression NIEM reference is biom:LatentProcessingCategoryCode
        /// </summary>
        /// <value>A kind of technique used for processing the latent friction ridge impression NIEM reference is biom:LatentProcessingCategoryCode</value>

        [DataMember(Name="latentProcessingCategoryCode")]
        public List<BiomLatentProcessingCategoryCodeType> LatentProcessingCategoryCode { get; set; }

        /// <summary>
        /// An examiner&#x27;s assessment of the value of a friction ridge impression NIEM reference is biom:MinutiaeValueAssessment
        /// </summary>
        /// <value>An examiner&#x27;s assessment of the value of a friction ridge impression NIEM reference is biom:MinutiaeValueAssessment</value>

        [DataMember(Name="minutiaeValueAssessment")]
        public List<BiomMinutiaeValueAssessmentType> MinutiaeValueAssessment { get; set; }

        /// <summary>
        /// A friction ridge impression fraud NIEM reference is biom:MinutiaeFraudEvidence
        /// </summary>
        /// <value>A friction ridge impression fraud NIEM reference is biom:MinutiaeFraudEvidence</value>

        [DataMember(Name="minutiaeFraudEvidence")]
        public List<BiomMinutiaeFraudEvidenceType> MinutiaeFraudEvidence { get; set; }

        /// <summary>
        /// A surface on which a friction ridge impression was deposited NIEM reference is biom:MinutiaeLatentSubstrate
        /// </summary>
        /// <value>A surface on which a friction ridge impression was deposited NIEM reference is biom:MinutiaeLatentSubstrate</value>

        [DataMember(Name="minutiaeLatentSubstrate")]
        public List<BiomMinutiaeLatentSubstrateType> MinutiaeLatentSubstrate { get; set; }

        /// <summary>
        /// A substance deposited by a friction ridge impression NIEM reference is biom:MinutiaeLatentMatrix
        /// </summary>
        /// <value>A substance deposited by a friction ridge impression NIEM reference is biom:MinutiaeLatentMatrix</value>

        [DataMember(Name="minutiaeLatentMatrix")]
        public List<BiomMinutiaeLatentMatrixType> MinutiaeLatentMatrix { get; set; }

        /// <summary>
        /// A localized friction ridge transfer quality issue NIEM reference is biom:MinutiaeLocalQualityIssues
        /// </summary>
        /// <value>A localized friction ridge transfer quality issue NIEM reference is biom:MinutiaeLocalQualityIssues</value>

        [DataMember(Name="minutiaeLocalQualityIssues")]
        public List<BiomMinutiaeLocalQualityIssuesType> MinutiaeLocalQualityIssues { get; set; }

        /// <summary>
        /// A portion of a friction ridge image that corresponds to another image NIEM reference is biom:FrictionRidgeImageAreaOfCorrespondence
        /// </summary>
        /// <value>A portion of a friction ridge image that corresponds to another image NIEM reference is biom:FrictionRidgeImageAreaOfCorrespondence</value>

        [DataMember(Name="frictionRidgeImageAreaOfCorrespondence")]
        public List<BiomFrictionRidgeImageAreaOfCorrespondenceType> FrictionRidgeImageAreaOfCorrespondence { get; set; }

        /// <summary>
        /// A correspondence between features in different friction ridge images NIEM reference is biom:MinutiaeFeatureCorrespondence
        /// </summary>
        /// <value>A correspondence between features in different friction ridge images NIEM reference is biom:MinutiaeFeatureCorrespondence</value>

        [DataMember(Name="minutiaeFeatureCorrespondence")]
        public List<BiomMinutiaeFeatureCorrespondenceType> MinutiaeFeatureCorrespondence { get; set; }

        /// <summary>
        /// An examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDetermination
        /// </summary>
        /// <value>An examiner&#x27;s comparison of friction ridge impressions NIEM reference is biom:MinutiaeExaminerComparisonDetermination</value>

        [DataMember(Name="minutiaeExaminerComparisonDetermination")]
        public List<BiomMinutiaeExaminerComparisonDeterminationType> MinutiaeExaminerComparisonDetermination { get; set; }

        /// <summary>
        /// A relative overall rotation necessary for two prints to be compared NIEM reference is biom:FrictionRidgeImageRelativeRotation
        /// </summary>
        /// <value>A relative overall rotation necessary for two prints to be compared NIEM reference is biom:FrictionRidgeImageRelativeRotation</value>

        [DataMember(Name="frictionRidgeImageRelativeRotation")]
        public List<BiomFrictionRidgeImageRelativeRotationType> FrictionRidgeImageRelativeRotation { get; set; }

        /// <summary>
        /// A PNG-compressed, base64 encoded data block containing a ridge tracing of a friction ridge impression NIEM reference is biom:FrictionRidgeSkeletonizedImageBinaryObject
        /// </summary>
        /// <value>A PNG-compressed, base64 encoded data block containing a ridge tracing of a friction ridge impression NIEM reference is biom:FrictionRidgeSkeletonizedImageBinaryObject</value>

        [DataMember(Name="frictionRidgeSkeletonizedImageBinaryObject")]
        public List<NiemXsbase64Binary> FrictionRidgeSkeletonizedImageBinaryObject { get; set; }

        /// <summary>
        /// A set of ridge paths in a particular friction ridge image NIEM reference is biom:MinutiaeImageRidgePath
        /// </summary>
        /// <value>A set of ridge paths in a particular friction ridge image NIEM reference is biom:MinutiaeImageRidgePath</value>

        [DataMember(Name="minutiaeImageRidgePath")]
        public List<BiomMinutiaeImageRidgePathType> MinutiaeImageRidgePath { get; set; }

        /// <summary>
        /// A minutia in a friction ridge image NIEM reference is biom:EFSMinutia
        /// </summary>
        /// <value>A minutia in a friction ridge image NIEM reference is biom:EFSMinutia</value>

        [DataMember(Name="efsMinutia")]
        public List<BiomEFSMinutiaType> EfsMinutia { get; set; }

        /// <summary>
        /// A quadrant matrix for associating minutiae NIEM reference is biom:EFSRidgeCountAlgorithmCode
        /// </summary>
        /// <value>A quadrant matrix for associating minutiae NIEM reference is biom:EFSRidgeCountAlgorithmCode</value>

        [DataMember(Name="efsRidgeCountAlgorithmCode")]
        public List<BiomEFSRidgeCountAlgorithmCodeType> EfsRidgeCountAlgorithmCode { get; set; }

        /// <summary>
        /// A ridge count between two minutiae NIEM reference is biom:EFSRidgeCountItem
        /// </summary>
        /// <value>A ridge count between two minutiae NIEM reference is biom:EFSRidgeCountItem</value>

        [DataMember(Name="efsRidgeCountItem")]
        public List<BiomEFSRidgeCountItemType> EfsRidgeCountItem { get; set; }

        /// <summary>
        /// A latent examiner to annotate a friction ridge image with temporary lines, generally for use as reference points in making a comparison. These lines are solely for the individual examiner&#x27;s use and reference _ there is no implied semantics thro NIEM reference is biom:EFSTemporaryLine
        /// </summary>
        /// <value>A latent examiner to annotate a friction ridge image with temporary lines, generally for use as reference points in making a comparison. These lines are solely for the individual examiner&#x27;s use and reference _ there is no implied semantics thro NIEM reference is biom:EFSTemporaryLine</value>

        [DataMember(Name="efsTemporaryLine")]
        public List<BiomEFSTemporaryLineType> EfsTemporaryLine { get; set; }

        /// <summary>
        /// A field enables a latent print examiner to annotate individual features with color for display and / or comment. It consists of multiple subfields, each containing four information items. NIEM reference is biom:EFSFeatureColor
        /// </summary>
        /// <value>A field enables a latent print examiner to annotate individual features with color for display and / or comment. It consists of multiple subfields, each containing four information items. NIEM reference is biom:EFSFeatureColor</value>

        [DataMember(Name="efsFeatureColor")]
        public List<BiomEFSFeatureColorType> EfsFeatureColor { get; set; }

        /// <summary>
        /// biomExtendedFeatureSetMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomExtendedFeatureSetMinutiaeType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsbiomExtendedFeatureSetMinutiaeTypeContextJsonldEnum for ../JSON-LD_Contexts/biomExtendedFeatureSetMinutiaeTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/biomExtendedFeatureSetMinutiaeTypeContext.jsonld")]
            JSONLDContextsbiomExtendedFeatureSetMinutiaeTypeContextJsonldEnum = 0        }

        /// <summary>
        /// biomExtendedFeatureSetMinutiaeType JSON-LD context
        /// </summary>
        /// <value>biomExtendedFeatureSetMinutiaeType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BiomExtendedFeatureSetMinutiaeType {\n");
            sb.Append("  ExtendedFeatureSetProfileCode: ").Append(ExtendedFeatureSetProfileCode).Append("\n");
            sb.Append("  FrictionRidgeImageRegionOfInterest: ").Append(FrictionRidgeImageRegionOfInterest).Append("\n");
            sb.Append("  FingerprintImageFingerprintOrientation: ").Append(FingerprintImageFingerprintOrientation).Append("\n");
            sb.Append("  MinutiaeFrictionRidgeLocation: ").Append(MinutiaeFrictionRidgeLocation).Append("\n");
            sb.Append("  FingerprintPatternClassification: ").Append(FingerprintPatternClassification).Append("\n");
            sb.Append("  MinutiaeRidgeQualityMap: ").Append(MinutiaeRidgeQualityMap).Append("\n");
            sb.Append("  MinutiaeRidgeFlowMap: ").Append(MinutiaeRidgeFlowMap).Append("\n");
            sb.Append("  MinutiaeRidgeWavelengthMap: ").Append(MinutiaeRidgeWavelengthMap).Append("\n");
            sb.Append("  FrictionRidgeImageTonalReversalCode: ").Append(FrictionRidgeImageTonalReversalCode).Append("\n");
            sb.Append("  FrictionRidgeImageLateralReversalCode: ").Append(FrictionRidgeImageLateralReversalCode).Append("\n");
            sb.Append("  ImageQuality: ").Append(ImageQuality).Append("\n");
            sb.Append("  MinutiaeGrowthOrShrinkage: ").Append(MinutiaeGrowthOrShrinkage).Append("\n");
            sb.Append("  IsMinutiaeNoCoresPresent: ").Append(IsMinutiaeNoCoresPresent).Append("\n");
            sb.Append("  MinutiaeCore: ").Append(MinutiaeCore).Append("\n");
            sb.Append("  IsMinutiaeNoDeltasPresent: ").Append(IsMinutiaeNoDeltasPresent).Append("\n");
            sb.Append("  MinutiaeDelta: ").Append(MinutiaeDelta).Append("\n");
            sb.Append("  MinutiaeRidgeCountCoreToDelta: ").Append(MinutiaeRidgeCountCoreToDelta).Append("\n");
            sb.Append("  FrictionRidgeImageCenter: ").Append(FrictionRidgeImageCenter).Append("\n");
            sb.Append("  IsMinutiaeNoDistinctiveFeaturesPresent: ").Append(IsMinutiaeNoDistinctiveFeaturesPresent).Append("\n");
            sb.Append("  MinutiaeDistinctiveFeature: ").Append(MinutiaeDistinctiveFeature).Append("\n");
            sb.Append("  IsMinutiaeNoMinutiaePresent: ").Append(IsMinutiaeNoMinutiaePresent).Append("\n");
            sb.Append("  MinutiaeRidgeCountConfidence: ").Append(MinutiaeRidgeCountConfidence).Append("\n");
            sb.Append("  IsMinutiaeNoDotsPresent: ").Append(IsMinutiaeNoDotsPresent).Append("\n");
            sb.Append("  MinutiaeDot: ").Append(MinutiaeDot).Append("\n");
            sb.Append("  IsMinutiaeNoIncipientRidgesPresent: ").Append(IsMinutiaeNoIncipientRidgesPresent).Append("\n");
            sb.Append("  MinutiaeIncipientRidge: ").Append(MinutiaeIncipientRidge).Append("\n");
            sb.Append("  IsMinutiaeNoCreasesPresent: ").Append(IsMinutiaeNoCreasesPresent).Append("\n");
            sb.Append("  MinutiaeFlexionCrease: ").Append(MinutiaeFlexionCrease).Append("\n");
            sb.Append("  IsMinutiaeNoRidgeEdgeFeaturesPresent: ").Append(IsMinutiaeNoRidgeEdgeFeaturesPresent).Append("\n");
            sb.Append("  MinutiaeRidgeEdgeOrDiscontinuity: ").Append(MinutiaeRidgeEdgeOrDiscontinuity).Append("\n");
            sb.Append("  IsMinutiaeNoPoresPresent: ").Append(IsMinutiaeNoPoresPresent).Append("\n");
            sb.Append("  MinutiaePore: ").Append(MinutiaePore).Append("\n");
            sb.Append("  MinutiaeFeatureDetection: ").Append(MinutiaeFeatureDetection).Append("\n");
            sb.Append("  MinutiaeComment: ").Append(MinutiaeComment).Append("\n");
            sb.Append("  LatentProcessingCategoryCode: ").Append(LatentProcessingCategoryCode).Append("\n");
            sb.Append("  MinutiaeValueAssessment: ").Append(MinutiaeValueAssessment).Append("\n");
            sb.Append("  MinutiaeFraudEvidence: ").Append(MinutiaeFraudEvidence).Append("\n");
            sb.Append("  MinutiaeLatentSubstrate: ").Append(MinutiaeLatentSubstrate).Append("\n");
            sb.Append("  MinutiaeLatentMatrix: ").Append(MinutiaeLatentMatrix).Append("\n");
            sb.Append("  MinutiaeLocalQualityIssues: ").Append(MinutiaeLocalQualityIssues).Append("\n");
            sb.Append("  FrictionRidgeImageAreaOfCorrespondence: ").Append(FrictionRidgeImageAreaOfCorrespondence).Append("\n");
            sb.Append("  MinutiaeFeatureCorrespondence: ").Append(MinutiaeFeatureCorrespondence).Append("\n");
            sb.Append("  MinutiaeExaminerComparisonDetermination: ").Append(MinutiaeExaminerComparisonDetermination).Append("\n");
            sb.Append("  FrictionRidgeImageRelativeRotation: ").Append(FrictionRidgeImageRelativeRotation).Append("\n");
            sb.Append("  FrictionRidgeSkeletonizedImageBinaryObject: ").Append(FrictionRidgeSkeletonizedImageBinaryObject).Append("\n");
            sb.Append("  MinutiaeImageRidgePath: ").Append(MinutiaeImageRidgePath).Append("\n");
            sb.Append("  EfsMinutia: ").Append(EfsMinutia).Append("\n");
            sb.Append("  EfsRidgeCountAlgorithmCode: ").Append(EfsRidgeCountAlgorithmCode).Append("\n");
            sb.Append("  EfsRidgeCountItem: ").Append(EfsRidgeCountItem).Append("\n");
            sb.Append("  EfsTemporaryLine: ").Append(EfsTemporaryLine).Append("\n");
            sb.Append("  EfsFeatureColor: ").Append(EfsFeatureColor).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BiomExtendedFeatureSetMinutiaeType)obj);
        }

        /// <summary>
        /// Returns true if BiomExtendedFeatureSetMinutiaeType instances are equal
        /// </summary>
        /// <param name="other">Instance of BiomExtendedFeatureSetMinutiaeType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiomExtendedFeatureSetMinutiaeType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExtendedFeatureSetProfileCode == other.ExtendedFeatureSetProfileCode ||
                    ExtendedFeatureSetProfileCode != null &&
                    ExtendedFeatureSetProfileCode.SequenceEqual(other.ExtendedFeatureSetProfileCode)
                ) && 
                (
                    FrictionRidgeImageRegionOfInterest == other.FrictionRidgeImageRegionOfInterest ||
                    FrictionRidgeImageRegionOfInterest != null &&
                    FrictionRidgeImageRegionOfInterest.SequenceEqual(other.FrictionRidgeImageRegionOfInterest)
                ) && 
                (
                    FingerprintImageFingerprintOrientation == other.FingerprintImageFingerprintOrientation ||
                    FingerprintImageFingerprintOrientation != null &&
                    FingerprintImageFingerprintOrientation.SequenceEqual(other.FingerprintImageFingerprintOrientation)
                ) && 
                (
                    MinutiaeFrictionRidgeLocation == other.MinutiaeFrictionRidgeLocation ||
                    MinutiaeFrictionRidgeLocation != null &&
                    MinutiaeFrictionRidgeLocation.SequenceEqual(other.MinutiaeFrictionRidgeLocation)
                ) && 
                (
                    FingerprintPatternClassification == other.FingerprintPatternClassification ||
                    FingerprintPatternClassification != null &&
                    FingerprintPatternClassification.SequenceEqual(other.FingerprintPatternClassification)
                ) && 
                (
                    MinutiaeRidgeQualityMap == other.MinutiaeRidgeQualityMap ||
                    MinutiaeRidgeQualityMap != null &&
                    MinutiaeRidgeQualityMap.SequenceEqual(other.MinutiaeRidgeQualityMap)
                ) && 
                (
                    MinutiaeRidgeFlowMap == other.MinutiaeRidgeFlowMap ||
                    MinutiaeRidgeFlowMap != null &&
                    MinutiaeRidgeFlowMap.SequenceEqual(other.MinutiaeRidgeFlowMap)
                ) && 
                (
                    MinutiaeRidgeWavelengthMap == other.MinutiaeRidgeWavelengthMap ||
                    MinutiaeRidgeWavelengthMap != null &&
                    MinutiaeRidgeWavelengthMap.SequenceEqual(other.MinutiaeRidgeWavelengthMap)
                ) && 
                (
                    FrictionRidgeImageTonalReversalCode == other.FrictionRidgeImageTonalReversalCode ||
                    FrictionRidgeImageTonalReversalCode != null &&
                    FrictionRidgeImageTonalReversalCode.SequenceEqual(other.FrictionRidgeImageTonalReversalCode)
                ) && 
                (
                    FrictionRidgeImageLateralReversalCode == other.FrictionRidgeImageLateralReversalCode ||
                    FrictionRidgeImageLateralReversalCode != null &&
                    FrictionRidgeImageLateralReversalCode.SequenceEqual(other.FrictionRidgeImageLateralReversalCode)
                ) && 
                (
                    ImageQuality == other.ImageQuality ||
                    ImageQuality != null &&
                    ImageQuality.SequenceEqual(other.ImageQuality)
                ) && 
                (
                    MinutiaeGrowthOrShrinkage == other.MinutiaeGrowthOrShrinkage ||
                    MinutiaeGrowthOrShrinkage != null &&
                    MinutiaeGrowthOrShrinkage.SequenceEqual(other.MinutiaeGrowthOrShrinkage)
                ) && 
                (
                    IsMinutiaeNoCoresPresent == other.IsMinutiaeNoCoresPresent ||
                    IsMinutiaeNoCoresPresent != null &&
                    IsMinutiaeNoCoresPresent.SequenceEqual(other.IsMinutiaeNoCoresPresent)
                ) && 
                (
                    MinutiaeCore == other.MinutiaeCore ||
                    MinutiaeCore != null &&
                    MinutiaeCore.SequenceEqual(other.MinutiaeCore)
                ) && 
                (
                    IsMinutiaeNoDeltasPresent == other.IsMinutiaeNoDeltasPresent ||
                    IsMinutiaeNoDeltasPresent != null &&
                    IsMinutiaeNoDeltasPresent.SequenceEqual(other.IsMinutiaeNoDeltasPresent)
                ) && 
                (
                    MinutiaeDelta == other.MinutiaeDelta ||
                    MinutiaeDelta != null &&
                    MinutiaeDelta.SequenceEqual(other.MinutiaeDelta)
                ) && 
                (
                    MinutiaeRidgeCountCoreToDelta == other.MinutiaeRidgeCountCoreToDelta ||
                    MinutiaeRidgeCountCoreToDelta != null &&
                    MinutiaeRidgeCountCoreToDelta.SequenceEqual(other.MinutiaeRidgeCountCoreToDelta)
                ) && 
                (
                    FrictionRidgeImageCenter == other.FrictionRidgeImageCenter ||
                    FrictionRidgeImageCenter != null &&
                    FrictionRidgeImageCenter.SequenceEqual(other.FrictionRidgeImageCenter)
                ) && 
                (
                    IsMinutiaeNoDistinctiveFeaturesPresent == other.IsMinutiaeNoDistinctiveFeaturesPresent ||
                    IsMinutiaeNoDistinctiveFeaturesPresent != null &&
                    IsMinutiaeNoDistinctiveFeaturesPresent.SequenceEqual(other.IsMinutiaeNoDistinctiveFeaturesPresent)
                ) && 
                (
                    MinutiaeDistinctiveFeature == other.MinutiaeDistinctiveFeature ||
                    MinutiaeDistinctiveFeature != null &&
                    MinutiaeDistinctiveFeature.SequenceEqual(other.MinutiaeDistinctiveFeature)
                ) && 
                (
                    IsMinutiaeNoMinutiaePresent == other.IsMinutiaeNoMinutiaePresent ||
                    IsMinutiaeNoMinutiaePresent != null &&
                    IsMinutiaeNoMinutiaePresent.SequenceEqual(other.IsMinutiaeNoMinutiaePresent)
                ) && 
                (
                    MinutiaeRidgeCountConfidence == other.MinutiaeRidgeCountConfidence ||
                    MinutiaeRidgeCountConfidence != null &&
                    MinutiaeRidgeCountConfidence.SequenceEqual(other.MinutiaeRidgeCountConfidence)
                ) && 
                (
                    IsMinutiaeNoDotsPresent == other.IsMinutiaeNoDotsPresent ||
                    IsMinutiaeNoDotsPresent != null &&
                    IsMinutiaeNoDotsPresent.SequenceEqual(other.IsMinutiaeNoDotsPresent)
                ) && 
                (
                    MinutiaeDot == other.MinutiaeDot ||
                    MinutiaeDot != null &&
                    MinutiaeDot.SequenceEqual(other.MinutiaeDot)
                ) && 
                (
                    IsMinutiaeNoIncipientRidgesPresent == other.IsMinutiaeNoIncipientRidgesPresent ||
                    IsMinutiaeNoIncipientRidgesPresent != null &&
                    IsMinutiaeNoIncipientRidgesPresent.SequenceEqual(other.IsMinutiaeNoIncipientRidgesPresent)
                ) && 
                (
                    MinutiaeIncipientRidge == other.MinutiaeIncipientRidge ||
                    MinutiaeIncipientRidge != null &&
                    MinutiaeIncipientRidge.SequenceEqual(other.MinutiaeIncipientRidge)
                ) && 
                (
                    IsMinutiaeNoCreasesPresent == other.IsMinutiaeNoCreasesPresent ||
                    IsMinutiaeNoCreasesPresent != null &&
                    IsMinutiaeNoCreasesPresent.SequenceEqual(other.IsMinutiaeNoCreasesPresent)
                ) && 
                (
                    MinutiaeFlexionCrease == other.MinutiaeFlexionCrease ||
                    MinutiaeFlexionCrease != null &&
                    MinutiaeFlexionCrease.SequenceEqual(other.MinutiaeFlexionCrease)
                ) && 
                (
                    IsMinutiaeNoRidgeEdgeFeaturesPresent == other.IsMinutiaeNoRidgeEdgeFeaturesPresent ||
                    IsMinutiaeNoRidgeEdgeFeaturesPresent != null &&
                    IsMinutiaeNoRidgeEdgeFeaturesPresent.SequenceEqual(other.IsMinutiaeNoRidgeEdgeFeaturesPresent)
                ) && 
                (
                    MinutiaeRidgeEdgeOrDiscontinuity == other.MinutiaeRidgeEdgeOrDiscontinuity ||
                    MinutiaeRidgeEdgeOrDiscontinuity != null &&
                    MinutiaeRidgeEdgeOrDiscontinuity.SequenceEqual(other.MinutiaeRidgeEdgeOrDiscontinuity)
                ) && 
                (
                    IsMinutiaeNoPoresPresent == other.IsMinutiaeNoPoresPresent ||
                    IsMinutiaeNoPoresPresent != null &&
                    IsMinutiaeNoPoresPresent.SequenceEqual(other.IsMinutiaeNoPoresPresent)
                ) && 
                (
                    MinutiaePore == other.MinutiaePore ||
                    MinutiaePore != null &&
                    MinutiaePore.SequenceEqual(other.MinutiaePore)
                ) && 
                (
                    MinutiaeFeatureDetection == other.MinutiaeFeatureDetection ||
                    MinutiaeFeatureDetection != null &&
                    MinutiaeFeatureDetection.SequenceEqual(other.MinutiaeFeatureDetection)
                ) && 
                (
                    MinutiaeComment == other.MinutiaeComment ||
                    MinutiaeComment != null &&
                    MinutiaeComment.SequenceEqual(other.MinutiaeComment)
                ) && 
                (
                    LatentProcessingCategoryCode == other.LatentProcessingCategoryCode ||
                    LatentProcessingCategoryCode != null &&
                    LatentProcessingCategoryCode.SequenceEqual(other.LatentProcessingCategoryCode)
                ) && 
                (
                    MinutiaeValueAssessment == other.MinutiaeValueAssessment ||
                    MinutiaeValueAssessment != null &&
                    MinutiaeValueAssessment.SequenceEqual(other.MinutiaeValueAssessment)
                ) && 
                (
                    MinutiaeFraudEvidence == other.MinutiaeFraudEvidence ||
                    MinutiaeFraudEvidence != null &&
                    MinutiaeFraudEvidence.SequenceEqual(other.MinutiaeFraudEvidence)
                ) && 
                (
                    MinutiaeLatentSubstrate == other.MinutiaeLatentSubstrate ||
                    MinutiaeLatentSubstrate != null &&
                    MinutiaeLatentSubstrate.SequenceEqual(other.MinutiaeLatentSubstrate)
                ) && 
                (
                    MinutiaeLatentMatrix == other.MinutiaeLatentMatrix ||
                    MinutiaeLatentMatrix != null &&
                    MinutiaeLatentMatrix.SequenceEqual(other.MinutiaeLatentMatrix)
                ) && 
                (
                    MinutiaeLocalQualityIssues == other.MinutiaeLocalQualityIssues ||
                    MinutiaeLocalQualityIssues != null &&
                    MinutiaeLocalQualityIssues.SequenceEqual(other.MinutiaeLocalQualityIssues)
                ) && 
                (
                    FrictionRidgeImageAreaOfCorrespondence == other.FrictionRidgeImageAreaOfCorrespondence ||
                    FrictionRidgeImageAreaOfCorrespondence != null &&
                    FrictionRidgeImageAreaOfCorrespondence.SequenceEqual(other.FrictionRidgeImageAreaOfCorrespondence)
                ) && 
                (
                    MinutiaeFeatureCorrespondence == other.MinutiaeFeatureCorrespondence ||
                    MinutiaeFeatureCorrespondence != null &&
                    MinutiaeFeatureCorrespondence.SequenceEqual(other.MinutiaeFeatureCorrespondence)
                ) && 
                (
                    MinutiaeExaminerComparisonDetermination == other.MinutiaeExaminerComparisonDetermination ||
                    MinutiaeExaminerComparisonDetermination != null &&
                    MinutiaeExaminerComparisonDetermination.SequenceEqual(other.MinutiaeExaminerComparisonDetermination)
                ) && 
                (
                    FrictionRidgeImageRelativeRotation == other.FrictionRidgeImageRelativeRotation ||
                    FrictionRidgeImageRelativeRotation != null &&
                    FrictionRidgeImageRelativeRotation.SequenceEqual(other.FrictionRidgeImageRelativeRotation)
                ) && 
                (
                    FrictionRidgeSkeletonizedImageBinaryObject == other.FrictionRidgeSkeletonizedImageBinaryObject ||
                    FrictionRidgeSkeletonizedImageBinaryObject != null &&
                    FrictionRidgeSkeletonizedImageBinaryObject.SequenceEqual(other.FrictionRidgeSkeletonizedImageBinaryObject)
                ) && 
                (
                    MinutiaeImageRidgePath == other.MinutiaeImageRidgePath ||
                    MinutiaeImageRidgePath != null &&
                    MinutiaeImageRidgePath.SequenceEqual(other.MinutiaeImageRidgePath)
                ) && 
                (
                    EfsMinutia == other.EfsMinutia ||
                    EfsMinutia != null &&
                    EfsMinutia.SequenceEqual(other.EfsMinutia)
                ) && 
                (
                    EfsRidgeCountAlgorithmCode == other.EfsRidgeCountAlgorithmCode ||
                    EfsRidgeCountAlgorithmCode != null &&
                    EfsRidgeCountAlgorithmCode.SequenceEqual(other.EfsRidgeCountAlgorithmCode)
                ) && 
                (
                    EfsRidgeCountItem == other.EfsRidgeCountItem ||
                    EfsRidgeCountItem != null &&
                    EfsRidgeCountItem.SequenceEqual(other.EfsRidgeCountItem)
                ) && 
                (
                    EfsTemporaryLine == other.EfsTemporaryLine ||
                    EfsTemporaryLine != null &&
                    EfsTemporaryLine.SequenceEqual(other.EfsTemporaryLine)
                ) && 
                (
                    EfsFeatureColor == other.EfsFeatureColor ||
                    EfsFeatureColor != null &&
                    EfsFeatureColor.SequenceEqual(other.EfsFeatureColor)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExtendedFeatureSetProfileCode != null)
                    hashCode = hashCode * 59 + ExtendedFeatureSetProfileCode.GetHashCode();
                    if (FrictionRidgeImageRegionOfInterest != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageRegionOfInterest.GetHashCode();
                    if (FingerprintImageFingerprintOrientation != null)
                    hashCode = hashCode * 59 + FingerprintImageFingerprintOrientation.GetHashCode();
                    if (MinutiaeFrictionRidgeLocation != null)
                    hashCode = hashCode * 59 + MinutiaeFrictionRidgeLocation.GetHashCode();
                    if (FingerprintPatternClassification != null)
                    hashCode = hashCode * 59 + FingerprintPatternClassification.GetHashCode();
                    if (MinutiaeRidgeQualityMap != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeQualityMap.GetHashCode();
                    if (MinutiaeRidgeFlowMap != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeFlowMap.GetHashCode();
                    if (MinutiaeRidgeWavelengthMap != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeWavelengthMap.GetHashCode();
                    if (FrictionRidgeImageTonalReversalCode != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageTonalReversalCode.GetHashCode();
                    if (FrictionRidgeImageLateralReversalCode != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageLateralReversalCode.GetHashCode();
                    if (ImageQuality != null)
                    hashCode = hashCode * 59 + ImageQuality.GetHashCode();
                    if (MinutiaeGrowthOrShrinkage != null)
                    hashCode = hashCode * 59 + MinutiaeGrowthOrShrinkage.GetHashCode();
                    if (IsMinutiaeNoCoresPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoCoresPresent.GetHashCode();
                    if (MinutiaeCore != null)
                    hashCode = hashCode * 59 + MinutiaeCore.GetHashCode();
                    if (IsMinutiaeNoDeltasPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoDeltasPresent.GetHashCode();
                    if (MinutiaeDelta != null)
                    hashCode = hashCode * 59 + MinutiaeDelta.GetHashCode();
                    if (MinutiaeRidgeCountCoreToDelta != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeCountCoreToDelta.GetHashCode();
                    if (FrictionRidgeImageCenter != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageCenter.GetHashCode();
                    if (IsMinutiaeNoDistinctiveFeaturesPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoDistinctiveFeaturesPresent.GetHashCode();
                    if (MinutiaeDistinctiveFeature != null)
                    hashCode = hashCode * 59 + MinutiaeDistinctiveFeature.GetHashCode();
                    if (IsMinutiaeNoMinutiaePresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoMinutiaePresent.GetHashCode();
                    if (MinutiaeRidgeCountConfidence != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeCountConfidence.GetHashCode();
                    if (IsMinutiaeNoDotsPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoDotsPresent.GetHashCode();
                    if (MinutiaeDot != null)
                    hashCode = hashCode * 59 + MinutiaeDot.GetHashCode();
                    if (IsMinutiaeNoIncipientRidgesPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoIncipientRidgesPresent.GetHashCode();
                    if (MinutiaeIncipientRidge != null)
                    hashCode = hashCode * 59 + MinutiaeIncipientRidge.GetHashCode();
                    if (IsMinutiaeNoCreasesPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoCreasesPresent.GetHashCode();
                    if (MinutiaeFlexionCrease != null)
                    hashCode = hashCode * 59 + MinutiaeFlexionCrease.GetHashCode();
                    if (IsMinutiaeNoRidgeEdgeFeaturesPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoRidgeEdgeFeaturesPresent.GetHashCode();
                    if (MinutiaeRidgeEdgeOrDiscontinuity != null)
                    hashCode = hashCode * 59 + MinutiaeRidgeEdgeOrDiscontinuity.GetHashCode();
                    if (IsMinutiaeNoPoresPresent != null)
                    hashCode = hashCode * 59 + IsMinutiaeNoPoresPresent.GetHashCode();
                    if (MinutiaePore != null)
                    hashCode = hashCode * 59 + MinutiaePore.GetHashCode();
                    if (MinutiaeFeatureDetection != null)
                    hashCode = hashCode * 59 + MinutiaeFeatureDetection.GetHashCode();
                    if (MinutiaeComment != null)
                    hashCode = hashCode * 59 + MinutiaeComment.GetHashCode();
                    if (LatentProcessingCategoryCode != null)
                    hashCode = hashCode * 59 + LatentProcessingCategoryCode.GetHashCode();
                    if (MinutiaeValueAssessment != null)
                    hashCode = hashCode * 59 + MinutiaeValueAssessment.GetHashCode();
                    if (MinutiaeFraudEvidence != null)
                    hashCode = hashCode * 59 + MinutiaeFraudEvidence.GetHashCode();
                    if (MinutiaeLatentSubstrate != null)
                    hashCode = hashCode * 59 + MinutiaeLatentSubstrate.GetHashCode();
                    if (MinutiaeLatentMatrix != null)
                    hashCode = hashCode * 59 + MinutiaeLatentMatrix.GetHashCode();
                    if (MinutiaeLocalQualityIssues != null)
                    hashCode = hashCode * 59 + MinutiaeLocalQualityIssues.GetHashCode();
                    if (FrictionRidgeImageAreaOfCorrespondence != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageAreaOfCorrespondence.GetHashCode();
                    if (MinutiaeFeatureCorrespondence != null)
                    hashCode = hashCode * 59 + MinutiaeFeatureCorrespondence.GetHashCode();
                    if (MinutiaeExaminerComparisonDetermination != null)
                    hashCode = hashCode * 59 + MinutiaeExaminerComparisonDetermination.GetHashCode();
                    if (FrictionRidgeImageRelativeRotation != null)
                    hashCode = hashCode * 59 + FrictionRidgeImageRelativeRotation.GetHashCode();
                    if (FrictionRidgeSkeletonizedImageBinaryObject != null)
                    hashCode = hashCode * 59 + FrictionRidgeSkeletonizedImageBinaryObject.GetHashCode();
                    if (MinutiaeImageRidgePath != null)
                    hashCode = hashCode * 59 + MinutiaeImageRidgePath.GetHashCode();
                    if (EfsMinutia != null)
                    hashCode = hashCode * 59 + EfsMinutia.GetHashCode();
                    if (EfsRidgeCountAlgorithmCode != null)
                    hashCode = hashCode * 59 + EfsRidgeCountAlgorithmCode.GetHashCode();
                    if (EfsRidgeCountItem != null)
                    hashCode = hashCode * 59 + EfsRidgeCountItem.GetHashCode();
                    if (EfsTemporaryLine != null)
                    hashCode = hashCode * 59 + EfsTemporaryLine.GetHashCode();
                    if (EfsFeatureColor != null)
                    hashCode = hashCode * 59 + EfsFeatureColor.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BiomExtendedFeatureSetMinutiaeType left, BiomExtendedFeatureSetMinutiaeType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BiomExtendedFeatureSetMinutiaeType left, BiomExtendedFeatureSetMinutiaeType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
