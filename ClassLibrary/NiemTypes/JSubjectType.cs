/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a person or organization that is involved or suspected of being involved in a violation of a criminal statute, ordinance or rule.
    /// </summary>
    [DataContract]
    public partial class JSubjectType : IEquatable<JSubjectType>
    { 
        /// <summary>
        /// A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson
        /// </summary>
        /// <value>A person of whom the role object is a function. NIEM reference is nc:RoleOfPerson</value>

        [DataMember(Name="roleOfPerson")]
        public List<NcPersonType> RoleOfPerson { get; set; }

        /// <summary>
        /// An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization
        /// </summary>
        /// <value>An organization of whom the role object is a function. NIEM reference is nc:RoleOfOrganization</value>

        [DataMember(Name="roleOfOrganization")]
        public List<NcOrganizationType> RoleOfOrganization { get; set; }

        /// <summary>
        /// A set of details about actions or events involving involuntary medication of a subject. NIEM reference is j:InvoluntaryMedicationAction
        /// </summary>
        /// <value>A set of details about actions or events involving involuntary medication of a subject. NIEM reference is j:InvoluntaryMedicationAction</value>

        [DataMember(Name="involuntaryMedicationAction")]
        public List<JInvoluntaryMedicationActionType> InvoluntaryMedicationAction { get; set; }

        /// <summary>
        /// True if the subject&#x27;s gang affiliation indicates a disruptive group; false otherwise. NIEM reference is j:SubjectGangAffiliationDisruptiveGroupIndicator
        /// </summary>
        /// <value>True if the subject&#x27;s gang affiliation indicates a disruptive group; false otherwise. NIEM reference is j:SubjectGangAffiliationDisruptiveGroupIndicator</value>

        [DataMember(Name="isGangAffiliationDisruptiveGroup")]
        public List<NiemXsboolean> IsGangAffiliationDisruptiveGroup { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s request for assignment. NIEM reference is j:SubjectRequestedAssignment
        /// </summary>
        /// <value>A set of details about a subject&#x27;s request for assignment. NIEM reference is j:SubjectRequestedAssignment</value>

        [DataMember(Name="requestedAssignment")]
        public List<JAssignmentType> RequestedAssignment { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s risk factors. NIEM reference is j:SubjectRisk
        /// </summary>
        /// <value>A set of details about a subject&#x27;s risk factors. NIEM reference is j:SubjectRisk</value>

        [DataMember(Name="risk")]
        public List<JRiskType> Risk { get; set; }

        /// <summary>
        /// An association between a subject and supervised employment. NIEM reference is j:SubjectSupervisedEmploymentAssociation
        /// </summary>
        /// <value>An association between a subject and supervised employment. NIEM reference is j:SubjectSupervisedEmploymentAssociation</value>

        [DataMember(Name="supervisedEmploymentAssociation")]
        public List<NcPersonEmploymentAssociationType> SupervisedEmploymentAssociation { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s supervised release. NIEM reference is j:SubjectSupervisedRelease
        /// </summary>
        /// <value>A set of details about a subject&#x27;s supervised release. NIEM reference is j:SubjectSupervisedRelease</value>

        [DataMember(Name="supervisedRelease")]
        public List<JSupervisedReleaseType> SupervisedRelease { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s goal(s). NIEM reference is j:SubjectGoal
        /// </summary>
        /// <value>A set of details about a subject&#x27;s goal(s). NIEM reference is j:SubjectGoal</value>

        [DataMember(Name="goal")]
        public List<JGoalType> Goal { get; set; }

        /// <summary>
        /// A restricted location for a subject. NIEM reference is j:SubjectRestrictedLocation
        /// </summary>
        /// <value>A restricted location for a subject. NIEM reference is j:SubjectRestrictedLocation</value>

        [DataMember(Name="restrictedLocation")]
        public List<NcLocationType> RestrictedLocation { get; set; }

        /// <summary>
        /// A booking event associated with a corrections subject. NIEM reference is j:SubjectBooking
        /// </summary>
        /// <value>A booking event associated with a corrections subject. NIEM reference is j:SubjectBooking</value>

        [DataMember(Name="booking")]
        public List<JBookingType> Booking { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s placement decision. NIEM reference is j:SubjectPlacementDecision
        /// </summary>
        /// <value>A set of details about a subject&#x27;s placement decision. NIEM reference is j:SubjectPlacementDecision</value>

        [DataMember(Name="placementDecision")]
        public List<NcActivityType> PlacementDecision { get; set; }

        /// <summary>
        /// A visitation associated with a corrections subject. NIEM reference is j:SubjectVisitation
        /// </summary>
        /// <value>A visitation associated with a corrections subject. NIEM reference is j:SubjectVisitation</value>

        [DataMember(Name="visitation")]
        public List<JVisitationType> Visitation { get; set; }

        /// <summary>
        /// An event or activity involving the appointment of a corrections subject. NIEM reference is j:SubjectAppointment
        /// </summary>
        /// <value>An event or activity involving the appointment of a corrections subject. NIEM reference is j:SubjectAppointment</value>

        [DataMember(Name="appointment")]
        public List<JAppointmentType> Appointment { get; set; }

        /// <summary>
        /// A set of details for providing notification a subject&#x27;&#x27;s  release. NIEM reference is   j:SubjectReleaseNotification 
        /// </summary>
        /// <value>A set of details for providing notification a subject&#x27;&#x27;s  release. NIEM reference is   j:SubjectReleaseNotification </value>

        [DataMember(Name="releaseNotification")]
        public List<EmNotificationType> ReleaseNotification { get; set; }

        /// <summary>
        /// A set of details about an alert regarding a subject. NIEM reference is j:SubjectAlert
        /// </summary>
        /// <value>A set of details about an alert regarding a subject. NIEM reference is j:SubjectAlert</value>

        [DataMember(Name="alert")]
        public List<EmAlertNotificationType> Alert { get; set; }

        /// <summary>
        /// A set of details or events related to a subject&#x27;s appeal. NIEM reference is j:SubjectAppeal
        /// </summary>
        /// <value>A set of details or events related to a subject&#x27;s appeal. NIEM reference is j:SubjectAppeal</value>

        [DataMember(Name="appeal")]
        public List<JSubjectAppealType> Appeal { get; set; }

        /// <summary>
        /// A set of details that represent what is necessary to help an individual be able to function effectively within a defined society. NIEM reference is j:SubjectNeed
        /// </summary>
        /// <value>A set of details that represent what is necessary to help an individual be able to function effectively within a defined society. NIEM reference is j:SubjectNeed</value>

        [DataMember(Name="need")]
        public List<JNeedType> Need { get; set; }

        /// <summary>
        /// An event or activity involving the assignment of a corrections subject. NIEM reference is j:SubjectAssignment
        /// </summary>
        /// <value>An event or activity involving the assignment of a corrections subject. NIEM reference is j:SubjectAssignment</value>

        [DataMember(Name="assignment")]
        public List<JSubjectAssignmentType> Assignment { get; set; }

        /// <summary>
        /// A certification associated with a corrections subject. NIEM reference is j:SubjectCertification
        /// </summary>
        /// <value>A certification associated with a corrections subject. NIEM reference is j:SubjectCertification</value>

        [DataMember(Name="certification")]
        public List<JCertificationType> Certification { get; set; }

        /// <summary>
        /// A set of details confidential information involving a subject. NIEM reference is j:SubjectConfidentialInformation
        /// </summary>
        /// <value>A set of details confidential information involving a subject. NIEM reference is j:SubjectConfidentialInformation</value>

        [DataMember(Name="confidentialInformation")]
        public List<JConfidentialInformationType> ConfidentialInformation { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s release. NIEM reference is j:SubjectRelease
        /// </summary>
        /// <value>A set of details about a subject&#x27;s release. NIEM reference is j:SubjectRelease</value>

        [DataMember(Name="release")]
        public List<NcReleaseType> Release { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s funeral. NIEM reference is j:SubjectFuneral
        /// </summary>
        /// <value>A set of details about a subject&#x27;s funeral. NIEM reference is j:SubjectFuneral</value>

        [DataMember(Name="funeral")]
        public List<JFuneralType> Funeral { get; set; }

        /// <summary>
        /// An associated incident in which a subject had some involvement. NIEM reference is j:SubjectIncident
        /// </summary>
        /// <value>An associated incident in which a subject had some involvement. NIEM reference is j:SubjectIncident</value>

        [DataMember(Name="incident")]
        public List<NcIncidentType> Incident { get; set; }

        /// <summary>
        /// True if the subject has no known gang affiliation; false otherwise. NIEM reference is j:SubjectGangAffiliationNoneIndicator
        /// </summary>
        /// <value>True if the subject has no known gang affiliation; false otherwise. NIEM reference is j:SubjectGangAffiliationNoneIndicator</value>

        [DataMember(Name="isGangAffiliationNone")]
        public List<NiemXsboolean> IsGangAffiliationNone { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s intake process. NIEM reference is j:SubjectIntake
        /// </summary>
        /// <value>A set of details about a subject&#x27;s intake process. NIEM reference is j:SubjectIntake</value>

        [DataMember(Name="intake")]
        public List<JSubjectIntakeType> Intake { get; set; }

        /// <summary>
        /// An event or activity involving the assessment of a corrections subject. NIEM reference is j:SubjectAssessment
        /// </summary>
        /// <value>An event or activity involving the assessment of a corrections subject. NIEM reference is j:SubjectAssessment</value>

        [DataMember(Name="assessment")]
        public List<JSubjectAssessmentType> Assessment { get; set; }

        /// <summary>
        /// A status on the DNA collection from a subject. NIEM reference is j:DNACollectionStatusText
        /// </summary>
        /// <value>A status on the DNA collection from a subject. NIEM reference is j:DNACollectionStatusText</value>

        [DataMember(Name="dnaCollectionStatus")]
        public List<NcTextType> DnaCollectionStatus { get; set; }

        /// <summary>
        /// A set of details reporting a subject&#x27;s violation of institutional rules, policies or regulations. NIEM reference is j:SubjectDisciplinaryReport
        /// </summary>
        /// <value>A set of details reporting a subject&#x27;s violation of institutional rules, policies or regulations. NIEM reference is j:SubjectDisciplinaryReport</value>

        [DataMember(Name="disciplinaryReport")]
        public List<NcDocumentType> DisciplinaryReport { get; set; }

        /// <summary>
        /// A sequential number assigned to the subject within the incident. NIEM reference is j:SubjectSequenceNumberText
        /// </summary>
        /// <value>A sequential number assigned to the subject within the incident. NIEM reference is j:SubjectSequenceNumberText</value>

        [DataMember(Name="sequenceNumber")]
        public List<NcTextType> SequenceNumber { get; set; }

        /// <summary>
        /// A description of a person&#x27;s criminal history. NIEM reference is j:SubjectCriminalHistoryDescriptionText
        /// </summary>
        /// <value>A description of a person&#x27;s criminal history. NIEM reference is j:SubjectCriminalHistoryDescriptionText</value>

        [DataMember(Name="criminalHistoryDescription")]
        public List<NcTextType> CriminalHistoryDescription { get; set; }

        /// <summary>
        /// A set of details describing a subject&#x27;s personal property. NIEM reference is j:SubjectPropertyFinancialAccountPersonalPropertyDetailsText
        /// </summary>
        /// <value>A set of details describing a subject&#x27;s personal property. NIEM reference is j:SubjectPropertyFinancialAccountPersonalPropertyDetailsText</value>

        [DataMember(Name="propertyFinancialAccountPersonalPropertyDetails")]
        public List<NcTextType> PropertyFinancialAccountPersonalPropertyDetails { get; set; }

        /// <summary>
        /// A kind of comprehension level. NIEM reference is j:SubjectComprehensionLevelText
        /// </summary>
        /// <value>A kind of comprehension level. NIEM reference is j:SubjectComprehensionLevelText</value>

        [DataMember(Name="comprehensionLevel")]
        public List<NcTextType> ComprehensionLevel { get; set; }

        /// <summary>
        /// A process and method of assessing inmate risks that balance security requirements with program needs. NIEM reference is j:SubjectSecurityClassification
        /// </summary>
        /// <value>A process and method of assessing inmate risks that balance security requirements with program needs. NIEM reference is j:SubjectSecurityClassification</value>

        [DataMember(Name="securityClassification")]
        public List<JSubjectSecurityClassificationType> SecurityClassification { get; set; }

        /// <summary>
        /// True if subject has a dependent, e.g., children, handicapped, living with them; false otherwise. NIEM reference is j:SubjectDependentLivingWithIndicator
        /// </summary>
        /// <value>True if subject has a dependent, e.g., children, handicapped, living with them; false otherwise. NIEM reference is j:SubjectDependentLivingWithIndicator</value>

        [DataMember(Name="isDependentLivingWith")]
        public List<NiemXsboolean> IsDependentLivingWith { get; set; }

        /// <summary>
        /// A number associated with a file. NIEM reference is j:SubjectJacketNumberText
        /// </summary>
        /// <value>A number associated with a file. NIEM reference is j:SubjectJacketNumberText</value>

        [DataMember(Name="jacketNumber")]
        public List<NcTextType> JacketNumber { get; set; }

        /// <summary>
        /// True if subject has a weapons related arrest or conviction in his/her criminal history; false otherwise. NIEM reference is j:SubjectWeaponsHistoryIndicator
        /// </summary>
        /// <value>True if subject has a weapons related arrest or conviction in his/her criminal history; false otherwise. NIEM reference is j:SubjectWeaponsHistoryIndicator</value>

        [DataMember(Name="isWeaponsHistory")]
        public List<NiemXsboolean> IsWeaponsHistory { get; set; }

        /// <summary>
        /// True if subject has a history of drug (illegal) use; false otherwise. NIEM reference is j:SubjectDrugHistoryIndicator
        /// </summary>
        /// <value>True if subject has a history of drug (illegal) use; false otherwise. NIEM reference is j:SubjectDrugHistoryIndicator</value>

        [DataMember(Name="isDrugHistory")]
        public List<NiemXsboolean> IsDrugHistory { get; set; }

        /// <summary>
        /// True if a subject is considered to have a history of violent behavior; false otherwise. NIEM reference is j:SubjectViolentOffenderIndicator
        /// </summary>
        /// <value>True if a subject is considered to have a history of violent behavior; false otherwise. NIEM reference is j:SubjectViolentOffenderIndicator</value>

        [DataMember(Name="isViolentOffender")]
        public List<NiemXsboolean> IsViolentOffender { get; set; }

        /// <summary>
        /// True if subject has failure to appear for court conviction in his/her criminal history; false otherwise. NIEM reference is j:SubjectFailureToAppearIndicator
        /// </summary>
        /// <value>True if subject has failure to appear for court conviction in his/her criminal history; false otherwise. NIEM reference is j:SubjectFailureToAppearIndicator</value>

        [DataMember(Name="isFailureToAppear")]
        public List<NiemXsboolean> IsFailureToAppear { get; set; }

        /// <summary>
        /// True if a subject has been on a form of supervised release, e.g., probation, parole, before; false otherwise. NIEM reference is j:SubjectSupervisedReleaseIndicator
        /// </summary>
        /// <value>True if a subject has been on a form of supervised release, e.g., probation, parole, before; false otherwise. NIEM reference is j:SubjectSupervisedReleaseIndicator</value>

        [DataMember(Name="isSupervisedRelease")]
        public List<NiemXsboolean> IsSupervisedRelease { get; set; }

        /// <summary>
        /// A special instruction(s) for the processing or transportation of a subject, such as special handling required due to medical or physical conditions. NIEM reference is j:SubjectSpecialHandlingText
        /// </summary>
        /// <value>A special instruction(s) for the processing or transportation of a subject, such as special handling required due to medical or physical conditions. NIEM reference is j:SubjectSpecialHandlingText</value>

        [DataMember(Name="specialHandling")]
        public List<NcTextType> SpecialHandling { get; set; }

        /// <summary>
        /// True if subject has been arrested for or convicted of an offense involving the infliction of physical injury or the creation of a reasonable fear that physical injury or harm will be inflicted, by a parent or member or former member of the household; false otherwise. NIEM reference is j:SubjectDomesticViolenceHistoryIndicator
        /// </summary>
        /// <value>True if subject has been arrested for or convicted of an offense involving the infliction of physical injury or the creation of a reasonable fear that physical injury or harm will be inflicted, by a parent or member or former member of the household; false otherwise. NIEM reference is j:SubjectDomesticViolenceHistoryIndicator</value>

        [DataMember(Name="isDomesticViolenceHistory")]
        public List<NiemXsboolean> IsDomesticViolenceHistory { get; set; }

        /// <summary>
        /// A set of details pertaining to facts attained from an actual crime scene, giving investigators insights into the subjects method of working or operating, actions used to execute the crime, prevent detection, and/or avoid apprehension. NIEM reference is j:SubjectMO
        /// </summary>
        /// <value>A set of details pertaining to facts attained from an actual crime scene, giving investigators insights into the subjects method of working or operating, actions used to execute the crime, prevent detection, and/or avoid apprehension. NIEM reference is j:SubjectMO</value>

        [DataMember(Name="subjectMo")]
        public List<JSubjectMOType> SubjectMo { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s personal property account within the agency or facility. NIEM reference is j:SubjectPropertyAccount
        /// </summary>
        /// <value>A set of details about a subject&#x27;s personal property account within the agency or facility. NIEM reference is j:SubjectPropertyAccount</value>

        [DataMember(Name="propertyAccount")]
        public List<NcFinancialAccountType> PropertyAccount { get; set; }

        /// <summary>
        /// A description of a location of a subject&#x27;s planned alternate living situation. NIEM reference is j:SubjectPlannedAlternateAddress
        /// </summary>
        /// <value>A description of a location of a subject&#x27;s planned alternate living situation. NIEM reference is j:SubjectPlannedAlternateAddress</value>

        [DataMember(Name="plannedAlternateAddress")]
        public List<NcAddressType> PlannedAlternateAddress { get; set; }

        /// <summary>
        /// A notification of the details of a subject&#x27;s placement. NIEM reference is j:SubjectPlacementNotification
        /// </summary>
        /// <value>A notification of the details of a subject&#x27;s placement. NIEM reference is j:SubjectPlacementNotification</value>

        [DataMember(Name="placementNotification")]
        public List<EmNotificationType> PlacementNotification { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s secondary assessment. NIEM reference is j:SubjectSecondaryAssessment
        /// </summary>
        /// <value>A set of details about a subject&#x27;s secondary assessment. NIEM reference is j:SubjectSecondaryAssessment</value>

        [DataMember(Name="secondaryAssessment")]
        public List<JSubjectAssessmentType> SecondaryAssessment { get; set; }

        /// <summary>
        /// An articulation of a subject&#x27;s future plans and goals post activity. NIEM reference is j:SubjectFuturePlansAndGoalsText
        /// </summary>
        /// <value>An articulation of a subject&#x27;s future plans and goals post activity. NIEM reference is j:SubjectFuturePlansAndGoalsText</value>

        [DataMember(Name="futurePlansAndGoals")]
        public List<NcTextType> FuturePlansAndGoals { get; set; }

        /// <summary>
        /// An informal comment or observation. NIEM reference is j:Remark
        /// </summary>
        /// <value>An informal comment or observation. NIEM reference is j:Remark</value>

        [DataMember(Name="remark")]
        public List<NcCommentType> Remark { get; set; }

        /// <summary>
        /// True if subject has been incarcerated before; false otherwise. NIEM reference is j:SubjectIncarcerationIndicator
        /// </summary>
        /// <value>True if subject has been incarcerated before; false otherwise. NIEM reference is j:SubjectIncarcerationIndicator</value>

        [DataMember(Name="isIncarceration")]
        public List<NiemXsboolean> IsIncarceration { get; set; }

        /// <summary>
        /// True if subject has a chemical/substance dependency; false otherwise. NIEM reference is j:SubjectChemicalDependencyIndicator
        /// </summary>
        /// <value>True if subject has a chemical/substance dependency; false otherwise. NIEM reference is j:SubjectChemicalDependencyIndicator</value>

        [DataMember(Name="isChemicalDependency")]
        public List<NiemXsboolean> IsChemicalDependency { get; set; }

        /// <summary>
        /// True if this subject is being held for another agency; false otherwise. NIEM reference is j:SubjectHeldIndicator
        /// </summary>
        /// <value>True if this subject is being held for another agency; false otherwise. NIEM reference is j:SubjectHeldIndicator</value>

        [DataMember(Name="isHeld")]
        public List<NiemXsboolean> IsHeld { get; set; }

        /// <summary>
        /// A description of a subject&#x27;s home life/family environment as provided by a subject. NIEM reference is j:SubjectFamilyEnvironmentDescriptionText
        /// </summary>
        /// <value>A description of a subject&#x27;s home life/family environment as provided by a subject. NIEM reference is j:SubjectFamilyEnvironmentDescriptionText</value>

        [DataMember(Name="familyEnvironmentDescription")]
        public List<NcTextType> FamilyEnvironmentDescription { get; set; }

        /// <summary>
        /// True if subject has a history of gambling problems; false otherwise. NIEM reference is j:SubjectGamblingHistoryIndicator
        /// </summary>
        /// <value>True if subject has a history of gambling problems; false otherwise. NIEM reference is j:SubjectGamblingHistoryIndicator</value>

        [DataMember(Name="isGamblingHistory")]
        public List<NiemXsboolean> IsGamblingHistory { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s referral to a program. NIEM reference is j:SubjectProgramReferral
        /// </summary>
        /// <value>A set of details about a subject&#x27;s referral to a program. NIEM reference is j:SubjectProgramReferral</value>

        [DataMember(Name="programReferral")]
        public List<NcReferralType> ProgramReferral { get; set; }

        /// <summary>
        /// True if subject has a history of alcohol use/abuse; false otherwise. NIEM reference is j:SubjectAlcoholHistoryIndicator
        /// </summary>
        /// <value>True if subject has a history of alcohol use/abuse; false otherwise. NIEM reference is j:SubjectAlcoholHistoryIndicator</value>

        [DataMember(Name="isAlcoholHistory")]
        public List<NiemXsboolean> IsAlcoholHistory { get; set; }

        /// <summary>
        /// True if wanted person is armed; false otherwise. NIEM reference is j:SubjectArmedIndicator
        /// </summary>
        /// <value>True if wanted person is armed; false otherwise. NIEM reference is j:SubjectArmedIndicator</value>

        [DataMember(Name="isArmed")]
        public List<NiemXsboolean> IsArmed { get; set; }

        /// <summary>
        /// True if subject provides a statement; false otherwise. NIEM reference is j:SubjectStatementIndicator
        /// </summary>
        /// <value>True if subject provides a statement; false otherwise. NIEM reference is j:SubjectStatementIndicator</value>

        [DataMember(Name="isStatement")]
        public List<NiemXsboolean> IsStatement { get; set; }

        /// <summary>
        /// A date a subject provides a statement NIEM reference is j:SubjectStatementDate
        /// </summary>
        /// <value>A date a subject provides a statement NIEM reference is j:SubjectStatementDate</value>

        [DataMember(Name="statementDate")]
        public List<NcDateType> StatementDate { get; set; }

        /// <summary>
        /// An articulation of an activity(s), e.g., offense, arrest, provided in a subject&#x27;s own words as a part of a subject interview. NIEM reference is j:SubjectStatementText
        /// </summary>
        /// <value>An articulation of an activity(s), e.g., offense, arrest, provided in a subject&#x27;s own words as a part of a subject interview. NIEM reference is j:SubjectStatementText</value>

        [DataMember(Name="statement")]
        public List<NcTextType> Statement { get; set; }

        /// <summary>
        /// A weapon a subject is carrying. NIEM reference is j:SubjectArmedWeapon
        /// </summary>
        /// <value>A weapon a subject is carrying. NIEM reference is j:SubjectArmedWeapon</value>

        [DataMember(Name="armedWeapon")]
        public List<NcWeaponType> ArmedWeapon { get; set; }

        /// <summary>
        /// A set of identifying characteristics a subject has with regard to illegal activity. NIEM reference is j:SubjectCriminalTraitDetails
        /// </summary>
        /// <value>A set of identifying characteristics a subject has with regard to illegal activity. NIEM reference is j:SubjectCriminalTraitDetails</value>

        [DataMember(Name="criminalTraitDetails")]
        public List<JCriminalTraitDetailsType> CriminalTraitDetails { get; set; }

        /// <summary>
        /// A specific address of the facility associated with the incarceration. NIEM reference is j:SubjectDetainmentLocation
        /// </summary>
        /// <value>A specific address of the facility associated with the incarceration. NIEM reference is j:SubjectDetainmentLocation</value>

        [DataMember(Name="detainmentLocation")]
        public List<NcLocationType> DetainmentLocation { get; set; }

        /// <summary>
        /// A disciplinary action which a subject is undergoing. NIEM reference is j:SubjectDisciplinaryAction
        /// </summary>
        /// <value>A disciplinary action which a subject is undergoing. NIEM reference is j:SubjectDisciplinaryAction</value>

        [DataMember(Name="disciplinaryAction")]
        public List<NcDisciplinaryActionType> DisciplinaryAction { get; set; }

        /// <summary>
        /// An indication of whether extradition will occur. NIEM reference is j:SubjectExtraditionText
        /// </summary>
        /// <value>An indication of whether extradition will occur. NIEM reference is j:SubjectExtraditionText</value>

        [DataMember(Name="extradition")]
        public List<NcTextType> Extradition { get; set; }

        /// <summary>
        /// An assigned identification that identifies a subject. NIEM reference is j:SubjectIdentification
        /// </summary>
        /// <value>An assigned identification that identifies a subject. NIEM reference is j:SubjectIdentification</value>

        [DataMember(Name="identification")]
        public List<NcIdentificationType> Identification { get; set; }

        /// <summary>
        /// A criminal organization with which a subject is known or suspected of being involved. NIEM reference is j:SubjectInvolvementCriminalOrganization
        /// </summary>
        /// <value>A criminal organization with which a subject is known or suspected of being involved. NIEM reference is j:SubjectInvolvementCriminalOrganization</value>

        [DataMember(Name="involvementCriminalOrganization")]
        public List<JCriminalOrganizationType> InvolvementCriminalOrganization { get; set; }

        /// <summary>
        /// A person with whom a subject is known or suspected of being involved. NIEM reference is j:SubjectInvolvementPerson
        /// </summary>
        /// <value>A person with whom a subject is known or suspected of being involved. NIEM reference is j:SubjectInvolvementPerson</value>

        [DataMember(Name="involvementPerson")]
        public List<NcPersonType> InvolvementPerson { get; set; }

        /// <summary>
        /// An indication of whether there is a single or multiple organizations that have information which contributes to a subject&#x27;s criminal record. NIEM reference is j:SubjectMultiSourceOffenderText
        /// </summary>
        /// <value>An indication of whether there is a single or multiple organizations that have information which contributes to a subject&#x27;s criminal record. NIEM reference is j:SubjectMultiSourceOffenderText</value>

        [DataMember(Name="multiSourceOffender")]
        public List<NcTextType> MultiSourceOffender { get; set; }

        /// <summary>
        /// An additional piece of information associated with a subject. NIEM reference is j:SubjectOffenderNoticeText
        /// </summary>
        /// <value>An additional piece of information associated with a subject. NIEM reference is j:SubjectOffenderNoticeText</value>

        [DataMember(Name="offenderNotice")]
        public List<NcTextType> OffenderNotice { get; set; }

        /// <summary>
        /// A general status of a subject. NIEM reference is j:SubjectStatus
        /// </summary>
        /// <value>A general status of a subject. NIEM reference is j:SubjectStatus</value>

        [DataMember(Name="status")]
        public List<NcStatusType> Status { get; set; }

        /// <summary>
        /// An incarceration, detention, or other form of supervision a subject is currently undergoing. NIEM reference is j:SubjectSupervision
        /// </summary>
        /// <value>An incarceration, detention, or other form of supervision a subject is currently undergoing. NIEM reference is j:SubjectSupervision</value>

        [DataMember(Name="supervision")]
        public List<NcSupervisionType> Supervision { get; set; }

        /// <summary>
        /// A kind of theft committed by a subject. NIEM reference is j:SubjectTheftCategoryText
        /// </summary>
        /// <value>A kind of theft committed by a subject. NIEM reference is j:SubjectTheftCategoryText</value>

        [DataMember(Name="theftCategory")]
        public List<NcTextType> TheftCategory { get; set; }

        /// <summary>
        /// A description of a warrant out for a subject&#x27;s arrest. NIEM reference is j:SubjectWarrantCategoryDescriptionText
        /// </summary>
        /// <value>A description of a warrant out for a subject&#x27;s arrest. NIEM reference is j:SubjectWarrantCategoryDescriptionText</value>

        [DataMember(Name="warrantCategoryDescription")]
        public List<NcTextType> WarrantCategoryDescription { get; set; }

        /// <summary>
        /// A unique identification assigned by a state Department of Corrections (DOC) to each inmate supervised in the state system. NIEM reference is j:SubjectCorrectionsIdentification
        /// </summary>
        /// <value>A unique identification assigned by a state Department of Corrections (DOC) to each inmate supervised in the state system. NIEM reference is j:SubjectCorrectionsIdentification</value>

        [DataMember(Name="correctionsIdentification")]
        public List<NcIdentificationType> CorrectionsIdentification { get; set; }

        /// <summary>
        /// A status or level of involvement. NIEM reference is j:InvolvementText
        /// </summary>
        /// <value>A status or level of involvement. NIEM reference is j:InvolvementText</value>

        [DataMember(Name="involvement")]
        public List<NcTextType> Involvement { get; set; }

        /// <summary>
        /// A subject&#x27;s involvement in a criminal organization. NIEM reference is j:SubjectCriminalOrganizationInvolvementCode
        /// </summary>
        /// <value>A subject&#x27;s involvement in a criminal organization. NIEM reference is j:SubjectCriminalOrganizationInvolvementCode</value>

        [DataMember(Name="criminalOrganizationInvolvementCode")]
        public List<NcicECRCodeType> CriminalOrganizationInvolvementCode { get; set; }

        /// <summary>
        /// A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationCode
        /// </summary>
        /// <value>A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationCode</value>

        [DataMember(Name="cautionInformationCode")]
        public List<NcicCMCCodeType> CautionInformationCode { get; set; }

        /// <summary>
        /// A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationText
        /// </summary>
        /// <value>A piece of cautionary information about a subject. NIEM reference is j:SubjectCautionInformationText</value>

        [DataMember(Name="cautionInformation")]
        public List<NcTextType> CautionInformation { get; set; }

        /// <summary>
        /// jSubjectType JSON-LD context
        /// </summary>
        /// <value>jSubjectType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSubjectTypeContextJsonldEnum for ../JSON-LD_Contexts/jSubjectTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSubjectTypeContext.jsonld")]
            JSONLDContextsjSubjectTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSubjectType JSON-LD context
        /// </summary>
        /// <value>jSubjectType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSubjectType {\n");
            sb.Append("  RoleOfPerson: ").Append(RoleOfPerson).Append("\n");
            sb.Append("  RoleOfOrganization: ").Append(RoleOfOrganization).Append("\n");
            sb.Append("  InvoluntaryMedicationAction: ").Append(InvoluntaryMedicationAction).Append("\n");
            sb.Append("  IsGangAffiliationDisruptiveGroup: ").Append(IsGangAffiliationDisruptiveGroup).Append("\n");
            sb.Append("  RequestedAssignment: ").Append(RequestedAssignment).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  SupervisedEmploymentAssociation: ").Append(SupervisedEmploymentAssociation).Append("\n");
            sb.Append("  SupervisedRelease: ").Append(SupervisedRelease).Append("\n");
            sb.Append("  Goal: ").Append(Goal).Append("\n");
            sb.Append("  RestrictedLocation: ").Append(RestrictedLocation).Append("\n");
            sb.Append("  Booking: ").Append(Booking).Append("\n");
            sb.Append("  PlacementDecision: ").Append(PlacementDecision).Append("\n");
            sb.Append("  Visitation: ").Append(Visitation).Append("\n");
            sb.Append("  Appointment: ").Append(Appointment).Append("\n");
            sb.Append("  ReleaseNotification: ").Append(ReleaseNotification).Append("\n");
            sb.Append("  Alert: ").Append(Alert).Append("\n");
            sb.Append("  Appeal: ").Append(Appeal).Append("\n");
            sb.Append("  Need: ").Append(Need).Append("\n");
            sb.Append("  Assignment: ").Append(Assignment).Append("\n");
            sb.Append("  Certification: ").Append(Certification).Append("\n");
            sb.Append("  ConfidentialInformation: ").Append(ConfidentialInformation).Append("\n");
            sb.Append("  Release: ").Append(Release).Append("\n");
            sb.Append("  Funeral: ").Append(Funeral).Append("\n");
            sb.Append("  Incident: ").Append(Incident).Append("\n");
            sb.Append("  IsGangAffiliationNone: ").Append(IsGangAffiliationNone).Append("\n");
            sb.Append("  Intake: ").Append(Intake).Append("\n");
            sb.Append("  Assessment: ").Append(Assessment).Append("\n");
            sb.Append("  DnaCollectionStatus: ").Append(DnaCollectionStatus).Append("\n");
            sb.Append("  DisciplinaryReport: ").Append(DisciplinaryReport).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  CriminalHistoryDescription: ").Append(CriminalHistoryDescription).Append("\n");
            sb.Append("  PropertyFinancialAccountPersonalPropertyDetails: ").Append(PropertyFinancialAccountPersonalPropertyDetails).Append("\n");
            sb.Append("  ComprehensionLevel: ").Append(ComprehensionLevel).Append("\n");
            sb.Append("  SecurityClassification: ").Append(SecurityClassification).Append("\n");
            sb.Append("  IsDependentLivingWith: ").Append(IsDependentLivingWith).Append("\n");
            sb.Append("  JacketNumber: ").Append(JacketNumber).Append("\n");
            sb.Append("  IsWeaponsHistory: ").Append(IsWeaponsHistory).Append("\n");
            sb.Append("  IsDrugHistory: ").Append(IsDrugHistory).Append("\n");
            sb.Append("  IsViolentOffender: ").Append(IsViolentOffender).Append("\n");
            sb.Append("  IsFailureToAppear: ").Append(IsFailureToAppear).Append("\n");
            sb.Append("  IsSupervisedRelease: ").Append(IsSupervisedRelease).Append("\n");
            sb.Append("  SpecialHandling: ").Append(SpecialHandling).Append("\n");
            sb.Append("  IsDomesticViolenceHistory: ").Append(IsDomesticViolenceHistory).Append("\n");
            sb.Append("  SubjectMo: ").Append(SubjectMo).Append("\n");
            sb.Append("  PropertyAccount: ").Append(PropertyAccount).Append("\n");
            sb.Append("  PlannedAlternateAddress: ").Append(PlannedAlternateAddress).Append("\n");
            sb.Append("  PlacementNotification: ").Append(PlacementNotification).Append("\n");
            sb.Append("  SecondaryAssessment: ").Append(SecondaryAssessment).Append("\n");
            sb.Append("  FuturePlansAndGoals: ").Append(FuturePlansAndGoals).Append("\n");
            sb.Append("  Remark: ").Append(Remark).Append("\n");
            sb.Append("  IsIncarceration: ").Append(IsIncarceration).Append("\n");
            sb.Append("  IsChemicalDependency: ").Append(IsChemicalDependency).Append("\n");
            sb.Append("  IsHeld: ").Append(IsHeld).Append("\n");
            sb.Append("  FamilyEnvironmentDescription: ").Append(FamilyEnvironmentDescription).Append("\n");
            sb.Append("  IsGamblingHistory: ").Append(IsGamblingHistory).Append("\n");
            sb.Append("  ProgramReferral: ").Append(ProgramReferral).Append("\n");
            sb.Append("  IsAlcoholHistory: ").Append(IsAlcoholHistory).Append("\n");
            sb.Append("  IsArmed: ").Append(IsArmed).Append("\n");
            sb.Append("  IsStatement: ").Append(IsStatement).Append("\n");
            sb.Append("  StatementDate: ").Append(StatementDate).Append("\n");
            sb.Append("  Statement: ").Append(Statement).Append("\n");
            sb.Append("  ArmedWeapon: ").Append(ArmedWeapon).Append("\n");
            sb.Append("  CriminalTraitDetails: ").Append(CriminalTraitDetails).Append("\n");
            sb.Append("  DetainmentLocation: ").Append(DetainmentLocation).Append("\n");
            sb.Append("  DisciplinaryAction: ").Append(DisciplinaryAction).Append("\n");
            sb.Append("  Extradition: ").Append(Extradition).Append("\n");
            sb.Append("  Identification: ").Append(Identification).Append("\n");
            sb.Append("  InvolvementCriminalOrganization: ").Append(InvolvementCriminalOrganization).Append("\n");
            sb.Append("  InvolvementPerson: ").Append(InvolvementPerson).Append("\n");
            sb.Append("  MultiSourceOffender: ").Append(MultiSourceOffender).Append("\n");
            sb.Append("  OffenderNotice: ").Append(OffenderNotice).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Supervision: ").Append(Supervision).Append("\n");
            sb.Append("  TheftCategory: ").Append(TheftCategory).Append("\n");
            sb.Append("  WarrantCategoryDescription: ").Append(WarrantCategoryDescription).Append("\n");
            sb.Append("  CorrectionsIdentification: ").Append(CorrectionsIdentification).Append("\n");
            sb.Append("  Involvement: ").Append(Involvement).Append("\n");
            sb.Append("  CriminalOrganizationInvolvementCode: ").Append(CriminalOrganizationInvolvementCode).Append("\n");
            sb.Append("  CautionInformationCode: ").Append(CautionInformationCode).Append("\n");
            sb.Append("  CautionInformation: ").Append(CautionInformation).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSubjectType)obj);
        }

        /// <summary>
        /// Returns true if JSubjectType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSubjectType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSubjectType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RoleOfPerson == other.RoleOfPerson ||
                    RoleOfPerson != null &&
                    RoleOfPerson.SequenceEqual(other.RoleOfPerson)
                ) && 
                (
                    RoleOfOrganization == other.RoleOfOrganization ||
                    RoleOfOrganization != null &&
                    RoleOfOrganization.SequenceEqual(other.RoleOfOrganization)
                ) && 
                (
                    InvoluntaryMedicationAction == other.InvoluntaryMedicationAction ||
                    InvoluntaryMedicationAction != null &&
                    InvoluntaryMedicationAction.SequenceEqual(other.InvoluntaryMedicationAction)
                ) && 
                (
                    IsGangAffiliationDisruptiveGroup == other.IsGangAffiliationDisruptiveGroup ||
                    IsGangAffiliationDisruptiveGroup != null &&
                    IsGangAffiliationDisruptiveGroup.SequenceEqual(other.IsGangAffiliationDisruptiveGroup)
                ) && 
                (
                    RequestedAssignment == other.RequestedAssignment ||
                    RequestedAssignment != null &&
                    RequestedAssignment.SequenceEqual(other.RequestedAssignment)
                ) && 
                (
                    Risk == other.Risk ||
                    Risk != null &&
                    Risk.SequenceEqual(other.Risk)
                ) && 
                (
                    SupervisedEmploymentAssociation == other.SupervisedEmploymentAssociation ||
                    SupervisedEmploymentAssociation != null &&
                    SupervisedEmploymentAssociation.SequenceEqual(other.SupervisedEmploymentAssociation)
                ) && 
                (
                    SupervisedRelease == other.SupervisedRelease ||
                    SupervisedRelease != null &&
                    SupervisedRelease.SequenceEqual(other.SupervisedRelease)
                ) && 
                (
                    Goal == other.Goal ||
                    Goal != null &&
                    Goal.SequenceEqual(other.Goal)
                ) && 
                (
                    RestrictedLocation == other.RestrictedLocation ||
                    RestrictedLocation != null &&
                    RestrictedLocation.SequenceEqual(other.RestrictedLocation)
                ) && 
                (
                    Booking == other.Booking ||
                    Booking != null &&
                    Booking.SequenceEqual(other.Booking)
                ) && 
                (
                    PlacementDecision == other.PlacementDecision ||
                    PlacementDecision != null &&
                    PlacementDecision.SequenceEqual(other.PlacementDecision)
                ) && 
                (
                    Visitation == other.Visitation ||
                    Visitation != null &&
                    Visitation.SequenceEqual(other.Visitation)
                ) && 
                (
                    Appointment == other.Appointment ||
                    Appointment != null &&
                    Appointment.SequenceEqual(other.Appointment)
                ) && 
                (
                    ReleaseNotification == other.ReleaseNotification ||
                    ReleaseNotification != null &&
                    ReleaseNotification.SequenceEqual(other.ReleaseNotification)
                ) && 
                (
                    Alert == other.Alert ||
                    Alert != null &&
                    Alert.SequenceEqual(other.Alert)
                ) && 
                (
                    Appeal == other.Appeal ||
                    Appeal != null &&
                    Appeal.SequenceEqual(other.Appeal)
                ) && 
                (
                    Need == other.Need ||
                    Need != null &&
                    Need.SequenceEqual(other.Need)
                ) && 
                (
                    Assignment == other.Assignment ||
                    Assignment != null &&
                    Assignment.SequenceEqual(other.Assignment)
                ) && 
                (
                    Certification == other.Certification ||
                    Certification != null &&
                    Certification.SequenceEqual(other.Certification)
                ) && 
                (
                    ConfidentialInformation == other.ConfidentialInformation ||
                    ConfidentialInformation != null &&
                    ConfidentialInformation.SequenceEqual(other.ConfidentialInformation)
                ) && 
                (
                    Release == other.Release ||
                    Release != null &&
                    Release.SequenceEqual(other.Release)
                ) && 
                (
                    Funeral == other.Funeral ||
                    Funeral != null &&
                    Funeral.SequenceEqual(other.Funeral)
                ) && 
                (
                    Incident == other.Incident ||
                    Incident != null &&
                    Incident.SequenceEqual(other.Incident)
                ) && 
                (
                    IsGangAffiliationNone == other.IsGangAffiliationNone ||
                    IsGangAffiliationNone != null &&
                    IsGangAffiliationNone.SequenceEqual(other.IsGangAffiliationNone)
                ) && 
                (
                    Intake == other.Intake ||
                    Intake != null &&
                    Intake.SequenceEqual(other.Intake)
                ) && 
                (
                    Assessment == other.Assessment ||
                    Assessment != null &&
                    Assessment.SequenceEqual(other.Assessment)
                ) && 
                (
                    DnaCollectionStatus == other.DnaCollectionStatus ||
                    DnaCollectionStatus != null &&
                    DnaCollectionStatus.SequenceEqual(other.DnaCollectionStatus)
                ) && 
                (
                    DisciplinaryReport == other.DisciplinaryReport ||
                    DisciplinaryReport != null &&
                    DisciplinaryReport.SequenceEqual(other.DisciplinaryReport)
                ) && 
                (
                    SequenceNumber == other.SequenceNumber ||
                    SequenceNumber != null &&
                    SequenceNumber.SequenceEqual(other.SequenceNumber)
                ) && 
                (
                    CriminalHistoryDescription == other.CriminalHistoryDescription ||
                    CriminalHistoryDescription != null &&
                    CriminalHistoryDescription.SequenceEqual(other.CriminalHistoryDescription)
                ) && 
                (
                    PropertyFinancialAccountPersonalPropertyDetails == other.PropertyFinancialAccountPersonalPropertyDetails ||
                    PropertyFinancialAccountPersonalPropertyDetails != null &&
                    PropertyFinancialAccountPersonalPropertyDetails.SequenceEqual(other.PropertyFinancialAccountPersonalPropertyDetails)
                ) && 
                (
                    ComprehensionLevel == other.ComprehensionLevel ||
                    ComprehensionLevel != null &&
                    ComprehensionLevel.SequenceEqual(other.ComprehensionLevel)
                ) && 
                (
                    SecurityClassification == other.SecurityClassification ||
                    SecurityClassification != null &&
                    SecurityClassification.SequenceEqual(other.SecurityClassification)
                ) && 
                (
                    IsDependentLivingWith == other.IsDependentLivingWith ||
                    IsDependentLivingWith != null &&
                    IsDependentLivingWith.SequenceEqual(other.IsDependentLivingWith)
                ) && 
                (
                    JacketNumber == other.JacketNumber ||
                    JacketNumber != null &&
                    JacketNumber.SequenceEqual(other.JacketNumber)
                ) && 
                (
                    IsWeaponsHistory == other.IsWeaponsHistory ||
                    IsWeaponsHistory != null &&
                    IsWeaponsHistory.SequenceEqual(other.IsWeaponsHistory)
                ) && 
                (
                    IsDrugHistory == other.IsDrugHistory ||
                    IsDrugHistory != null &&
                    IsDrugHistory.SequenceEqual(other.IsDrugHistory)
                ) && 
                (
                    IsViolentOffender == other.IsViolentOffender ||
                    IsViolentOffender != null &&
                    IsViolentOffender.SequenceEqual(other.IsViolentOffender)
                ) && 
                (
                    IsFailureToAppear == other.IsFailureToAppear ||
                    IsFailureToAppear != null &&
                    IsFailureToAppear.SequenceEqual(other.IsFailureToAppear)
                ) && 
                (
                    IsSupervisedRelease == other.IsSupervisedRelease ||
                    IsSupervisedRelease != null &&
                    IsSupervisedRelease.SequenceEqual(other.IsSupervisedRelease)
                ) && 
                (
                    SpecialHandling == other.SpecialHandling ||
                    SpecialHandling != null &&
                    SpecialHandling.SequenceEqual(other.SpecialHandling)
                ) && 
                (
                    IsDomesticViolenceHistory == other.IsDomesticViolenceHistory ||
                    IsDomesticViolenceHistory != null &&
                    IsDomesticViolenceHistory.SequenceEqual(other.IsDomesticViolenceHistory)
                ) && 
                (
                    SubjectMo == other.SubjectMo ||
                    SubjectMo != null &&
                    SubjectMo.SequenceEqual(other.SubjectMo)
                ) && 
                (
                    PropertyAccount == other.PropertyAccount ||
                    PropertyAccount != null &&
                    PropertyAccount.SequenceEqual(other.PropertyAccount)
                ) && 
                (
                    PlannedAlternateAddress == other.PlannedAlternateAddress ||
                    PlannedAlternateAddress != null &&
                    PlannedAlternateAddress.SequenceEqual(other.PlannedAlternateAddress)
                ) && 
                (
                    PlacementNotification == other.PlacementNotification ||
                    PlacementNotification != null &&
                    PlacementNotification.SequenceEqual(other.PlacementNotification)
                ) && 
                (
                    SecondaryAssessment == other.SecondaryAssessment ||
                    SecondaryAssessment != null &&
                    SecondaryAssessment.SequenceEqual(other.SecondaryAssessment)
                ) && 
                (
                    FuturePlansAndGoals == other.FuturePlansAndGoals ||
                    FuturePlansAndGoals != null &&
                    FuturePlansAndGoals.SequenceEqual(other.FuturePlansAndGoals)
                ) && 
                (
                    Remark == other.Remark ||
                    Remark != null &&
                    Remark.SequenceEqual(other.Remark)
                ) && 
                (
                    IsIncarceration == other.IsIncarceration ||
                    IsIncarceration != null &&
                    IsIncarceration.SequenceEqual(other.IsIncarceration)
                ) && 
                (
                    IsChemicalDependency == other.IsChemicalDependency ||
                    IsChemicalDependency != null &&
                    IsChemicalDependency.SequenceEqual(other.IsChemicalDependency)
                ) && 
                (
                    IsHeld == other.IsHeld ||
                    IsHeld != null &&
                    IsHeld.SequenceEqual(other.IsHeld)
                ) && 
                (
                    FamilyEnvironmentDescription == other.FamilyEnvironmentDescription ||
                    FamilyEnvironmentDescription != null &&
                    FamilyEnvironmentDescription.SequenceEqual(other.FamilyEnvironmentDescription)
                ) && 
                (
                    IsGamblingHistory == other.IsGamblingHistory ||
                    IsGamblingHistory != null &&
                    IsGamblingHistory.SequenceEqual(other.IsGamblingHistory)
                ) && 
                (
                    ProgramReferral == other.ProgramReferral ||
                    ProgramReferral != null &&
                    ProgramReferral.SequenceEqual(other.ProgramReferral)
                ) && 
                (
                    IsAlcoholHistory == other.IsAlcoholHistory ||
                    IsAlcoholHistory != null &&
                    IsAlcoholHistory.SequenceEqual(other.IsAlcoholHistory)
                ) && 
                (
                    IsArmed == other.IsArmed ||
                    IsArmed != null &&
                    IsArmed.SequenceEqual(other.IsArmed)
                ) && 
                (
                    IsStatement == other.IsStatement ||
                    IsStatement != null &&
                    IsStatement.SequenceEqual(other.IsStatement)
                ) && 
                (
                    StatementDate == other.StatementDate ||
                    StatementDate != null &&
                    StatementDate.SequenceEqual(other.StatementDate)
                ) && 
                (
                    Statement == other.Statement ||
                    Statement != null &&
                    Statement.SequenceEqual(other.Statement)
                ) && 
                (
                    ArmedWeapon == other.ArmedWeapon ||
                    ArmedWeapon != null &&
                    ArmedWeapon.SequenceEqual(other.ArmedWeapon)
                ) && 
                (
                    CriminalTraitDetails == other.CriminalTraitDetails ||
                    CriminalTraitDetails != null &&
                    CriminalTraitDetails.SequenceEqual(other.CriminalTraitDetails)
                ) && 
                (
                    DetainmentLocation == other.DetainmentLocation ||
                    DetainmentLocation != null &&
                    DetainmentLocation.SequenceEqual(other.DetainmentLocation)
                ) && 
                (
                    DisciplinaryAction == other.DisciplinaryAction ||
                    DisciplinaryAction != null &&
                    DisciplinaryAction.SequenceEqual(other.DisciplinaryAction)
                ) && 
                (
                    Extradition == other.Extradition ||
                    Extradition != null &&
                    Extradition.SequenceEqual(other.Extradition)
                ) && 
                (
                    Identification == other.Identification ||
                    Identification != null &&
                    Identification.SequenceEqual(other.Identification)
                ) && 
                (
                    InvolvementCriminalOrganization == other.InvolvementCriminalOrganization ||
                    InvolvementCriminalOrganization != null &&
                    InvolvementCriminalOrganization.SequenceEqual(other.InvolvementCriminalOrganization)
                ) && 
                (
                    InvolvementPerson == other.InvolvementPerson ||
                    InvolvementPerson != null &&
                    InvolvementPerson.SequenceEqual(other.InvolvementPerson)
                ) && 
                (
                    MultiSourceOffender == other.MultiSourceOffender ||
                    MultiSourceOffender != null &&
                    MultiSourceOffender.SequenceEqual(other.MultiSourceOffender)
                ) && 
                (
                    OffenderNotice == other.OffenderNotice ||
                    OffenderNotice != null &&
                    OffenderNotice.SequenceEqual(other.OffenderNotice)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.SequenceEqual(other.Status)
                ) && 
                (
                    Supervision == other.Supervision ||
                    Supervision != null &&
                    Supervision.SequenceEqual(other.Supervision)
                ) && 
                (
                    TheftCategory == other.TheftCategory ||
                    TheftCategory != null &&
                    TheftCategory.SequenceEqual(other.TheftCategory)
                ) && 
                (
                    WarrantCategoryDescription == other.WarrantCategoryDescription ||
                    WarrantCategoryDescription != null &&
                    WarrantCategoryDescription.SequenceEqual(other.WarrantCategoryDescription)
                ) && 
                (
                    CorrectionsIdentification == other.CorrectionsIdentification ||
                    CorrectionsIdentification != null &&
                    CorrectionsIdentification.SequenceEqual(other.CorrectionsIdentification)
                ) && 
                (
                    Involvement == other.Involvement ||
                    Involvement != null &&
                    Involvement.SequenceEqual(other.Involvement)
                ) && 
                (
                    CriminalOrganizationInvolvementCode == other.CriminalOrganizationInvolvementCode ||
                    CriminalOrganizationInvolvementCode != null &&
                    CriminalOrganizationInvolvementCode.SequenceEqual(other.CriminalOrganizationInvolvementCode)
                ) && 
                (
                    CautionInformationCode == other.CautionInformationCode ||
                    CautionInformationCode != null &&
                    CautionInformationCode.SequenceEqual(other.CautionInformationCode)
                ) && 
                (
                    CautionInformation == other.CautionInformation ||
                    CautionInformation != null &&
                    CautionInformation.SequenceEqual(other.CautionInformation)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RoleOfPerson != null)
                    hashCode = hashCode * 59 + RoleOfPerson.GetHashCode();
                    if (RoleOfOrganization != null)
                    hashCode = hashCode * 59 + RoleOfOrganization.GetHashCode();
                    if (InvoluntaryMedicationAction != null)
                    hashCode = hashCode * 59 + InvoluntaryMedicationAction.GetHashCode();
                    if (IsGangAffiliationDisruptiveGroup != null)
                    hashCode = hashCode * 59 + IsGangAffiliationDisruptiveGroup.GetHashCode();
                    if (RequestedAssignment != null)
                    hashCode = hashCode * 59 + RequestedAssignment.GetHashCode();
                    if (Risk != null)
                    hashCode = hashCode * 59 + Risk.GetHashCode();
                    if (SupervisedEmploymentAssociation != null)
                    hashCode = hashCode * 59 + SupervisedEmploymentAssociation.GetHashCode();
                    if (SupervisedRelease != null)
                    hashCode = hashCode * 59 + SupervisedRelease.GetHashCode();
                    if (Goal != null)
                    hashCode = hashCode * 59 + Goal.GetHashCode();
                    if (RestrictedLocation != null)
                    hashCode = hashCode * 59 + RestrictedLocation.GetHashCode();
                    if (Booking != null)
                    hashCode = hashCode * 59 + Booking.GetHashCode();
                    if (PlacementDecision != null)
                    hashCode = hashCode * 59 + PlacementDecision.GetHashCode();
                    if (Visitation != null)
                    hashCode = hashCode * 59 + Visitation.GetHashCode();
                    if (Appointment != null)
                    hashCode = hashCode * 59 + Appointment.GetHashCode();
                    if (ReleaseNotification != null)
                    hashCode = hashCode * 59 + ReleaseNotification.GetHashCode();
                    if (Alert != null)
                    hashCode = hashCode * 59 + Alert.GetHashCode();
                    if (Appeal != null)
                    hashCode = hashCode * 59 + Appeal.GetHashCode();
                    if (Need != null)
                    hashCode = hashCode * 59 + Need.GetHashCode();
                    if (Assignment != null)
                    hashCode = hashCode * 59 + Assignment.GetHashCode();
                    if (Certification != null)
                    hashCode = hashCode * 59 + Certification.GetHashCode();
                    if (ConfidentialInformation != null)
                    hashCode = hashCode * 59 + ConfidentialInformation.GetHashCode();
                    if (Release != null)
                    hashCode = hashCode * 59 + Release.GetHashCode();
                    if (Funeral != null)
                    hashCode = hashCode * 59 + Funeral.GetHashCode();
                    if (Incident != null)
                    hashCode = hashCode * 59 + Incident.GetHashCode();
                    if (IsGangAffiliationNone != null)
                    hashCode = hashCode * 59 + IsGangAffiliationNone.GetHashCode();
                    if (Intake != null)
                    hashCode = hashCode * 59 + Intake.GetHashCode();
                    if (Assessment != null)
                    hashCode = hashCode * 59 + Assessment.GetHashCode();
                    if (DnaCollectionStatus != null)
                    hashCode = hashCode * 59 + DnaCollectionStatus.GetHashCode();
                    if (DisciplinaryReport != null)
                    hashCode = hashCode * 59 + DisciplinaryReport.GetHashCode();
                    if (SequenceNumber != null)
                    hashCode = hashCode * 59 + SequenceNumber.GetHashCode();
                    if (CriminalHistoryDescription != null)
                    hashCode = hashCode * 59 + CriminalHistoryDescription.GetHashCode();
                    if (PropertyFinancialAccountPersonalPropertyDetails != null)
                    hashCode = hashCode * 59 + PropertyFinancialAccountPersonalPropertyDetails.GetHashCode();
                    if (ComprehensionLevel != null)
                    hashCode = hashCode * 59 + ComprehensionLevel.GetHashCode();
                    if (SecurityClassification != null)
                    hashCode = hashCode * 59 + SecurityClassification.GetHashCode();
                    if (IsDependentLivingWith != null)
                    hashCode = hashCode * 59 + IsDependentLivingWith.GetHashCode();
                    if (JacketNumber != null)
                    hashCode = hashCode * 59 + JacketNumber.GetHashCode();
                    if (IsWeaponsHistory != null)
                    hashCode = hashCode * 59 + IsWeaponsHistory.GetHashCode();
                    if (IsDrugHistory != null)
                    hashCode = hashCode * 59 + IsDrugHistory.GetHashCode();
                    if (IsViolentOffender != null)
                    hashCode = hashCode * 59 + IsViolentOffender.GetHashCode();
                    if (IsFailureToAppear != null)
                    hashCode = hashCode * 59 + IsFailureToAppear.GetHashCode();
                    if (IsSupervisedRelease != null)
                    hashCode = hashCode * 59 + IsSupervisedRelease.GetHashCode();
                    if (SpecialHandling != null)
                    hashCode = hashCode * 59 + SpecialHandling.GetHashCode();
                    if (IsDomesticViolenceHistory != null)
                    hashCode = hashCode * 59 + IsDomesticViolenceHistory.GetHashCode();
                    if (SubjectMo != null)
                    hashCode = hashCode * 59 + SubjectMo.GetHashCode();
                    if (PropertyAccount != null)
                    hashCode = hashCode * 59 + PropertyAccount.GetHashCode();
                    if (PlannedAlternateAddress != null)
                    hashCode = hashCode * 59 + PlannedAlternateAddress.GetHashCode();
                    if (PlacementNotification != null)
                    hashCode = hashCode * 59 + PlacementNotification.GetHashCode();
                    if (SecondaryAssessment != null)
                    hashCode = hashCode * 59 + SecondaryAssessment.GetHashCode();
                    if (FuturePlansAndGoals != null)
                    hashCode = hashCode * 59 + FuturePlansAndGoals.GetHashCode();
                    if (Remark != null)
                    hashCode = hashCode * 59 + Remark.GetHashCode();
                    if (IsIncarceration != null)
                    hashCode = hashCode * 59 + IsIncarceration.GetHashCode();
                    if (IsChemicalDependency != null)
                    hashCode = hashCode * 59 + IsChemicalDependency.GetHashCode();
                    if (IsHeld != null)
                    hashCode = hashCode * 59 + IsHeld.GetHashCode();
                    if (FamilyEnvironmentDescription != null)
                    hashCode = hashCode * 59 + FamilyEnvironmentDescription.GetHashCode();
                    if (IsGamblingHistory != null)
                    hashCode = hashCode * 59 + IsGamblingHistory.GetHashCode();
                    if (ProgramReferral != null)
                    hashCode = hashCode * 59 + ProgramReferral.GetHashCode();
                    if (IsAlcoholHistory != null)
                    hashCode = hashCode * 59 + IsAlcoholHistory.GetHashCode();
                    if (IsArmed != null)
                    hashCode = hashCode * 59 + IsArmed.GetHashCode();
                    if (IsStatement != null)
                    hashCode = hashCode * 59 + IsStatement.GetHashCode();
                    if (StatementDate != null)
                    hashCode = hashCode * 59 + StatementDate.GetHashCode();
                    if (Statement != null)
                    hashCode = hashCode * 59 + Statement.GetHashCode();
                    if (ArmedWeapon != null)
                    hashCode = hashCode * 59 + ArmedWeapon.GetHashCode();
                    if (CriminalTraitDetails != null)
                    hashCode = hashCode * 59 + CriminalTraitDetails.GetHashCode();
                    if (DetainmentLocation != null)
                    hashCode = hashCode * 59 + DetainmentLocation.GetHashCode();
                    if (DisciplinaryAction != null)
                    hashCode = hashCode * 59 + DisciplinaryAction.GetHashCode();
                    if (Extradition != null)
                    hashCode = hashCode * 59 + Extradition.GetHashCode();
                    if (Identification != null)
                    hashCode = hashCode * 59 + Identification.GetHashCode();
                    if (InvolvementCriminalOrganization != null)
                    hashCode = hashCode * 59 + InvolvementCriminalOrganization.GetHashCode();
                    if (InvolvementPerson != null)
                    hashCode = hashCode * 59 + InvolvementPerson.GetHashCode();
                    if (MultiSourceOffender != null)
                    hashCode = hashCode * 59 + MultiSourceOffender.GetHashCode();
                    if (OffenderNotice != null)
                    hashCode = hashCode * 59 + OffenderNotice.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Supervision != null)
                    hashCode = hashCode * 59 + Supervision.GetHashCode();
                    if (TheftCategory != null)
                    hashCode = hashCode * 59 + TheftCategory.GetHashCode();
                    if (WarrantCategoryDescription != null)
                    hashCode = hashCode * 59 + WarrantCategoryDescription.GetHashCode();
                    if (CorrectionsIdentification != null)
                    hashCode = hashCode * 59 + CorrectionsIdentification.GetHashCode();
                    if (Involvement != null)
                    hashCode = hashCode * 59 + Involvement.GetHashCode();
                    if (CriminalOrganizationInvolvementCode != null)
                    hashCode = hashCode * 59 + CriminalOrganizationInvolvementCode.GetHashCode();
                    if (CautionInformationCode != null)
                    hashCode = hashCode * 59 + CautionInformationCode.GetHashCode();
                    if (CautionInformation != null)
                    hashCode = hashCode * 59 + CautionInformation.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSubjectType left, JSubjectType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSubjectType left, JSubjectType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
