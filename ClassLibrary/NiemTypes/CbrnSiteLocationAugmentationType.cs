/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a site location.
    /// </summary>
    [DataContract]
    public partial class CbrnSiteLocationAugmentationType : IEquatable<CbrnSiteLocationAugmentationType>
    { 
        /// <summary>
        /// A set of geographical coordinates providing latitude, longitude, and elevation (at the point of measurement and at the point on the earth&#x27;s surface), and uncertainty of the coordinates. NIEM reference is cbrn:GeographicPoint
        /// </summary>
        /// <value>A set of geographical coordinates providing latitude, longitude, and elevation (at the point of measurement and at the point on the earth&#x27;s surface), and uncertainty of the coordinates. NIEM reference is cbrn:GeographicPoint</value>

        [DataMember(Name="geographicPoint")]
        public List<CbrnGeographicPointType> GeographicPoint { get; set; }

        /// <summary>
        /// A description of a site that may contain information of importance to a responder; e.g.,  electrified fence, dogs on property, loft apartment, multi-storied building, multiple warehouses on site, hazardous material, etc. NIEM reference is cbrn:SiteSpecialInfoText
        /// </summary>
        /// <value>A description of a site that may contain information of importance to a responder; e.g.,  electrified fence, dogs on property, loft apartment, multi-storied building, multiple warehouses on site, hazardous material, etc. NIEM reference is cbrn:SiteSpecialInfoText</value>

        [DataMember(Name="siteSpecialInfo")]
        public List<NcTextType> SiteSpecialInfo { get; set; }

        /// <summary>
        /// A set of location information based on a map contained in a Map Guide document. NIEM reference is cbrn:MapGuideLocation
        /// </summary>
        /// <value>A set of location information based on a map contained in a Map Guide document. NIEM reference is cbrn:MapGuideLocation</value>

        [DataMember(Name="mapGuideLocation")]
        public List<CbrnMapGuideLocationType> MapGuideLocation { get; set; }

        /// <summary>
        /// A Name of a special event. NIEM reference is cbrn:SpecialEventName
        /// </summary>
        /// <value>A Name of a special event. NIEM reference is cbrn:SpecialEventName</value>

        [DataMember(Name="specialEventName")]
        public List<NiemXsstring> SpecialEventName { get; set; }

        /// <summary>
        /// A starting date and time of a special event. NIEM reference is cbrn:SpecialEventStartDateTime
        /// </summary>
        /// <value>A starting date and time of a special event. NIEM reference is cbrn:SpecialEventStartDateTime</value>

        [DataMember(Name="specialEventStartDateTime")]
        public List<NiemXsdateTime> SpecialEventStartDateTime { get; set; }

        /// <summary>
        /// An ending date and time of a special event. NIEM reference is cbrn:SpecialEventEndDateTime
        /// </summary>
        /// <value>An ending date and time of a special event. NIEM reference is cbrn:SpecialEventEndDateTime</value>

        [DataMember(Name="specialEventEndDateTime")]
        public List<NiemXsdateTime> SpecialEventEndDateTime { get; set; }

        /// <summary>
        /// An area of operational security concern for a special event. NIEM reference is cbrn:SpecialEventSecurityArea
        /// </summary>
        /// <value>An area of operational security concern for a special event. NIEM reference is cbrn:SpecialEventSecurityArea</value>

        [DataMember(Name="specialEventSecurityArea")]
        public List<GeoPolygonType> SpecialEventSecurityArea { get; set; }

        /// <summary>
        /// cbrnSiteLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>cbrnSiteLocationAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextscbrnSiteLocationAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/cbrnSiteLocationAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/cbrnSiteLocationAugmentationTypeContext.jsonld")]
            JSONLDContextscbrnSiteLocationAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// cbrnSiteLocationAugmentationType JSON-LD context
        /// </summary>
        /// <value>cbrnSiteLocationAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CbrnSiteLocationAugmentationType {\n");
            sb.Append("  GeographicPoint: ").Append(GeographicPoint).Append("\n");
            sb.Append("  SiteSpecialInfo: ").Append(SiteSpecialInfo).Append("\n");
            sb.Append("  MapGuideLocation: ").Append(MapGuideLocation).Append("\n");
            sb.Append("  SpecialEventName: ").Append(SpecialEventName).Append("\n");
            sb.Append("  SpecialEventStartDateTime: ").Append(SpecialEventStartDateTime).Append("\n");
            sb.Append("  SpecialEventEndDateTime: ").Append(SpecialEventEndDateTime).Append("\n");
            sb.Append("  SpecialEventSecurityArea: ").Append(SpecialEventSecurityArea).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CbrnSiteLocationAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if CbrnSiteLocationAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of CbrnSiteLocationAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CbrnSiteLocationAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GeographicPoint == other.GeographicPoint ||
                    GeographicPoint != null &&
                    GeographicPoint.SequenceEqual(other.GeographicPoint)
                ) && 
                (
                    SiteSpecialInfo == other.SiteSpecialInfo ||
                    SiteSpecialInfo != null &&
                    SiteSpecialInfo.SequenceEqual(other.SiteSpecialInfo)
                ) && 
                (
                    MapGuideLocation == other.MapGuideLocation ||
                    MapGuideLocation != null &&
                    MapGuideLocation.SequenceEqual(other.MapGuideLocation)
                ) && 
                (
                    SpecialEventName == other.SpecialEventName ||
                    SpecialEventName != null &&
                    SpecialEventName.SequenceEqual(other.SpecialEventName)
                ) && 
                (
                    SpecialEventStartDateTime == other.SpecialEventStartDateTime ||
                    SpecialEventStartDateTime != null &&
                    SpecialEventStartDateTime.SequenceEqual(other.SpecialEventStartDateTime)
                ) && 
                (
                    SpecialEventEndDateTime == other.SpecialEventEndDateTime ||
                    SpecialEventEndDateTime != null &&
                    SpecialEventEndDateTime.SequenceEqual(other.SpecialEventEndDateTime)
                ) && 
                (
                    SpecialEventSecurityArea == other.SpecialEventSecurityArea ||
                    SpecialEventSecurityArea != null &&
                    SpecialEventSecurityArea.SequenceEqual(other.SpecialEventSecurityArea)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GeographicPoint != null)
                    hashCode = hashCode * 59 + GeographicPoint.GetHashCode();
                    if (SiteSpecialInfo != null)
                    hashCode = hashCode * 59 + SiteSpecialInfo.GetHashCode();
                    if (MapGuideLocation != null)
                    hashCode = hashCode * 59 + MapGuideLocation.GetHashCode();
                    if (SpecialEventName != null)
                    hashCode = hashCode * 59 + SpecialEventName.GetHashCode();
                    if (SpecialEventStartDateTime != null)
                    hashCode = hashCode * 59 + SpecialEventStartDateTime.GetHashCode();
                    if (SpecialEventEndDateTime != null)
                    hashCode = hashCode * 59 + SpecialEventEndDateTime.GetHashCode();
                    if (SpecialEventSecurityArea != null)
                    hashCode = hashCode * 59 + SpecialEventSecurityArea.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CbrnSiteLocationAugmentationType left, CbrnSiteLocationAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CbrnSiteLocationAugmentationType left, CbrnSiteLocationAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
