/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
        /// <summary>
        /// A data type for a code that identifies additional information on criminal activity of offenders in the offense. N-Dex code list includes all NIBRS codes, plus additional codes.
        /// </summary>
        /// <value>A data type for a code that identifies additional information on criminal activity of offenders in the offense. N-Dex code list includes all NIBRS codes, plus additional codes.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NdexCriminalActivityCategoryNDExCodeSimpleType
        {
            /// <summary>
            /// Enum AssistingEnum for Assisting
            /// </summary>
            [EnumMember(Value = "Assisting")]
            AssistingEnum = 0,
            /// <summary>
            /// Enum BuyingEnum for Buying
            /// </summary>
            [EnumMember(Value = "Buying")]
            BuyingEnum = 1,
            /// <summary>
            /// Enum BuyingReceivingEnum for Buying_Receiving
            /// </summary>
            [EnumMember(Value = "Buying_Receiving")]
            BuyingReceivingEnum = 2,
            /// <summary>
            /// Enum ConcealingEnum for Concealing
            /// </summary>
            [EnumMember(Value = "Concealing")]
            ConcealingEnum = 3,
            /// <summary>
            /// Enum ConsumingEnum for Consuming
            /// </summary>
            [EnumMember(Value = "Consuming")]
            ConsumingEnum = 4,
            /// <summary>
            /// Enum CultivatingEnum for Cultivating
            /// </summary>
            [EnumMember(Value = "Cultivating")]
            CultivatingEnum = 5,
            /// <summary>
            /// Enum CultivatingManufacturingPublishingEnum for Cultivating_Manufacturing_Publishing
            /// </summary>
            [EnumMember(Value = "Cultivating_Manufacturing_Publishing")]
            CultivatingManufacturingPublishingEnum = 6,
            /// <summary>
            /// Enum DistributingEnum for Distributing
            /// </summary>
            [EnumMember(Value = "Distributing")]
            DistributingEnum = 7,
            /// <summary>
            /// Enum DistributingSellingEnum for Distributing_Selling
            /// </summary>
            [EnumMember(Value = "Distributing_Selling")]
            DistributingSellingEnum = 8,
            /// <summary>
            /// Enum ExploitingChildrenEnum for Exploiting Children
            /// </summary>
            [EnumMember(Value = "Exploiting Children")]
            ExploitingChildrenEnum = 9,
            /// <summary>
            /// Enum ImportingEnum for Importing
            /// </summary>
            [EnumMember(Value = "Importing")]
            ImportingEnum = 10,
            /// <summary>
            /// Enum ManufacturingEnum for Manufacturing
            /// </summary>
            [EnumMember(Value = "Manufacturing")]
            ManufacturingEnum = 11,
            /// <summary>
            /// Enum NoneEnum for None
            /// </summary>
            [EnumMember(Value = "None")]
            NoneEnum = 12,
            /// <summary>
            /// Enum OperatingEnum for Operating
            /// </summary>
            [EnumMember(Value = "Operating")]
            OperatingEnum = 13,
            /// <summary>
            /// Enum OperatingPromotingAssistingEnum for Operating_Promoting_Assisting
            /// </summary>
            [EnumMember(Value = "Operating_Promoting_Assisting")]
            OperatingPromotingAssistingEnum = 14,
            /// <summary>
            /// Enum PossessingEnum for Possessing
            /// </summary>
            [EnumMember(Value = "Possessing")]
            PossessingEnum = 15,
            /// <summary>
            /// Enum PossessingConcealingEnum for Possessing_Concealing
            /// </summary>
            [EnumMember(Value = "Possessing_Concealing")]
            PossessingConcealingEnum = 16,
            /// <summary>
            /// Enum PromotingEnum for Promoting
            /// </summary>
            [EnumMember(Value = "Promoting")]
            PromotingEnum = 17,
            /// <summary>
            /// Enum PublishingEnum for Publishing
            /// </summary>
            [EnumMember(Value = "Publishing")]
            PublishingEnum = 18,
            /// <summary>
            /// Enum ReceivingEnum for Receiving
            /// </summary>
            [EnumMember(Value = "Receiving")]
            ReceivingEnum = 19,
            /// <summary>
            /// Enum SellingEnum for Selling
            /// </summary>
            [EnumMember(Value = "Selling")]
            SellingEnum = 20,
            /// <summary>
            /// Enum TransmittingEnum for Transmitting
            /// </summary>
            [EnumMember(Value = "Transmitting")]
            TransmittingEnum = 21,
            /// <summary>
            /// Enum TransportingEnum for Transporting
            /// </summary>
            [EnumMember(Value = "Transporting")]
            TransportingEnum = 22,
            /// <summary>
            /// Enum TransportingTransmittingImportingEnum for Transporting_Transmitting_Importing
            /// </summary>
            [EnumMember(Value = "Transporting_Transmitting_Importing")]
            TransportingTransmittingImportingEnum = 23,
            /// <summary>
            /// Enum UnknownEnum for Unknown
            /// </summary>
            [EnumMember(Value = "Unknown")]
            UnknownEnum = 24,
            /// <summary>
            /// Enum UsingEnum for Using
            /// </summary>
            [EnumMember(Value = "Using")]
            UsingEnum = 25,
            /// <summary>
            /// Enum UsingConsumingEnum for Using_Consuming
            /// </summary>
            [EnumMember(Value = "Using_Consuming")]
            UsingConsumingEnum = 26        }
}
