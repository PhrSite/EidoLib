/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for additional information about a supervision.
    /// </summary>
    [DataContract]
    public partial class JSupervisionAugmentationType : IEquatable<JSupervisionAugmentationType>
    { 
        /// <summary>
        /// A diagnostic study of a physical or mental status or condition of a Person NIEM reference is j:SupervisionPersonEvaluation
        /// </summary>
        /// <value>A diagnostic study of a physical or mental status or condition of a Person NIEM reference is j:SupervisionPersonEvaluation</value>

        [DataMember(Name="supervisionPersonEvaluation")]
        public List<JEvaluationType> SupervisionPersonEvaluation { get; set; }

        /// <summary>
        /// A status of a subject&#x27;s current supervision. NIEM reference is j:SupervisionStatus
        /// </summary>
        /// <value>A status of a subject&#x27;s current supervision. NIEM reference is j:SupervisionStatus</value>

        [DataMember(Name="supervisionStatus")]
        public List<NcStatusType> SupervisionStatus { get; set; }

        /// <summary>
        /// A date for a parolees release from supervision. NIEM reference is j:SupervisionParoleReleaseDate
        /// </summary>
        /// <value>A date for a parolees release from supervision. NIEM reference is j:SupervisionParoleReleaseDate</value>

        [DataMember(Name="supervisionParoleReleaseDate")]
        public List<NcDateType> SupervisionParoleReleaseDate { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s supervision history. NIEM reference is j:SupervisionHistory
        /// </summary>
        /// <value>A set of details about a subject&#x27;s supervision history. NIEM reference is j:SupervisionHistory</value>

        [DataMember(Name="supervisionHistory")]
        public List<JSupervisionHistoryType> SupervisionHistory { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s supervision segregation. NIEM reference is j:SupervisionSegregation
        /// </summary>
        /// <value>A set of details about a subject&#x27;s supervision segregation. NIEM reference is j:SupervisionSegregation</value>

        [DataMember(Name="supervisionSegregation")]
        public List<NcActivityType> SupervisionSegregation { get; set; }

        /// <summary>
        /// A set of details about a subject&#x27;s supervision assignment. NIEM reference is j:SupervisionAssignment
        /// </summary>
        /// <value>A set of details about a subject&#x27;s supervision assignment. NIEM reference is j:SupervisionAssignment</value>

        [DataMember(Name="supervisionAssignment")]
        public List<JAssignmentType> SupervisionAssignment { get; set; }

        /// <summary>
        /// A violation of a condition or rule of a person while under supervision. NIEM reference is j:SupervisionViolationText
        /// </summary>
        /// <value>A violation of a condition or rule of a person while under supervision. NIEM reference is j:SupervisionViolationText</value>

        [DataMember(Name="supervisionViolationText")]
        public List<NcTextType> SupervisionViolationText { get; set; }

        /// <summary>
        /// A violation of a condition or rule of a person while under supervision. NIEM reference is j:SupervisionViolation
        /// </summary>
        /// <value>A violation of a condition or rule of a person while under supervision. NIEM reference is j:SupervisionViolation</value>

        [DataMember(Name="supervisionViolation")]
        public List<JSupervisionViolationType> SupervisionViolation { get; set; }

        /// <summary>
        /// A case identification number assigned by the jail, prison, probation officer NIEM reference is j:SupervisionAgencyRecordIdentification
        /// </summary>
        /// <value>A case identification number assigned by the jail, prison, probation officer NIEM reference is j:SupervisionAgencyRecordIdentification</value>

        [DataMember(Name="supervisionAgencyRecordIdentification")]
        public List<NcIdentificationType> SupervisionAgencyRecordIdentification { get; set; }

        /// <summary>
        /// A supervising agency proceeding where evidence is taken to determine supervision status NIEM reference is j:SupervisionHearing
        /// </summary>
        /// <value>A supervising agency proceeding where evidence is taken to determine supervision status NIEM reference is j:SupervisionHearing</value>

        [DataMember(Name="supervisionHearing")]
        public List<JHearingType> SupervisionHearing { get; set; }

        /// <summary>
        /// An occurrence or an event that occurs during Supervision that may require a response. NIEM reference is j:SupervisionIncident
        /// </summary>
        /// <value>An occurrence or an event that occurs during Supervision that may require a response. NIEM reference is j:SupervisionIncident</value>

        [DataMember(Name="supervisionIncident")]
        public List<NcIncidentType> SupervisionIncident { get; set; }

        /// <summary>
        /// A date set at which a person under supervision is eligible for release NIEM reference is j:SupervisionReleaseEligibilityDate
        /// </summary>
        /// <value>A date set at which a person under supervision is eligible for release NIEM reference is j:SupervisionReleaseEligibilityDate</value>

        [DataMember(Name="supervisionReleaseEligibilityDate")]
        public List<NcDateType> SupervisionReleaseEligibilityDate { get; set; }

        /// <summary>
        /// A date set at which a person under supervision is released. NIEM reference is j:SupervisionReleaseDate
        /// </summary>
        /// <value>A date set at which a person under supervision is released. NIEM reference is j:SupervisionReleaseDate</value>

        [DataMember(Name="supervisionReleaseDate")]
        public List<NcDateType> SupervisionReleaseDate { get; set; }

        /// <summary>
        /// An identification of an area or block within a supervision facility a subject is assigned. NIEM reference is j:SupervisionAreaIdentification
        /// </summary>
        /// <value>An identification of an area or block within a supervision facility a subject is assigned. NIEM reference is j:SupervisionAreaIdentification</value>

        [DataMember(Name="supervisionAreaIdentification")]
        public List<NcIdentificationType> SupervisionAreaIdentification { get; set; }

        /// <summary>
        /// An assessment of a person in or entering supervision. NIEM reference is j:SupervisionAssessment
        /// </summary>
        /// <value>An assessment of a person in or entering supervision. NIEM reference is j:SupervisionAssessment</value>

        [DataMember(Name="supervisionAssessment")]
        public List<NcAssessmentType> SupervisionAssessment { get; set; }

        /// <summary>
        /// A duration of time a person has been assigned to be under supervision. NIEM reference is j:SupervisionAssignedTerm
        /// </summary>
        /// <value>A duration of time a person has been assigned to be under supervision. NIEM reference is j:SupervisionAssignedTerm</value>

        [DataMember(Name="supervisionAssignedTerm")]
        public List<JTermType> SupervisionAssignedTerm { get; set; }

        /// <summary>
        /// An identification of a bed within a supervision facility cell a subject is assigned. NIEM reference is j:SupervisionBedIdentification
        /// </summary>
        /// <value>An identification of a bed within a supervision facility cell a subject is assigned. NIEM reference is j:SupervisionBedIdentification</value>

        [DataMember(Name="supervisionBedIdentification")]
        public List<NcIdentificationType> SupervisionBedIdentification { get; set; }

        /// <summary>
        /// A form specifying an action to take that is filed by the board of a supervisory agency. NIEM reference is j:SupervisionBoardActionDocument
        /// </summary>
        /// <value>A form specifying an action to take that is filed by the board of a supervisory agency. NIEM reference is j:SupervisionBoardActionDocument</value>

        [DataMember(Name="supervisionBoardActionDocument")]
        public List<NcDocumentType> SupervisionBoardActionDocument { get; set; }

        /// <summary>
        /// A warning, caution, or risk associated with supervising a person. NIEM reference is j:SupervisionCautionText
        /// </summary>
        /// <value>A warning, caution, or risk associated with supervising a person. NIEM reference is j:SupervisionCautionText</value>

        [DataMember(Name="supervisionCaution")]
        public List<NcTextType> SupervisionCaution { get; set; }

        /// <summary>
        /// An identification of a cell housing within a supervision facility a subject is assigned. NIEM reference is j:SupervisionCellIdentification
        /// </summary>
        /// <value>An identification of a cell housing within a supervision facility a subject is assigned. NIEM reference is j:SupervisionCellIdentification</value>

        [DataMember(Name="supervisionCellIdentification")]
        public List<NcIdentificationType> SupervisionCellIdentification { get; set; }

        /// <summary>
        /// A date a person under supervision is classified. NIEM reference is j:SupervisionClassificationDate
        /// </summary>
        /// <value>A date a person under supervision is classified. NIEM reference is j:SupervisionClassificationDate</value>

        [DataMember(Name="supervisionClassificationDate")]
        public List<NcDateType> SupervisionClassificationDate { get; set; }

        /// <summary>
        /// A condition that must be met for a person to remain in supervision. NIEM reference is j:SupervisionCondition
        /// </summary>
        /// <value>A condition that must be met for a person to remain in supervision. NIEM reference is j:SupervisionCondition</value>

        [DataMember(Name="supervisionCondition")]
        public List<NcConditionType> SupervisionCondition { get; set; }

        /// <summary>
        /// A provisional release of a subject that requires defined conditions to be met to prevent the supervision from being reinstated. NIEM reference is j:SupervisionConditionalRelease
        /// </summary>
        /// <value>A provisional release of a subject that requires defined conditions to be met to prevent the supervision from being reinstated. NIEM reference is j:SupervisionConditionalRelease</value>

        [DataMember(Name="supervisionConditionalRelease")]
        public List<JConditionalReleaseType> SupervisionConditionalRelease { get; set; }

        /// <summary>
        /// A transfer of a subject from the supervision of one facility, agency, or official to the supervision of another. NIEM reference is j:SupervisionCustodyTransfer
        /// </summary>
        /// <value>A transfer of a subject from the supervision of one facility, agency, or official to the supervision of another. NIEM reference is j:SupervisionCustodyTransfer</value>

        [DataMember(Name="supervisionCustodyTransfer")]
        public List<JCustodyTransferType> SupervisionCustodyTransfer { get; set; }

        /// <summary>
        /// A self-improving or restitutional activity that must or may be performed by a person under supervision. NIEM reference is j:SupervisionDisciplinaryAction
        /// </summary>
        /// <value>A self-improving or restitutional activity that must or may be performed by a person under supervision. NIEM reference is j:SupervisionDisciplinaryAction</value>

        [DataMember(Name="supervisionDisciplinaryAction")]
        public List<NcDisciplinaryActionType> SupervisionDisciplinaryAction { get; set; }

        /// <summary>
        /// A description of a charge assigned to a person under supervision. NIEM reference is j:SupervisionFee
        /// </summary>
        /// <value>A description of a charge assigned to a person under supervision. NIEM reference is j:SupervisionFee</value>

        [DataMember(Name="supervisionFee")]
        public List<NcObligationType> SupervisionFee { get; set; }

        /// <summary>
        /// True if a subject is incarcerated for a felony offense; false if a person is incarcerated for a misdemeanor. NIEM reference is j:SupervisionFelonyOffenseIndicator
        /// </summary>
        /// <value>True if a subject is incarcerated for a felony offense; false if a person is incarcerated for a misdemeanor. NIEM reference is j:SupervisionFelonyOffenseIndicator</value>

        [DataMember(Name="isSupervisionFelonyOffense")]
        public List<NiemXsboolean> IsSupervisionFelonyOffense { get; set; }

        /// <summary>
        /// A number a days a subject is credited spending with good behavior under supervision. NIEM reference is j:SupervisionGoodDaysCreditText
        /// </summary>
        /// <value>A number a days a subject is credited spending with good behavior under supervision. NIEM reference is j:SupervisionGoodDaysCreditText</value>

        [DataMember(Name="supervisionGoodDaysCredit")]
        public List<NcTextType> SupervisionGoodDaysCredit { get; set; }

        /// <summary>
        /// True if a subject requires more effort in supervising than normal; false otherwise. NIEM reference is j:SupervisionIntensiveIndicator
        /// </summary>
        /// <value>True if a subject requires more effort in supervising than normal; false otherwise. NIEM reference is j:SupervisionIntensiveIndicator</value>

        [DataMember(Name="isSupervisionIntensive")]
        public List<NiemXsboolean> IsSupervisionIntensive { get; set; }

        /// <summary>
        /// True if a subject should be kept apart from other members being supervised; false otherwise. NIEM reference is j:SupervisionIsolationIndicator
        /// </summary>
        /// <value>True if a subject should be kept apart from other members being supervised; false otherwise. NIEM reference is j:SupervisionIsolationIndicator</value>

        [DataMember(Name="isSupervisionIsolation")]
        public List<NiemXsboolean> IsSupervisionIsolation { get; set; }

        /// <summary>
        /// An area or location within which a person must remain in while under supervision. NIEM reference is j:SupervisionJurisdiction
        /// </summary>
        /// <value>An area or location within which a person must remain in while under supervision. NIEM reference is j:SupervisionJurisdiction</value>

        [DataMember(Name="supervisionJurisdiction")]
        public List<NcJurisdictionType> SupervisionJurisdiction { get; set; }

        /// <summary>
        /// A modified or changed detail about the duration of time a person is assigned to spend under supervision. NIEM reference is j:SupervisionModifiedTerm
        /// </summary>
        /// <value>A modified or changed detail about the duration of time a person is assigned to spend under supervision. NIEM reference is j:SupervisionModifiedTerm</value>

        [DataMember(Name="supervisionModifiedTerm")]
        public List<JTermType> SupervisionModifiedTerm { get; set; }

        /// <summary>
        /// A location other than a facility at which a person under supervision is located. NIEM reference is j:SupervisionOtherLocation
        /// </summary>
        /// <value>A location other than a facility at which a person under supervision is located. NIEM reference is j:SupervisionOtherLocation</value>

        [DataMember(Name="supervisionOtherLocation")]
        public List<NcLocationType> SupervisionOtherLocation { get; set; }

        /// <summary>
        /// A date that a supervision is reinstated. NIEM reference is j:SupervisionReinstatementDate
        /// </summary>
        /// <value>A date that a supervision is reinstated. NIEM reference is j:SupervisionReinstatementDate</value>

        [DataMember(Name="supervisionReinstatementDate")]
        public List<NcDateType> SupervisionReinstatementDate { get; set; }

        /// <summary>
        /// A restriction on a supervised person. NIEM reference is j:SupervisionRestriction
        /// </summary>
        /// <value>A restriction on a supervised person. NIEM reference is j:SupervisionRestriction</value>

        [DataMember(Name="supervisionRestriction")]
        public List<JSupervisionRestrictionType> SupervisionRestriction { get; set; }

        /// <summary>
        /// True if a person voluntarily agreed to supervision; false otherwise. NIEM reference is j:SupervisionSelfImposedIndicator
        /// </summary>
        /// <value>True if a person voluntarily agreed to supervision; false otherwise. NIEM reference is j:SupervisionSelfImposedIndicator</value>

        [DataMember(Name="isSupervisionSelfImposed")]
        public List<NiemXsboolean> IsSupervisionSelfImposed { get; set; }

        /// <summary>
        /// A duration of time a person has actually spent under supervision. NIEM reference is j:SupervisionServedTerm
        /// </summary>
        /// <value>A duration of time a person has actually spent under supervision. NIEM reference is j:SupervisionServedTerm</value>

        [DataMember(Name="supervisionServedTerm")]
        public List<JTermType> SupervisionServedTerm { get; set; }

        /// <summary>
        /// A job or responsibility a subject holds within a supervision facility. NIEM reference is j:SupervisionSubjectResponsibilityText
        /// </summary>
        /// <value>A job or responsibility a subject holds within a supervision facility. NIEM reference is j:SupervisionSubjectResponsibilityText</value>

        [DataMember(Name="supervisionSubjectResponsibility")]
        public List<NcTextType> SupervisionSubjectResponsibility { get; set; }

        /// <summary>
        /// A visit from a person to a subject. NIEM reference is j:SupervisionVisitation
        /// </summary>
        /// <value>A visit from a person to a subject. NIEM reference is j:SupervisionVisitation</value>

        [DataMember(Name="supervisionVisitation")]
        public List<JVisitationType> SupervisionVisitation { get; set; }

        /// <summary>
        /// A level of supervision required by a person. NIEM reference is j:SupervisionLevelCode
        /// </summary>
        /// <value>A level of supervision required by a person. NIEM reference is j:SupervisionLevelCode</value>

        [DataMember(Name="supervisionLevelCode")]
        public List<NcSupervisionLevelCodeType> SupervisionLevelCode { get; set; }

        /// <summary>
        /// A level of supervision required by a person. NIEM reference is j:SupervisionLevelText
        /// </summary>
        /// <value>A level of supervision required by a person. NIEM reference is j:SupervisionLevelText</value>

        [DataMember(Name="supervisionLevel")]
        public List<NcTextType> SupervisionLevel { get; set; }

        /// <summary>
        /// jSupervisionAugmentationType JSON-LD context
        /// </summary>
        /// <value>jSupervisionAugmentationType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsjSupervisionAugmentationTypeContextJsonldEnum for ../JSON-LD_Contexts/jSupervisionAugmentationTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/jSupervisionAugmentationTypeContext.jsonld")]
            JSONLDContextsjSupervisionAugmentationTypeContextJsonldEnum = 0        }

        /// <summary>
        /// jSupervisionAugmentationType JSON-LD context
        /// </summary>
        /// <value>jSupervisionAugmentationType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JSupervisionAugmentationType {\n");
            sb.Append("  SupervisionPersonEvaluation: ").Append(SupervisionPersonEvaluation).Append("\n");
            sb.Append("  SupervisionStatus: ").Append(SupervisionStatus).Append("\n");
            sb.Append("  SupervisionParoleReleaseDate: ").Append(SupervisionParoleReleaseDate).Append("\n");
            sb.Append("  SupervisionHistory: ").Append(SupervisionHistory).Append("\n");
            sb.Append("  SupervisionSegregation: ").Append(SupervisionSegregation).Append("\n");
            sb.Append("  SupervisionAssignment: ").Append(SupervisionAssignment).Append("\n");
            sb.Append("  SupervisionViolationText: ").Append(SupervisionViolationText).Append("\n");
            sb.Append("  SupervisionViolation: ").Append(SupervisionViolation).Append("\n");
            sb.Append("  SupervisionAgencyRecordIdentification: ").Append(SupervisionAgencyRecordIdentification).Append("\n");
            sb.Append("  SupervisionHearing: ").Append(SupervisionHearing).Append("\n");
            sb.Append("  SupervisionIncident: ").Append(SupervisionIncident).Append("\n");
            sb.Append("  SupervisionReleaseEligibilityDate: ").Append(SupervisionReleaseEligibilityDate).Append("\n");
            sb.Append("  SupervisionReleaseDate: ").Append(SupervisionReleaseDate).Append("\n");
            sb.Append("  SupervisionAreaIdentification: ").Append(SupervisionAreaIdentification).Append("\n");
            sb.Append("  SupervisionAssessment: ").Append(SupervisionAssessment).Append("\n");
            sb.Append("  SupervisionAssignedTerm: ").Append(SupervisionAssignedTerm).Append("\n");
            sb.Append("  SupervisionBedIdentification: ").Append(SupervisionBedIdentification).Append("\n");
            sb.Append("  SupervisionBoardActionDocument: ").Append(SupervisionBoardActionDocument).Append("\n");
            sb.Append("  SupervisionCaution: ").Append(SupervisionCaution).Append("\n");
            sb.Append("  SupervisionCellIdentification: ").Append(SupervisionCellIdentification).Append("\n");
            sb.Append("  SupervisionClassificationDate: ").Append(SupervisionClassificationDate).Append("\n");
            sb.Append("  SupervisionCondition: ").Append(SupervisionCondition).Append("\n");
            sb.Append("  SupervisionConditionalRelease: ").Append(SupervisionConditionalRelease).Append("\n");
            sb.Append("  SupervisionCustodyTransfer: ").Append(SupervisionCustodyTransfer).Append("\n");
            sb.Append("  SupervisionDisciplinaryAction: ").Append(SupervisionDisciplinaryAction).Append("\n");
            sb.Append("  SupervisionFee: ").Append(SupervisionFee).Append("\n");
            sb.Append("  IsSupervisionFelonyOffense: ").Append(IsSupervisionFelonyOffense).Append("\n");
            sb.Append("  SupervisionGoodDaysCredit: ").Append(SupervisionGoodDaysCredit).Append("\n");
            sb.Append("  IsSupervisionIntensive: ").Append(IsSupervisionIntensive).Append("\n");
            sb.Append("  IsSupervisionIsolation: ").Append(IsSupervisionIsolation).Append("\n");
            sb.Append("  SupervisionJurisdiction: ").Append(SupervisionJurisdiction).Append("\n");
            sb.Append("  SupervisionModifiedTerm: ").Append(SupervisionModifiedTerm).Append("\n");
            sb.Append("  SupervisionOtherLocation: ").Append(SupervisionOtherLocation).Append("\n");
            sb.Append("  SupervisionReinstatementDate: ").Append(SupervisionReinstatementDate).Append("\n");
            sb.Append("  SupervisionRestriction: ").Append(SupervisionRestriction).Append("\n");
            sb.Append("  IsSupervisionSelfImposed: ").Append(IsSupervisionSelfImposed).Append("\n");
            sb.Append("  SupervisionServedTerm: ").Append(SupervisionServedTerm).Append("\n");
            sb.Append("  SupervisionSubjectResponsibility: ").Append(SupervisionSubjectResponsibility).Append("\n");
            sb.Append("  SupervisionVisitation: ").Append(SupervisionVisitation).Append("\n");
            sb.Append("  SupervisionLevelCode: ").Append(SupervisionLevelCode).Append("\n");
            sb.Append("  SupervisionLevel: ").Append(SupervisionLevel).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JSupervisionAugmentationType)obj);
        }

        /// <summary>
        /// Returns true if JSupervisionAugmentationType instances are equal
        /// </summary>
        /// <param name="other">Instance of JSupervisionAugmentationType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JSupervisionAugmentationType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SupervisionPersonEvaluation == other.SupervisionPersonEvaluation ||
                    SupervisionPersonEvaluation != null &&
                    SupervisionPersonEvaluation.SequenceEqual(other.SupervisionPersonEvaluation)
                ) && 
                (
                    SupervisionStatus == other.SupervisionStatus ||
                    SupervisionStatus != null &&
                    SupervisionStatus.SequenceEqual(other.SupervisionStatus)
                ) && 
                (
                    SupervisionParoleReleaseDate == other.SupervisionParoleReleaseDate ||
                    SupervisionParoleReleaseDate != null &&
                    SupervisionParoleReleaseDate.SequenceEqual(other.SupervisionParoleReleaseDate)
                ) && 
                (
                    SupervisionHistory == other.SupervisionHistory ||
                    SupervisionHistory != null &&
                    SupervisionHistory.SequenceEqual(other.SupervisionHistory)
                ) && 
                (
                    SupervisionSegregation == other.SupervisionSegregation ||
                    SupervisionSegregation != null &&
                    SupervisionSegregation.SequenceEqual(other.SupervisionSegregation)
                ) && 
                (
                    SupervisionAssignment == other.SupervisionAssignment ||
                    SupervisionAssignment != null &&
                    SupervisionAssignment.SequenceEqual(other.SupervisionAssignment)
                ) && 
                (
                    SupervisionViolationText == other.SupervisionViolationText ||
                    SupervisionViolationText != null &&
                    SupervisionViolationText.SequenceEqual(other.SupervisionViolationText)
                ) && 
                (
                    SupervisionViolation == other.SupervisionViolation ||
                    SupervisionViolation != null &&
                    SupervisionViolation.SequenceEqual(other.SupervisionViolation)
                ) && 
                (
                    SupervisionAgencyRecordIdentification == other.SupervisionAgencyRecordIdentification ||
                    SupervisionAgencyRecordIdentification != null &&
                    SupervisionAgencyRecordIdentification.SequenceEqual(other.SupervisionAgencyRecordIdentification)
                ) && 
                (
                    SupervisionHearing == other.SupervisionHearing ||
                    SupervisionHearing != null &&
                    SupervisionHearing.SequenceEqual(other.SupervisionHearing)
                ) && 
                (
                    SupervisionIncident == other.SupervisionIncident ||
                    SupervisionIncident != null &&
                    SupervisionIncident.SequenceEqual(other.SupervisionIncident)
                ) && 
                (
                    SupervisionReleaseEligibilityDate == other.SupervisionReleaseEligibilityDate ||
                    SupervisionReleaseEligibilityDate != null &&
                    SupervisionReleaseEligibilityDate.SequenceEqual(other.SupervisionReleaseEligibilityDate)
                ) && 
                (
                    SupervisionReleaseDate == other.SupervisionReleaseDate ||
                    SupervisionReleaseDate != null &&
                    SupervisionReleaseDate.SequenceEqual(other.SupervisionReleaseDate)
                ) && 
                (
                    SupervisionAreaIdentification == other.SupervisionAreaIdentification ||
                    SupervisionAreaIdentification != null &&
                    SupervisionAreaIdentification.SequenceEqual(other.SupervisionAreaIdentification)
                ) && 
                (
                    SupervisionAssessment == other.SupervisionAssessment ||
                    SupervisionAssessment != null &&
                    SupervisionAssessment.SequenceEqual(other.SupervisionAssessment)
                ) && 
                (
                    SupervisionAssignedTerm == other.SupervisionAssignedTerm ||
                    SupervisionAssignedTerm != null &&
                    SupervisionAssignedTerm.SequenceEqual(other.SupervisionAssignedTerm)
                ) && 
                (
                    SupervisionBedIdentification == other.SupervisionBedIdentification ||
                    SupervisionBedIdentification != null &&
                    SupervisionBedIdentification.SequenceEqual(other.SupervisionBedIdentification)
                ) && 
                (
                    SupervisionBoardActionDocument == other.SupervisionBoardActionDocument ||
                    SupervisionBoardActionDocument != null &&
                    SupervisionBoardActionDocument.SequenceEqual(other.SupervisionBoardActionDocument)
                ) && 
                (
                    SupervisionCaution == other.SupervisionCaution ||
                    SupervisionCaution != null &&
                    SupervisionCaution.SequenceEqual(other.SupervisionCaution)
                ) && 
                (
                    SupervisionCellIdentification == other.SupervisionCellIdentification ||
                    SupervisionCellIdentification != null &&
                    SupervisionCellIdentification.SequenceEqual(other.SupervisionCellIdentification)
                ) && 
                (
                    SupervisionClassificationDate == other.SupervisionClassificationDate ||
                    SupervisionClassificationDate != null &&
                    SupervisionClassificationDate.SequenceEqual(other.SupervisionClassificationDate)
                ) && 
                (
                    SupervisionCondition == other.SupervisionCondition ||
                    SupervisionCondition != null &&
                    SupervisionCondition.SequenceEqual(other.SupervisionCondition)
                ) && 
                (
                    SupervisionConditionalRelease == other.SupervisionConditionalRelease ||
                    SupervisionConditionalRelease != null &&
                    SupervisionConditionalRelease.SequenceEqual(other.SupervisionConditionalRelease)
                ) && 
                (
                    SupervisionCustodyTransfer == other.SupervisionCustodyTransfer ||
                    SupervisionCustodyTransfer != null &&
                    SupervisionCustodyTransfer.SequenceEqual(other.SupervisionCustodyTransfer)
                ) && 
                (
                    SupervisionDisciplinaryAction == other.SupervisionDisciplinaryAction ||
                    SupervisionDisciplinaryAction != null &&
                    SupervisionDisciplinaryAction.SequenceEqual(other.SupervisionDisciplinaryAction)
                ) && 
                (
                    SupervisionFee == other.SupervisionFee ||
                    SupervisionFee != null &&
                    SupervisionFee.SequenceEqual(other.SupervisionFee)
                ) && 
                (
                    IsSupervisionFelonyOffense == other.IsSupervisionFelonyOffense ||
                    IsSupervisionFelonyOffense != null &&
                    IsSupervisionFelonyOffense.SequenceEqual(other.IsSupervisionFelonyOffense)
                ) && 
                (
                    SupervisionGoodDaysCredit == other.SupervisionGoodDaysCredit ||
                    SupervisionGoodDaysCredit != null &&
                    SupervisionGoodDaysCredit.SequenceEqual(other.SupervisionGoodDaysCredit)
                ) && 
                (
                    IsSupervisionIntensive == other.IsSupervisionIntensive ||
                    IsSupervisionIntensive != null &&
                    IsSupervisionIntensive.SequenceEqual(other.IsSupervisionIntensive)
                ) && 
                (
                    IsSupervisionIsolation == other.IsSupervisionIsolation ||
                    IsSupervisionIsolation != null &&
                    IsSupervisionIsolation.SequenceEqual(other.IsSupervisionIsolation)
                ) && 
                (
                    SupervisionJurisdiction == other.SupervisionJurisdiction ||
                    SupervisionJurisdiction != null &&
                    SupervisionJurisdiction.SequenceEqual(other.SupervisionJurisdiction)
                ) && 
                (
                    SupervisionModifiedTerm == other.SupervisionModifiedTerm ||
                    SupervisionModifiedTerm != null &&
                    SupervisionModifiedTerm.SequenceEqual(other.SupervisionModifiedTerm)
                ) && 
                (
                    SupervisionOtherLocation == other.SupervisionOtherLocation ||
                    SupervisionOtherLocation != null &&
                    SupervisionOtherLocation.SequenceEqual(other.SupervisionOtherLocation)
                ) && 
                (
                    SupervisionReinstatementDate == other.SupervisionReinstatementDate ||
                    SupervisionReinstatementDate != null &&
                    SupervisionReinstatementDate.SequenceEqual(other.SupervisionReinstatementDate)
                ) && 
                (
                    SupervisionRestriction == other.SupervisionRestriction ||
                    SupervisionRestriction != null &&
                    SupervisionRestriction.SequenceEqual(other.SupervisionRestriction)
                ) && 
                (
                    IsSupervisionSelfImposed == other.IsSupervisionSelfImposed ||
                    IsSupervisionSelfImposed != null &&
                    IsSupervisionSelfImposed.SequenceEqual(other.IsSupervisionSelfImposed)
                ) && 
                (
                    SupervisionServedTerm == other.SupervisionServedTerm ||
                    SupervisionServedTerm != null &&
                    SupervisionServedTerm.SequenceEqual(other.SupervisionServedTerm)
                ) && 
                (
                    SupervisionSubjectResponsibility == other.SupervisionSubjectResponsibility ||
                    SupervisionSubjectResponsibility != null &&
                    SupervisionSubjectResponsibility.SequenceEqual(other.SupervisionSubjectResponsibility)
                ) && 
                (
                    SupervisionVisitation == other.SupervisionVisitation ||
                    SupervisionVisitation != null &&
                    SupervisionVisitation.SequenceEqual(other.SupervisionVisitation)
                ) && 
                (
                    SupervisionLevelCode == other.SupervisionLevelCode ||
                    SupervisionLevelCode != null &&
                    SupervisionLevelCode.SequenceEqual(other.SupervisionLevelCode)
                ) && 
                (
                    SupervisionLevel == other.SupervisionLevel ||
                    SupervisionLevel != null &&
                    SupervisionLevel.SequenceEqual(other.SupervisionLevel)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SupervisionPersonEvaluation != null)
                    hashCode = hashCode * 59 + SupervisionPersonEvaluation.GetHashCode();
                    if (SupervisionStatus != null)
                    hashCode = hashCode * 59 + SupervisionStatus.GetHashCode();
                    if (SupervisionParoleReleaseDate != null)
                    hashCode = hashCode * 59 + SupervisionParoleReleaseDate.GetHashCode();
                    if (SupervisionHistory != null)
                    hashCode = hashCode * 59 + SupervisionHistory.GetHashCode();
                    if (SupervisionSegregation != null)
                    hashCode = hashCode * 59 + SupervisionSegregation.GetHashCode();
                    if (SupervisionAssignment != null)
                    hashCode = hashCode * 59 + SupervisionAssignment.GetHashCode();
                    if (SupervisionViolationText != null)
                    hashCode = hashCode * 59 + SupervisionViolationText.GetHashCode();
                    if (SupervisionViolation != null)
                    hashCode = hashCode * 59 + SupervisionViolation.GetHashCode();
                    if (SupervisionAgencyRecordIdentification != null)
                    hashCode = hashCode * 59 + SupervisionAgencyRecordIdentification.GetHashCode();
                    if (SupervisionHearing != null)
                    hashCode = hashCode * 59 + SupervisionHearing.GetHashCode();
                    if (SupervisionIncident != null)
                    hashCode = hashCode * 59 + SupervisionIncident.GetHashCode();
                    if (SupervisionReleaseEligibilityDate != null)
                    hashCode = hashCode * 59 + SupervisionReleaseEligibilityDate.GetHashCode();
                    if (SupervisionReleaseDate != null)
                    hashCode = hashCode * 59 + SupervisionReleaseDate.GetHashCode();
                    if (SupervisionAreaIdentification != null)
                    hashCode = hashCode * 59 + SupervisionAreaIdentification.GetHashCode();
                    if (SupervisionAssessment != null)
                    hashCode = hashCode * 59 + SupervisionAssessment.GetHashCode();
                    if (SupervisionAssignedTerm != null)
                    hashCode = hashCode * 59 + SupervisionAssignedTerm.GetHashCode();
                    if (SupervisionBedIdentification != null)
                    hashCode = hashCode * 59 + SupervisionBedIdentification.GetHashCode();
                    if (SupervisionBoardActionDocument != null)
                    hashCode = hashCode * 59 + SupervisionBoardActionDocument.GetHashCode();
                    if (SupervisionCaution != null)
                    hashCode = hashCode * 59 + SupervisionCaution.GetHashCode();
                    if (SupervisionCellIdentification != null)
                    hashCode = hashCode * 59 + SupervisionCellIdentification.GetHashCode();
                    if (SupervisionClassificationDate != null)
                    hashCode = hashCode * 59 + SupervisionClassificationDate.GetHashCode();
                    if (SupervisionCondition != null)
                    hashCode = hashCode * 59 + SupervisionCondition.GetHashCode();
                    if (SupervisionConditionalRelease != null)
                    hashCode = hashCode * 59 + SupervisionConditionalRelease.GetHashCode();
                    if (SupervisionCustodyTransfer != null)
                    hashCode = hashCode * 59 + SupervisionCustodyTransfer.GetHashCode();
                    if (SupervisionDisciplinaryAction != null)
                    hashCode = hashCode * 59 + SupervisionDisciplinaryAction.GetHashCode();
                    if (SupervisionFee != null)
                    hashCode = hashCode * 59 + SupervisionFee.GetHashCode();
                    if (IsSupervisionFelonyOffense != null)
                    hashCode = hashCode * 59 + IsSupervisionFelonyOffense.GetHashCode();
                    if (SupervisionGoodDaysCredit != null)
                    hashCode = hashCode * 59 + SupervisionGoodDaysCredit.GetHashCode();
                    if (IsSupervisionIntensive != null)
                    hashCode = hashCode * 59 + IsSupervisionIntensive.GetHashCode();
                    if (IsSupervisionIsolation != null)
                    hashCode = hashCode * 59 + IsSupervisionIsolation.GetHashCode();
                    if (SupervisionJurisdiction != null)
                    hashCode = hashCode * 59 + SupervisionJurisdiction.GetHashCode();
                    if (SupervisionModifiedTerm != null)
                    hashCode = hashCode * 59 + SupervisionModifiedTerm.GetHashCode();
                    if (SupervisionOtherLocation != null)
                    hashCode = hashCode * 59 + SupervisionOtherLocation.GetHashCode();
                    if (SupervisionReinstatementDate != null)
                    hashCode = hashCode * 59 + SupervisionReinstatementDate.GetHashCode();
                    if (SupervisionRestriction != null)
                    hashCode = hashCode * 59 + SupervisionRestriction.GetHashCode();
                    if (IsSupervisionSelfImposed != null)
                    hashCode = hashCode * 59 + IsSupervisionSelfImposed.GetHashCode();
                    if (SupervisionServedTerm != null)
                    hashCode = hashCode * 59 + SupervisionServedTerm.GetHashCode();
                    if (SupervisionSubjectResponsibility != null)
                    hashCode = hashCode * 59 + SupervisionSubjectResponsibility.GetHashCode();
                    if (SupervisionVisitation != null)
                    hashCode = hashCode * 59 + SupervisionVisitation.GetHashCode();
                    if (SupervisionLevelCode != null)
                    hashCode = hashCode * 59 + SupervisionLevelCode.GetHashCode();
                    if (SupervisionLevel != null)
                    hashCode = hashCode * 59 + SupervisionLevel.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JSupervisionAugmentationType left, JSupervisionAugmentationType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JSupervisionAugmentationType left, JSupervisionAugmentationType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
