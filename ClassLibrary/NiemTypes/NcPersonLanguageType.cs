/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for a language capability of a person.
    /// </summary>
    [DataContract]
    public partial class NcPersonLanguageType : IEquatable<NcPersonLanguageType>
    { 
        /// <summary>
        /// A system of words or symbols used for communication. NIEM reference is nc:LanguageCode
        /// </summary>
        /// <value>A system of words or symbols used for communication. NIEM reference is nc:LanguageCode</value>

        [DataMember(Name="languageCode")]
        public List<Iso6393LanguageCodeType> LanguageCode { get; set; }

        /// <summary>
        /// A name of a system of words or symbols used for communication. NIEM reference is nc:LanguageName
        /// </summary>
        /// <value>A name of a system of words or symbols used for communication. NIEM reference is nc:LanguageName</value>

        [DataMember(Name="languageName")]
        public List<NcTextType> LanguageName { get; set; }

        /// <summary>
        /// True if a person is able to grasp and understand the meaning of a language being spoken; false otherwise. NIEM reference is nc:PersonComprehendsSpokenLanguageIndicator
        /// </summary>
        /// <value>True if a person is able to grasp and understand the meaning of a language being spoken; false otherwise. NIEM reference is nc:PersonComprehendsSpokenLanguageIndicator</value>

        [DataMember(Name="isPersonComprehendsSpokenLanguage")]
        public List<NiemXsboolean> IsPersonComprehendsSpokenLanguage { get; set; }

        /// <summary>
        /// True if a person is able to read a language; false otherwise. NIEM reference is nc:PersonReadsLanguageIndicator
        /// </summary>
        /// <value>True if a person is able to read a language; false otherwise. NIEM reference is nc:PersonReadsLanguageIndicator</value>

        [DataMember(Name="isPersonReadsLanguage")]
        public List<NiemXsboolean> IsPersonReadsLanguage { get; set; }

        /// <summary>
        /// True if a person is able to speak a language; false otherwise. NIEM reference is nc:PersonSpeaksLanguageIndicator
        /// </summary>
        /// <value>True if a person is able to speak a language; false otherwise. NIEM reference is nc:PersonSpeaksLanguageIndicator</value>

        [DataMember(Name="isPersonSpeaksLanguage")]
        public List<NiemXsboolean> IsPersonSpeaksLanguage { get; set; }

        /// <summary>
        /// True if a person is able to write a language; false otherwise. NIEM reference is nc:PersonWritesLanguageIndicator
        /// </summary>
        /// <value>True if a person is able to write a language; false otherwise. NIEM reference is nc:PersonWritesLanguageIndicator</value>

        [DataMember(Name="isPersonWritesLanguage")]
        public List<NiemXsboolean> IsPersonWritesLanguage { get; set; }

        /// <summary>
        /// ncPersonLanguageType JSON-LD context
        /// </summary>
        /// <value>ncPersonLanguageType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextsncPersonLanguageTypeContextJsonldEnum for ../JSON-LD_Contexts/ncPersonLanguageTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/ncPersonLanguageTypeContext.jsonld")]
            JSONLDContextsncPersonLanguageTypeContextJsonldEnum = 0        }

        /// <summary>
        /// ncPersonLanguageType JSON-LD context
        /// </summary>
        /// <value>ncPersonLanguageType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NcPersonLanguageType {\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageName: ").Append(LanguageName).Append("\n");
            sb.Append("  IsPersonComprehendsSpokenLanguage: ").Append(IsPersonComprehendsSpokenLanguage).Append("\n");
            sb.Append("  IsPersonReadsLanguage: ").Append(IsPersonReadsLanguage).Append("\n");
            sb.Append("  IsPersonSpeaksLanguage: ").Append(IsPersonSpeaksLanguage).Append("\n");
            sb.Append("  IsPersonWritesLanguage: ").Append(IsPersonWritesLanguage).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NcPersonLanguageType)obj);
        }

        /// <summary>
        /// Returns true if NcPersonLanguageType instances are equal
        /// </summary>
        /// <param name="other">Instance of NcPersonLanguageType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NcPersonLanguageType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LanguageCode == other.LanguageCode ||
                    LanguageCode != null &&
                    LanguageCode.SequenceEqual(other.LanguageCode)
                ) && 
                (
                    LanguageName == other.LanguageName ||
                    LanguageName != null &&
                    LanguageName.SequenceEqual(other.LanguageName)
                ) && 
                (
                    IsPersonComprehendsSpokenLanguage == other.IsPersonComprehendsSpokenLanguage ||
                    IsPersonComprehendsSpokenLanguage != null &&
                    IsPersonComprehendsSpokenLanguage.SequenceEqual(other.IsPersonComprehendsSpokenLanguage)
                ) && 
                (
                    IsPersonReadsLanguage == other.IsPersonReadsLanguage ||
                    IsPersonReadsLanguage != null &&
                    IsPersonReadsLanguage.SequenceEqual(other.IsPersonReadsLanguage)
                ) && 
                (
                    IsPersonSpeaksLanguage == other.IsPersonSpeaksLanguage ||
                    IsPersonSpeaksLanguage != null &&
                    IsPersonSpeaksLanguage.SequenceEqual(other.IsPersonSpeaksLanguage)
                ) && 
                (
                    IsPersonWritesLanguage == other.IsPersonWritesLanguage ||
                    IsPersonWritesLanguage != null &&
                    IsPersonWritesLanguage.SequenceEqual(other.IsPersonWritesLanguage)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LanguageCode != null)
                    hashCode = hashCode * 59 + LanguageCode.GetHashCode();
                    if (LanguageName != null)
                    hashCode = hashCode * 59 + LanguageName.GetHashCode();
                    if (IsPersonComprehendsSpokenLanguage != null)
                    hashCode = hashCode * 59 + IsPersonComprehendsSpokenLanguage.GetHashCode();
                    if (IsPersonReadsLanguage != null)
                    hashCode = hashCode * 59 + IsPersonReadsLanguage.GetHashCode();
                    if (IsPersonSpeaksLanguage != null)
                    hashCode = hashCode * 59 + IsPersonSpeaksLanguage.GetHashCode();
                    if (IsPersonWritesLanguage != null)
                    hashCode = hashCode * 59 + IsPersonWritesLanguage.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NcPersonLanguageType left, NcPersonLanguageType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NcPersonLanguageType left, NcPersonLanguageType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
