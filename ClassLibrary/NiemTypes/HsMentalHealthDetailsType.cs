/*
 * NiemTypes
 *
 * NIEM Types for the EIDO
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace NiemTypes
{ 
    /// <summary>
    /// A data type for details about a person&#x27;s mental health including social history and psychosocial information.
    /// </summary>
    [DataContract]
    public partial class HsMentalHealthDetailsType : NcActivityType, IEquatable<HsMentalHealthDetailsType>
    { 
        /// <summary>
        /// A code list that describes a person&#x27;s developmental disabilities NIEM reference is hs:DevelopmentalDisabilityCategoryCode
        /// </summary>
        /// <value>A code list that describes a person&#x27;s developmental disabilities NIEM reference is hs:DevelopmentalDisabilityCategoryCode</value>

        [DataMember(Name="developmentalDisabilityCategoryCode")]
        public List<HsDevelopmentalDisabilityCodeType> DevelopmentalDisabilityCategoryCode { get; set; }

        /// <summary>
        /// A kind of developmental disability. NIEM reference is hs:DevelopmentalDisabilityCategoryText
        /// </summary>
        /// <value>A kind of developmental disability. NIEM reference is hs:DevelopmentalDisabilityCategoryText</value>

        [DataMember(Name="developmentalDisabilityCategory")]
        public List<NcTextType> DevelopmentalDisabilityCategory { get; set; }

        /// <summary>
        /// A description of past in-patient hospitalizations due to mental health issues. NIEM reference is hs:MentalHealthHospitalizationHistoryDescriptionText
        /// </summary>
        /// <value>A description of past in-patient hospitalizations due to mental health issues. NIEM reference is hs:MentalHealthHospitalizationHistoryDescriptionText</value>

        [DataMember(Name="mentalHealthHospitalizationHistoryDescription")]
        public List<NcTextType> MentalHealthHospitalizationHistoryDescription { get; set; }

        /// <summary>
        /// A description of known mental health history, including behavioral health and psychological or psychiatric assessments, diagnoses, or treatments. NIEM reference is hs:MentalHealthHistoryDescriptionText
        /// </summary>
        /// <value>A description of known mental health history, including behavioral health and psychological or psychiatric assessments, diagnoses, or treatments. NIEM reference is hs:MentalHealthHistoryDescriptionText</value>

        [DataMember(Name="mentalHealthHistoryDescription")]
        public List<NcTextType> MentalHealthHistoryDescription { get; set; }

        /// <summary>
        /// hsMentalHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsMentalHealthDetailsType JSON-LD context</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextEnum
        {
            /// <summary>
            /// Enum JSONLDContextshsMentalHealthDetailsTypeContextJsonldEnum for ../JSON-LD_Contexts/hsMentalHealthDetailsTypeContext.jsonld
            /// </summary>
            [EnumMember(Value = "../JSON-LD_Contexts/hsMentalHealthDetailsTypeContext.jsonld")]
            JSONLDContextshsMentalHealthDetailsTypeContextJsonldEnum = 0        }

        /// <summary>
        /// hsMentalHealthDetailsType JSON-LD context
        /// </summary>
        /// <value>hsMentalHealthDetailsType JSON-LD context</value>

        [DataMember(Name="@context")]
        public ContextEnum? Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HsMentalHealthDetailsType {\n");
            sb.Append("  DevelopmentalDisabilityCategoryCode: ").Append(DevelopmentalDisabilityCategoryCode).Append("\n");
            sb.Append("  DevelopmentalDisabilityCategory: ").Append(DevelopmentalDisabilityCategory).Append("\n");
            sb.Append("  MentalHealthHospitalizationHistoryDescription: ").Append(MentalHealthHospitalizationHistoryDescription).Append("\n");
            sb.Append("  MentalHealthHistoryDescription: ").Append(MentalHealthHistoryDescription).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public  new string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HsMentalHealthDetailsType)obj);
        }

        /// <summary>
        /// Returns true if HsMentalHealthDetailsType instances are equal
        /// </summary>
        /// <param name="other">Instance of HsMentalHealthDetailsType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HsMentalHealthDetailsType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DevelopmentalDisabilityCategoryCode == other.DevelopmentalDisabilityCategoryCode ||
                    DevelopmentalDisabilityCategoryCode != null &&
                    DevelopmentalDisabilityCategoryCode.SequenceEqual(other.DevelopmentalDisabilityCategoryCode)
                ) && 
                (
                    DevelopmentalDisabilityCategory == other.DevelopmentalDisabilityCategory ||
                    DevelopmentalDisabilityCategory != null &&
                    DevelopmentalDisabilityCategory.SequenceEqual(other.DevelopmentalDisabilityCategory)
                ) && 
                (
                    MentalHealthHospitalizationHistoryDescription == other.MentalHealthHospitalizationHistoryDescription ||
                    MentalHealthHospitalizationHistoryDescription != null &&
                    MentalHealthHospitalizationHistoryDescription.SequenceEqual(other.MentalHealthHospitalizationHistoryDescription)
                ) && 
                (
                    MentalHealthHistoryDescription == other.MentalHealthHistoryDescription ||
                    MentalHealthHistoryDescription != null &&
                    MentalHealthHistoryDescription.SequenceEqual(other.MentalHealthHistoryDescription)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DevelopmentalDisabilityCategoryCode != null)
                    hashCode = hashCode * 59 + DevelopmentalDisabilityCategoryCode.GetHashCode();
                    if (DevelopmentalDisabilityCategory != null)
                    hashCode = hashCode * 59 + DevelopmentalDisabilityCategory.GetHashCode();
                    if (MentalHealthHospitalizationHistoryDescription != null)
                    hashCode = hashCode * 59 + MentalHealthHospitalizationHistoryDescription.GetHashCode();
                    if (MentalHealthHistoryDescription != null)
                    hashCode = hashCode * 59 + MentalHealthHistoryDescription.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HsMentalHealthDetailsType left, HsMentalHealthDetailsType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HsMentalHealthDetailsType left, HsMentalHealthDetailsType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
