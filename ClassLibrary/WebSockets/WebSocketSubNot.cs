/////////////////////////////////////////////////////////////////////////////////////
//  File:   WebSocketSubNot.cs                                      20 Apr 23 PHR
/////////////////////////////////////////////////////////////////////////////////////

using Eido;

namespace WebSocketSubNot
{
    /// <summary>
    /// Class for a subscription request. See Section 2.1.5.1 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class SubscribeRequest
    {
        /// <summary>
        /// Body of the subscribe request. This property is initialized in the constructor.
        /// </summary>
        public SubscribeObject subscribe;

        /// <summary>
        /// Default constructor.
        /// </summary>
        public SubscribeRequest()
        {
            subscribe = new SubscribeObject();
        }
    }

    /// <summary>
    /// Class for the subscription request object. See Section 2.1.5.1 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class SubscribeObject
    {
        /// <summary>
        /// An ID generated by the subscriber that will be returned by the notifier in its response to the 
        /// request. Required.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// Type of request, e.g., “EIDO”.
        /// REQUIRED for a new subscription (i.e., if no subscriptionId provided), otherwise, MUST be
        /// omitted.
        /// </summary>
        public string requestType { get; set; }

        /// <summary>
        /// The requestSubType provides for different actions based on the requestType specified.
        /// If requestType is omitted, then requestSubType MUST be omitted. If requestType is “EIDO”, 
        /// requestSubType MUST be present and MUST be one of “single” or “new”. Other request types may 
        /// have their own conditions or may not require a subtype.
        /// </summary>
        public string requestSubType { get; set; }

        /// <summary>
        /// The MIME type associated with the requestType and the major versions thereof accepted in the
        /// notification payload as a quoted comma-delimited list, as in the Accept HTTP header per 
        /// RFC 7231 [13], e.g., application/emergency.eido+json; version=”1” or 
        /// application/emergency.eido+json; version=”1,2,3”. The version is required and is the only
        /// extension parameter permitted.
        /// REQUIRED for a new subscription, i.e., if subscriptionId is not specified.
        /// </summary>
        public string requestAccepts { get; set; }

        /// <summary>
        /// When subscribing for new incidents, the qualFilter may be used to be notified of a subset 
        /// thereof.
        /// A qualFilter MUST NOT be specified if an incidentId is specified.
        /// OPTIONAL if requestType is “EIDO” and incidentId is not specified.
        /// </summary>
        public string qualFilter { get; set; }

        /// <summary>
        /// If qualFilter specified, a positive integer specifying the requested number of seconds
        /// between qualFilter evaluations.
        /// OPTIONAL if qualFilter specified, otherwise MUST NOT be specified.
        /// </summary>
        public int? qualFilterEvalPeriod { get; set; } = null;

        /// <summary>
        /// Number of seconds after the last notification after which a notification must be sent consistent
        /// with RFC 6446. If not specified there is no minimum rate.
        /// OPTIONAL if and only if a subscriptionId is not specified, otherwise MUST NOT be specified.
        /// </summary>
        public int? minRate { get; set; } = null;

        /// <summary>
        /// Minimum time in seconds to wait between notifications which is the maximum rate at which 
        /// notifications are sent consistent with RFC 6446. If not specified there is no maximum rate.
        /// OPTIONAL if and only if a subscriptionId is not specified, otherwise MUST NOT be specified.
        /// </summary>
        public int? maxRate { get; set; } = null;

        /// <summary>
        /// The subscriptionId previously returned by the notifier in the subscribeResponse. This is used 
        /// for keeping a subscription alive. Optional.
        /// </summary>
        public string subscriptionId { get; set; }

        /// <summary>
        /// The Incident Tracking Identifier associated with the call.
        /// CONDITIONAL. For ONLY request type “EIDO” and subtype “single”, MUST be present to subscribe to
        /// a specific incident. MUST not be present for other subtypes.
        /// </summary>
        public string incidentId { get; set; }

        /// <summary>
        /// Number of seconds after which the subscription shall expire.
        /// Optional.
        /// </summary>
        public int? expires { get; set; } = null;
    }

    /// <summary>
    /// Class for a subscribe response.
    /// </summary>
    public partial class SubscribeResponse
    {
        /// <summary>
        /// Body of the subscribe response message. This property is initialized in the constructor.
        /// </summary>
        public SubscribeResponseObject subscribeResponse { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public SubscribeResponse()
        {
            subscribeResponse = new SubscribeResponseObject();
        }
    }

    /// <summary>
    /// Class for the body of the subscribe response.
    /// </summary>
    public partial class SubscribeResponseObject
    {
        /// <summary>
        /// The ID provided by the subscriber. Required.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// The globally unique identifier for the subscription.
        /// REQUIRED if subscription is accepted.
        /// </summary>
        public string subscriptionId { get; set; }

        /// <summary>
        /// Negotiated number of seconds between qualFilter evaluations. If requested, may be a longer
        /// period than the request but not shorter.
        /// REQUIRED if qualFilter specified.
        /// </summary>
        public int? qualFilterEvalPeriod { get; set; }

        /// <summary>
        /// May be a longer period than requested but not shorter.
        /// REQUIRED if specified by the subscriber.
        /// </summary>
        public int? minRate { get; set;} = null;

        /// <summary>
        /// May be a shorter period than requested but not longer.
        /// REQUIRED if specified by the subscriber.
        /// </summary>
        public int? maxRate { get; set;}

        /// <summary>
        /// Subscription period in seconds relative to the notifier’s establishment or renewal of the
        /// subscription.
        /// REQUIRED if subscription is accepted.
        /// </summary>
        public int? expires { get; set; } = null;

        /// <summary>
        /// The statusCode element is a 3-digit integer result code of the attempt to understand and satisfy
        /// the request as defined in the SubscribeResponseEnum enumeration.
        /// Required.
        /// </summary>
        public int statusCode { get; set; }

        /// <summary>
        /// The statusText provides a short textual description related to the statusCode.
        /// Required.
        /// </summary>
        public string statusText { get; set; }
    }

    /// <summary>
    /// Enum of the allowable values for the statusCode property of the SubscribeResponseObject.
    /// </summary>
    public enum SubscribeResponseCodeEnum
    {
        OK = 200,
        BadRequest = 400,
        Forbidden = 403,
        NotFound = 404,
        Unaccetable = 406,
        PayloadTooLarge = 413,
        SubscriptionDoesNotExist = 481,
        InternalServerError = 500,
        ServiceUnavailable = 503
    }

    /// <summary>
    /// Class for the unsubscribe request. See Section 2.1.5.2 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class UnsubscribeRequest
    {
        /// <summary>
        /// Body of the unsubscribe request. This property is initialized in the constructor.
        /// </summary>
        public UnsubscribeObject unsubscribe { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UnsubscribeRequest()
        {
            unsubscribe = new UnsubscribeObject();
        }
    }

    /// <summary>
    /// Class for the body of the unsubscribe request. See Section 2.1.5.2 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class UnsubscribeObject
    {
        /// <summary>
        /// An ID generated by the subscriber that will be returned by the notifier in its response to the
        /// request. Required.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// The subscriptionId sent by the service. This is provided back in an Acknowledgement by the
        /// service, used for keeping a subscription alive or subsequent filter modifications.
        /// Required.
        /// </summary>
        public string subscriptionId { get; set; }
    }

    /// <summary>
    /// Class for the unsubscribe response message. See Section 2.1.5.2.2 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class UnsubscribeResponse
    {
        /// <summary>
        /// Body of the unsubscribe response. This property is initialized in the constructor.
        /// </summary>
        public UnsubscribeResponseObject unsubscribeResponse { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public UnsubscribeResponse()
        {
            unsubscribeResponse = new UnsubscribeResponseObject();
        }
    }

    /// <summary>
    /// Class for the body of the unsubscribe response message. See Section 2.1.5.2.2 of 
    /// NENA-STA-024.1a-2023.
    /// </summary>
    public partial class UnsubscribeResponseObject
    {
        /// <summary>
        /// The ID specified by the subscriber. Required.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// Globally unique identifier for the subscription. Required.
        /// </summary>
        public string subscriptionId { get; set; }

        /// <summary>
        /// Status code of response according to the request, e.g., 200. Must be set to one of the values
        /// in the UnsubscribeResponseCodeEnum. Required.
        /// </summary>
        public int statusCode { get; set; }

        /// <summary>
        /// The statusText is intended to provide information related to the statusCode. Required.
        /// </summary>
        public string statusText { get; set; }
    }

    /// <summary>
    /// Enumeration of allowed values of the statusCode property of the UnsubscribeResponseObject.
    /// See Section 2.1.5.2.2.1 of NENA-STA-024.1a-2023.
    /// </summary>
    public enum UnsubscribeResponseCodeEnum
    {
        OK = 200,
        BadRequest = 400,
        PayloadTooLarge = 413,
        SubscriptionDoesNotExist = 481,
        InternalServerError = 500,
        ServiceUnavailable = 503
    }

    /// <summary>
    /// Class for a notify event. See Section 2.1.6.2 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class NotifyEvent
    {
        /// <summary>
        /// Body of the notify event. This property is initialized in the constructor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event")]
        public NotifyEventObject Event { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public NotifyEvent()
        {
            Event = new NotifyEventObject();
        }
    }

    /// <summary>
    /// Class for the body of a NotifyEvent message. See Section 2.1.6.2 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class NotifyEventObject
    {
        /// <summary>
        /// Subscription to which this event belongs. 
        /// </summary>
        public string subscriptionId { get; set; }

        /// <summary>
        /// A GUID used to identify a notification for acknowledgement.
        /// </summary>
        public string transactionId { get; set; }

        /// <summary>
        /// Array of EIDOs. This property is initialized to an empty list in the constructor.
        /// </summary>
        public List<EidoType> notification { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public NotifyEventObject()
        {
            notification = new List<EidoType>();
        }
    }

    /// <summary>
    /// Class for the response message to a notify event. See Section 2.1.6.3.1 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class NotifyEventResponse
    {
        /// <summary>
        /// Contains the body of the response message. This property is initialized in the constructor.
        /// </summary>
        public NotifyEventResponseObject eventResponse { get; set; }

        public NotifyEventResponse()
        {
            eventResponse = new NotifyEventResponseObject();
        }
    }

    /// <summary>
    /// Class for the body of an event response message. See Section 2.1.6.3.1 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class NotifyEventResponseObject
    {
        /// <summary>
        /// GUID used to identify a transaction for acknowledgement.
        /// </summary>
        public string transactionId { get; set; }

        /// <summary>
        /// Status code of response according to the request. Must be one of the values specified in the
        /// NotifyEventResponseEnum.
        /// </summary>
        public int statusCode { get; set; }

        /// <summary>
        /// The statusText is intended to provide information related to the statusCode.
        /// </summary>
        public string statusText { get; set; }
    }

    /// <summary>
    /// Enumeration of the allowed values for the statusCode property of the NotifyEventResponseObject.
    /// </summary>
    public enum NotifyEventResponseEnum
    {
        OK = 200,
        BadRequest = 400,
        Forbidden = 403,
        NotFound = 404,
        PayloadTooLarge = 413,
        SubscriptionDoesNotExist = 481,
        InternalServerError = 500,
        NotImplemented = 501,
        ServiceUnavailable = 503
    }

    /// <summary>
    /// Class for the terminate message. See Section 2.1.6.4 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class TerminateRequest
    {
        /// <summary>
        /// Body of the terminate request. This property is initialized in the constructor.
        /// </summary>
        public TerminateRequestObject terminate { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public TerminateRequest()
        {
            terminate = new TerminateRequestObject();
        }
    }

    /// <summary>
    /// Class for the body of a terminate request. See Section 2.1.6.4 of NENA-STA-024.1a-2023.
    /// The notifier sends this message to a subscriber and the subscriber responds with a
    /// terminate response message (TerminateResponse class).
    /// </summary>
    public partial class TerminateRequestObject
    {
        /// <summary>
        /// An ID generated by the notifier that will be returned by the subscriber in its response to
        /// the request.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// Subscription being terminated.
        /// </summary>
        public string subscriptionId { get; set; }
    }

    /// <summary>
    /// Class for the terminate response message. See Section 2.1.6.5 of NENA-STA-024.1a-2023.
    /// The subscriber sends this response message to the notifier when it receives the TerminateRequest
    /// message.
    /// </summary>
    public partial class TerminateResponse
    {
        /// <summary>
        /// Body of the terminate response message. This property is initialized in the constructor.
        /// </summary>
        public TerminateResponseObject terminateResponse { get; set; }

        /// <summary>
        /// Default constructor.
        /// </summary>
        public TerminateResponse()
        {
            terminateResponse = new TerminateResponseObject();
        }
    }

    /// <summary>
    /// Class for the body of the TerminateResponse message. See Section 2.1.6.5 of NENA-STA-024.1a-2023.
    /// </summary>
    public partial class TerminateResponseObject
    {
        /// <summary>
        /// The ID specified by the notifier. Required.
        /// </summary>
        public string requestId { get; set; }

        /// <summary>
        /// Globally unique identifier for the subscription. Required.
        /// </summary>
        public string subscriptionId { get; set; }

        /// <summary>
        /// Status code of response according to the request, e.g., 200. Must be set to one of the values
        /// in the TerminateResponseCodeEnum. Required.
        /// </summary>
        public int statusCode { get; set; }

        /// <summary>
        /// The statusText is intended to provide information related to the statusCode. Required.
        /// </summary>
        public string statusText { get; set; }

    }

    /// <summary>
    /// Enumeration of the allowed values for the statusCode property of the TerminateResponseObject class.
    /// </summary>
    public enum TerminateResponseCodeEnum
    {
        OK = 200,
        BadRequest = 400,
        SubscriptionDoesNotExist = 481,
        InternalServerError = 500,
        NotImplemented = 501,
        ServiceUnavailable = 503
    }
}